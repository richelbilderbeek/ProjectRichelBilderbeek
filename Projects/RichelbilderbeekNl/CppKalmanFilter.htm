<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>KalmanFilter</title>
  <meta name="description" content="C++ KalmanFilter"/>
  <meta name="keywords" content="C++ KalmanFilter "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppKalmanFilter.htm">KalmanFilter</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.680 at Sun Jul  6 18:31:03 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>The <a href="CppKalmanFilter.htm">Kalman filter</a> is a way to do predictions from noisy measurements. For a (far) more precise
definition, see [1].</p>
<p>&nbsp;</p>
<p>The <a href="Tools.htm">tool</a> <a href="ToolKalmanFilterer.htm">KalmanFilterer</a> allows one to work with <a href="CppKalmanFilter.htm">Kalman filters</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Examples</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppKalmanFilterExample1.htm">Kalman filter example 1: single state, from adapted C code</a></li>
  <li><a href="CppKalmanFilterExample2.htm">Kalman filter example 2: single state, use of classes</a></li>
  <li><a href="CppKalmanFilterExample3.htm">Kalman filter example 3: single state, use of 1x1 boost::numeric::ublas::matrix</a></li>
  <li><a href="CppKalmanFilterExample4.htm">Kalman filter example 4: single state, use of 1x1 boost::numeric::ublas::matrix and boost::numeric::ublas::vector</a></li>
  <li><a href="CppKalmanFilterExample5.htm">Kalman filter example 5</a></li>
  <li><a href="CppKalmanFilterExample6.htm">Kalman filter example 6</a></li>
  <li><a href="CppKalmanFilterExample7.htm">Kalman filter example 7</a></li>
  <li><a href="CppKalmanFilterExample8.htm">Kalman filter example 8: displaying the graphs (initial)</a></li>
  <li><a href="CppKalmanFilterExample9.htm">Kalman filter example 9: displaying the graphs (better)</a></li>
  <li><a href="CppKalmanFilterExample10.htm">Kalman filter example 10: displaying the graphs (even better)</a></li>
  <li><a href="CppKalmanFilterExample11.htm">Kalman filter example 11: displaying the graphs (best)</a></li>
  <li><a href="CppKalmanFilterExample12.htm">Kalman filter example 12: displaying the equations</a></li>
  <li><a href="CppKalmanFilterExample13.htm">Kalman filter example 13: displaying the equations only</a></li>
  <li><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>: <a href="Tools.htm">tool</a> to work with <a href="CppKalmanFilter.htm">Kalman filters</a></li>
  <li><a href="CppKalmanFilterEquations.png">Kalman filter equations</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="https://en.wikipedia.org/wiki/Kalman_filter">Wikipedia page about the Kalman filter</a></li>
  <li><a href="http://academic.csuohio.edu/simond/estimation">Kalman filter examples (in Matlab)</a></li>
  <li><a href="http://greg.czerniak.info/guides/kalman1/">Kalman filter tutorial by Greg Czerniak</a></li>
</ol>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/CppKalmanFilter.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/CppKalmanFilter.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/gapsfil<a href="CppLed.htm">led</a>whitenoisesystem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/gapsfil<a href="CppLed.htm">led</a>whitenoisesystemfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/gapsfil<a href="CppLed.htm">led</a>whitenoisesystemparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelementsfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>example.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparametertype.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>parameter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>type.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>types.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/laggedwhitenoisesystem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/laggedwhitenoisesystemfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/laggedwhitenoisesystemparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standard<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standardwhitenoisesystem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standardwhitenoisesystemfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standardwhitenoisesystemparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemfactory.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemparameter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemparametertype.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemtype.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemtypes.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/gapsfil<a href="CppLed.htm">led</a>whitenoisesystem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/gapsfil<a href="CppLed.htm">led</a>whitenoisesystemfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/gapsfil<a href="CppLed.htm">led</a>whitenoisesystemparameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelementsfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparametertype.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>parameter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">kalmanfilter</a>types.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/laggedwhitenoisesystem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/laggedwhitenoisesystemfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/laggedwhitenoisesystemparameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standard<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standardwhitenoisesystem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standardwhitenoisesystemfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/standardwhitenoisesystemparameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemfactory.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemparameter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemparameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemparametertype.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemtype.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/whitenoisesystemtypes.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/fixedlagsmootherkalmanfilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/fixedlagsmootherkalmanfilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> FIXEDLAGSMOOTHERKALMANFILTER_H<br/>
<a href="CppDefine.htm">#define</a> FIXEDLAGSMOOTHERKALMANFILTER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The augmented estimation error covariances, that is the estimation error covariance <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A B ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C D ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ E F ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ G H ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ G H ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetEstimationErrorCovariances() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_estimation_error_covariances; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppKalmanFilter.htm">Kalman filter</a> last calculation elements<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; GetLastCalculation() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_last_calculation;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The last augmented Kalman gains, that is the gain <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A B ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C D ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ E F ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ G H ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ G H ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetLastGains() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_kalman_gains; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The last predicted augmented estimation error covariances,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/that is the estimation error covariance <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A B ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C D ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ E F ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ G H ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ G H ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetLastPredictedCovariances() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_last_predicted_covariances; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The last predicted augmented states<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ B ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ D ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; [ D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetLastPredicted<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_last_predicted_states; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; GetParameters() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The augmented states, that is the state <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ B ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ D ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; [ D ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; Get<a href="CppState.htm">State</a>Estimates() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_state_estimates; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the filter predict<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Predict<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give the filter a measurement and input, and it will update its predictions<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only a FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory can create a FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppKalmanFilter.htm">Kalman filter</a> last calculation elements<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; m_last_calculation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The (downcasted) calculation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; m_last_fixed_lag_smoother_calculation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The standard (unlagged) <a href="CppKalmanFilter.htm">Kalman filter</a> used<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; m_standard_filter;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The augmented estimation error covariances, that is the estimation error covariance <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A B ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C D ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ E F ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ G H ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ G H ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_estimation_error_covariances;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The augmented Kalman gains, that is the gain <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A B ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C D ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ E F ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ G H ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ G H ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_kalman_gains;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The augmented Kalman gains, that is the gain <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A B ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C D ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ E F ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ G H ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ G H ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_last_kalman_gains;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The last predicted augmented estimation error covariances,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/that is the estimation error covariance <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A B ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C D ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ E F ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ G H ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ G H ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_last_predicted_covariances;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The last predicted augmented states<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ B ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ D ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; [ D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_last_predicted_states;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The downcasted parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The augmented states, that is the state <b><a href="CppFor.htm">for</a></b> each lag <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; instead of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; to allow <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;Complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Simplified<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ A ] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ B ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ C ] ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [ D ] ]&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; [ D ]<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_state_estimates;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateComplexInitial<a href="CppState.htm">State</a>s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateInitialGains(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>&amp; filter);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateInitial<a href="CppState.htm">State</a>s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ I ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/term_a <a href="CppOperatorAssign.htm">=</a> [ 0 ], where I denotes an identity <a href="CppMatrix.htm">matrix</a> with size input.size() x input.size()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and where 0 denotes a null <a href="CppMatrix.htm">matrix</a> with size input.size() x input.size()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The length of term_a is equal to the lag (3 in <b><a href="CppThis.htm">this</a></b> example)<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateComplexTermA(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 0&nbsp;&nbsp;0&nbsp;&nbsp;0]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ I&nbsp;&nbsp;0&nbsp;&nbsp;0]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/term_b <a href="CppOperatorAssign.htm">=</a> [ 0&nbsp;&nbsp;I&nbsp;&nbsp;0], where I denotes an identity <a href="CppMatrix.htm">matrix</a> with size input.size() x input.size()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and where 0 denotes a null <a href="CppMatrix.htm">matrix</a> with size input.size() x input.size()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The size of term_b is lag x lag (3 in <b><a href="CppThis.htm">this</a></b> example)<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateComplexTermB(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 0 1 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ I ]&nbsp;&nbsp;&nbsp;&nbsp;[ 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 0 ]&nbsp;&nbsp;&nbsp;&nbsp;[ 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/term_a <a href="CppOperatorAssign.htm">=</a> [ 0 ] <a href="CppOperatorAssign.htm">=</a>&gt; [ 0 0 ],<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;where I denotes an identity <a href="CppMatrix.htm">matrix</a> with size input.size() x input.size()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;and where 0 denotes a null <a href="CppMatrix.htm">matrix</a> with size input.size() x input.size()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The size of term_a will be:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> number of rows&nbsp;&nbsp; : lag (3) x input.size() (2) <a href="CppOperatorAssign.htm">=</a> 6<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> number of columns:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; input.size() (2) <a href="CppOperatorAssign.htm">=</a> 2<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateTermA(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 0 0 0 0 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 0 0 0 0 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 1 0 0 0 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 0&nbsp;&nbsp;0&nbsp;&nbsp;0]&nbsp;&nbsp;&nbsp;&nbsp;[ 0 1 0 0 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ I&nbsp;&nbsp;0&nbsp;&nbsp;0]&nbsp;&nbsp;&nbsp;&nbsp;[ 0 0 1 0 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/term_b <a href="CppOperatorAssign.htm">=</a> [ 0&nbsp;&nbsp;I&nbsp;&nbsp;0] <a href="CppOperatorAssign.htm">=</a>&gt; [ 0 0 0 1 0 0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/where I denotes an identity <a href="CppMatrix.htm">matrix</a> with size input.size() x input.size()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and where 0 denotes a null <a href="CppMatrix.htm">matrix</a> with size input.size() x input.size()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The size of term_b is lag x lag (3 in <b><a href="CppThis.htm">this</a></b> example)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The size of term_b will be:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> number of rows&nbsp;&nbsp; : lag (3) x input.size() (2) <a href="CppOperatorAssign.htm">=</a> 6<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> number of columns: lag (3) x input.size() (2) <a href="CppOperatorAssign.htm">=</a> 6<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateTermB(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; DownCast(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the (unlagged) <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; GetStandard<a href="CppKalmanFilter.htm">KalmanFilter</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_standard_filter; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FIXEDLAGSMOOTHERKALMANFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/fixedlagsmootherkalmanfilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/fixedlagsmootherkalmanfilter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector_proxy.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_last_calculation{calculation},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_last_fixed_lag_smoother_calculation{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;(calculation)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_standard_filter{Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(DownCast(parameters)-&gt;GetStandardParameters())},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{DownCast(parameters)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_estimates{CreateInitial<a href="CppState.htm">State</a>s(DownCast(parameters))}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_last_fixed_lag_smoother_calculation);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_state_estimates.size()) <a href="CppOperatorEqual.htm">==</a> m_parameters-&gt;GetLag() * m_standard_filter-&gt;Get<a href="CppState.htm">State</a>Size());<br/>
}<br/>
<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::CreateInitialGains(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>&amp; filter)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filter.Get<a href="CppState.htm">State</a>Size() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(filter.GetLastStandardCalculation()-&gt;GetKalmanGain().size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(filter.GetLastStandardCalculation()-&gt;GetKalmanGain().size1() <a href="CppOperatorEqual.htm">==</a> filter.GetLastStandardCalculation()-&gt;GetKalmanGain().size2());<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(lag,filter.GetLastStandardCalculation()-&gt;GetKalmanGain());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::CreateComplexInitial<a href="CppState.htm">State</a>s(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetLag(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetStandardParameters()-&gt;GetInitial<a href="CppState.htm">State</a>Estimate());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::CreateComplexTermA(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Term A is not needed <b><a href="CppFor.htm">for</a></b> a lag of zero");<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(lag);<br/>
<br/>
&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::identity_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(state_size);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>lag; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(state_size);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::CreateTermA(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Term A is not needed <b><a href="CppFor.htm">for</a></b> a lag of zero");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::SimplifyVectorOf<a href="CppMatrix.htm">Matrix</a>(CreateComplexTermA(lag,state_size));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag * state_size <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(&nbsp;&nbsp;1 * state_size <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b> &gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::CreateTermB(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Simplify<a href="CppMatrix.htm">Matrix</a>Of<a href="CppMatrix.htm">Matrix</a>(CreateComplexTermB(lag,state_size));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Term B is not needed <b><a href="CppFor.htm">for</a></b> a lag of zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag &gt; 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Term B cannot be calculated <b><a href="CppFor.htm">for</a></b> a lag of one");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((lag <a href="CppOperatorMinus.htm">-</a> 0) * state_size <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((lag <a href="CppOperatorMinus.htm">-</a> 1) * state_size <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<br/>
<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::CreateComplexTermB(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Term B is not needed <b><a href="CppFor.htm">for</a></b> a lag of zero");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> lag <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> lag;<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(n_rows,n_cols);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorEqual.htm">==</a> x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(y,x) <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::identity_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(state_size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(y,x) <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(state_size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::CreateInitial<a href="CppState.htm">State</a>s(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (lag <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::SimplifyVectorOfVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateComplexInitial<a href="CppState.htm">State</a>s(parameters));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::DownCast(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> parameters.use_count();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> parameters.use_count();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-03: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::Predict<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::range;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>_range;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_parameters-&gt;GetLag() <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> m_standard_filter-&gt;Predict<a href="CppState.htm">State</a>(input);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_state_estimates.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> state_size <a href="CppOperatorAssign.htm">=</a> m_standard_filter-&gt;Get<a href="CppState.htm">State</a>Size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_size <a href="CppOperatorLessEqual.htm">&lt;=</a> m_state_estimates.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector_range&lt;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; state(m_state_estimates,range(0,state_size));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(state);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>_range;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::range;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store calculation <b><a href="CppFor.htm">for</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment<br/>
&nbsp;&nbsp;m_last_fixed_lag_smoother_calculation-&gt;Clear();<br/>
&nbsp;&nbsp;m_last_fixed_lag_smoother_calculation-&gt;SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppThis.htm">this</a></b>-&gt;GetStandard<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;Get<a href="CppState.htm">State</a>Estimate()); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_fixed_lag_smoother_calculation-&gt;SetPreviousCovarianceEstimate(<b><a href="CppThis.htm">this</a></b>-&gt;GetEstimationErrorCovariance()); <a href="CppComment.htm">//</a>2<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size <a href="CppOperatorAssign.htm">=</a> m_standard_filter-&gt;Get<a href="CppState.htm">State</a>Size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_size <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(x.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_size <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(input.size()));<br/>
&nbsp;&nbsp;m_standard_filter-&gt;SupplyMeasurementAndInput(x,input);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_parameters-&gt;GetLag() <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term_a <a href="CppOperatorAssign.htm">=</a> CreateTermA(m_parameters-&gt;GetLag(),state_size);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag <a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;GetLag();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag * state_size <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(term_a.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(&nbsp;&nbsp;1 * state_size <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(term_a.size2()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the naive (that is, based on no <a href="CppTime.htm">time</a> lag) prediction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_naive <a href="CppOperatorAssign.htm">=</a> m_standard_filter-&gt;Predict<a href="CppState.htm">State</a>(input);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term_b <a href="CppOperatorAssign.htm">=</a> CreateTermB(lag,state_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find P(i) (yes, i can be zero and goes to lag)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ps has length lag<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>P(i) has size state_size x state_size<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>P(i) <a href="CppOperatorAssign.htm">=</a> P . [ [F-KH]^T ]^i (where ^T denotes a transposition, where ^i denotes an exponent to the power of i<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_standard_filter-&gt;GetLastStandardCalculation()-&gt;GetPreviousCovarianceEstimate());<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_standard_filter-&gt;GetLastStandardCalculation()-&gt;GetKalmanGain());<br/>
&nbsp;&nbsp;vector&lt;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; ps_complex(lag);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>lag; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ps_complex.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ps_complex[i]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_standard_filter-&gt;GetEstimationErrorCovariance(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Power(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_standard_filter-&gt;GetParameters()-&gt;Get<a href="CppState.htm">State</a>Transition()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_standard_filter-&gt;GetLastStandardCalculation()-&gt;GetKalmanGain(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_standard_filter-&gt;GetParameters()-&gt;GetObservation()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find K(i) (yes, i can be zero and goes to lag)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ks has length lag<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>K(i) has size state_size x state_size<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>K(i) <a href="CppOperatorAssign.htm">=</a> P(i) . H^T . [H.P.H^T <a href="CppOperatorPlus.htm">+</a> R]^-1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;vector&lt;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; ks_complex(lag);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>lag; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::MultiProd(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_standard_filter-&gt;GetParameters()-&gt;GetObservation(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_standard_filter-&gt;GetEstimationErrorCovariance(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_standard_filter-&gt;GetParameters()-&gt;GetObservation())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_standard_filter-&gt;GetStandardParameters()-&gt;GetEstimatedMeasurementNoise();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppMatrix.htm">Matrix</a>::CalcDeterminant(term) <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Determinant of term in K(i) equals zero");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ks_complex.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(ps_complex.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;ks_complex[i]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::MultiProd(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ps_complex[i],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_standard_filter-&gt;GetParameters()-&gt;GetObservation()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Inverse(term)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ks <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::SimplifyVectorOf<a href="CppMatrix.htm">Matrix</a>(ks_complex);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; innovation <a href="CppOperatorAssign.htm">=</a> m_standard_filter-&gt;GetLastStandardCalculation()-&gt;GetInnovation();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_states_term_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(term_a,x_naive);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_states_term_b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(term_b,vector_range&lt;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;(m_state_estimates,range(0,m_state_estimates.size()<a href="CppOperatorMinus.htm">-</a> m_standard_filter-&gt;Get<a href="CppState.htm">State</a>Size())));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_states_term_b<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(term_b,vector_range&lt;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;(m_states,range(m_standard_filter-&gt;Get<a href="CppState.htm">State</a>Size(),m_states.size())))<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_states_term_c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(ks,innovation);<br/>
<br/>
&nbsp;&nbsp;m_state_estimates<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> new_states_term_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> new_states_term_b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> new_states_term_c;<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Store the calculation hiero");<br/>
&nbsp;&nbsp;m_last_fixed_lag_smoother_calculation-&gt;SetStandardCalculationElement(<b><a href="CppThis.htm">this</a></b>-&gt;m_standard_filter-&gt;GetLastStandardCalculation());<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::Test()")<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<a href="CppStdSize_t.htm">std::size_t</a>&gt;(-1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Line above must fail, so shouldn't get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBoost.htm">boost</a>::numeric::bad_numeric_cast&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK!<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateTermA<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag <a href="CppOperatorAssign.htm">=</a> 13;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size <a href="CppOperatorAssign.htm">=</a> 17;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> CreateTermA(lag,state_size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> lag * state_size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 1 * state_size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()) <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()) <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> row <a href="CppOperatorEqual.htm">==</a> col ? 1.0 : 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal(v(row,col),expected));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateTermB<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> CreateTermB(lag,state_size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> lag * state_size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> (lag <a href="CppOperatorMinus.htm">-</a> 1) * state_size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()) <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()) <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> row <a href="CppOperatorMinus.htm">-</a> state_size <a href="CppOperatorEqual.htm">==</a> col ? 1.0 : 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal(v(row,col),expected));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::Test()")<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/fixedlagsmootherkalmanfiltercalculationelements.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/fixedlagsmootherkalmanfiltercalculationelements.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> FIXEDLAGSMOOTHERKALMANFILTERCALCULATIONELEMENTS_H<br/>
<a href="CppDefine.htm">#define</a> FIXEDLAGSMOOTHERKALMANFILTERCALCULATIONELEMENTS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Clear the calculation, will set IsComplete to <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Produce a deep copy of the derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; Clone() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the state is complete and valid<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsComplete() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetStandardCalculationElement(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; standard_calculation);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; m_standard_calculation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements*);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FIXEDLAGSMOOTHERKALMANFILTERCALCULATIONELEMENTS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/fixedlagsmootherkalmanfiltercalculationelements.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/fixedlagsmootherkalmanfiltercalculationelements.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state)<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measurement,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicted_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;previous_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updated_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_standard_calculation{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>... nothing to check left<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Clear()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others, e.g.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_updated_covariance <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Clone() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; p;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::IsComplete() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> GetMeasurement().size();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sz <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Others, e.g.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_innovation.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetMeasurement().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetPredicted<a href="CppState.htm">State</a>().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetPrevious<a href="CppState.htm">State</a>().size();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetStandardCalculationElement(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; standard_calculation)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_standard_calculation);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(standard_calculation);<br/>
&nbsp;&nbsp;m_standard_calculation <a href="CppOperatorAssign.htm">=</a> standard_calculation;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_calculation);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/fixedlagsmootherkalmanfilterfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/fixedlagsmootherkalmanfilterfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> FIXEDLAGSMOOTHERKALMANFILTERFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> FIXEDLAGSMOOTHERKALMANFILTERFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Factory <b><a href="CppFor.htm">for</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
<b><a href="CppStruct.htm">struct</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FIXEDLAGSMOOTHERKALMANFILTERFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/fixedlagsmootherkalmanfilterfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/fixedlagsmootherkalmanfilterfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; calculation {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; kalman_filter {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>(calculation,parameters)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> kalman_filter;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/fixedlagsmootherkalmanfilterparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/fixedlagsmootherkalmanfilterparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> FIXEDLAGSMOOTHERKALMANFILTERPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> FIXEDLAGSMOOTHERKALMANFILTERPARAMETERS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; standard_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the lag in <a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetLag() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_lag; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameters from a standard <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; GetStandardParameters() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_standard_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> parameter set has a certain type of <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasParameterType(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The lag in <a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_lag;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameters from a standard <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; m_standard_parameters;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FIXEDLAGSMOOTHERKALMANFILTERPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/fixedlagsmootherkalmanfilterparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/fixedlagsmootherkalmanfilterparameters.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; standard_parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag)<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;GetControl(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;GetObservation(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_lag{lag},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_standard_parameters{standard_parameters}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::HasParameterType(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::HasParameterType(type);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/gapsfilledwhitenoisesystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/gapsfilledwhitenoisesystem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEM_H<br/>
<a href="CppDefine.htm">#define</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQueueH.htm">queue</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystemparameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>A gaps-filled white noise system is a system that does not have a measurement every <a href="CppTime.htm">time</a>step.<br/>
<a href="CppComment.htm">///</a>Instead, it has <b><a href="CppFor.htm">for</a></b> example 1 measurement and then 4 non-measurements (which is a gap of 5)<br/>
<a href="CppComment.htm">///</a>During the 4 non-measurements the 1 measurement is repeated<br/>
<b><a href="CppStruct.htm">struct</a></b> GapsFilledWhiteNoiseSystem : <b><a href="CppPublic.htm">public</a></b> WhiteNoiseSystem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the gaps-filled white noise system parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> GapsFilledWhiteNoiseSystemParameters&gt;&amp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetGapsFilledWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;WhiteNoiseSystemType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::gaps_filled; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update reality, that is, let the real system (i.e. reality) go to its next state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Measure a value from <b><a href="CppThis.htm">this</a></b> system with normally distributed noise<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Measure() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Peek what the real value is<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; PeekAtReal<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GapsFilledWhiteNoiseSystem must be created with a GapsFilledWhiteNoiseSystemFactory<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> GapsFilledWhiteNoiseSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; white_noise_system_parameters);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> GapsFilledWhiteNoiseSystemFactory;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~GapsFilledWhiteNoiseSystem() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(GapsFilledWhiteNoiseSystem*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The last successfull measurement<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_last_measument;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The gaps-filled white noise system parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> GapsFilledWhiteNoiseSystemParameters&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current <a href="CppTime.htm">time</a>step: zero denotes a measurement will be done<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <b><a href="CppInt.htm">int</a></b> m_<a href="CppTime.htm">time</a>step;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/gapsfilledwhitenoisesystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/gapsfilledwhitenoisesystem.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystemparameters.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::GapsFilledWhiteNoiseSystem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: WhiteNoiseSystem{parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_last_measument{parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size(),0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> GapsFilledWhiteNoiseSystemParameters&gt;(parameters)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>step{0}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check measuring frequecies<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;GetMeasurementFrequency();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "At least one out of one measurements is a real measurement");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-25: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Standard transition<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(input.size() <a href="CppOperatorEqual.htm">==</a> GetCurrent<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size1() <a href="CppOperatorEqual.htm">==</a> GetCurrent<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size2() <a href="CppOperatorEqual.htm">==</a> GetCurrent<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetControl().size1() <a href="CppOperatorEqual.htm">==</a> input.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetControl().size2() <a href="CppOperatorEqual.htm">==</a> input.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),GetCurrent<a href="CppState.htm">State</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_parameters-&gt;GetControl(),input);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> process noise<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> new_state.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_state.size() <a href="CppOperatorEqual.htm">==</a> m_parameters-&gt;GetProcessNoise().size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_state(i) <a href="CppOperatorAssign.htm">=</a> GetRandomNormal(new_state(i),m_parameters-&gt;GetProcessNoise()(i));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;SetNewCurrent<a href="CppState.htm">State</a>(new_state);<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::Measure() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; fs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetGapsFilledWhiteNoiseSystemParameters()-&gt;GetMeasurementFrequency();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fs.size() <a href="CppOperatorEqual.htm">==</a> m_last_measument.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fs.size() <a href="CppOperatorEqual.htm">==</a> GetCurrent<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fs.size() <a href="CppOperatorEqual.htm">==</a> m_parameters-&gt;GetMeasurementNoise().size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_states <a href="CppOperatorAssign.htm">=</a> fs.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> state=0; state<a href="CppOperatorNotEqual.htm">!=</a>n_states; <a href="CppOperatorIncrement.htm">++</a>state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state &lt; fs.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> f <a href="CppOperatorAssign.htm">=</a> fs[state];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppTime.htm">time</a>step <a href="CppOperatorModulus.htm">%</a> f <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state &lt; m_last_measument.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state &lt; GetCurrent<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state &lt; m_parameters-&gt;GetMeasurementNoise().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_last_measument(state) <a href="CppOperatorAssign.htm">=</a> GetRandomNormal(GetCurrent<a href="CppState.htm">State</a>()(state),m_parameters-&gt;GetMeasurementNoise()(state));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Should get here<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_<a href="CppTime.htm">time</a>step;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_last_measument;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::PeekAtReal<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;GetCurrent<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::Test()")<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> measurements are indeed lagged:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The system's real value should update immediatly, but <b><a href="CppThis.htm">this</a></b> fresh measurement<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>must only be accessible after lag <a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Context: measuring the position of an object with constant velocity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> f <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GapsFilledWhiteNoiseSystem&gt; my_system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GapsFilledWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 1.0 } ), <a href="CppComment.htm">//</a>control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>(&nbsp;&nbsp;&nbsp;&nbsp; { 0.0 } ), <a href="CppComment.htm">//</a>initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>(&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp; f } ), <a href="CppComment.htm">//</a>measurement frequencies<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>(&nbsp;&nbsp;&nbsp;&nbsp; { 0.0000001 } ), <a href="CppComment.htm">//</a>real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>(&nbsp;&nbsp;&nbsp;&nbsp; { 0.0000001 } ), <a href="CppComment.htm">//</a>real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 1.0 } )&nbsp;&nbsp;<a href="CppComment.htm">//</a>state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_system);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Context: airhockey puck<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; input <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 1.0 } );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a> 3*f; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; measurements <a href="CppOperatorAssign.htm">=</a> my_system-&gt;Measure();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!measurements.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(measurements.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(measurements.size() <a href="CppOperatorEqual.htm">==</a> my_system-&gt;PeekAtReal<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measured <a href="CppOperatorAssign.htm">=</a> measurements(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> real <a href="CppOperatorAssign.htm">=</a> my_system-&gt;PeekAtReal<a href="CppState.htm">State</a>()(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal(real,expected));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorModulus.htm">%</a> f <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal(measured,expected));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal(measured,expected));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my_system-&gt;GoToNext<a href="CppState.htm">State</a>(input);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem::Test()")<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/gapsfilledwhitenoisesystemfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/gapsfilledwhitenoisesystemfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEMFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEMFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Factory <b><a href="CppFor.htm">for</a></b> GapsFilledWhiteNoiseSystem<br/>
<b><a href="CppStruct.htm">struct</a></b> GapsFilledWhiteNoiseSystemFactory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a GapsFilledWhiteNoiseSystem from the <a href="ToolLoose.htm">loose</a> parameters<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GapsFilledWhiteNoiseSystem&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; measurement_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a GapsFilledWhiteNoiseSystem from the parameters<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GapsFilledWhiteNoiseSystem&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt;&amp; parameters);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEMFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/gapsfilledwhitenoisesystemfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/gapsfilledwhitenoisesystemfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystemfactory.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem&gt; <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; measurement_frequency,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt; parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> GapsFilledWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measurement_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::gaps_filled);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GapsFilledWhiteNoiseSystem&gt; system(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> GapsFilledWhiteNoiseSystem(parameters));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(system);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(system-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::gaps_filled);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> system;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystem&gt; <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt;&amp; general_parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(general_parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(general_parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::gaps_filled);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GapsFilledWhiteNoiseSystemParameters&gt; parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;GapsFilledWhiteNoiseSystemParameters&gt;(general_parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::gaps_filled);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;GapsFilledWhiteNoiseSystem&gt; my_system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetControl(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetInitial<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetMeasurementFrequency(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetMeasurementNoise(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetProcessNoise(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;Get<a href="CppState.htm">State</a>Transition());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_system);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_system-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::gaps_filled);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> my_system;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/gapsfilledwhitenoisesystemparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/gapsfilledwhitenoisesystemparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEMPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEMPARAMETERS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> GapsFilledWhiteNoiseSystemParameters : <b><a href="CppPublic.htm">public</a></b> WhiteNoiseSystemParameters<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> GapsFilledWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; measurement_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of <a href="CppTime.htm">time</a>steps after which a real measurement is acquired<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; GetMeasurementFrequency() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_measurement_frequency; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;WhiteNoiseSystemType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::gaps_filled; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~GapsFilledWhiteNoiseSystemParameters() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(GapsFilledWhiteNoiseSystemParameters*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The gaps (in <a href="CppTime.htm">time</a>steps) is the number of measurements of which only one real measurement is acquired<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_measurement_frequency;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GAPSFIL<a href="CppLed.htm">LED</a>WHITENOISESYSTEMPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/gapsfilledwhitenoisesystemparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/gapsfilledwhitenoisesystemparameters.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystemparameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystemParameters::GapsFilledWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; measurement_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: WhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_measurement_frequency{measurement_frequency}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_measurement_frequency.size() <a href="CppOperatorEqual.htm">==</a> initial_state.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check measuring frequecies<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> m_measurement_frequency;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "At least one out of one measurements is a real measurement");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::GapsFilledWhiteNoiseSystemParameters::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTER_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppKalmanFilter.htm">Kalman filter</a> <a href="CppBaseClass.htm">base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppKalmanFilter.htm">KalmanFilter</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppKalmanFilter.htm">Kalman filter</a> last calculation elements<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; GetLastCalculation() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; GetParameters() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurements,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An ABC can only be <a href="CppConstructor.htm">construct</a>ed by derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppKalmanFilter.htm">Kalman filter</a> last calculation elements<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; m_last_calculation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; m_parameters;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilter.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-06: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-09-09: <a href="CppVersion.htm">version</a> 1.1: removed <a href="CppDataMember.htm">data members</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfiltercalculationelements.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfiltercalculationelements.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERCALCULATIONELEMENTS_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERCALCULATIONELEMENTS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>The elements of a steady-state <a href="CppKalmanFilter.htm">Kalman filter</a> calculation<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements<br/>
{<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Clear the calculation, will set IsComplete to <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the measurement ('z_n')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetMeasurement() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the predicted state ('x_predicted')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is calculated at step 1 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x_predicted <a href="CppOperatorAssign.htm">=</a> [...] x_n-1 [...]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetPredicted<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the previous_state_estimate ('x_prev')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetPrevious<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the updated state ('x_n')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetUpdated<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the state is complete and valid<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppBool.htm">bool</a></b> IsComplete() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the measurement ('z_n')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the predicted state ('x_predicted')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is calculated at step 1 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x_predicted <a href="CppOperatorAssign.htm">=</a> [...] x_n-1 [...]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the previous_state_estimate ('x_prev'/'x_n-1')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is read at step 1 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x_predicted <a href="CppOperatorAssign.htm">=</a> [...] x_n-1 [...]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the updated state ('x_n')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is calculated at step 6 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x_n <a href="CppOperatorAssign.htm">=</a> x_predicted <a href="CppOperatorPlus.htm">+</a> [...]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetUpdated<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An ABC can only be <a href="CppConstructor.htm">construct</a>ed by derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Produce a deep copy of the derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; Clone() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElementsFactory;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The measurement ('z_n')<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_measurement;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The predicted state ('x_predicted')<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_predicted_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The previous_state_estimate ('x_prev')<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_previous_state_estimate;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The updated state ('x_n')<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_updated_state;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERCALCULATIONELEMENTS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfiltercalculationelements.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfiltercalculationelements.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state)<br/>
&nbsp;&nbsp;: m_measurement{measurement},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_predicted_state{predicted_state},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_previous_state_estimate{previous_state_estimate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_updated_state{updated_state}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Size may be zero<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_measurement.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_measurement.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_predicted_state.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_previous_state_estimate.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_updated_state.size());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Clear()<br/>
{<br/>
&nbsp;&nbsp;m_measurement <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;m_predicted_state <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;m_previous_state_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;m_updated_state <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_measurement.size() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::IsComplete());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::GetMeasurement() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_measurement;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::GetPredicted<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_predicted_state;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::GetPrevious<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_previous_state_estimate;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::GetUpdated<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_updated_state;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::IsComplete() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_measurement.size();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sz <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_measurement.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_predicted_state.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_previous_state_estimate.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_updated_state.size();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_measurement.empty());<br/>
&nbsp;&nbsp;m_measurement <a href="CppOperatorAssign.htm">=</a> measurement;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_predicted_state.empty());<br/>
&nbsp;&nbsp;m_predicted_state <a href="CppOperatorAssign.htm">=</a> predicted_state;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_previous_state_estimate.empty());<br/>
&nbsp;&nbsp;m_previous_state_estimate <a href="CppOperatorAssign.htm">=</a> previous_state_estimate;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetUpdated<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_updated_state.empty());<br/>
&nbsp;&nbsp;m_updated_state <a href="CppOperatorAssign.htm">=</a> updated_state;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfiltercalculationelementsfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfiltercalculationelementsfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERCALCULATIONELEMENTSFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERCALCULATIONELEMENTSFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElementsFactory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements of a certain type<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Deep copy<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; DeepCopy(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; elements);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERCALCULATIONELEMENTSFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfiltercalculationelementsfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfiltercalculationelementsfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelementsfactory.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElementsFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; p;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.reset(<b><a href="CppNew.htm">new</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.reset(<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.reset(<b><a href="CppNew.htm">new</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented <a href="CppKalmanFilter.htm">KalmanFilter</a>Type");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> type);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElementsFactory::DeepCopy(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; original)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; my_copy <a href="CppOperatorAssign.htm">=</a> original-&gt;Clone();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_copy);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(original-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> my_copy-&gt;GetType());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> my_copy;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterexample.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterexample.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTEREXAMPLE_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTEREXAMPLE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Example contains an example set of variables<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt;&amp; white_noise_system_parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; &gt; CreateExamples() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetContext() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_context; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; GetInputs() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_inputs; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_kalman_filter_parameters; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOf<a href="CppTime.htm">Time</a>steps() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_number_of_<a href="CppTime.htm">time</a>steps; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; Get<a href="CppState.htm">State</a>Names() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_state_names; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetTitle() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_title; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt;&amp; GetWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;m_white_noise_system_parameters; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~<a href="CppKalmanFilter.htm">KalmanFilter</a>Example() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppSmartPointer.htm">smart pointer</a>s: <a href="CppBoostChecked_delete.htm">boost::checked_delete</a> and <a href="CppStdUnique_ptr.htm">std::unique_ptr</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>Example*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_context;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_inputs;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; m_kalman_filter_parameters;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_number_of_<a href="CppTime.htm">time</a>steps;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_state_names;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_title;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; m_white_noise_system_parameters;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample0();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample1();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample2();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample3();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample4();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample5();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample6();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample7();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; CreateExample8();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> DisplayAsUblasVector(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTEREXAMPLE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterexample.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterexample.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; context,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; inputs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; kalman_filter_parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; state_names,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt;&amp; white_noise_system_parameters)<br/>
&nbsp;&nbsp;: m_context{context},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_inputs{inputs},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_filter_parameters{kalman_filter_parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_number_of_<a href="CppTime.htm">time</a>steps{number_of_<a href="CppTime.htm">time</a>steps},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_names{state_names},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_title{title},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_white_noise_system_parameters{white_noise_system_parameters}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_state_names.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_names.size() <a href="CppOperatorEqual.htm">==</a> m_inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_names.size() <a href="CppOperatorEqual.htm">==</a> m_kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_names.size() <a href="CppOperatorEqual.htm">==</a> m_white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; &gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExamples() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; &gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; ; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; p(CreateExample(i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p) <b><a href="CppReturn.htm">return</a></b> v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; q(p.release());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q.use_count() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Cannot get here: must <b><a href="CppReturn.htm">return</a></b> in <b><a href="CppFor.htm">for</a></b> loop above");<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; p;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: p <a href="CppOperatorAssign.htm">=</a> CreateExample0(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: p <a href="CppOperatorAssign.htm">=</a> CreateExample1(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: p <a href="CppOperatorAssign.htm">=</a> CreateExample2(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: p <a href="CppOperatorAssign.htm">=</a> CreateExample3(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: p <a href="CppOperatorAssign.htm">=</a> CreateExample4(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: p <a href="CppOperatorAssign.htm">=</a> CreateExample5(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 6: p <a href="CppOperatorAssign.htm">=</a> CreateExample6(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 7: p <a href="CppOperatorAssign.htm">=</a> CreateExample7(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 8: p <a href="CppOperatorAssign.htm">=</a> CreateExample8(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>When p is <b><a href="CppNullptr.htm">nullptr</a></b>, <b><a href="CppThis.htm">this</a></b> indicates that there are no more examples<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample0()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Constant voltage";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 0.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 0.1 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 0.0001 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 1.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 3.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 1.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, {1.0} );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 1.25 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.1 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.00001 } );<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs <a href="CppOperatorAssign.htm">=</a> { "0.0" };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "V" };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> context_stream;<br/>
&nbsp;&nbsp;context_stream<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> title <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;This is an example from &lt;a href=\"http://greg.czerniak.info/guides/kalman1\"&gt;Greg Czerniak's tutorial&lt;/a&gt;&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;The context is the noisy measurement of a constant voltage.&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;ul&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> names: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(state_names) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the voltage&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some voltage&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": set <b><a href="CppThis.htm">this</a></b> value off on purpose, to see the <a href="CppKalmanFilter.htm">Kalman filter</a> converge&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Input: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(inputs) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the state (that is, the voltage) will not be changed&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Control: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> control <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": <a href="CppAny.htm">any</a> input (albeit none) will have no effect&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Observation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> observation <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the voltage is measured directly (that is: as a voltage)&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> transition: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> state_transition <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the voltage remains constant&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_process_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, estimated covariance: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_process_noise_covariance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial covariance estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_covariance_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/ul&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context <a href="CppOperatorAssign.htm">=</a> context_stream.str();<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample1()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Accelerating car (two states)";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> acceleration <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement_noise <a href="CppOperatorAssign.htm">=</a> 10.0; <a href="CppComment.htm">//</a>Called 'measnoise'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> accelnoise <a href="CppOperatorAssign.htm">=</a> 0.2; <a href="CppComment.htm">//</a>Called 'accelnoise'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 0.0,0.0,0.0,dt } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0,0.0,0.0,1.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0,1.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,0.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 10.0 * measurement_noise,0.0,0.0,1000000.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0,0.0,0.0,0.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { measurement_noise, 1000000.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.5&nbsp;&nbsp;* accelnoise * dt * dt, accelnoise * dt} );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0, 0.0, dt, 1.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs <a href="CppOperatorAssign.htm">=</a> { "0.0", <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(acceleration) };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x", "v" };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size1() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size2() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;GetControl(),white_noise_system_parameters-&gt;GetControl()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),white_noise_system_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> context_stream;<br/>
&nbsp;&nbsp;context_stream<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> title <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;This is an example from D. Simon's article '<a href="CppKalmanFilter.htm">Kalman Filter</a>ing', published in 'Embedded Systems Programming' (June 2001).&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;The context is an accelerating car with a GPS and a defect speedometer&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;ul&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> names: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(state_names) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": position (e.g. meter) and velocity (e.g. meter per second)&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": car starts from standstill&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": set <b><a href="CppThis.htm">this</a></b> value off on purpose, to see the <a href="CppKalmanFilter.htm">Kalman filter</a> converge&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Input: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(inputs) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": a gas pedal is pushed to a certain acceleration value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Control: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> control <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": a gas pedal has an influence on the velocity&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Observation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> observation <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": only observe position, which can be observed directly with a GPS&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> transition: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> state_transition <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the position is increased by a velocity, the velocity stays constant without input&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": GPS works, speedometer does not&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some pessimistic value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_process_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": noise caused by acceleration&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, estimated covariance: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_process_noise_covariance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": a more pessimistic value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial covariance estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_covariance_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just a guess&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/ul&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context <a href="CppOperatorAssign.htm">=</a> context_stream.str();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample2()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Cannonball";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 4; <a href="CppComment.htm">//</a>Size of all vectors and matrices<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> 9.81; <a href="CppComment.htm">//</a>Gravity<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> pi <a href="CppOperatorDivide.htm">/</a> 4.0; <a href="CppComment.htm">//</a>Radians. 45 degrees <a href="CppOperatorAssign.htm">=</a> pi <a href="CppOperatorDivide.htm">/</a> 4.0 radians<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Gravity influences y and Vy<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 100.0 * <a href="CppStdCos.htm">std::cos</a>(angle), 500.0, 100.0 * sin(angle) } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shot from the cannon with velocity 100.0 at an angle<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 100.0 * <a href="CppStdCos.htm">std::cos</a>(angle), 0.0, 100.0 * sin(angle) } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Gravity influences position and velocity in the vertical direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;( 0.0 ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;( 0.0 ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;( <a href="CppOperatorMinus.htm">-</a>0.5*g*dt*dt ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;( <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;g*dt&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ust an estimation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.2, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.2, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.2, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can observe all positions and speeds<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Due to <b><a href="CppThis.htm">this</a></b> being a simulation, one can safely assume no process noise<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Noise in GPS and speedometer in cannonball<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 30.0, 30.0, 30.0, 30.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Due to <b><a href="CppThis.htm">this</a></b> being a simulation, put in no process noise<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 0.0, 0.0, 0.0 } );<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Velocities influence positions<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Beware: appears as transposition of real <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt, 1.0, 0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, dt , 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x", "Vx", "y", "Vy" };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> context_stream;<br/>
&nbsp;&nbsp;context_stream<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> title <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;This is an example from &lt;a href=\"http://greg.czerniak.info/guides/kalman1\"&gt;Greg Czerniak's tutorial&lt;/a&gt;&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;The context is a cannonball lauched from a cannon.&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;ul&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> names: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(state_names) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": horizontal position (m), horizontal velocity (m/s), vertical position (m), vertical velocity (m)&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the cannon shoots the ball from an angle of 45 degrees at an initial speed of 100 m/s&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": set <b><a href="CppThis.htm">this</a></b> value off on purpose, to see the <a href="CppKalmanFilter.htm">Kalman filter</a> converge&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Input: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(inputs) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": gravity will change the vertical velocity by 9.81 m/(s^2)&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Control: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> control <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": gravity influences the vertical velocity only&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Observation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> observation <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": all states are observed directly with a GPS and an internal speedometer&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> transition: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> state_transition <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": positions are increased by their velocities. Velocities remain constant without input&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_process_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, estimated covariance: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_process_noise_covariance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial covariance estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_covariance_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just some low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/ul&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context <a href="CppOperatorAssign.htm">=</a> context_stream.str();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample3()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Spring";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;h1&gt;" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "&lt;/h1&gt;";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use spring system: a mass is lying on a frictionless surface and is connected to two horizontal springs<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 2; <a href="CppComment.htm">//</a>Size of vectors and matrices<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k <a href="CppOperatorAssign.htm">=</a> 1.0; <a href="CppComment.htm">//</a>Spring constant<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mass <a href="CppOperatorAssign.htm">=</a> 1.0; <a href="CppComment.htm">//</a>Mass<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No input used, so control <a href="CppMatrix.htm">matrix</a> can be zeroes only<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { <a href="CppOperatorMinus.htm">-</a>10.0, <a href="CppOperatorMinus.htm">-</a>1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From a perfect standstill at a certain position<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0, 0.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>There is no input supplied<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;( 0.0 ),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;( 0.0 )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observe the position of the spring only<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some noise<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 1.0, 1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Simulation, so process noise is zero<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 0.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x", "v" };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>As on paper<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>dt*k/mass,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dt , 0.99<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;));<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample4()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Airhockey puck";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;h1&gt;" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "&lt;/h1&gt;";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Context: airhockey puck with a constant speed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 1.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 0.0000001 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 0.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 0.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 1.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, {1.0} );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0 } );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0 } );<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;( 1.0 )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x" };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample5()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Accelerating car (3 states)";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "&lt;h1&gt;" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "&lt;/h1&gt;";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Another accelerating car<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> force <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1000.0; <a href="CppComment.htm">//</a>Newton<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mass&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 10000.0; <a href="CppComment.htm">//</a>kilogram<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> acc <a href="CppOperatorAssign.htm">=</a> dt * force <a href="CppOperatorDivide.htm">/</a> mass;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A gas pedal only influences acceleration<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.0,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.0,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.0,acc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,0.0,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,1.0,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.0,1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0,1.0,-1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From exact standstill<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,0.0,0.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only (pessimistic) normal noise in GPS, speedometer and accelerometer<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100.0,&nbsp;&nbsp;0.0,&nbsp;&nbsp;0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,100.0,&nbsp;&nbsp;0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,&nbsp;&nbsp;0.0,100.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observe all: GPS, speedometer, accelerometer<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,0.0,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,1.0,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.0,1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.1,0.0,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.1,0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.0,0.1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} ); <a href="CppComment.htm">//</a>Pessimistic estimate<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only normal noise in GPS, speedometer has enormous noise as <b><a href="CppIf.htm">if</a></b> defect (yet cannot be 0.0)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0, 10.0, 10.0 } );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.01, 0.01, 0.01 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>x(t+1) <a href="CppOperatorAssign.htm">=</a> x(t) <a href="CppOperatorPlus.htm">+</a> dt*v(t) <a href="CppOperatorPlus.htm">+</a> 0.5*(dt^2)*a(t)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v(t+1) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v(t) <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp; (dt&nbsp;&nbsp;)*a(t)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a(t+1) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a(t)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Shown as on paper<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;dt, 0.5*dt*dt,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dt,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A gas pedal only influences acceleration<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs <a href="CppOperatorAssign.htm">=</a> { "0.0", "0.0", "1.0" };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x", "v", "a" };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size1() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size2() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;GetControl(),white_noise_system_parameters-&gt;GetControl()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),white_noise_system_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample6()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Exponential decay";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>One state<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00000000001;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reach a 10<a href="CppOperatorModulus.htm">%</a> value after 1000 <a href="CppTime.htm">time</a>steps with the closed-form solution<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gamma <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdLog.htm">std::log</a>(0.1)/1000.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reach a 10<a href="CppOperatorModulus.htm">%</a> value after 1000 <a href="CppTime.htm">time</a>steps with the recurrence equation<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> e <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::e&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tau <a href="CppOperatorAssign.htm">=</a> <a href="CppStdPow.htm">std::pow</a>(e,<a href="CppStdLog.htm">std::log</a>(0.1) <a href="CppOperatorDivide.htm">/</a> 1000.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a variable name<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x" };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Input does not change state<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 0.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { epsilon } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From 100%<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimate is correct on purpose<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate <a href="CppOperatorAssign.htm">=</a> initial_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { epsilon } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observe directly<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { epsilon } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { epsilon } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { epsilon } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reach a 10<a href="CppOperatorModulus.htm">%</a> value after 1000 <a href="CppTime.htm">time</a>steps with the recurrence equation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { tau } ));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reach a 10<a href="CppOperatorModulus.htm">%</a> value after 1000 <a href="CppTime.htm">time</a>steps with the closed-form solution<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> input <a href="CppOperatorAssign.htm">=</a> "exp(-" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(gamma) <a href="CppOperatorPlus.htm">+</a> "*(t+1))";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs <a href="CppOperatorAssign.htm">=</a> { input };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size1() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size2() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;GetControl(),white_noise_system_parameters-&gt;GetControl()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),white_noise_system_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> context_stream;<br/>
&nbsp;&nbsp;context_stream<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> title <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;&amp;nbsp;&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;This is more of a mathematical example. It shows that" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;a recurrence equation and its closed-form solution <b><a href="CppFor.htm">for</a></b> exponential" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;decay are equivalent" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The closed-form solution of exponential decay is:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;f(t) <a href="CppOperatorAssign.htm">=</a> e^(-gamma*t)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;Where t is the <a href="CppTime.htm">time</a> step and gamma a constant, which is equal to <a href="CppOperatorMinus.htm">-</a>ln(0.1)/1000 <a href="CppOperatorAssign.htm">=</a> 0.0023025850929940454." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;This value of gamma lets the exponential decay reach 10<a href="CppOperatorModulus.htm">%</a> after 1000 <a href="CppTime.htm">time</a>steps." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The recurrence equation of exponential decay is:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;f(t+1) <a href="CppOperatorAssign.htm">=</a> tau * f(t)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;Where t is the <a href="CppTime.htm">time</a> step and tau a constant, which is equal to e^(ln(0.1)/1000) <a href="CppOperatorAssign.htm">=</a> 0.99770006382255327." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;This value of tau lets the exponential decay reach 10<a href="CppOperatorModulus.htm">%</a> after 1000 <a href="CppTime.htm">time</a>steps." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The closed-form solution is plotted as the input, the recurrence equation as the state." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;Because the control <a href="CppMatrix.htm">matrix</a> contains a zero only, the input has no influence on the state." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;For the cleanest look, all noise was set to a low value." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;&amp;nbsp;&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;ul&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> names: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(state_names) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": just a variable without meaning&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": decay starting from 1.0&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": set <b><a href="CppThis.htm">this</a></b> value to the real value, there is no need to <b><a href="CppDo.htm">do</a></b> estimation&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Input: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(inputs) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the closed-form solution of exponential decay. t must be increased by one <a href="CppTime.htm">time</a>step, because a <a href="CppKalmanFilter.htm">Kalman Filter</a> estimates after an update&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Control: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> control <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": input must have no effect in changing the state to <b><a href="CppDo.htm">do</a></b> a valid comparison&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Observation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> observation <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the value is observed directly&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> transition: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> state_transition <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the recurrence equation of exponential decay&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_process_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, estimated covariance: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_process_noise_covariance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial covariance estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_covariance_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/ul&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context <a href="CppOperatorAssign.htm">=</a> context_stream.str();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample7()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Harmonic oscillation (two states)";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two states<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> e <a href="CppOperatorAssign.htm">=</a> 0.00000000001;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Period of 100 <a href="CppTime.htm">time</a>steps<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angular_frequency <a href="CppOperatorAssign.htm">=</a> 2.0 * pi <a href="CppOperatorDivide.htm">/</a> 100.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct <b><a href="CppFor.htm">for</a></b> floating <a href="CppPointer.htm">point</a> rounding errors that will increase the amplitude.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This value is found by experimenting<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> correction <a href="CppOperatorAssign.htm">=</a> 0.998026148;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Name of the <a href="CppFunction.htm">function</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "sin", "cos" };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Input does not change state<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 0.0, 0.0, 0.0, 0.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { e,0.0,0.0,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimate is correct on purpose<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate <a href="CppOperatorAssign.htm">=</a> initial_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { e,0.0,0.0,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observe directly<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0,0.0,0.0,1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { e,0.0,0.0,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { e,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { e,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reach a 10<a href="CppOperatorModulus.htm">%</a> value after 1000 <a href="CppTime.htm">time</a>steps with the recurrence equation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correction, angular_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>angular_frequency,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reach a 10<a href="CppOperatorModulus.htm">%</a> value after 1000 <a href="CppTime.htm">time</a>steps with the closed-form solution<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> input1 <a href="CppOperatorAssign.htm">=</a> "sin(" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(angular_frequency) <a href="CppOperatorPlus.htm">+</a> "*(t+1))";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> input2 <a href="CppOperatorAssign.htm">=</a> "cos(" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(angular_frequency) <a href="CppOperatorPlus.htm">+</a> "*(t+1))";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs <a href="CppOperatorAssign.htm">=</a> { input1, input2 };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size1() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size2() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;GetControl(),white_noise_system_parameters-&gt;GetControl()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),white_noise_system_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> context_stream;<br/>
&nbsp;&nbsp;context_stream<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> title <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;&amp;nbsp;&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;This is more of a mathematical example. It shows that" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;a recurrence equation and its closed-form solution <b><a href="CppFor.htm">for</a></b> a harmonic" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;oscillation are equivalent" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The closed-form solution of a harmonic oscillation is:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;code&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "x(t) <a href="CppOperatorAssign.htm">=</a> sin(angular_frequency*t)&lt;br/&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "v(t) <a href="CppOperatorAssign.htm">=</a> cos(angular_frequency*t)&lt;br/&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/code&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The period is set to 100 <a href="CppTime.htm">time</a>steps," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;so the angular frequency equals 2*pi radian per period <a href="CppOperatorAssign.htm">=</a> 2 * pi <a href="CppOperatorDivide.htm">/</a> 100 <a href="CppOperatorAssign.htm">=</a> 0.0628." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The recurrence equation of a harmonic oscillation is" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;code&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "x(t+1) <a href="CppOperatorAssign.htm">=</a> c * x(t) <a href="CppOperatorPlus.htm">+</a> angular_frequency * v(t)&lt;br/&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "v(t+1) <a href="CppOperatorAssign.htm">=</a> c * v(t) <a href="CppOperatorMinus.htm">-</a> angular_frequency * x(t)&lt;br/&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/code&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;Where c is a correction close to 1.0, to prevent the amplitude from increasing beyond 1" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;(probably due to rounding errors)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The closed-form solution is plotted as the input, the recurrence equation as the state." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;Because the control <a href="CppMatrix.htm">matrix</a> contains a zero only, the input has no influence on the state." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;For the cleanest look, all noise was set to a low value." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;&amp;nbsp;&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;ul&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> names: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(state_names) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": position (e.g. meters) and velocity (e.g. meters per second)&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": a sine starts at 0.0, a cosine starts at 1.0&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": set <b><a href="CppThis.htm">this</a></b> value to the real value, there is no need to <b><a href="CppDo.htm">do</a></b> estimation&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Input: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(inputs) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the closed-form solution of a harmonic oscillation. t must be increased by one <a href="CppTime.htm">time</a>step, because a <a href="CppKalmanFilter.htm">Kalman Filter</a> estimates after an update&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Control: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> control <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": input must have no effect in changing the state to <b><a href="CppDo.htm">do</a></b> a valid comparison&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Observation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> observation <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the value is observed directly&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> transition: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> state_transition <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the recurrence equation of a harmonic oscillation&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_process_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, estimated covariance: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_process_noise_covariance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial covariance estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_covariance_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/ul&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context <a href="CppOperatorAssign.htm">=</a> context_stream.str();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample8()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> "Harmonic oscillation (three states)";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two states<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> e <a href="CppOperatorAssign.htm">=</a> 0.00000000001;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Period of 100 <a href="CppTime.htm">time</a>steps<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angular_frequency <a href="CppOperatorAssign.htm">=</a> 2.0 * pi <a href="CppOperatorDivide.htm">/</a> 100.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct <b><a href="CppFor.htm">for</a></b> floating <a href="CppPointer.htm">point</a> rounding errors that will increase the amplitude.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This value is found by experimenting<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> correction <a href="CppOperatorAssign.htm">=</a> 0.998026148;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Name of the <a href="CppFunction.htm">function</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x", "v", "a" };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Input does not change state<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n*n,0.0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { e,0.0,0.0,0.0,e,0.0,0.0,0.0,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Correct<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, angular_frequency, <a href="CppOperatorMinus.htm">-</a>angular_frequency*angular_frequency } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimate is correct on purpose<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate <a href="CppOperatorAssign.htm">=</a> initial_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { e,0.0,0.0,0.0,e,0.0,0.0,0.0,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observe directly<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { e,0.0,0.0,0.0,e,0.0,0.0,0.0,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { e,e,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>As small as possible<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { e,e,e } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reach a 10<a href="CppOperatorModulus.htm">%</a> value after 1000 <a href="CppTime.htm">time</a>steps with the recurrence equation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correction, angular_frequency,angular_frequency*angular_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>angular_frequency,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correction,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angular_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>angular_frequency*angular_frequency,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reach a 10<a href="CppOperatorModulus.htm">%</a> value after 1000 <a href="CppTime.htm">time</a>steps with the closed-form solution<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> input1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "sin(" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(angular_frequency) <a href="CppOperatorPlus.htm">+</a> "*(t+1))";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> input2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(angular_frequency)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "*cos(" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(angular_frequency)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "*(t+1))";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> input3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "-"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(angular_frequency)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "*"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(angular_frequency)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "*sin(" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(angular_frequency) <a href="CppOperatorPlus.htm">+</a> "*(t+1))";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; inputs <a href="CppOperatorAssign.htm">=</a> { input1, input2, input3 };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; kalman_filter_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; white_noise_system_parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size1() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(control.size2() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> inputs.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system_parameters-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;GetControl(),white_noise_system_parameters-&gt;GetControl()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(kalman_filter_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),white_noise_system_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> context_stream;<br/>
&nbsp;&nbsp;context_stream<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> title <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/h1&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;&amp;nbsp;&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;This is more of a mathematical example. It shows that" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;a recurrence equation and its closed-form solution <b><a href="CppFor.htm">for</a></b> a harmonic" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;oscillation (three states) are equivalent" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The closed-form solution of a harmonic oscillation is:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;code&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "x(t) <a href="CppOperatorAssign.htm">=</a> sin(angular_frequency*t)&lt;br/&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "v(t) <a href="CppOperatorAssign.htm">=</a> cos(angular_frequency*t)&lt;br/&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/code&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The period is set to 100 <a href="CppTime.htm">time</a>steps," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;so the angular frequency equals 2*pi radian per period <a href="CppOperatorAssign.htm">=</a> 2 * pi <a href="CppOperatorDivide.htm">/</a> 100 <a href="CppOperatorAssign.htm">=</a> 0.0628." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The recurrence equation of a harmonic oscillation is" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;code&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "x(t+1) <a href="CppOperatorAssign.htm">=</a> c * x(t) <a href="CppOperatorPlus.htm">+</a> angular_frequency * v(t)&lt;br/&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "v(t+1) <a href="CppOperatorAssign.htm">=</a> c * v(t) <a href="CppOperatorMinus.htm">-</a> angular_frequency * x(t)&lt;br/&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/code&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;Where c is a correction close to 1.0, to prevent the amplitude from increasing beyond 1" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;(probably due to rounding errors)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;The closed-form solution is plotted as the input, the recurrence equation as the state." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;Because the control <a href="CppMatrix.htm">matrix</a> contains a zero only, the input has no influence on the state." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;For the cleanest look, all noise was set to a low value." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;p&gt;&amp;nbsp;&lt;/p&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;ul&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> names: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(state_names) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": position (e.g. meters) and velocity (e.g. meters per second)&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": a sine starts at 0.0, a cosine starts at 1.0&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial state, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_state_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": set <b><a href="CppThis.htm">this</a></b> value to the real value, there is no need to <b><a href="CppDo.htm">do</a></b> estimation&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Input: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> DisplayAsUblasVector(inputs) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the closed-form solution of a harmonic oscillation. t must be increased by one <a href="CppTime.htm">time</a>step, because a <a href="CppKalmanFilter.htm">Kalman Filter</a> estimates after an update&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Control: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> control <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": input must have no effect in changing the state to <b><a href="CppDo.htm">do</a></b> a valid comparison&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Observation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> observation <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the value is observed directly&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;<a href="CppState.htm">State</a> transition: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> state_transition <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": the recurrence equation of a harmonic oscillation&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Measurement noise, estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_measurement_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> real_process_noise <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Process noise, estimated covariance: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> estimated_process_noise_covariance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&lt;li&gt;Initial covariance estimate: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> initial_covariance_estimate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": some very low value&lt;/li&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/ul&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context <a href="CppOperatorAssign.htm">=</a> context_stream.str();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_of_<a href="CppTime.htm">time</a>steps,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> example;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::DisplayAsUblasVector(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "](";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; str: v) { s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> str <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ","; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace trailing comma with a closing bracket<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> str <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;str[str.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorAssign.htm">=</a> ')';<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> str;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterexperiment.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterexperiment.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTEREXPERIMENT_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTEREXPERIMENT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>A <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment<br/>
{<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; kalman_filter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt;&amp; white_noise_system,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; context <a href="CppOperatorAssign.htm">=</a> ""<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the calculation elements of each <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; &gt;&amp; GetCalculationElements() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_calculation_elements; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the HTML description of the context of <b><a href="CppThis.htm">this</a></b> experiment<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetContext() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_context; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the predicted states<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The states are stored as a <a href="CppChrono.htm">chrono</a>logical collection (the <a href="CppStdVector.htm">std::vector</a>) of states (the <a href="CppUblas.htm">ublas</a>::vector)<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> GetPredicted<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the inputs of each <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The states are stored as a <a href="CppChrono.htm">chrono</a>logical collection (the <a href="CppStdVector.htm">std::vector</a>) of inputs (the <a href="CppUblas.htm">ublas</a>::vector)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetInputs() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_inputs; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt;&amp; Get<a href="CppKalmanFilter.htm">KalmanFilter</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_kalman_filter; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the measured states, that is, measured with noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The states are stored as a <a href="CppChrono.htm">chrono</a>logical collection (the <a href="CppStdVector.htm">std::vector</a>) of states (the <a href="CppUblas.htm">ublas</a>::vector)<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> GetMeasured<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the real states, that is, the values that would be measured without noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The states are stored as a <a href="CppChrono.htm">chrono</a>logical collection (the <a href="CppStdVector.htm">std::vector</a>) of states (the <a href="CppUblas.htm">ublas</a>::vector)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetReal<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_real_states; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the state names<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; Get<a href="CppState.htm">State</a>Names() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_state_names; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The white noise system<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt;&amp; GetWhiteNoiseSystem() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_white_noise_system; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> the state of the <b><a href="CppClass.htm">class</a></b> is valid<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsValid() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppAppend.htm">Append</a> a real state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAppend.htm">Append</a>Real<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment*);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> ParseInput(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The calculation elements of each <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_calculation_elements;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The HTML description of the context of <b><a href="CppThis.htm">this</a></b> experiment<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_context;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The inputs of each <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_inputs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; m_kalman_filter;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real state, that is, the values that would be measured without noise<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_real_states;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppState.htm">State</a> names<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_state_names;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The white noise system<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt; m_white_noise_system;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTEREXPERIMENT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterexperiment.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterexperiment.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelementsfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "model<a href="CppFunction.htm">function</a>parser.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; input_functions,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; m_kalman_filter,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; state_names,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt;&amp; m_white_noise_system,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; context<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_calculation_elements{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_context{context},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_inputs{<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment::ParseInput(input_functions,<a href="CppTime.htm">time</a>)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_filter{m_kalman_filter},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_real_states{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_names{state_names},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_white_noise_system{m_white_noise_system}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_kalman_filter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_white_noise_system);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetWhiteNoiseSystem());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetWhiteNoiseSystem()-&gt;GetParameters());<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> state_names.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> state_names.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetControl().size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetControl().size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetObservation().size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetObservation().size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;Get<a href="CppState.htm">State</a>Transition().size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;Get<a href="CppState.htm">State</a>Transition().size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetWhiteNoiseSystem()-&gt;GetParameters()-&gt;GetControl().size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetWhiteNoiseSystem()-&gt;GetParameters()-&gt;GetControl().size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetWhiteNoiseSystem()-&gt;GetParameters()-&gt;GetInitial<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetWhiteNoiseSystem()-&gt;GetParameters()-&gt;GetMeasurementNoise().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetWhiteNoiseSystem()-&gt;GetParameters()-&gt;GetProcessNoise().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetWhiteNoiseSystem()-&gt;GetParameters()-&gt;Get<a href="CppState.htm">State</a>Transition().size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetWhiteNoiseSystem()-&gt;PeekAtReal<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> input_functions.size());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_filter-&gt;GetParameters()-&gt;GetControl(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_white_noise_system-&gt;GetParameters()-&gt;GetControl()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_filter-&gt;GetParameters()-&gt;Get<a href="CppState.htm">State</a>Transition(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_white_noise_system-&gt;GetParameters()-&gt;Get<a href="CppState.htm">State</a>Transition()));<br/>
<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0;i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update reality, that is, let the real system (i.e. reality) go to its next state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetInputs().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input <a href="CppOperatorAssign.htm">=</a> GetInputs()[i];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m_white_noise_system-&gt;GetCurrent<a href="CppState.htm">State</a>().size() <a href="CppOperatorEqual.htm">==</a> input.size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_white_noise_system-&gt;GoToNext<a href="CppState.htm">State</a>(input);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Perform a noisy measurement<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; z_measured <a href="CppOperatorAssign.htm">=</a> m_white_noise_system-&gt;Measure();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pass <b><a href="CppThis.htm">this</a></b> measurement to the filter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_filter-&gt;SupplyMeasurementAndInput(z_measured,input);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdRuntime_error.htm">std::runtime_error</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Happens when innovation covariance becomes degenerate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(that is, its determinant is zero)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "The experiment must end in a valid state");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppAppend.htm">Append</a>Real<a href="CppState.htm">State</a>(m_white_noise_system-&gt;PeekAtReal<a href="CppState.htm">State</a>());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; last_calculation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElementsFactory::DeepCopy(m_kalman_filter-&gt;GetLastCalculation());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_calculation_elements.push_back(last_calculation);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_calculation_elements.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "The experiment must end in a valid state");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment::<a href="CppAppend.htm">Append</a>Real<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_state)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_real_states.push_back(real_state);<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment::GetMeasured<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;v.reserve(m_calculation_elements.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_calculation_elements.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_calculation_elements.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back( (*i)-&gt;GetMeasurement() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment::GetPredicted<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;v.reserve(m_calculation_elements.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_calculation_elements.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_calculation_elements.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; element <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back( element-&gt;GetPredicted<a href="CppState.htm">State</a>() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment::IsValid() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do not count the inputs: these are created at startup of the experiment<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>and always have the maximum size (of n_<a href="CppTime.htm">time</a>steps)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_inputs <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetInputs().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_real_states <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetReal<a href="CppState.htm">State</a>s().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_predicted_states <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetPredicted<a href="CppState.htm">State</a>s().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_measured_states <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(GetMeasured<a href="CppState.htm">State</a>s().size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does the experiment produce an equal amount of real, estimated and measured states?<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n_real_states <a href="CppOperatorEqual.htm">==</a> n_predicted_states<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n_real_states <a href="CppOperatorEqual.htm">==</a> n_measured_states;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment::ParseInput(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> n_<a href="CppTime.htm">time</a>steps;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> input.size();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m(n_rows,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_cols));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(input.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s <a href="CppOperatorAssign.htm">=</a> input[col];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Model<a href="CppFunctionParser.htm">FunctionParser</a> f(s.empty() ? "0.0" : s, "t");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> f.Evaluate( <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(row) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m[row].size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m[row](col) <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdRuntime_error.htm">std::runtime_error</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Unparsable <a href="CppFunction.htm">function</a> (will be parsed against 't'):");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Parsing the <a href="CppFunction.htm">function</a> should have succeeded, as the GUI takes <b><a href="CppThis.htm">this</a></b> out");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.empty() <a href="CppOperatorLogicalOr.htm">||</a> input.size() <a href="CppOperatorEqual.htm">==</a> m[0].size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterexperimentparameter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterexperimentparameter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTEREXPERIMENTPARAMETER_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTEREXPERIMENTPARAMETER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparametertype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>A parameter used in a <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment<br/>
<a href="CppComment.htm">///</a>Note that a <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment uses a <a href="CppKalmanFilter.htm">KalmanFilter</a>,<br/>
<a href="CppComment.htm">///</a>which has its own parameter type called <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter, which is<br/>
<a href="CppComment.htm">///</a>a subset of these<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> a <a href="CppConvert.htm">convert</a> from <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter to a <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter will succeed<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Can<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> a <a href="CppConvert.htm">convert</a> from <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter to a WhiteNoiseSystemParameter will succeed<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Can<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter to a <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/which will always succeed<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType <a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter to a <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/which will always succeed<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType <a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter to a <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/assumes Can<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter succeeds<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType <a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter to a WhiteNoiseSystemParameterType,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/assumes Can<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter succeeds<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> WhiteNoiseSystemParameterType <a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get all <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType values<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; GetAll() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is <b><a href="CppThis.htm">this</a></b> parameter a <a href="CppMatrix.htm">matrix</a>/vector of type <b><a href="CppDouble.htm">double</a></b>?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppIsDouble.htm">IsDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is <b><a href="CppThis.htm">this</a></b> parameter a <a href="CppMatrix.htm">matrix</a>/vector of type <a href="CppStdString.htm">std::string</a> <b><a href="CppFor.htm">for</a></b> a <a href="CppFunction.htm">function</a>?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is <b><a href="CppThis.htm">this</a></b> parameter a <a href="CppMatrix.htm">matrix</a>/vector of type <a href="CppInt.htm">integer</a>?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppIsInt.htm">IsInt</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is <b><a href="CppThis.htm">this</a></b> parameter a <a href="CppMatrix.htm">matrix</a>/vector of type <a href="CppStdString.htm">std::string</a>?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsString(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is <b><a href="CppThis.htm">this</a></b> parameter a <a href="CppMatrix.htm">matrix</a>?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is <b><a href="CppThis.htm">this</a></b> parameter a vector?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsVector(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the full name of a type, e.g. '<a href="CppMatrix.htm">Matrix</a> to capture the physics of the system'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToDescription(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the full name of a type, e.g. '<a href="CppState.htm">State</a> transition'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToName(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the symbol of a type, e.g. 'A'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToSymbol(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType,<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt; m_map_kalman_filter;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;WhiteNoiseSystemParameterType,<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt; m_map_white_noise_system;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType,<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt; CreateMap<a href="CppKalmanFilter.htm">KalmanFilter</a>();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;WhiteNoiseSystemParameterType,<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt; CreateMapWhiteNoiseSystem();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTEREXPERIMENTPARAMETER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterexperimentparameter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterexperimentparameter.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameter.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType,<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::m_map_kalman_filter <a href="CppOperatorAssign.htm">=</a> CreateMap<a href="CppKalmanFilter.htm">KalmanFilter</a>();<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameterType,<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::m_map_white_noise_system <a href="CppOperatorAssign.htm">=</a> CreateMapWhiteNoiseSystem();<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Can<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_map_kalman_filter.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_map_kalman_filter.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j ;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).second <a href="CppOperatorEqual.htm">==</a> parameter) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Can<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_map_white_noise_system.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_map_white_noise_system.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j ;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).second <a href="CppOperatorEqual.htm">==</a> parameter) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_map_kalman_filter.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_map_kalman_filter.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j ;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).first <a href="CppOperatorEqual.htm">==</a> parameter) <b><a href="CppReturn.htm">return</a></b> (*i).second;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;"<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType parameter)");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_map_white_noise_system.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_map_white_noise_system.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j ;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).first <a href="CppOperatorEqual.htm">==</a> parameter) <b><a href="CppReturn.htm">return</a></b> (*i).second;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType parameter)");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(parameter));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_map_kalman_filter.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_map_kalman_filter.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j ;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).second <a href="CppOperatorEqual.htm">==</a> parameter) <b><a href="CppReturn.htm">return</a></b> (*i).first;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameterType <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(parameter));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_map_white_noise_system.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_map_white_noise_system.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j ;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*i).second <a href="CppOperatorEqual.htm">==</a> parameter) <b><a href="CppReturn.htm">return</a></b> (*i).first;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType,<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::CreateMap<a href="CppKalmanFilter.htm">KalmanFilter</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType,<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt; v;<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_optimal_kalman_gain,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::n_parameters));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameterType,<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::CreateMapWhiteNoiseSystem()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;WhiteNoiseSystemParameterType,<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; &gt; v;<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::initial_state_real,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::measurement_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::state_transition,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition<br/>
&nbsp;&nbsp;));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(WhiteNoiseSystemParameterType::n_parameters));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::GetAll() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K W<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance, <a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E&nbsp;&nbsp; W<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E&nbsp;&nbsp; W<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E&nbsp;&nbsp; W<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E&nbsp;&nbsp; W<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K W<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All parameters must be in");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppIsDouble.htm">IsDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"n_parameters is not implemented to be used");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppIsDouble.htm">IsDouble</a>: use of n_parameters");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppIsDouble.htm">IsDouble</a>: use of unimplemented type");<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Is<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"n_parameters is not implemented to be used");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Is<a href="CppFunction.htm">Function</a>: use of n_parameters");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Is<a href="CppFunction.htm">Function</a>: use of unimplemented type");<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppIsInt.htm">IsInt</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"n_parameters is not implemented to be used");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppIsInt.htm">IsInt</a>: use of n_parameters");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppIsInt.htm">IsInt</a>: use of unimplemented type");<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::IsString(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"n_parameters is not implemented to be used");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::IsString: use of n_parameters");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::IsString: use of unimplemented type");<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Is<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::IsVector(type);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::IsVector(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"n_parameters is not implemented to be used");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::IsVector: use of n_parameters");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::IsVector: use of unimplemented type");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Started <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Test");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Is<a href="CppMatrix.htm">Matrix</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsVector(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsString(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Is<a href="CppFunction.htm">Function</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsDouble.htm">IsDouble</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppIsInt.htm">IsInt</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition));<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Test");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToDescription(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> the subset<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Can<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(type))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType sub_type <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::ToDescription(sub_type);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Can<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(type))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType sub_type <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemParameter::ToDescription(sub_type);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the unique types<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Vector of inputs";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Vector of the state element names";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToName(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> the subset<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Can<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(type))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType sub_type <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::ToName(sub_type);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Can<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(type))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType sub_type <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemParameter::ToName(sub_type);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the unique types<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Input";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppState.htm">State</a> names";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToSymbol(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> the subset<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Can<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(type))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType sub_type <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::ToSymbol(sub_type);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Can<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(type))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType sub_type <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemParameter::ToSymbol(sub_type);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the unique types<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "y";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ""; <a href="CppComment.htm">//</a><a href="CppState.htm">State</a> names has no symbol<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterexperimentparametertype.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterexperimentparametertype.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTEREXPERIMENTPARAMETERTYPE_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTEREXPERIMENTPARAMETERTYPE_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>These parameters overlap<br/>
<a href="CppComment.htm">///</a>E: Experiment<br/>
<a href="CppComment.htm">///</a>K: <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
<a href="CppComment.htm">///</a>W: White noise system parameter<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType<br/>
{<br/>
&nbsp;&nbsp;control,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K W<br/>
&nbsp;&nbsp;estimated_measurement_noise,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;estimated_optimal_kalman_gain,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;estimated_process_noise_covariance, <a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;initial_covariance_estimate,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;initial_state_estimate,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;initial_state_real,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E&nbsp;&nbsp; W<br/>
&nbsp;&nbsp;measurement_frequency,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E&nbsp;&nbsp; W<br/>
&nbsp;&nbsp;real_measurement_noise,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E&nbsp;&nbsp; W<br/>
&nbsp;&nbsp;real_process_noise,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E&nbsp;&nbsp; W<br/>
&nbsp;&nbsp;input,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E<br/>
&nbsp;&nbsp;observation,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E K<br/>
&nbsp;&nbsp;state_names,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E<br/>
&nbsp;&nbsp;state_transition,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>E K W<br/>
&nbsp;&nbsp;n_parameters&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>E<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTEREXPERIMENTPARAMETERTYPE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterexperimentparametertype.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterexperimentparametertype.cpp" border = "1"><tr><td><code>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparametertype.h"<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Factory <b><a href="CppFor.htm">for</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Factory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; kalman_filter;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(parameters-&gt;GetType())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter <a href="CppOperatorAssign.htm">=</a> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter <a href="CppOperatorAssign.htm">=</a> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter <a href="CppOperatorAssign.htm">=</a> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented <a href="CppKalmanFilter.htm">Kalman filter</a> type");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> parameters-&gt;GetType());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> kalman_filter;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterparameter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterparameter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERPARAMETER_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERPARAMETER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>A single <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter<br/>
<a href="CppComment.htm">///</a><b><a href="CppFor.htm">for</a></b> example, the state transition <a href="CppMatrix.htm">matrix</a><br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> is a <a href="CppMatrix.htm">matrix</a><br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> is not a vector<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> has a description like '<a href="CppMatrix.htm">Matrix</a> that [...]'<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> has the name '<a href="CppState.htm">State</a> transition <a href="CppMatrix.htm">matrix</a>'<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> has the symbol 'A'<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType values, except n_parameters<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType&gt; GetAll() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is the type a <a href="CppMatrix.htm">matrix</a>?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is the type a vector?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsVector(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the full name of a type, e.g. '<a href="CppMatrix.htm">Matrix</a> to capture the physics of the system'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToDescription(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the full name of a type, e.g. '<a href="CppState.htm">State</a> transition'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToName(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the symbol of a type, e.g. 'A'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToSymbol(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERPARAMETER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterparameter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterparameter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::GetAll() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_optimal_kalman_gain,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::n_parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All parameters must be in");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::Is<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::IsVector(type);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::IsVector(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppReturnType.htm">return type</a> <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::ToDescription(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> <b><a href="CppFor.htm">for</a></b> <a href="CppConvert.htm">convert</a>ing input to state change";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_measurement_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> that has an estimated measurement noise covariance";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_optimal_kalman_gain:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> with the estimated optimal Kalman gain";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_process_noise_covariance:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> with the estimated process noise covariance";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_covariance_estimate:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> with the initial covariance estimate";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Vector with the initial state estimate";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> that with effect of a measurement on a state change";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> that contains the internal physics of the system; the effect of current state on the next state";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::ToName(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Control";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_measurement_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Estimated measurement error covariance";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_optimal_kalman_gain:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Estimated optimal Kalman gain";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_process_noise_covariance:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Estimated process noise covariance";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_covariance_estimate:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Initial covariance estimate";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Initial state estimate";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Observation";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppState.htm">State</a> transition";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::ToSymbol(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "B";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_measurement_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "R";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_optimal_kalman_gain:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "K";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_process_noise_covariance:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Q";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_covariance_estimate:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "P";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "x";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "H";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "A";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERPARAMETERS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>ABC <b><a href="CppFor.htm">for</a></b> the parameters every <a href="CppKalmanFilter.htm">Kalman filter</a> needs at least<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters<br/>
{<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the control <a href="CppMatrix.htm">matrix</a> ('B'): the effect of inputs on the current states<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetControl() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_control; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x: The initial state estimate<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetInitial<a href="CppState.htm">State</a>Estimate() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_initial_state_estimate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain how the states are observed ('H')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetObservation() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_observation; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the state transition <a href="CppMatrix.htm">matrix</a> ('F'), containing the physics of the system<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; Get<a href="CppState.htm">State</a>Transition() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_state_transition; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> parameter set has a certain type of <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasParameterType(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An ABC can only be <a href="CppConstructor.htm">construct</a>ed by derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/B: control <a href="CppMatrix.htm">matrix</a>: the effect of inputs on the current states<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_control;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x: The initial state estimate<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_initial_state_estimate;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/H: How the states are observed<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_observation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/F: state transition <a href="CppMatrix.htm">matrix</a>, containing the physics of the system<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_state_transition;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterparameters.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: m_control{control},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_state_estimate{initial_state_estimate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_observation{observation},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_transition{state_transition}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct dimensionality<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> GetInitial<a href="CppState.htm">State</a>Estimate().size();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppComment.htm">//</a>Inevitable <b><a href="CppFor.htm">for</a></b> <a href="CppStdSize_t.htm">std::size_t</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetControl().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetControl().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetObservation().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetObservation().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Get<a href="CppState.htm">State</a>Transition().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Get<a href="CppState.htm">State</a>Transition().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetInitial<a href="CppState.htm">State</a>Estimate().size() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::HasParameterType(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterparametertype.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterparametertype.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERPARAMETERTYPE_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERPARAMETERTYPE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>The <a href="CppMatrix.htm">matrix</a>/vector types/names of <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType<br/>
{<br/>
&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;estimated_optimal_kalman_gain,<br/>
&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;state_transition,<br/>
&nbsp;&nbsp;n_parameters <a href="CppComment.htm">//</a>Must be last element, used in <a href="CppDebug.htm">debugging</a><br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERPARAMETERTYPE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfilterparametertype.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfilterparametertype.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfiltertype.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfiltertype.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERTYPE_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERTYPE_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ensemble,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>extended,<br/>
&nbsp;&nbsp;fixed_lag_smoother,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>hybrid<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>kalman_bucy<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>minimum_variance_smoother<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>modified_Bryson_Frazier_smoother<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>rauch_tung_striebel_smoother<br/>
&nbsp;&nbsp;standard, <a href="CppComment.htm">//</a>Also called: 'discrete'<br/>
&nbsp;&nbsp;steady_state,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>unscented,<br/>
&nbsp;&nbsp;n_types <a href="CppComment.htm">//</a>Must be last value, used in <a href="CppDebug.htm">debugging</a><br/>
};<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERTYPE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfiltertype.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfiltertype.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfiltertypes.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfiltertypes.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERTYPES_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERTYPES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bimap.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Class to work on one or more <a href="CppKalmanFilter.htm">KalmanFilter</a>Type <a href="CppInstance.htm">instances</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Types<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type&gt; GetAllTypes() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<a href="CppStdString.htm">std::string</a>&gt; m_map;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<a href="CppStdString.htm">std::string</a>&gt; CreateMap() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERTYPES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/kalmanfiltertypes.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/kalmanfiltertypes.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>types.h"<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::m_map;<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::CreateMap() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<a href="CppStdString.htm">std::string</a>&gt; m;<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother,"fixed lag smoother"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard,"discrete"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state,"steady state"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Type&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::GetAllTypes() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type&gt; v<br/>
&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>Type::n_types));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type&gt; v <a href="CppOperatorAssign.htm">=</a> GetAllTypes();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type t <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> ToStr(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type u <a href="CppOperatorAssign.htm">=</a> ToType(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.left.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.left.count(type));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> m_map.left.find(type)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Type <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.right.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.right.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.right.count(s) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type t <a href="CppOperatorAssign.htm">=</a> m_map.right.find(s)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/laggedwhitenoisesystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/laggedwhitenoisesystem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> LAGGEDWHITENOISESYSTEM_H<br/>
<a href="CppDefine.htm">#define</a> LAGGEDWHITENOISESYSTEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQueueH.htm">queue</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>A lagged white noise system is a system that can be measured only after a certain number<br/>
<a href="CppComment.htm">///</a>of periods.<br/>
<b><a href="CppStruct.htm">struct</a></b> LaggedWhiteNoiseSystem : <b><a href="CppPublic.htm">public</a></b> WhiteNoiseSystem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the lagged white noise system parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> LaggedWhiteNoiseSystemParameters&gt;&amp; GetLaggedWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;WhiteNoiseSystemType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::lagged; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update reality, that is, let the real system (i.e. reality) go to its next state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Measure a value from <b><a href="CppThis.htm">this</a></b> system with normally distributed noise<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Measure() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Peek what the real value is<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; PeekAtReal<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/LaggedWhiteNoiseSystem must be created with a LaggedWhiteNoiseSystemFactory<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> LaggedWhiteNoiseSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; white_noise_system_parameters);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> LaggedWhiteNoiseSystemFactory;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~LaggedWhiteNoiseSystem() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(LaggedWhiteNoiseSystem*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The front one is the one that can be read,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the back one is the freshest measurement<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdQueue.htm">std::queue</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_measuments;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The lagged white noise system parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> LaggedWhiteNoiseSystemParameters&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The standard white noise system used as an engine<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;StandardWhiteNoiseSystem&gt; m_system;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> LAGGEDWHITENOISESYSTEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/laggedwhitenoisesystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/laggedwhitenoisesystem.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemfactory.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::LaggedWhiteNoiseSystem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: WhiteNoiseSystem{parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_measuments{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> LaggedWhiteNoiseSystemParameters&gt;(parameters)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_system{StandardWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetControl(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetInitial<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetMeasurementNoise(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;GetProcessNoise(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters-&gt;Get<a href="CppState.htm">State</a>Transition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetLag() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_measuments.size()) <a href="CppOperatorLessEqual.htm">&lt;=</a> m_parameters-&gt;GetLag());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_system);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag <a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;GetLag();<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (lag <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_measuments.size()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_measuments.push(m_system-&gt;Measure());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_measuments.size()));<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-03: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input)<br/>
{<br/>
&nbsp;&nbsp;m_system-&gt;GoToNext<a href="CppState.htm">State</a>(input);<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::Measure() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetLag() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_measuments.size()));<br/>
&nbsp;&nbsp;m_measuments.push(m_system-&gt;Measure());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Result is copied now, to also work <b><a href="CppFor.htm">for</a></b> m_lag <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; result <a href="CppOperatorAssign.htm">=</a> m_measuments.front();<br/>
<br/>
&nbsp;&nbsp;m_measuments.pop();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetLag() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_measuments.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::PeekAtReal<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_system-&gt;PeekAtReal<a href="CppState.htm">State</a>();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::Test()")<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> measurements are indeed lagged:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The system's real value should update immediatly, but <b><a href="CppThis.htm">this</a></b> fresh measurement<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>must only be accessible after lag <a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Context: measuring the position of an object with constant velocity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LaggedWhiteNoiseSystem&gt; my_system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> LaggedWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 1.0 } ), <a href="CppComment.htm">//</a>control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>(&nbsp;&nbsp;&nbsp;&nbsp; { 0.0 } ), <a href="CppComment.htm">//</a>initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>(&nbsp;&nbsp;&nbsp;&nbsp; { 0.0 } ), <a href="CppComment.htm">//</a>real_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>(&nbsp;&nbsp;&nbsp;&nbsp; { 0.0 } ), <a href="CppComment.htm">//</a>real_process_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(1,1, { 1.0 } )&nbsp;&nbsp;<a href="CppComment.htm">//</a>state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; input <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 1.0 } );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>lag; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal( my_system-&gt;Measure()(0), 0.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal( my_system-&gt;PeekAtReal<a href="CppState.htm">State</a>()(0), <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my_system-&gt;GoToNext<a href="CppState.htm">State</a>(input);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>10 <a href="CppOperatorAssign.htm">=</a> just some value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal( my_system-&gt;Measure()(0), expected));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal( my_system-&gt;PeekAtReal<a href="CppState.htm">State</a>()(0), <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(lag <a href="CppOperatorPlus.htm">+</a> i) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my_system-&gt;GoToNext<a href="CppState.htm">State</a>(input);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem::Test()")<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/laggedwhitenoisesystemfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/laggedwhitenoisesystemfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> LAGGEDWHITENOISESYSTEMFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> LAGGEDWHITENOISESYSTEMFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Factory <b><a href="CppFor.htm">for</a></b> LaggedWhiteNoiseSystem<br/>
<b><a href="CppStruct.htm">struct</a></b> LaggedWhiteNoiseSystemFactory<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a LaggedWhiteNoiseSystem from the <a href="ToolLoose.htm">loose</a> parameters<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LaggedWhiteNoiseSystem&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a LaggedWhiteNoiseSystem from the parameters<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LaggedWhiteNoiseSystem&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt;&amp; parameters);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> LAGGEDWHITENOISESYSTEMFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/laggedwhitenoisesystemfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/laggedwhitenoisesystemfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemfactory.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem&gt; <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt; parameters{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LaggedWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LaggedWhiteNoiseSystem&gt; system{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LaggedWhiteNoiseSystem(parameters)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(system);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> system;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystem&gt; <a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::lagged);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LaggedWhiteNoiseSystemParameters&gt; lagged_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;LaggedWhiteNoiseSystemParameters&gt;(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lagged_parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;LaggedWhiteNoiseSystem&gt; my_system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lagged_parameters-&gt;GetControl(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lagged_parameters-&gt;GetInitial<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lagged_parameters-&gt;GetLag(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lagged_parameters-&gt;GetMeasurementNoise(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lagged_parameters-&gt;GetProcessNoise(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lagged_parameters-&gt;Get<a href="CppState.htm">State</a>Transition());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_system);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> my_system;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/laggedwhitenoisesystemparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/laggedwhitenoisesystemparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> LAGGEDWHITENOISESYSTEMPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> LAGGEDWHITENOISESYSTEMPARAMETERS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LaggedWhiteNoiseSystemParameters : <b><a href="CppPublic.htm">public</a></b> WhiteNoiseSystemParameters<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> LaggedWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The lag (in <a href="CppTime.htm">time</a>steps) the lagged white noise system has<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetLag() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_lag; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The white noise system parameters of unlagged behavior<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt;&amp; GetStandardWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_standard_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;WhiteNoiseSystemType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::lagged; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~LaggedWhiteNoiseSystemParameters() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(LaggedWhiteNoiseSystemParameters*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The lag (in <a href="CppTime.htm">time</a>steps) the lagged white noise system has<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_lag;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> LAGGEDWHITENOISESYSTEMPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/laggedwhitenoisesystemparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/laggedwhitenoisesystemparameters.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemparameters.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::LaggedWhiteNoiseSystemParameters::LaggedWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: WhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_lag{lag}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lag <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardkalmanfilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardkalmanfilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STANDARDKALMANFILTER_H<br/>
<a href="CppDefine.htm">#define</a> STANDARDKALMANFILTER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>A discrete <a href="CppTime.htm">time</a> <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the estimation error covariance ('P'), which is updated during SupplyMeasurementAndInput<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetEstimationErrorCovariance() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_covariance_estimate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppKalmanFilter.htm">Kalman filter</a> last calculation elements<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; GetLastCalculation() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_last_standard_calculation; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the (downcasted) calculation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; GetLastStandardCalculation() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_last_standard_calculation; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_standard_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The downcasted parameters<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; GetStandardParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_standard_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the number of values a state consists of<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Size() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the current prediction of the state ('x')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; Get<a href="CppState.htm">State</a>Estimate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_state_estimate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give the filter a measurement and input, and it will update its predictions<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Also logs the calculation<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurements,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the filter estimate the next state<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Predict<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the filter estimate the next estimation error covariance<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; PredictCovariance() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppInitialize.htm">Initialize</a> the filter with a first measurent<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/P: The estimation error covariance<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_covariance_estimate;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The downcasted parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; m_last_standard_calculation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The downcasted parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; m_standard_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x: The (current prediction of the) state<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_state_estimate;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STANDARDKALMANFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardkalmanfilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardkalmanfilter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_covariance_estimate{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(parameters)-&gt;GetInitialCovarianceEstimate()},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_last_standard_calculation{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;(calculation)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_standard_parameters{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(parameters)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_estimate{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(parameters)-&gt;GetInitial<a href="CppState.htm">State</a>Estimate()}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_last_standard_calculation);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> m_last_standard_calculation-&gt;GetType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> parameters-&gt;GetType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> m_standard_parameters-&gt;GetType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> GetParameters()-&gt;GetType()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppInitialize.htm">Initialize</a> each <a href="CppKalmanFilter.htm">Kalman filter</a> type with the right type of parameters");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_covariance_estimate <a href="CppOperatorAssign.htm">=</a> m_standard_parameters-&gt;GetInitialCovarianceEstimate();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_state_estimate <a href="CppOperatorAssign.htm">=</a> m_standard_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do not <a href="CppInitialize.htm">initialize</a> the calculation yet<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_standard_calculation-&gt;m_predicted_state <a href="CppOperatorAssign.htm">=</a> m_standard_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_standard_calculation-&gt;m_predicted_covariance <a href="CppOperatorAssign.htm">=</a> m_standard_parameters-&gt;GetInitialCovarianceEstimate();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct dimensionality<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_state_estimate.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;GetControl().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;GetControl().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;GetEstimatedMeasurementNoise().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;GetEstimatedMeasurementNoise().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;GetObservation().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;GetObservation().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_covariance_estimate.size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_covariance_estimate.size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;GetEstimatedProcessNoiseCovariance().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;GetEstimatedProcessNoiseCovariance().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_estimate.size() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppState.htm">State</a>Size() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_state_estimate.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sz;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>::Predict<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_prediction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),m_state_estimate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_standard_parameters-&gt;GetControl(),input);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> state_prediction;<br/>
}<br/>
<br/>
<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>::PredictCovariance() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; covariance_prediction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::MultiProd(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_standard_parameters-&gt;GetEstimatedProcessNoiseCovariance();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> covariance_prediction;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>::SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurements,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::identity_<a href="CppMatrix.htm">matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppDebug.htm">Debug</a> statements to keep code below clean<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(measurements.size() <a href="CppOperatorEqual.htm">==</a> input.size());<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size2() <a href="CppOperatorEqual.htm">==</a> m_covariance_estimate.size1());<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::Prod(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),m_covariance_estimate).size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;trans(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()).size1() );<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppMatrix.htm">Matrix</a>::Prod(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),m_covariance_estimate)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()))).size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_standard_parameters-&gt;GetEstimatedProcessNoiseCovariance().size1());<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppMatrix.htm">Matrix</a>::Prod(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),m_covariance_estimate)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()))).size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_standard_parameters-&gt;GetEstimatedProcessNoiseCovariance().size2());<br/>
&nbsp;&nbsp;<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store calculation <b><a href="CppFor.htm">for</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;Clear();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!m_last_standard_calculation-&gt;IsComplete()); <a href="CppComment.htm">//</a>Can be empty and thus complete<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppState.htm">State</a>Estimate()); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_last_standard_calculation-&gt;IsComplete() <a href="CppOperatorLogicalOr.htm">||</a> input.empty()); <a href="CppComment.htm">//</a>Can be empty or incomplete<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetPreviousCovarianceEstimate(<b><a href="CppThis.htm">this</a></b>-&gt;GetEstimationErrorCovariance()); <a href="CppComment.htm">//</a>2<br/>
<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 1/7) <a href="CppState.htm">State</a> prediction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_prediction <a href="CppOperatorAssign.htm">=</a> Predict<a href="CppState.htm">State</a>(input);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 2/7) Covariance prediction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; covariance_prediction <a href="CppOperatorAssign.htm">=</a> PredictCovariance();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 3/7) Innovation (y with a squiggle above it)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; innovation <a href="CppOperatorAssign.htm">=</a> measurements <a href="CppOperatorMinus.htm">-</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_standard_parameters-&gt;GetObservation(),state_prediction);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 4/7) Innovation covariance (S)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; innovation_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::MultiProd(m_standard_parameters-&gt;GetObservation(),covariance_prediction,trans(m_standard_parameters-&gt;GetObservation()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_standard_parameters-&gt;GetEstimatedMeasurementNoise();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 5/7) Kalman gain (K)<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppMatrix.htm">Matrix</a>::CalcDeterminant(innovation_covariance) <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Innovation covariance became degenerate");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; kalman_gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::MultiProd(covariance_prediction,trans(m_standard_parameters-&gt;GetObservation()),<a href="CppMatrix.htm">Matrix</a>::Inverse(innovation_covariance));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 6/7) Update state prediction<br/>
&nbsp;&nbsp;m_state_estimate <a href="CppOperatorAssign.htm">=</a> state_prediction <a href="CppOperatorPlus.htm">+</a> <a href="CppMatrix.htm">Matrix</a>::Prod(kalman_gain,innovation);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 7/7) Update covariance prediction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> identity_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; my_identity_<a href="CppMatrix.htm">matrix</a>(kalman_gain.size1());<br/>
&nbsp;&nbsp;m_covariance_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_identity_<a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppMatrix.htm">Matrix</a>::Prod(kalman_gain,m_standard_parameters-&gt;GetObservation()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;covariance_prediction<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store calculation <b><a href="CppFor.htm">for</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetPredicted<a href="CppState.htm">State</a>(state_prediction); <a href="CppComment.htm">//</a>1<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetPredictedCovariance(covariance_prediction); <a href="CppComment.htm">//</a>2<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetInnovation(innovation); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetMeasurement(measurements); <a href="CppComment.htm">//</a>3<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetInnovationCovariance(innovation_covariance); <a href="CppComment.htm">//</a>4<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetKalmanGain(kalman_gain); <a href="CppComment.htm">//</a>5<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetUpdated<a href="CppState.htm">State</a>(m_state_estimate); <a href="CppComment.htm">//</a>6<br/>
&nbsp;&nbsp;m_last_standard_calculation-&gt;SetUpdatedCovariance(m_covariance_estimate); <a href="CppComment.htm">//</a>7<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_last_standard_calculation-&gt;IsComplete());<br/>
&nbsp;&nbsp;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardkalmanfiltercalculationelements.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardkalmanfiltercalculationelements.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STANDARDKALMANFILTERCALCULATIONELEMENTS_H<br/>
<a href="CppDefine.htm">#define</a> STANDARDKALMANFILTERCALCULATIONELEMENTS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>The elements of a standard <a href="CppKalmanFilter.htm">Kalman filter</a> calculation<br/>
<b><a href="CppStruct.htm">struct</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Base<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>This <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; innovation <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; innovation_covariance <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; kalman_gain <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_covariance <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_covariance_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_covariance <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Clear the calculation, will set IsComplete to <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Produce a deep copy of the derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; Clone() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the innovation ('y_squiggle')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetInnovation() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_innovation; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain he innovation covariance ('S')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetInnovationCovariance() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_innovation_covariance; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Kalman gain ('K')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetKalmanGain() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_kalman_gain; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the predicted error estimation covariance ('P_predicted')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; Get<a href="CppPredicate.htm">Predicate</a>dCovariance() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_predicted_covariance; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the previous_covariance_estimate ('P_prev'/'P_n-1')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetPreviousCovarianceEstimate() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_previous_covariance_estimate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the updated error estimation covariance (in the end of each <a href="CppTime.htm">time</a>step)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetUpdatedCovariance() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_updated_covariance; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the state is complete and valid<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsComplete() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the innovation ('y_squiggle')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInnovation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; innovation);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the innovation covariance ('S')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInnovationCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; innovation_covariance);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the Kalman gain ('K')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; kalman_gain);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the predicted error estimation covariance ('P_predicted')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculated at step 2 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2) P_predicted <a href="CppOperatorAssign.htm">=</a> [...] P_n-1 [...]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPredictedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_covariance);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the previous_covariance_estimate ('P_prev'/'P_n-1')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is read at step 2 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2) P_predicted <a href="CppOperatorAssign.htm">=</a> [...] P_n-1 [...]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPreviousCovarianceEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_covariance_estimate);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the updated error estimation covariance (in the end of each <a href="CppTime.htm">time</a>step)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculated at step 7 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2) P_n <a href="CppOperatorAssign.htm">=</a> [...] P_predicted<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Fails <b><a href="CppIf.htm">if</a></b> already set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetUpdatedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_covariance);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The innovation ('y_squiggle')<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_innovation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The innovation covariance ('S')<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_innovation_covariance;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Kalman gain ('K')<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_kalman_gain;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The predicted error estimation covariance ('P_predicted')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculated at step 2 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2) P_predicted <a href="CppOperatorAssign.htm">=</a> [...] P_n-1 [...]<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_predicted_covariance;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The previous_covariance_estimate ('P_prev'/'P_n-1')<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is read at step 2 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2) P_predicted <a href="CppOperatorAssign.htm">=</a> [...] P_n-1 [...]<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_previous_covariance_estimate;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The updated error estimation covariance (in the end of each <a href="CppTime.htm">time</a>step)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculated at step 7 of the <a href="CppAlgorithm.htm">algorithm</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2) P_n <a href="CppOperatorAssign.htm">=</a> [...] P_predicted<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_updated_covariance;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STANDARDKALMANFILTERCALCULATIONELEMENTS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardkalmanfiltercalculationelements.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardkalmanfiltercalculationelements.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Base<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; innovation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; innovation_covariance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; kalman_gain,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_covariance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_covariance_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_covariance)<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measurement,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicted_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;previous_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updated_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_innovation{innovation},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_innovation_covariance{innovation_covariance},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_gain{kalman_gain},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_predicted_covariance{predicted_covariance},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_previous_covariance_estimate{previous_covariance_estimate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_updated_covariance{updated_covariance}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>size may be zero<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_innovation.size();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Base<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetMeasurement().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetPredicted<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetPrevious<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> GetUpdated<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_innovation.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_kalman_gain.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_kalman_gain.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_predicted_covariance.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_predicted_covariance.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_previous_covariance_estimate.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_previous_covariance_estimate.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_updated_covariance.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> m_updated_covariance.size2());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Clear()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Clear();<br/>
&nbsp;&nbsp;m_innovation <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_innovation.empty());<br/>
&nbsp;&nbsp;m_innovation_covariance <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;m_kalman_gain <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;m_predicted_covariance <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;m_previous_covariance_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;m_updated_covariance <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Clone() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Base<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetMeasurement(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetPredicted<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetPrevious<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetUpdated<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetInnovation(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetInnovationCovariance(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetKalmanGain(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppPredicate.htm">Predicate</a>dCovariance(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetPreviousCovarianceEstimate(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetUpdatedCovariance()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetType());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::IsComplete() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_innovation.size();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>sz <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sz <a href="CppOperatorEqual.htm">==</a> m_innovation.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_innovation_covariance.size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_kalman_gain.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_kalman_gain.size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetMeasurement().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_predicted_covariance.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_predicted_covariance.size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetPredicted<a href="CppState.htm">State</a>().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_previous_covariance_estimate.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_previous_covariance_estimate.size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetPrevious<a href="CppState.htm">State</a>().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_updated_covariance.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> m_updated_covariance.size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetUpdated<a href="CppState.htm">State</a>().size();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetInnovation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; innovation)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_innovation.empty());<br/>
&nbsp;&nbsp;m_innovation <a href="CppOperatorAssign.htm">=</a> innovation;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetInnovationCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; innovation_covariance)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_innovation_covariance.size1() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_innovation_covariance.size2() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;m_innovation_covariance <a href="CppOperatorAssign.htm">=</a> innovation_covariance;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; kalman_gain)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_kalman_gain.size1() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_kalman_gain.size2() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;m_kalman_gain <a href="CppOperatorAssign.htm">=</a> kalman_gain;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetPredictedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_covariance)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_predicted_covariance.size1() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_predicted_covariance.size2() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;m_predicted_covariance <a href="CppOperatorAssign.htm">=</a> predicted_covariance;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetPreviousCovarianceEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_covariance_estimate)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_previous_covariance_estimate.size1() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_previous_covariance_estimate.size2() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;m_previous_covariance_estimate <a href="CppOperatorAssign.htm">=</a> previous_covariance_estimate;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::SetUpdatedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_covariance)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_updated_covariance.size1() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_updated_covariance.size2() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;m_updated_covariance <a href="CppOperatorAssign.htm">=</a> updated_covariance;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardkalmanfilterfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardkalmanfilterfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STANDARDKALMANFILTERFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> STANDARDKALMANFILTERFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Factory <b><a href="CppFor.htm">for</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STANDARDKALMANFILTERFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardkalmanfilterfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardkalmanfilterfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; calculation{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; kalman_filter{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>(calculation,parameters)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> kalman_filter;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardkalmanfilterparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardkalmanfilterparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STANDARDKALMANFILTERPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> STANDARDKALMANFILTERPARAMETERS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the standard <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the (estimated) measurement noise ('R')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetEstimatedMeasurementNoise() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_estimated_measurement_noise; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/P: The initial estimation error covariance estimate<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetInitialCovarianceEstimate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_initial_covariance_estimate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the process noise covariance ('Q')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetEstimatedProcessNoiseCovariance() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_estimated_process_noise_covariance; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two parameter sets are equal with a fuzzy compare<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; lhs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> parameter set has a certain type of <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasParameterType(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/R: Estimated measurement noise<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_estimated_measurement_noise;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Q: The estimated process noise covariance<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_estimated_process_noise_covariance;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/P: The initial estimation error covariance estimate<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_initial_covariance_estimate;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STANDARDKALMANFILTERPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardkalmanfilterparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardkalmanfilterparameters.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; estimated_measurement_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_covariance_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters{control,initial_state_estimate,observation,state_transition},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_estimated_measurement_noise{estimated_measurement_noise},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_estimated_process_noise_covariance{estimated_process_noise_covariance},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_covariance_estimate{initial_covariance_estimate}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct dimensionality<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> GetInitial<a href="CppState.htm">State</a>Estimate().size();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppComment.htm">//</a>Inevitable <b><a href="CppFor.htm">for</a></b> <a href="CppStdSize_t.htm">std::size_t</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetEstimatedMeasurementNoise().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetEstimatedMeasurementNoise().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetEstimatedProcessNoiseCovariance().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetEstimatedProcessNoiseCovariance().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetInitialCovarianceEstimate().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetInitialCovarianceEstimate().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-03: <a href="CppVersion.htm">version</a> 1.1: inhertic from <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::HasParameterType(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_measurement_noise<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_process_noise_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_covariance_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetControl(),rhs.GetControl())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetEstimatedMeasurementNoise(),rhs.GetEstimatedMeasurementNoise())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetInitialCovarianceEstimate(),rhs.GetInitialCovarianceEstimate())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(lhs.GetInitial<a href="CppState.htm">State</a>Estimate(),rhs.GetInitial<a href="CppState.htm">State</a>Estimate())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetObservation(),rhs.GetObservation())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetEstimatedProcessNoiseCovariance(),rhs.GetEstimatedProcessNoiseCovariance())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.Get<a href="CppState.htm">State</a>Transition(),rhs.Get<a href="CppState.htm">State</a>Transition());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardwhitenoisesystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardwhitenoisesystem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STANDARDWHITENOISESYSTEM_H<br/>
<a href="CppDefine.htm">#define</a> STANDARDWHITENOISESYSTEM_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> StandardWhiteNoiseSystem : <b><a href="CppPublic.htm">public</a></b> WhiteNoiseSystem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;WhiteNoiseSystemType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::standard; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update reality, that is, let the real system (i.e. reality) go to its next state,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/without <a href="CppAny.htm">any</a> input<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update reality, that is, let the real system (i.e. reality) go to its next state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Measure a value from <b><a href="CppThis.htm">this</a></b> system with normally distributed noise<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Measure() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StandardWhiteNoiseSystem can only be created by a StandardWhiteNoiseSystemFactory<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> StandardWhiteNoiseSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; parameters);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> StandardWhiteNoiseSystemFactory;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~StandardWhiteNoiseSystem() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(StandardWhiteNoiseSystem*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameters <b><a href="CppFor.htm">for</a></b> the white noise system<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt; m_parameters;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STANDARDWHITENOISESYSTEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardwhitenoisesystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardwhitenoisesystem.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/random/lagged_fibonacci.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/random/normal_distribution.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystem::StandardWhiteNoiseSystem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: WhiteNoiseSystem{parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&gt;(parameters)}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystem::GoToNext<a href="CppState.htm">State</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a no-input vector<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> GetCurrent<a href="CppState.htm">State</a>().size();<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; input(sz,0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GoToNext<a href="CppState.htm">State</a>(input);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystem::GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>First <b><a href="CppDo.htm">do</a></b> a perfect transition<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(input.size() <a href="CppOperatorEqual.htm">==</a> GetCurrent<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size1() <a href="CppOperatorEqual.htm">==</a> GetCurrent<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size2() <a href="CppOperatorEqual.htm">==</a> GetCurrent<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetControl().size1() <a href="CppOperatorEqual.htm">==</a> input.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetControl().size2() <a href="CppOperatorEqual.htm">==</a> input.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition(),GetCurrent<a href="CppState.htm">State</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_parameters-&gt;GetControl(),input);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> process noise<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> new_state.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_state.size() <a href="CppOperatorEqual.htm">==</a> m_parameters-&gt;GetProcessNoise().size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_state(i) <a href="CppOperatorAssign.htm">=</a> GetRandomNormal(new_state(i),m_parameters-&gt;GetProcessNoise()(i));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;SetNewCurrent<a href="CppState.htm">State</a>(new_state);<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystem::Measure() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> GetCurrent<a href="CppState.htm">State</a>().size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetCurrent<a href="CppState.htm">State</a>().size() <a href="CppOperatorEqual.htm">==</a> m_parameters-&gt;GetMeasurementNoise().size());<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; measured(sz);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;measured(i) <a href="CppOperatorAssign.htm">=</a> GetRandomNormal(GetCurrent<a href="CppState.htm">State</a>()(i),m_parameters-&gt;GetMeasurementNoise()(i));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> measured;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardwhitenoisesystemfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardwhitenoisesystemfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STANDARDWHITENOISESYSTEMFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> STANDARDWHITENOISESYSTEMFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> StandardWhiteNoiseSystemFactory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;StandardWhiteNoiseSystem&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;StandardWhiteNoiseSystem&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt;&amp; parameters);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STANDARDWHITENOISESYSTEMFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardwhitenoisesystemfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardwhitenoisesystemfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemfactory.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystem&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystemParameters&gt; parameters{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;StandardWhiteNoiseSystem&gt; system{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystem(parameters)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(system);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> system;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystem&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt;&amp; parameters<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::standard);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;StandardWhiteNoiseSystemParameters&gt; standard_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;StandardWhiteNoiseSystemParameters&gt;(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(standard_parameters);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;StandardWhiteNoiseSystem&gt; system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;GetControl(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;GetInitial<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;GetMeasurementNoise(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;GetProcessNoise(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters-&gt;Get<a href="CppState.htm">State</a>Transition());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(system);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> system;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardwhitenoisesystemparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardwhitenoisesystemparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STANDARDWHITENOISESYSTEMPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> STANDARDWHITENOISESYSTEMPARAMETERS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> StandardWhiteNoiseSystemParameters : <b><a href="CppPublic.htm">public</a></b> WhiteNoiseSystemParameters<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;WhiteNoiseSystemType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::standard; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check two parameter sets <b><a href="CppFor.htm">for</a></b> equality <b><a href="CppUsing.htm">using</a></b> a fuzzy comparison<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~StandardWhiteNoiseSystemParameters() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(StandardWhiteNoiseSystemParameters*);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STANDARDWHITENOISESYSTEMPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/standardwhitenoisesystemparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/standardwhitenoisesystemparameters.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystemParameters::StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: WhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystemParameters::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystemParameters::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystemParameters::Is<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> StandardWhiteNoiseSystemParameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetControl(),rhs.GetControl())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(lhs.GetInitial<a href="CppState.htm">State</a>(),rhs.GetInitial<a href="CppState.htm">State</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(lhs.GetMeasurementNoise(),rhs.GetMeasurementNoise())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(lhs.GetProcessNoise(),rhs.GetProcessNoise())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.Get<a href="CppState.htm">State</a>Transition(),rhs.Get<a href="CppState.htm">State</a>Transition());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/steadystatekalmanfilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/steadystatekalmanfilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STEADYSTATEKALMANFILTER_H<br/>
<a href="CppDefine.htm">#define</a> STEADYSTATEKALMANFILTER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>A discrete <a href="CppTime.htm">time</a> <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
{<br/>
&nbsp;&nbsp;Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>(<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Clear the calculation, will set IsComplete to <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppKalmanFilter.htm">Kalman filter</a> last calculation elements<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; GetLastCalculation() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_last_calculation; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the number of values a state consists of<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppState.htm">State</a>Size() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the current prediction of the state ('x')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; Get<a href="CppState.htm">State</a>Estimate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_state_estimate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give the filter a measurement and input, and it will update its predictions<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurements,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the filter estimate the next state<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Predict<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppInitialize.htm">Initialize</a> the filter with a first measurent<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Factory;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The last calculation<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; m_last_calculation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The downcasted parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x: The (current prediction of the) state<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_state_estimate;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STEADYSTATEKALMANFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/steadystatekalmanfilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/steadystatekalmanfilter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_last_calculation{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;(calculation)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(parameters)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_estimate{<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters*&gt;(parameters.get())-&gt;GetInitial<a href="CppState.htm">State</a>Estimate()}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_last_calculation);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppInitialize.htm">Initialize</a> each <a href="CppKalmanFilter.htm">Kalman filter</a> type with the right type of parameters");<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct dimensionality<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_state_estimate.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetControl().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetControl().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetEstimatedOptimalKalmanGain().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetEstimatedOptimalKalmanGain().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetObservation().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;GetObservation().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_estimate.size() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> the last calculation with null values<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>NEW 2013-05-23<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_calculation-&gt;SetMeasurement(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_state_estimate.size()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_calculation-&gt;SetPredicted<a href="CppState.htm">State</a>(m_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_calculation-&gt;SetPrevious<a href="CppState.htm">State</a>Estimate(m_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_calculation-&gt;SetUpdated<a href="CppState.htm">State</a>(m_parameters-&gt;GetInitial<a href="CppState.htm">State</a>Estimate());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppState.htm">State</a>Size() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_state_estimate.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sz;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-01: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-06: <a href="CppVersion.htm">version</a> 1.1: inherits from <a href="CppKalmanFilter.htm">KalmanFilter</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>::Predict<a href="CppState.htm">State</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;Get<a href="CppState.htm">State</a>Transition()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_parameters-&gt;GetEstimatedOptimalKalmanGain(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_parameters-&gt;GetObservation()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_measured must be set before calling Predict<a href="CppState.htm">State</a>!<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_last_calculation-&gt;GetMeasurement().empty());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_prediction<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(term_a,<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppState.htm">State</a>Estimate())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_parameters-&gt;GetControl(),input)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppMatrix.htm">Matrix</a>::Prod(m_parameters-&gt;GetEstimatedOptimalKalmanGain(),m_last_calculation-&gt;GetMeasurement());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> state_prediction;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>::SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurements,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(measurements.size() <a href="CppOperatorEqual.htm">==</a> input.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store the calculation<br/>
&nbsp;&nbsp;m_last_calculation-&gt;Clear();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_last_calculation-&gt;IsComplete());<br/>
&nbsp;&nbsp;m_last_calculation-&gt;SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppState.htm">State</a>Estimate());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_last_calculation-&gt;SetMeasurement must be set before calling Predict<a href="CppState.htm">State</a>!<br/>
&nbsp;&nbsp;m_last_calculation-&gt;SetMeasurement(measurements);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> 1/1) <a href="CppState.htm">State</a> prediction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_prediction <a href="CppOperatorAssign.htm">=</a> Predict<a href="CppState.htm">State</a>(input);<br/>
&nbsp;&nbsp;m_state_estimate <a href="CppOperatorAssign.htm">=</a> state_prediction;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store the calculation<br/>
&nbsp;&nbsp;m_last_calculation-&gt;SetPredicted<a href="CppState.htm">State</a>(state_prediction);<br/>
&nbsp;&nbsp;m_last_calculation-&gt;SetUpdated<a href="CppState.htm">State</a>(Get<a href="CppState.htm">State</a>Estimate());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_last_calculation-&gt;IsComplete());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/steadystatekalmanfiltercalculationelements.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/steadystatekalmanfiltercalculationelements.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STEADYSTATEKALMANFILTERCALCULATIONELEMENTS_H<br/>
<a href="CppDefine.htm">#define</a> STEADYSTATEKALMANFILTERCALCULATIONELEMENTS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>The elements of a steady-state <a href="CppKalmanFilter.htm">Kalman filter</a> calculation<br/>
<b><a href="CppStruct.htm">struct</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Produce a deep copy of the derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; Clone() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the state is complete and valid<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsComplete() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements*);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STEADYSTATEKALMANFILTERCALCULATIONELEMENTS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/steadystatekalmanfiltercalculationelements.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/steadystatekalmanfiltercalculationelements.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelementsfactory.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; predicted_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; previous_state_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; updated_state)<br/>
<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measurement,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicted_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;previous_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updated_state)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>... nothing to check<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::Clone() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Base<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetMeasurement(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetPredicted<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetPrevious<a href="CppState.htm">State</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetUpdated<a href="CppState.htm">State</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Derived <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>... no additional <a href="CppDataMember.htm">data members</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetType());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements::IsComplete() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> GetMeasurement().size();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sz <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetMeasurement().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetPrevious<a href="CppState.htm">State</a>().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sz <a href="CppOperatorEqual.htm">==</a> GetUpdated<a href="CppState.htm">State</a>().size();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/steadystatekalmanfilterfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/steadystatekalmanfilterfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STEADYSTATEKALMANFILTERFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> STEADYSTATEKALMANFILTERFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Factory <b><a href="CppFor.htm">for</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Factory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STEADYSTATEKALMANFILTERFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/steadystatekalmanfilterfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/steadystatekalmanfilterfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelementsfactory.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; calculation {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElementsFactory::Create(parameters-&gt;GetType())<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; kalman_filter {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>(calculation,parameters)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> kalman_filter;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/steadystatekalmanfilterparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/steadystatekalmanfilterparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> STEADYSTATEKALMANFILTERPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> STEADYSTATEKALMANFILTERPARAMETERS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Parameters <b><a href="CppFor.htm">for</a></b> the standard <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters : <b><a href="CppPublic.htm">public</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; estimated_optimal_kalman_gain,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the optimal Kalman gain<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CalculateOptimalKalmanGain(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the (estimated) optimal Kalman gain ('K')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetEstimatedOptimalKalmanGain() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_estimated_optimal_kalman_gain; }<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two parameter sets are equal with a fuzzy compare<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> parameter set has a certain type of <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> HasParameterType(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/K: Estimated optimal Kalman gain<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_estimated_optimal_kalman_gain;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> STEADYSTATEKALMANFILTERPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/steadystatekalmanfilterparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/steadystatekalmanfilterparameters.cpp" border = "1"><tr><td><code>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; estimated_optimal_kalman_gain,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state_estimate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(control,initial_state_estimate,observation,state_transition),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_estimated_optimal_kalman_gain{estimated_optimal_kalman_gain}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct dimensionality<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> GetInitial<a href="CppState.htm">State</a>Estimate().size();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppComment.htm">//</a>Inevitable <b><a href="CppFor.htm">for</a></b> <a href="CppStdSize_t.htm">std::size_t</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetEstimatedOptimalKalmanGain().size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetEstimatedOptimalKalmanGain().size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::CalculateOptimalKalmanGain(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_covariance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a <a href="CppOperatorAssign.htm">=</a> state_transition;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; c <a href="CppOperatorAssign.htm">=</a> observation;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; p <a href="CppOperatorAssign.htm">=</a> initial_covariance;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; r <a href="CppOperatorAssign.htm">=</a> measurement_noise;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::MultiProd(a,p,<a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(c));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppMatrix.htm">Matrix</a>::CalcDeterminant(term_a <a href="CppOperatorPlus.htm">+</a> r) <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Optimal Kalman gain <a href="CppMatrix.htm">matrix</a> is degenerate");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; k<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Prod(term_a,<a href="CppMatrix.htm">Matrix</a>::Inverse(term_a <a href="CppOperatorPlus.htm">+</a> r));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> k;<br/>
<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-01: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-03: <a href="CppVersion.htm">version</a> 1.1: inherit from <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::HasParameterType(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_optimal_kalman_gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Is<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetControl(),rhs.GetControl())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetEstimatedOptimalKalmanGain(),rhs.GetEstimatedOptimalKalmanGain())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(lhs.GetInitial<a href="CppState.htm">State</a>Estimate(),rhs.GetInitial<a href="CppState.htm">State</a>Estimate())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetObservation(),rhs.GetObservation())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.Get<a href="CppState.htm">State</a>Transition(),rhs.Get<a href="CppState.htm">State</a>Transition());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WHITENOISESYSTEM_H<br/>
<a href="CppDefine.htm">#define</a> WHITENOISESYSTEM_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtype.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> WhiteNoiseSystem<br/>
{<br/>
&nbsp;&nbsp;WhiteNoiseSystem(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystem&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;WhiteNoiseSystem&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystem&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~WhiteNoiseSystem() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> WhiteNoiseSystemType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update reality, that is, let the real system (i.e. reality) go to its next state<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Measure a value from <b><a href="CppThis.htm">this</a></b> system with normally distributed noise<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Measure() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Peek what the real value is<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; PeekAtReal<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_current_state; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An ABC can only be <a href="CppConstructor.htm">construct</a>ed by derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> WhiteNoiseSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a <a href="CppRandomNumber.htm">random number</a> from a normal distribution<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/CppGetRandomNormal.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> GetRandomNormal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> 0.0, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigma <a href="CppOperatorAssign.htm">=</a> 1.0) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real state of the system<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetCurrent<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_current_state; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <b><a href="CppNew.htm">new</a></b> current state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetNewCurrent<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; new_current_state);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real state of the system<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_current_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt; m_parameters;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WHITENOISESYSTEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystem.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/random.hpp&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystem::WhiteNoiseSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&gt;&amp; parameters)<br/>
&nbsp;&nbsp;: m_current_state{parameters-&gt;GetInitial<a href="CppState.htm">State</a>()},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{parameters}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystem::GetRandomNormal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigma) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::normal_distribution&lt;<b><a href="CppDouble.htm">double</a></b>&gt; norm_dist(mean, sigma);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoost.htm">boost</a>::lagged_fibonacci19937 engine;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> norm_dist.<b><a href="CppOperator.htm">operator</a></b> () &lt;<a href="CppBoost.htm">boost</a>::lagged_fibonacci19937&gt;((engine));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> value;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-03: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystem::SetNewCurrent<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; new_current_state)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_current_state.size() <a href="CppOperatorEqual.htm">==</a> new_current_state.size());<br/>
&nbsp;&nbsp;m_current_state <a href="CppOperatorAssign.htm">=</a> new_current_state;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemfactory.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemfactory.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WHITENOISESYSTEMFACTORY_H<br/>
<a href="CppDefine.htm">#define</a> WHITENOISESYSTEMFACTORY_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> WhiteNoiseSystemFactory<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt;&amp; parameters);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WHITENOISESYSTEMFACTORY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemfactory.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemfactory.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemfactory.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemfactory.h"<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystem&gt; <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemFactory::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt;&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt; p;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (parameters-&gt;GetType())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::gaps_filled:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> GapsFilledWhiteNoiseSystemFactory::Create(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::lagged:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> LaggedWhiteNoiseSystemFactory::Create(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> StandardWhiteNoiseSystemFactory::Create(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented white noise system");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemparameter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemparameter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WHITENOISESYSTEMPARAMETER_H<br/>
<a href="CppDefine.htm">#define</a> WHITENOISESYSTEMPARAMETER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparametertype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>A single WhiteNoiseSystemParameter<br/>
<a href="CppComment.htm">///</a><b><a href="CppFor.htm">for</a></b> example, the state transition <a href="CppMatrix.htm">matrix</a><br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> is a <a href="CppMatrix.htm">matrix</a><br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> is not a vector<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> has a description like '<a href="CppMatrix.htm">Matrix</a> that [...]'<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> has the name '<a href="CppState.htm">State</a> transition <a href="CppMatrix.htm">matrix</a>'<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> has the symbol 'A'<br/>
<b><a href="CppStruct.htm">struct</a></b> WhiteNoiseSystemParameter<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all WhiteNoiseSystemParameterType values, except n_parameters<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;WhiteNoiseSystemParameterType&gt; GetAll() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is the type a <a href="CppMatrix.htm">matrix</a>?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is the type a vector?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsVector(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the full name of a type, e.g. '<a href="CppMatrix.htm">Matrix</a> to capture the physics of the system'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToDescription(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the full name of a type, e.g. '<a href="CppState.htm">State</a> transition'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToName(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the symbol of a type, e.g. 'A'<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToSymbol(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WHITENOISESYSTEMPARAMETER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemparameter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemparameter.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameter.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameterType&gt; <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameter::GetAll() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;WhiteNoiseSystemParameterType&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::initial_state_real,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::measurement_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameterType::state_transition,<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(WhiteNoiseSystemParameterType::n_parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All parameters must be in");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameter::Is<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::control: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::initial_state_real: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::measurement_frequency: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::real_measurement_noise: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::real_process_noise: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::state_transition: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"n_parameters is not an implemented type of WhiteNoiseSystemParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of WhiteNoiseSystemParameterType");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameter::IsVector(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameter::Is<a href="CppMatrix.htm">Matrix</a>(type);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameter::ToDescription(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::control:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> <b><a href="CppFor.htm">for</a></b> <a href="CppConvert.htm">convert</a>ing input to state change";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::initial_state_real:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Vector with the real initial state";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::measurement_frequency:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Vector containing after which number of <a href="CppTime.htm">time</a>steps a measurement is taken";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::real_measurement_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Vector with the real standard deviations of the measurement noise per state";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::real_process_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Vector with the real standard deviations of the process noise per state";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::state_transition:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppMatrix.htm">Matrix</a> that contains the internal physics of the system; the effect of current state on the next state";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of WhiteNoiseSystemParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of WhiteNoiseSystemParameterType");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameter::ToName(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::control:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Control";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::initial_state_real:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Real initial state";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::measurement_frequency:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Measurement frequencies";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::real_measurement_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Real measurement noise";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::real_process_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Real process noise";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::state_transition:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "<a href="CppState.htm">State</a> transition";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of WhiteNoiseSystemParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of WhiteNoiseSystemParameterType");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameter::ToSymbol(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::control:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "B";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::initial_state_real:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "x";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::measurement_frequency:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "f";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::real_measurement_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "R"; <a href="CppComment.htm">//</a>Shouldn't be 'r', as it is a vector?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::real_process_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "Q"; <a href="CppComment.htm">//</a>Shouldn't be 'q', as it is a vector?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::state_transition:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "A";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of WhiteNoiseSystemParameterType");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented type of WhiteNoiseSystemParameterType");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WHITENOISESYSTEMPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> WHITENOISESYSTEMPARAMETERS_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtype.h"<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>ABC of the parameters of a white noise system<br/>
<b><a href="CppStruct.htm">struct</a></b> WhiteNoiseSystemParameters<br/>
{<br/>
&nbsp;&nbsp;WhiteNoiseSystemParameters(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;WhiteNoiseSystemParameters&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~WhiteNoiseSystemParameters() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The control <a href="CppMatrix.htm">matrix</a> to determine the influence of the input (in GoToNext<a href="CppState.htm">State</a>)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetControl() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_control; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the real initial state<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetInitial<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_initial_state; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real standard deviation of the noise in the state transition<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(used in WhiteNoiseSystem::GoToNext<a href="CppState.htm">State</a>)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetProcessNoise() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_real_process_noise; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real amount of noise in the system<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A noise of zero indicates a system that can be measured accurately to infinite precision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetMeasurementNoise() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_real_measurement_noise; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The state transitions in the system<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(used in WhiteNoiseSystem::GoToNext<a href="CppState.htm">State</a>)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; Get<a href="CppState.htm">State</a>Transition() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_state_transition; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> WhiteNoiseSystemType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check two parameter sets <b><a href="CppFor.htm">for</a></b> equality <b><a href="CppUsing.htm">using</a></b> a fuzzy comparison<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An ABC can only be <a href="CppConstructor.htm">construct</a>ed by derived <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> WhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The control <a href="CppMatrix.htm">matrix</a> to determine the influence of the input (in GoToNext<a href="CppState.htm">State</a>)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_control;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real initial state<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_initial_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real amount of noise in the system<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A noise of zero indicates a system that can be measured accurately to infinite precision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_real_measurement_noise;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The standard deviation of the noise in the state transition (in GoToNext<a href="CppState.htm">State</a>)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_real_process_noise;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The state transitions in the system, used in GoToNext<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_state_transition;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WHITENOISESYSTEMPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemparameters.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameters::WhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: m_control{control},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_state{initial_state},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_real_measurement_noise{real_measurement_noise},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_real_process_noise{real_process_noise},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_transition{state_transition}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct dimensionality<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppSize_t.htm">size_t</a></b> sz <a href="CppOperatorAssign.htm">=</a> initial_state.size();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppComment.htm">//</a>Inevitable <b><a href="CppFor.htm">for</a></b> <a href="CppStdSize_t.htm">std::size_t</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_control.size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_control.size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_initial_state.size() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_real_measurement_noise.size() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_real_process_noise.size() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_transition.size1() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_transition.size2() <a href="CppOperatorEqual.htm">==</a> sz);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameters::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameters::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameters::Is<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.GetControl(),rhs.GetControl())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(lhs.GetInitial<a href="CppState.htm">State</a>(),rhs.GetInitial<a href="CppState.htm">State</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(lhs.GetMeasurementNoise(),rhs.GetMeasurementNoise())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(lhs.GetProcessNoise(),rhs.GetProcessNoise())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(lhs.Get<a href="CppState.htm">State</a>Transition(),rhs.Get<a href="CppState.htm">State</a>Transition());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemparametertype.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemparametertype.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WHITENOISESYSTEMPARAMETERTYPE_H<br/>
<a href="CppDefine.htm">#define</a> WHITENOISESYSTEMPARAMETERTYPE_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> WhiteNoiseSystemParameterType<br/>
{<br/>
&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;initial_state_real,<br/>
&nbsp;&nbsp;measurement_frequency,<br/>
&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;state_transition,<br/>
&nbsp;&nbsp;n_parameters<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WHITENOISESYSTEMPARAMETERTYPE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemparametertype.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemparametertype.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparametertype.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemtype.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemtype.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WHITENOISESYSTEMTYPE_H<br/>
<a href="CppDefine.htm">#define</a> WHITENOISESYSTEMTYPE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> WhiteNoiseSystemType<br/>
{<br/>
&nbsp;&nbsp;gaps_filled,<br/>
&nbsp;&nbsp;lagged,<br/>
&nbsp;&nbsp;standard,<br/>
&nbsp;&nbsp;n_types<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WHITENOISESYSTEMTYPE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemtype.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemtype.cpp" border = "1"><tr><td><code>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtype.h"<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) <a href="CppOperatorNotEqual.htm">!=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType lhs, <b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must cast <b><a href="CppEnumClass.htm">enum class</a></b> to <a href="CppInt.htm">integer</a>, because of a <a href="CppBug.htm">bug</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>in GCC <a href="CppVersion.htm">version</a> 4.4.0:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://gcc.gnu.org/<a href="CppBug.htm">bug</a>zilla/show_<a href="CppBug.htm">bug</a>.cgi?id=38064<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lhs) &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemtypes.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemtypes.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WHITENOISESYSTEMTYPES_H<br/>
<a href="CppDefine.htm">#define</a> WHITENOISESYSTEMTYPES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bimap.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> WhiteNoiseSystemTypes<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;WhiteNoiseSystemType&gt; GetAllTypes() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> WhiteNoiseSystemType ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;WhiteNoiseSystemType,<a href="CppStdString.htm">std::string</a>&gt; m_map;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;WhiteNoiseSystemType,<a href="CppStdString.htm">std::string</a>&gt; CreateMap() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WHITENOISESYSTEMTYPES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppKalmanFilter/whitenoisesystemtypes.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppKalmanFilter/whitenoisesystemtypes.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtypes.h"<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemType,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemTypes::m_map;<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemType,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemTypes::CreateMap() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostBimap.htm">boost::bimap</a>&lt;WhiteNoiseSystemType,<a href="CppStdString.htm">std::string</a>&gt; m;<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;WhiteNoiseSystemType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemType::gaps_filled,"gaps_filled"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;WhiteNoiseSystemType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemType::lagged,"lagged"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;WhiteNoiseSystemType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemType::standard,"standard"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemType&gt; <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemTypes::GetAllTypes() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;WhiteNoiseSystemType&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemType::gaps_filled,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemType::lagged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemType::standard<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(WhiteNoiseSystemType::n_types));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemTypes::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t: GetAllTypes())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> ToStr(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> u <a href="CppOperatorAssign.htm">=</a> ToType(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemTypes::ToStr(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.left.empty()) { m_map <a href="CppOperatorAssign.htm">=</a> CreateMap(); }<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.left.count(type) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> m_map.left.find(type)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemType <a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemTypes::ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.right.empty()) { m_map <a href="CppOperatorAssign.htm">=</a> CreateMap(); }<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.right.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.right.count(s) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t <a href="CppOperatorAssign.htm">=</a> m_map.right.find(s)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
