<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>answer of exercise #6: refactoring quadratic solver</title>
  <meta name="description" content="C++: answer of exercise #6: refactoring quadratic solver"/>
  <meta name="keywords" content="C++: answer of exercise #6: refactoring quadratic solver"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseRefactoringQuadraticSolverAnswer.htm">Answer of exercise #6: refactoring quadratic solver</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseRefactoringQuadraticSolver.htm">exercise #6: refactoring quadratic solver</a>.</p>
<p>&nbsp;</p>
<p>Below the original code is shown:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
&nbsp;<br/>
<b><a href="CppClass.htm">class</a></b> Qs<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> coeff(<b><a href="CppDouble.htm">double</a></b> aa, <b><a href="CppDouble.htm">double</a></b> bb, <b><a href="CppDouble.htm">double</a></b> cc)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a <a href="CppOperatorAssign.htm">=</a> aa;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b <a href="CppOperatorAssign.htm">=</a> bb;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c <a href="CppOperatorAssign.htm">=</a> cc;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> solve()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> b * b <a href="CppOperatorMinus.htm">-</a> 4 * a * c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> D &lt; 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root1() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x1; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root2() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x2; }<br/>
&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> a,b,c,x1,x2;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>There are many ways to Rome to improve this class, but I'll start at looking at the <a href="CppMemberFunction.htm">member functions</a> 'coeff' and 'solve': why is it necessary to temporarily store three <a href="CppDouble.htm">doubles</a> when you want to solve a quadratic equation using these three <a href="CppDouble.htm">doubles</a>? Or: why does the user first needs to set these three values, before solving them? In my humble opinion, the place to start improving this class is to remove the <a href="CppMemberFunction.htm">member functions</a> 'coeff' and directly pass these three <a href="CppDouble.htm">doubles</a> to 'solve'.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
&nbsp;<br/>
<b><a href="CppClass.htm">class</a></b> Qs<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> solve(<b><a href="CppDouble.htm">double</a></b> aa, <b><a href="CppDouble.htm">double</a></b> bb, <b><a href="CppDouble.htm">double</a></b> cc)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a <a href="CppOperatorAssign.htm">=</a> aa;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b <a href="CppOperatorAssign.htm">=</a> bb;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c <a href="CppOperatorAssign.htm">=</a> cc;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> b * b <a href="CppOperatorMinus.htm">-</a> 4 * a * c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> D &lt; 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root1() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x1; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root2() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x2; }<br/>
&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> a,b,c,x1,x2;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>In the resulting piece of code, the <a href="CppVariable.htm">variables</a> 'a','b' and 'c' are needed only <a href="CppLocal.htm">locally</a> to 'solve' (instead of <a href="CppClass.htm">class</a> <a href="CppScope.htm">scope</a>). This removes the need to internally store these three <a href="CppDouble.htm">doubles</a> in the <a href="CppPrivate.htm">private</a> section:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
&nbsp;<br/>
<b><a href="CppClass.htm">class</a></b> Qs<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> solve(<b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppDouble.htm">double</a></b> c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> b * b <a href="CppOperatorMinus.htm">-</a> 4 * a * c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> D &lt; 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root1() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x1; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root2() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x2; }<br/>
&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x1,x2;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Can we refactor the piece of code above? Sure we can! As you could have read, the number of solutions of a quadratic equation can be zero, one or two. In the code above we face the following design problems:</p>
<p>&nbsp;</p>
<ul>
  <li>If the equation only has one solution, the solution is not given</li>
  <li>If the solution has no solution, one must not call 'root1' and 'root2' but one can do so</li>
  <li>If the solution has two solutions, one must call 'root1' and 'root2' but one cannot do so or accidentally call one of these twice</li>
</ul>
<p>&nbsp;</p>
<p>The solution to these problems is to let the method 'solve' return a <a href="CppVector.htm">std::vector</a> containg all solutions (returning an empty <a href="CppVector.htm">std::vector</a> for zero solution):</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
&nbsp;<br/>
<b><a href="CppClass.htm">class</a></b> Qs<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solve(<b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppDouble.htm">double</a></b> c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> b * b <a href="CppOperatorMinus.htm">-</a> 4 * a * c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> D &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();           <a href="CppComment.htm">//</a>Empty <a href="CppVector.htm">std::vector</a> (size zero)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (D <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,-b/(2*a)); <a href="CppComment.htm">//</a><a href="CppVector.htm">std::vector</a> size one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solutions;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solutions.push_back(x1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solutions.push_back(x2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solutions;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root1() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x1; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> root2() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> x2; }<br/>
&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x1,x2;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>In the resulting piece of code, the <a href="CppVariable.htm">variables</a> 'x1' and 'x2' are needed only <a href="CppLocal.htm">locally</a> to 'solve' (instead of <a href="CppClass.htm">class</a> <a href="CppScope.htm">scope</a>) and the methods 'root1' and 'root2' are no longer needed. This results in the following code:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
&nbsp;<br/>
<b><a href="CppClass.htm">class</a></b> Qs<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solve(<b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppDouble.htm">double</a></b> c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> b * b <a href="CppOperatorMinus.htm">-</a> 4 * a * c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> D &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();           <a href="CppComment.htm">//</a>Empty <a href="CppVector.htm">std::vector</a> (size zero)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (D <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,-b/(2*a)); <a href="CppComment.htm">//</a><a href="CppVector.htm">std::vector</a> size one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solutions;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solutions.push_back(x1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;solutions.push_back(x2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solutions;<br/>
&nbsp;&nbsp;}<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Now, we have ended up with a stateless <a href="CppClass.htm">class</a> with only one <a href="CppMemberFunction.htm">member function</a>! Therefore, nothing stops you from making it a <a href="CppFunction.htm">function</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
&nbsp;<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solve(<b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppDouble.htm">double</a></b> c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> b * b <a href="CppOperatorMinus.htm">-</a> 4 * a * c;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> D &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();           <a href="CppComment.htm">//</a>Empty <a href="CppVector.htm">std::vector</a> (size zero)<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (D <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,-b/(2*a)); <a href="CppComment.htm">//</a><a href="CppVector.htm">std::vector</a> size one<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solutions;<br/>
&nbsp;&nbsp;solutions.push_back(x1);<br/>
&nbsp;&nbsp;solutions.push_back(x2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solutions;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Now, what is left to do? Well, the first part of the first 'if' statement ('if ( a == 0' ) is nonsense: if 'a' equals zero and 'b' equals non-zero, the solution of the equation is x = c/b. If 'a' equals zero and 'b' equals zero, the solution is x = 0.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
&nbsp;<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solve(<b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppDouble.htm">double</a></b> c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,c/b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> b * b <a href="CppOperatorMinus.htm">-</a> 4 * a * c;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (D &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (D <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,-b/(2.0*a));<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2 * a);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solutions;<br/>
&nbsp;&nbsp;solutions.push_back(x1);<br/>
&nbsp;&nbsp;solutions.push_back(x2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solutions;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The <a href="CppFunction.htm">function</a> above works fine. The only thing left to do is doing some cleaning:</p>
<ul>
  <li>Make all <a href="CppConst.htm">const</a> <a href="CppVariable.htm">variables</a> <a href="CppConst.htm">const</a></li>
  <li>Instead of using '0' or '2' for <a href="CppDouble.htm">doubles</a>, make it '0.0' or '2.0', as it yields an implicit <a href="CppCast.htm">cast</a> from <a href="CppInt.htm">int</a> to <a href="CppDouble.htm">double</a></li>
  <li>The math is not clear, because there are no brackets showing the order of evaluation. To be sure the program does the math in the order we want, show this with brackets</li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
&nbsp;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppStd.htm">std</a>;<br/>
&nbsp;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solve(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,c/b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> (b * b) <a href="CppOperatorMinus.htm">-</a> (4.0 * a * c);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (D &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (D <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,-b/(2.0*a));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> sqrt(D);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2.0 * a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2.0 * a);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solutions;<br/>
&nbsp;&nbsp;solutions.push_back(x1);<br/>
&nbsp;&nbsp;solutions.push_back(x2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solutions;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Now we're done.</p>
<p>&nbsp;</p>
<p>Personally, the only thing I would do, is add some personal tastes to the function. The code above is fine, the code below is just as good, but I personally like it better:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSolveQuadratic.htm">SolveQuadratic</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppSolveQuadratic.htm">SolveQuadratic</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,c/b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> (b * b) <a href="CppOperatorMinus.htm">-</a> (4.0 * a * c);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(1,-b/(2.0*a));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> <a href="CppSqrt.htm">std::sqrt</a>(d);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; solutions;<br/>
&nbsp;&nbsp;solutions.reserve(2);<br/>
&nbsp;&nbsp;solutions.push_back((-b <a href="CppOperatorPlus.htm">+</a> rD)/(2.0 * a));<br/>
&nbsp;&nbsp;solutions.push_back((-b <a href="CppOperatorMinus.htm">-</a> rD)/(2.0 * a));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solutions;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Of course, I already had the function <a href="CppSolveQuadratic.htm">SolveQuadratic</a> on my website :-D.</p>
<p>&nbsp;</p>
<p>About the literature I took the example from [1]: it was written in 2001 and therefore written before the <a href="CppMostImportantCppBooks.htm">most important C++ books</a> about <a href="CppClassDesign.htm">class design</a>. The author admitted in the example that the <a href="CppClass.htm">class</a> indeed could have been written as a <a href="CppFunction.htm">function</a>. Also, the <a href="CppClass.htm">class</a> example was given before the student knew about <a href="CppVector.htm">std::vector</a>.</p>
<p>&nbsp;</p>
<p>But in my humble opinion, it still is an example of bad <a href="CppClassDesign.htm">class design</a>. I would suggest the following <a href="CppClass.htm">class</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppStruct.htm">struct</a></b> QuadraticSolver<br/>
{<br/>
&nbsp;&nbsp;QuadraticSolver()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: mNsolutions(0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> Solve(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mNsolutions <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSolution1 <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mNsolutions;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mNsolutions <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSolution1 <a href="CppOperatorAssign.htm">=</a> c/b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mNsolutions;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> (b * b) <a href="CppOperatorMinus.htm">-</a> (4.0 * a * c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mNsolutions <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mNsolutions;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mNsolutions <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSolution1 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>b/(2.0*a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mNsolutions;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rD <a href="CppOperatorAssign.htm">=</a> <a href="CppSqrt.htm">std::sqrt</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mNsolutions <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSolution1 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorPlus.htm">+</a> rD)/(2.0 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mSolution2 <a href="CppOperatorAssign.htm">=</a> (-b <a href="CppOperatorMinus.htm">-</a> rD)/(2.0 * a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mNsolutions;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetSolution1() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mNsolutions &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSolution1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetSolution2() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mNsolutions &gt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mSolution2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNsolutions;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mSolution1;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mSolution2;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>Leen Ammeraal. C++ (6th edition). 2001. ISBN: 90-395-1935-8.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
