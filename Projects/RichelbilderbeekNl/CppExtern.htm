<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>extern</title>
  <meta name="description" content="C++ extern"/>
  <meta name="keywords" content="C++ extern keyword"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExtern.htm">extern</a></h1>
<p>&nbsp;</p>
<p><a href="CppKeyword.htm">Keyword</a> to make a variable known over multiple units, but 
keeping the <a href="CppDeclaration.htm">declaration</a> and initialization <a href="CppLocal.htm">local</a> to a file (probably an 
<a href="CppImplementationFile.htm">implementation file (.cpp)</a>)</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>In the example below there are two <a href="CppInt.htm">integer</a> <a href="CppGlobal.htm">globals</a> (note: avoid using <a href="CppGlobal.htm">global</a>
data [1,2]). The <a href="CppInt.htm">int</a> x is <a href="CppDeclaration.htm">declared</a> and initialized in unit1.cpp, 
the <a href="CppInt.htm">int</a> y in <a href="CppDeclaration.htm">declared</a> in unit2.cpp and initialized by the 
locally unknown <a href="CppInt.htm">int</a> x. To read the values of both <a href="CppInt.htm">integers</a>, 
two getters are put in the <a href="CppHeaderFile.htm">header files</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>UnitMain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileAs4BUb.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Unit1.h"<br/>
<a href="CppInclude.htm">#include</a> "Unit2.h"<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetX() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 42);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetY() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 42);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Unit1.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileXoSFPh.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> Unit1H<br/>
<a href="CppDefine.htm">#define</a> Unit1H<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> GetX();<br/>
 <br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Unit1.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filey45JAI.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "Unit1.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 42;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> GetX() { <b><a href="CppReturn.htm">return</a></b> x; }<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Unit2.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="file7Fw8Yq.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> Unit2H<br/>
<a href="CppDefine.htm">#define</a> Unit2H<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> GetY();<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Unit2.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileE5zhgz.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "Unit2.h"<br/>
<br/>
<b><a href="CppExtern.htm">extern</a></b> <b><a href="CppInt.htm">int</a></b> x;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> x; <a href="CppComment.htm">//</a>Seems risky, dependent on module process order<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> GetY() { <b><a href="CppReturn.htm">return</a></b> y; }<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 10: 'Minimize global and shared data'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 18: 'Declare variables as locally as possible'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
