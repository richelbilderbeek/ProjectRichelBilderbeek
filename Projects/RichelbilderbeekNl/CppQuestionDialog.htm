<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QuestionDialog</title>
  <meta name="description" content="C++ QuestionDialog"/>
  <meta name="keywords" content="C++ QuestionDialog "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQuestionDialog.htm">QuestionDialog</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.627 at Wed Apr  2 15:18:03 2014
 -->
<p><a href="CppQuestionDialog.htm">QuestionDialog</a> is a dialog for <a href="CppQuestion.htm">Question</a>.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQuestionDialog/CppQuestionDialog.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQuestionDialog/CppQuestionDialog.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>/<a href="CppQuestionDialog.htm">questiondialog</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>/<a href="CppQuestionDialog.htm">questiondialog</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQuestionDialog/questiondialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQuestionDialog/questiondialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQuestionDialog.htm">QuestionDialog</a>, dialog <b><a href="CppFor.htm">for</a></b> <a href="CppQuestion.htm">Question</a><br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QUESTIONDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QUESTIONDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQuestion.htm">Question</a>;<br/>
<br/>
<a href="CppComment.htm">///</a>Dialog <b><a href="CppFor.htm">for</a></b> (a derived <b><a href="CppClass.htm">class</a></b> of) <a href="CppQuestion.htm">Question</a><br/>
<a href="CppComment.htm">///</a>For an <a href="CppOpenQuestion.htm">OpenQuestion</a> use an <a href="CppOpenQuestionDialog.htm">OpenQuestionDialog</a><br/>
<a href="CppComment.htm">///</a>For a <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> use a <a href="CppMultipleChoiceQuestionDialog.htm">MultipleChoiceQuestionDialog</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQuestionDialog.htm">QuestionDialog</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQuestionDialog.htm">QuestionDialog</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Run the dialog from the command line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Execute();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQuestion.htm">Question</a>&gt; Get<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> an answer has been submitted<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasSubmitted() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> !m_is_correct.empty(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/See <b><a href="CppIf.htm">if</a></b> the submitted answer is correct<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsAnswerCorrect() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Try to submit an answer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For an open <a href="CppQuestion.htm">question</a>, s will be the anwer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For a multiple choice <a href="CppQuestion.htm">question</a>, s will be the index of the answer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Submit will <b><a href="CppThrow.htm">throw</a></b> an <a href="CppException.htm">exception</a> <b><a href="CppIf.htm">if</a></b> s is invalid. For example,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppIf.htm">if</a></b> s is a word, where a multiple choice <a href="CppQuestion.htm">question</a> needs an index (like '2')<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Submit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppSignal.htm">signal</a> is <a href="CppEmit.htm">emitted</a> when the client requests to quit<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_signal_request_quit;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppSignal.htm">signal</a> is <a href="CppEmit.htm">emitted</a> when the client submits an answer, where<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the <b><a href="CppBool.htm">bool</a></b>ean indicates <b><a href="CppIf.htm">if</a></b> a correct answer was given<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> (<b><a href="CppBool.htm">bool</a></b>)&gt; m_signal_submitted;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQuestionDialog.htm">QuestionDialog</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppQuestionDialog.htm">QuestionDialog</a>*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppQuestionDialog.htm">QuestionDialog</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set whether the user has answered the client correct<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/and <b><a href="CppEmit.htm">emit</a></b> m_signal_submitted<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIsCorrect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_correct);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Was the submitted answer correct?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Emulates a <b><a href="CppBool.htm">bool</a></b>*:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_is_correct.empty() <a href="CppOperatorMinus.htm">-</a>&gt; <b><a href="CppNullptr.htm">nullptr</a></b> <a href="CppOperatorMinus.htm">-</a>&gt; <a href="CppIndeterminate.htm">indeterminate</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_is_correct[0] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorMinus.htm">-</a>&gt; <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_is_correct[0] <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorMinus.htm">-</a>&gt; <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Other values and sizes are invalid<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_is_correct;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQuestion.htm">Question</a>&gt; m_<a href="CppQuestion.htm">question</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> AskUserForInput() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENQUESTIONDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQuestionDialog/questiondialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQuestionDialog/questiondialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQuestionDialog.htm">QuestionDialog</a>, dialog <b><a href="CppFor.htm">for</a></b> <a href="CppQuestion.htm">Question</a><br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtQuestionDialog.htm">CppQtQuestionDialog</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQuestionDialog.htm">questiondialog</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppOpenQuestion.htm">openquestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQuestion.htm">question</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>()<br/>
&nbsp;&nbsp;: m_signal_request_quit{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_submitted{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_correct{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_is_correct.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Answer is <a href="CppIndeterminate.htm">indeterminate</a> at <a href="CppConstructor.htm">construct</a>ion");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!HasSubmitted());<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::AskUserForInput() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t;<br/>
&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(<a href="CppStdCin.htm">std::cin</a>,t);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::GetCorrectAnswers() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>()-&gt;GetAnswers();<br/>
<a href="CppComment.htm">//</a>}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::Execute()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;HasSubmitted());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!<b><a href="CppThis.htm">this</a></b>-&gt;HasSubmitted())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Please enter your answer: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> AskUserForInput();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_request_quit();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Submit(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;HasSubmitted());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Invalid input: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Please <b><a href="CppTry.htm">try</a></b> again or press enter to quit\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;IsAnswerCorrect())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Correct\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; correct_answers { <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>()-&gt;GetCorrectAnswers() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Incorrect, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (correct_answers.size() <a href="CppOperatorEqual.htm">==</a> 1 ? "the correct answer is: " : "the correct answers are: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: correct_answers)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.3";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-29: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-09-26: <a href="CppVersion.htm">version</a> 1.1: improved <b><a href="CppConst.htm">const</a></b>-correctness, added <b><a href="CppNoexcept.htm">noexcept</a></b>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-10-24: <a href="CppVersion.htm">version</a> 1.2: added Execute <b><a href="CppFor.htm">for</a></b> console <a href="CppApplication.htm">application</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-10-25: <a href="CppVersion.htm">version</a> 1.3: added testing to derived <b><a href="CppClass.htm">classes</a></b>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::IsAnswerCorrect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!HasSubmitted())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Cannot only check <b><a href="CppIf.htm">if</a></b> answer is correct, after submitting an answer");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSubmitted());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_is_correct.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_is_correct.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_is_correct[0] <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> m_is_correct[0] <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_is_correct[0] <a href="CppOperatorEqual.htm">==</a> 1;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::SetIsCorrect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_correct)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_is_correct.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only answer exactly once");<br/>
&nbsp;&nbsp;m_is_correct.push_back(is_correct ? 1 : 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_is_correct.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must have stored that the <a href="CppQuestion.htm">question</a> is answered");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_has_submitted <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(HasSubmitted());<br/>
<br/>
&nbsp;&nbsp;m_signal_submitted(IsAnswerCorrect());<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppQuestionDialog.htm">QuestionDialog</a>::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
