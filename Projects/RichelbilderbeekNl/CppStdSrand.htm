<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::srand</title>
  <meta name="description" content="C++ std::srand"/>
  <meta name="keywords" content="C++ std::srand srand"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSrand.htm">std::srand</a></h1>
<p>&nbsp;</p>
<p><a href="CppSrand.htm">std::srand</a> sets the seed of the random number sequence that can be created by <a href="CppRand.htm">std::rand</a> sequence.</p>
<p>&nbsp;</p>
<p>The code below demonstrates that after setting a seed of zero, the first 'randomly drawn' number is always the same.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a> () <br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSrand.htm">std::srand</a>(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRand.htm">std::rand</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example: <a href="CppRandomizeTimer.htm">RandomizeTimer</a></h2>
<p>&nbsp;</p>
<p><a href="CppRandomizeTimer.htm">RandomizeTimer</a> can be used to set a seed based on the system time.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
&nbsp;<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppSrand.htm">std::srand</a>(<a href="CppTime.htm">std::time</a>(0));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Setting the seed of the <a href="CppBoost.htm">Boost</a> Random library</h2>
<p>&nbsp;</p>
<p>The code below demonstrates that after setting a seed of zero, the first 'randomly drawn' number is always the same.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;boost/random/normal_distribution.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;boost/random/lagged_fibonacci.hpp&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A random number drawn from a normal distribution<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean  <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigma <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;boost::normal_distribution&lt;<b><a href="CppDouble.htm">double</a></b>&gt; norm_dist(mean, sigma);<br/>
&nbsp;&nbsp;boost::lagged_fibonacci19937 engine;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain a random seed<br/>
&nbsp;&nbsp;<a href="CppSrand.htm">std::srand</a>(<a href="CppStd.htm">std</a>::clock());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> seed <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>(); <a href="CppComment.htm">//</a>Must be of type <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>!<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the seed<br/>
&nbsp;&nbsp;engine.seed(seed);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the first value<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> firstValue <a href="CppOperatorAssign.htm">=</a> norm_dist.<b><a href="CppOperatorFunctionCall.htm">operator()</a></b>&lt;boost::lagged_fibonacci19937&gt;(engine);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain more random numbers<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>Check 10 times<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the seed again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engine.seed(seed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get a first temp value (why this is needed I don't know)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> temp <a href="CppOperatorAssign.htm">=</a> norm_dist.<b><a href="CppOperatorFunctionCall.htm">operator()</a></b>&lt;boost::lagged_fibonacci19937&gt;(engine);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the value that should be the same as firstValue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> norm_dist.<b><a href="CppOperatorFunctionCall.htm">operator()</a></b>&lt;boost::lagged_fibonacci19937&gt;(engine);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(value<a href="CppOperatorEqual.htm">==</a>firstValue);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
