<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>StkExample2</title>
  <meta name="description" content="C++ StkExample2"/>
  <meta name="keywords" content="C++ StkExample2 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStkExample2.htm">StkExample2</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug  5 12:02:41 2014
 -->
<p><img src="PicCpp11.png" alt="C++11"/><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppStkExample2.htm">STK example 2: random beeps</a> is an <a href="CppStk.htm">STK</a> example that generates random beeps infinitely (note: you cannot stop the program).
  The code was modified from <a href="https://ccrma.stanford.edu/software/stk/crealtime.html">https://ccrma.stanford.edu/software/stk/crealtime.html</a>.
</p>
<p>&nbsp;</p>
<p>
  Note that the original copy-pasted code resulted in multiple
  <a href="CppCompileWarning.htm">compile warnings</a> and that the
  <a href="CppLibrary.htm">library</a> style, design and example code looks
  different from the experts' recommendations
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppStkExample2/CppStkExample2.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStkExample2/CppStkExample2.pro" border = "1"><tr><td><code>
<br/>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri) #Or use the code below<br/>
# QT += core<br/>
# QT += gui<br/>
# greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
# <a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
#&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
# }<br/>
# <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
# unix {<br/>
#&nbsp;&nbsp; <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
# }<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri) #Or use the code below<br/>
# win32 {<br/>
#&nbsp;&nbsp; <a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
# }<br/>
<br/>
<br/>
# Install STK by:<br/>
# sudo apt-get install libstk0-dev<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Stk.pri) #Or use the code below<br/>
# <a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += /usr/include/stk<br/>
# <a href="CppQmakeLibs.htm">LIBS</a> += -L/usr/lib -lstk -lrtaudio<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStkExample2/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStkExample2/main.cpp" border = "1"><tr><td><code>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppStk.htm<br/>
<a href="CppComment.htm">//</a>Modified from crtsine<a href="CppImplementationFile.htm">.cpp</a> STK tutorial program<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/static_assert.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppTime.htm">time</a>r.hpp&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-variable"<br/>
<a href="CppInclude.htm">#include</a> "SineWave.h"<br/>
<a href="CppInclude.htm">#include</a> "RtAudio.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">//</a> This tick() <a href="CppFunction.htm">function</a> handles sample computation only. It will be<br/>
<a href="CppComment.htm">//</a> called automatically when the system needs a <b><a href="CppNew.htm">new</a></b> buffer of audio<br/>
<a href="CppComment.htm">//</a> samples.<br/>
<b><a href="CppInt.htm">int</a></b> tick(<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> *outputBuffer, <b><a href="CppVoid.htm">void</a></b> * <a href="CppComment.htm">/*</a>inputBuffer<a href="CppComment.htm">*/</a>,<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nBufferFrames,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppComment.htm">/*</a>stream<a href="CppTime.htm">Time</a><a href="CppComment.htm">*/</a>, RtAudioStreamStatus <a href="CppComment.htm">/*</a>status<a href="CppComment.htm">*/</a>,<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> *dataPointer)<br/>
{<br/>
&nbsp;&nbsp;stk::SineWave * <b><a href="CppConst.htm">const</a></b> sine <a href="CppOperatorAssign.htm">=</a> (stk::SineWave *) dataPointer;<br/>
&nbsp;&nbsp;stk::StkFloat * samples <a href="CppOperatorAssign.htm">=</a> (stk::StkFloat *) outputBuffer;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nBufferFrames; <a href="CppOperatorIncrement.htm">++</a>i )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*samples<a href="CppOperatorIncrement.htm">++</a> <a href="CppOperatorAssign.htm">=</a> sine-&gt;tick();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Set the global sample rate before creating <b><a href="CppClass.htm">class</a></b> <a href="CppInstance.htm">instances</a>.<br/>
&nbsp;&nbsp;stk::Stk::setSampleRate( 44100.0 );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Setup the RtAudio stream.<br/>
&nbsp;&nbsp;RtAudio dac;<br/>
&nbsp;&nbsp;RtAudio::StreamParameters parameters;<br/>
&nbsp;&nbsp;parameters.deviceId <a href="CppOperatorAssign.htm">=</a> dac.getDefaultOutputDevice();<br/>
&nbsp;&nbsp;parameters.nChannels <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<a href="CppBOOST_STATIC_ASSERT.htm">BOOST_STATIC_ASSERT</a>(<b><a href="CppSizeof.htm">sizeof</a></b>(stk::StkFloat) <a href="CppOperatorEqual.htm">==</a> 8);<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> bufferFrames <a href="CppOperatorAssign.htm">=</a> stk::RT_BUFFER_SIZE;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose a random beep frequency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stk::SineWave sine;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dac.openStream(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;parameters, <a href="CppNULL.htm">NULL</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RTAUDIO_FLOAT64,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>)stk::Stk::sampleRate(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;bufferFrames, &amp;tick,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppVoid.htm">void</a></b> *)&amp;sine );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sine.setFrequency(100.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>()%1000));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dac.startStream();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let it beep <b><a href="CppFor.htm">for</a></b> 0.2 seconds<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostTimer.htm">boost::timer</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (t.elapsed() &lt; 0.2 ) {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare <b><a href="CppFor.htm">for</a></b> next beep<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dac.closeStream();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
