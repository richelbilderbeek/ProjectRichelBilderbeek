<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>RichelbilderbeekNlSitemapGenerator</title>
  <meta name="description" content="C++ RichelbilderbeekNlSitemapGenerator"/>
  <meta name="keywords" content="C++ RichelbilderbeekNlSitemapGenerator "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolRichelbilderbeekNlSitemapGenerator.htm">RichelbilderbeekNlSitemapGenerator</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.627 at Wed Apr  2 15:23:39 2014
 -->
<p><a href="ToolRichelbilderbeekNlSitemapGenerator.htm">RichelbilderbeekNlSitemapGenerator</a> is a <a href="Tools.htm">tool</a> to generate the sitemap of my site.</p>
<p>&nbsp;</p>
<p><a href="ToolRichelbilderbeekNlSitemapGenerator.htm">RichelbilderbeekNlSitemapGenerator</a> is programmed in <a href="Cpp.htm">C++</a> using <a href="CppQtCreator.htm">Qt Creator</a> 2.0.0. It uses the <a href="CppBoost.htm">Boost</a>, <a href="CppQt.htm">Qt</a> and <a href="CppStl.htm">STL</a> <a href="CppLibrary.htm">libraries</a>.</p>
<p>&nbsp;</p>
<p>Version 1.0 of <a href="ToolRichelbilderbeekNlSitemapGenerator.htm">RichelbilderbeekNlSitemapGenerator</a> was programmed in <a href="Cpp.htm">C++</a> using  <a href="CppBuilder.htm">C++ Builder</a> 6.0. It uses the <a href="CppStl.htm">STL</a>, <a href="CppVcl.htm">VCL</a> and <a href="CppBoost.htm">Boost</a> <a href="CppLibrary.htm">libraries</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolRichelbilderbeekNlSitemapGenerator_2_0.png">View a screenshot of RichelbilderbeekNlSitemapGenerator' (v. 2.0)</a></li>
  <li><a href="ToolRichelbilderbeekNlSitemapGeneratorSource_2_0.zip">Download the 'RichelbilderbeekNlSitemapGenerator' source code (v. 2.0)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="ToolRichelbilderbeekNlSitemapGenerator.htm">RichelbilderbeekNlSitemapGenerator</a> history</h2>
<p>&nbsp;</p>
<ul>
  <li>YYYY-MM-DD: version X.Y: [description]</li>
  <li>2009-08-26: version 1.0: Initial Windows version, programmed in <a href="CppBuilder.htm">C++ Builder</a></li>
  <li>2010-08-08: version 2.0: <a href="ToolRichelbilderbeekNlSitemapGenerator.htm">RichelbilderbeekNlSitemapGenerator</a> is now cross-platform, programmed in <a href="CppQtCreator.htm">Qt Creator</a> and generates the files it needs itself</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="ToolRichelbilderbeekNlSitemapGenerator.htm">RichelbilderbeekNlSitemapGenerator</a> older downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolRichelbilderbeekNlSitemapGeneratorExe_1_0.zip">Download the 'RichelbilderbeekNlSitemapGenerator' Windows executable (v. 1.0)(zip)</a></li>
  <li><a href="ToolRichelbilderbeekNlSitemapGeneratorSource_1_0.zip">Download the 'RichelbilderbeekNlSitemapGenerator' source code (v. 1.0)(zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.10 (saucy)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.7.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorConsole.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorConsole.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">CppAbout</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/<a href="CppFileIo.htm">CppFileIo</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppHelp.htm">CppHelp</a>/<a href="CppHelp.htm">CppHelp</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">CppTrace</a>.pri)<br/>
<br/>
include(../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorDesktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorDesktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">CppAbout</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppFileIo.htm">CppFileIo</a>/<a href="CppFileIo.htm">CppFileIo</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppHelp.htm">CppHelp</a>/<a href="CppHelp.htm">CppHelp</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">CppTrace</a>.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>.pri)<br/>
<br/>
include(../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>Desktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/sitemapgeneratormenudialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/sitemapgeneratormenudialog.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>Console.pri)<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.qrc<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/qtsitemapgeneratormenudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/qtsitemapgenerator<a href="CppMain.htm">main</a>dialog.ui<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/qtsitemapgeneratormenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/qtsitemapgenerator<a href="CppMain.htm">main</a>dialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/qtsitemapgeneratormenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/qtsitemapgenerator<a href="CppMain.htm">main</a>dialog.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorWebsite.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGeneratorWebsite.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>Console.pri)<br/>
<a href="CppQmakeSources.htm">SOURCES</a> +=<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> +=<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RichelbilderbeekNlSitemapGenerator, generates the richelbilderbeek.nl sitemap<br/>
Copyright (C) 2010-2012 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>menudialog.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; args { <a href="CppRibi.htm">ribi</a>::MenuDialog::<a href="CppConvert.htm">Convert</a>Arguments(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>) };<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d.Execute(args);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RichelbilderbeekNlSitemapGenerator, generates the richelbilderbeek.nl sitemap<br/>
Copyright (C) 2010-2012 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>menudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RichelbilderbeekNlSitemapGenerator, generates the richelbilderbeek.nl sitemap<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> SITEMAPGENERATORMAINDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> SITEMAPGENERATORMAINDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog&amp;);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog&amp;);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * e);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetCurrentFolder.htm">GetCurrentFolder</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetCurrentFolder.htm">GetCurrentFolder</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetCurrentFolder.htm">GetCurrentFolder</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetCurrentFolder.htm">GetCurrentFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnLogMessage(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; msg) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SITEMAPGENERATORMAINDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RichelbilderbeekNlSitemapGenerator, generates the richelbilderbeek.nl sitemap<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>maindialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>menudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::~<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::keyPressEvent(e);<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::<a href="CppGetCurrentFolder.htm">GetCurrentFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>(s);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::<a href="CppGetCurrentFolder.htm">GetCurrentFolder</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQString.htm">QString</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::<a href="CppApplication.htm">application</a>DirPath();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.toStdString();<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::on_button_start_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; args;<br/>
&nbsp;&nbsp;args.push_back("<a href="CppOperatorDecrement.htm">--</a>page");<br/>
&nbsp;&nbsp;args.push_back(ui-&gt;edit_website-&gt;text().toStdString());<br/>
&nbsp;&nbsp;args.push_back("<a href="CppOperatorDecrement.htm">--</a>exe");<br/>
&nbsp;&nbsp;args.push_back(<a href="CppGetCurrentFolder.htm">GetCurrentFolder</a>());<br/>
<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;clear();<br/>
<br/>
&nbsp;&nbsp;SitemapGeneratorMenuDialog d;<br/>
&nbsp;&nbsp;d.m_signal_log.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::OnLogMessage,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> result <a href="CppOperatorAssign.htm">=</a> d.Execute(args);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"SitemapGeneratorMenuDialog <b><a href="CppReturn.htm">return</a></b>ed with error code "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(result)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;appendPlainText(text.c_str());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::OnLogMessage(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; msg) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;ui-&gt;text_output-&gt;appendPlainText(msg.c_str());<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RichelbilderbeekNlSitemapGenerator, generates the richelbilderbeek.nl sitemap<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTSITEMAPGENERATORMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTSITEMAPGENERATORMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_quit_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSITEMAPGENERATORMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RichelbilderbeekNlSitemapGenerator, generates the richelbilderbeek.nl sitemap<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>menudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>menudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::~<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (e-&gt;key()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::keyPressEvent(e);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::on_button_start_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SitemapGeneratorMainDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> <a href="CppAbout.htm">about</a> <a href="CppOperatorAssign.htm">=</a> SitemapGeneratorMenuDialog().GetAbout();<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">about</a>.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
<br/>
&nbsp;&nbsp;<a href="CppQtAboutDialog.htm">QtAboutDialog</a> d(<a href="CppAbout.htm">about</a>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::on_button_quit_clicked()<br/>
{<br/>
&nbsp;&nbsp;close();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SitemapGeneratorMenuDialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/sitemap_gen.py</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/sitemap_gen.py" border = "1"><tr><td><code>
#!/usr/bin/env python<br/>
#<br/>
# Copyright (c) 2004, 2005 Google Inc.<br/>
# All rights reserved.<br/>
#<br/>
# Redistribution and use in source and binary forms, with or without<br/>
# modification, are permitted provided that the following conditions<br/>
# are met:<br/>
#<br/>
# * Redistributions of source code must retain the above copyright<br/>
#&nbsp;&nbsp; notice, this list of conditions and the following disclaimer.<br/>
#<br/>
# * Redistributions in binary form must reproduce the above copyright<br/>
#&nbsp;&nbsp; notice, this list of conditions and the following disclaimer in<br/>
#&nbsp;&nbsp; the documentation and/or other materials provided with the<br/>
#&nbsp;&nbsp; distribution.<br/>
#<br/>
# * Neither the name of Google nor the names of its contributors may<br/>
#&nbsp;&nbsp; be used to endorse or promote products derived from this software<br/>
#&nbsp;&nbsp; without specific prior written permission.<br/>
#<br/>
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS<br/>
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT<br/>
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS<br/>
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE<br/>
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,<br/>
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,<br/>
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;<br/>
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER<br/>
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT<br/>
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN<br/>
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<br/>
# POSSIBILITY OF SUCH DAMAGE.<br/>
#<br/>
#<br/>
# The sitemap_gen.py script is written in Python 2.2 and released to<br/>
# the open source community for continuous improvements under the BSD<br/>
# 2.0 new license, which can be found at:<br/>
#<br/>
#&nbsp;&nbsp; http://www.opensource.org/licenses/bsd-license.php<br/>
#<br/>
<br/>
__usage__ = \<br/>
"""A simple script to automatically produce sitemaps for a webserver,<br/>
in the Google Sitemap Protocol (GSP).<br/>
<br/>
Usage: python sitemap_gen.py --config=config.xml [--help] [--testing]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--config=config.xml, specifies config file location<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--help, displays usage message<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--testing, specified when user is experimenting<br/>
"""<br/>
<br/>
# Please be careful that all syntax used in this file can be parsed on<br/>
# Python 1.5 -- this version check is not evaluated until after the<br/>
# entire file has been parsed.<br/>
import sys<br/>
if sys.hexversion &lt; 0x02020000:<br/>
&nbsp;&nbsp;print 'This script requires Python 2.2 or later.'<br/>
&nbsp;&nbsp;print 'Currently run with version: %s' % sys.version<br/>
&nbsp;&nbsp;sys.exit(1)<br/>
<br/>
import fnmatch<br/>
import glob<br/>
import gzip<br/>
import md5<br/>
import os<br/>
import re<br/>
import stat<br/>
import time<br/>
import types<br/>
import urllib<br/>
import urlparse<br/>
import xml.sax<br/>
<br/>
# True and False were introduced in Python2.2.2<br/>
try:<br/>
&nbsp;&nbsp;testTrue=True<br/>
&nbsp;&nbsp;del testTrue<br/>
except NameError:<br/>
&nbsp;&nbsp;True=1<br/>
&nbsp;&nbsp;False=0<br/>
<br/>
# Text encodings<br/>
ENC_ASCII = 'ASCII'<br/>
ENC_UTF8&nbsp;&nbsp;= 'UTF-8'<br/>
ENC_IDNA&nbsp;&nbsp;= 'IDNA'<br/>
ENC_ASCII_LIST = ['ASCII', 'US-ASCII', 'US', 'IBM367', 'CP367', 'ISO646-US'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'ISO_646.IRV:1991', 'ISO-IR-6', 'ANSI_X3.4-1968',<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'ANSI_X3.4-1986', 'CPASCII' ]<br/>
ENC_DEFAULT_LIST = ['ISO-8859-1', 'ISO-8859-2', 'ISO-8859-5']<br/>
<br/>
# Maximum number of urls in each sitemap, before next Sitemap is created<br/>
MAXURLS_PER_SITEMAP = 50000<br/>
<br/>
# Suffix on a Sitemap index file<br/>
SITEINDEX_SUFFIX = '_index.xml'<br/>
<br/>
# Regular expressions tried for extracting URLs from access logs.<br/>
ACCESSLOG_CLF_PATTERN = re.compile(<br/>
&nbsp;&nbsp;r'.+\s+"([^\s]+)\s+([^\s]+)\s+HTTP/\d+\.\d+"\s+200\s+.*'<br/>
&nbsp;&nbsp;)<br/>
<br/>
# Match patterns for lastmod attributes<br/>
LASTMOD_PATTERNS = map(re.compile, [<br/>
&nbsp;&nbsp;r'^\d\d\d\d$',<br/>
&nbsp;&nbsp;r'^\d\d\d\d-\d\d$',<br/>
&nbsp;&nbsp;r'^\d\d\d\d-\d\d-\d\d$',<br/>
&nbsp;&nbsp;r'^\d\d\d\d-\d\d-\d\dT\d\d:\d\dZ$',<br/>
&nbsp;&nbsp;r'^\d\d\d\d-\d\d-\d\dT\d\d:\d\d[+-]\d\d:\d\d$',<br/>
&nbsp;&nbsp;r'^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?Z$',<br/>
&nbsp;&nbsp;r'^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?[+-]\d\d:\d\d$',<br/>
&nbsp;&nbsp;])<br/>
<br/>
# Match patterns for changefreq attributes<br/>
CHANGEFREQ_PATTERNS = [<br/>
&nbsp;&nbsp;'always', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'never'<br/>
&nbsp;&nbsp;]<br/>
<br/>
# XML formats<br/>
SITEINDEX_HEADER&nbsp;&nbsp; = \<br/>
&nbsp;&nbsp;'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n' \<br/>
&nbsp;&nbsp;'&lt;sitemapindex\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;xmlns="http://www.google.com/schemas/sitemap/0.84"\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;xsi:schemaLocation="http://www.google.com/schemas/sitemap/0.84\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.google.com/schemas/sitemap/0.84/' \<br/>
&nbsp;&nbsp;'siteindex.xsd"&gt;\n'<br/>
SITEINDEX_FOOTER&nbsp;&nbsp; = '&lt;/sitemapindex&gt;\n'<br/>
SITEINDEX_ENTRY&nbsp;&nbsp;&nbsp;&nbsp;= \<br/>
&nbsp;&nbsp;' &lt;sitemap&gt;\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;&lt;loc&gt;%(loc)s&lt;/loc&gt;\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;&lt;lastmod&gt;%(lastmod)s&lt;/lastmod&gt;\n' \<br/>
&nbsp;&nbsp;' &lt;/sitemap&gt;\n'<br/>
SITEMAP_HEADER&nbsp;&nbsp;&nbsp;&nbsp; = \<br/>
&nbsp;&nbsp;'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n' \<br/>
&nbsp;&nbsp;'&lt;urlset\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;xmlns="http://www.google.com/schemas/sitemap/0.84"\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;xsi:schemaLocation="http://www.google.com/schemas/sitemap/0.84\n' \<br/>
&nbsp;&nbsp;'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.google.com/schemas/sitemap/0.84/' \<br/>
&nbsp;&nbsp;'sitemap.xsd"&gt;\n'<br/>
SITEMAP_FOOTER&nbsp;&nbsp;&nbsp;&nbsp; = '&lt;/urlset&gt;\n'<br/>
SITEURL_XML_PREFIX = ' &lt;url&gt;\n'<br/>
SITEURL_XML_SUFFIX = ' &lt;/url&gt;\n'<br/>
<br/>
# Search engines to notify with the updated sitemaps<br/>
#<br/>
# This list is very non-obvious in what's going on.&nbsp;&nbsp;Here's the gist:<br/>
# Each item in the list is a 6-tuple of items.&nbsp;&nbsp;The first 5 are "almost"<br/>
# the same as the input arguments to urlparse.urlunsplit():<br/>
#&nbsp;&nbsp; 0 - schema<br/>
#&nbsp;&nbsp; 1 - netloc<br/>
#&nbsp;&nbsp; 2 - path<br/>
#&nbsp;&nbsp; 3 - query&nbsp;&nbsp;&nbsp;&nbsp;&lt;-- EXCEPTION: specify a query map rather than a string<br/>
#&nbsp;&nbsp; 4 - fragment<br/>
# Additionally, add item 5:<br/>
#&nbsp;&nbsp; 5 - query attribute that should be set to the new Sitemap URL<br/>
# Clear as mud, I know.<br/>
NOTIFICATION_SITES = [<br/>
&nbsp;&nbsp;('http', 'www.google.com', 'webmasters/sitemaps/ping', {}, '', 'sitemap')<br/>
&nbsp;&nbsp;]<br/>
<br/>
<br/>
class Error(Exception):<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Base exception class.&nbsp;&nbsp;In this module we tend not to use our own exception<br/>
&nbsp;&nbsp;types for very much, but they come in very handy on XML parsing with SAX.<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;pass<br/>
#end class Error<br/>
<br/>
<br/>
class SchemaError(Error):<br/>
&nbsp;&nbsp;"""Failure to process an XML file according to the schema we know."""<br/>
&nbsp;&nbsp;pass<br/>
#end class SchemeError<br/>
<br/>
<br/>
class Encoder:<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Manages wide-character/narrow-character conversions for just about all<br/>
&nbsp;&nbsp;text that flows into or out of the script.<br/>
<br/>
&nbsp;&nbsp;You should always use this class for string coercion, as opposed to<br/>
&nbsp;&nbsp;letting Python handle coercions automatically.&nbsp;&nbsp;Reason: Python<br/>
&nbsp;&nbsp;usually assumes ASCII (7-bit) as a default narrow character encoding,<br/>
&nbsp;&nbsp;which is not the kind of data we generally deal with.<br/>
<br/>
&nbsp;&nbsp;General high-level methodologies used in sitemap_gen:<br/>
<br/>
&nbsp;&nbsp;[PATHS]<br/>
&nbsp;&nbsp;File system paths may be wide or narrow, depending on platform.<br/>
&nbsp;&nbsp;This works fine, just be aware of it and be very careful to not<br/>
&nbsp;&nbsp;mix them.&nbsp;&nbsp;That is, if you have to pass several file path arguments<br/>
&nbsp;&nbsp;into a library call, make sure they are all narrow or all wide.<br/>
&nbsp;&nbsp;This class has MaybeNarrowPath() which should be called on every<br/>
&nbsp;&nbsp;file system path you deal with.<br/>
<br/>
&nbsp;&nbsp;[URLS]<br/>
&nbsp;&nbsp;URL locations are stored in Narrow form, already escaped.&nbsp;&nbsp;This has the<br/>
&nbsp;&nbsp;benefit of keeping escaping and encoding as close as possible to the format<br/>
&nbsp;&nbsp;we read them in.&nbsp;&nbsp;The downside is we may end up with URLs that have<br/>
&nbsp;&nbsp;intermingled encodings -- the root path may be encoded in one way<br/>
&nbsp;&nbsp;while the filename is encoded in another.&nbsp;&nbsp;This is obviously wrong, but<br/>
&nbsp;&nbsp;it should hopefully be an issue hit by very few users.&nbsp;&nbsp;The workaround<br/>
&nbsp;&nbsp;from the user level (assuming they notice) is to specify a default_encoding<br/>
&nbsp;&nbsp;parameter in their config file.<br/>
<br/>
&nbsp;&nbsp;[OTHER]<br/>
&nbsp;&nbsp;Other text, such as attributes of the URL class, configuration options,<br/>
&nbsp;&nbsp;etc, are generally stored in Unicode for simplicity.<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._user&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# User-specified default encoding<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._learned&nbsp;&nbsp; = []&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Learned default encodings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._widefiles = False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # File system can be wide<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Can the file system be Unicode?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._widefiles = os.path.supports_unicode_filenames<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except AttributeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._widefiles = sys.getwindowsversion() == os.VER_PLATFORM_WIN32_NT<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except AttributeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Try to guess a working default<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoding = sys.getfilesystemencoding()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if encoding and not (encoding.upper() in ENC_ASCII_LIST):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._learned = [ encoding ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except AttributeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self._learned:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoding = sys.getdefaultencoding()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if encoding and not (encoding.upper() in ENC_ASCII_LIST):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._learned = [ encoding ]<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# If we had no guesses, start with some European defaults<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self._learned:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._learned = ENC_DEFAULT_LIST<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def SetUserEncoding(self, encoding):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._user = encoding<br/>
&nbsp;&nbsp;#end def SetUserEncoding<br/>
<br/>
&nbsp;&nbsp;def NarrowText(self, text, encoding):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Narrow a piece of arbitrary text """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if type(text) != types.UnicodeType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Try the passed in preference<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if encoding:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = text.encode(encoding)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not encoding in self._learned:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._learned.append(encoding)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except UnicodeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except LookupError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Unknown encoding: %s' % encoding)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Try the user preference<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._user:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text.encode(self._user)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except UnicodeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except LookupError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = self._user<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._user = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Unknown default_encoding: %s' % temp)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Look through learned defaults, knock any failing ones out of the list<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while self._learned:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text.encode(self._learned[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;del self._learned[0]<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# When all other defaults are exhausted, use UTF-8<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text.encode(ENC_UTF8)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except UnicodeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Something is seriously wrong if we get to here<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return text.encode(ENC_ASCII, 'ignore')<br/>
&nbsp;&nbsp;#end def NarrowText<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;def MaybeNarrowPath(self, text):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Paths may be allowed to stay wide """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._widefiles:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return self.NarrowText(text, None)<br/>
&nbsp;&nbsp;#end def MaybeNarrowPath<br/>
<br/>
&nbsp;&nbsp;def WidenText(self, text, encoding):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Widen a piece of arbitrary text """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if type(text) != types.StringType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Try the passed in preference<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if encoding:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = unicode(text, encoding)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not encoding in self._learned:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._learned.append(encoding)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except UnicodeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except LookupError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Unknown encoding: %s' % encoding)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Try the user preference<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._user:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return unicode(text, self._user)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except UnicodeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except LookupError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = self._user<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._user = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Unknown default_encoding: %s' % temp)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Look through learned defaults, knock any failing ones out of the list<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while self._learned:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return unicode(text, self._learned[0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;del self._learned[0]<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# When all other defaults are exhausted, use UTF-8<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return unicode(text, ENC_UTF8)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except UnicodeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Getting here means it wasn't UTF-8 and we had no working default.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# We really don't have anything "right" we can do anymore.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Unrecognized encoding in text: %s' % text)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self._user:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('You may need to set a default_encoding in your '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'configuration file.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return text.decode(ENC_ASCII, 'ignore')<br/>
&nbsp;&nbsp;#end def WidenText<br/>
#end class Encoder<br/>
encoder = Encoder()<br/>
<br/>
<br/>
class Output:<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Exposes logging functionality, and tracks how many errors<br/>
&nbsp;&nbsp;we have thus output.<br/>
<br/>
&nbsp;&nbsp;Logging levels should be used as thus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Fatal&nbsp;&nbsp;&nbsp;&nbsp; -- extremely sparingly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Error&nbsp;&nbsp;&nbsp;&nbsp; -- config errors, entire blocks of user 'intention' lost<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Warn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- individual URLs lost<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Log(,0)&nbsp;&nbsp; -- Un-suppressable text that's not an error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Log(,1)&nbsp;&nbsp; -- touched files, major actions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Log(,2)&nbsp;&nbsp; -- parsing notes, filtered or duplicated URLs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Log(,3)&nbsp;&nbsp; -- each accepted URL<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.num_errors&nbsp;&nbsp;&nbsp;&nbsp;= 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Count of errors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.num_warns&nbsp;&nbsp;&nbsp;&nbsp; = 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Count of warnings<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._errors_shown = {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Shown errors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._warns_shown&nbsp;&nbsp;= {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Shown warnings<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._verbose&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Level of verbosity<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def Log(self, text, level):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Output a blurb of diagnostic text, if the verbose level allows it """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if text:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = encoder.NarrowText(text, None)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._verbose &gt;= level:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print text<br/>
&nbsp;&nbsp;#end def Log<br/>
<br/>
&nbsp;&nbsp;def Warn(self, text):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Output and count a warning.&nbsp;&nbsp;Suppress duplicate warnings. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if text:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = encoder.NarrowText(text, None)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash = md5.new(text).digest()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not self._warns_shown.has_key(hash):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._warns_shown[hash] = 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print '[WARNING] ' + text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.Log('(suppressed) [WARNING] ' + text, 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.num_warns = self.num_warns + 1<br/>
&nbsp;&nbsp;#end def Warn<br/>
<br/>
&nbsp;&nbsp;def Error(self, text):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Output and count an error.&nbsp;&nbsp;Suppress duplicate errors. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if text:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = encoder.NarrowText(text, None)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash = md5.new(text).digest()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not self._errors_shown.has_key(hash):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._errors_shown[hash] = 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print '[ERROR] ' + text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.Log('(suppressed) [ERROR] ' + text, 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.num_errors = self.num_errors + 1<br/>
&nbsp;&nbsp;#end def Error<br/>
<br/>
&nbsp;&nbsp;def Fatal(self, text):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Output an error and terminate the program. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if text:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = encoder.NarrowText(text, None)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print '[FATAL] ' + text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print 'Fatal error.'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sys.exit(1)<br/>
&nbsp;&nbsp;#end def Fatal<br/>
<br/>
&nbsp;&nbsp;def SetVerbose(self, level):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Sets the verbose level. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if type(level) != types.IntType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level = int(level)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (level &gt;= 0) and (level &lt;= 3):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._verbose = level<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except ValueError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.Error('Verbose level (%s) must be between 0 and 3 inclusive.' % level)<br/>
&nbsp;&nbsp;#end def SetVerbose<br/>
#end class Output<br/>
output = Output()<br/>
<br/>
<br/>
class URL(object):<br/>
&nbsp;&nbsp;""" URL is a smart structure grouping together the properties we<br/>
&nbsp;&nbsp;care about for a single web reference. """<br/>
&nbsp;&nbsp;__slots__ = 'loc', 'lastmod', 'changefreq', 'priority'<br/>
<br/>
&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.loc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# URL -- in Narrow characters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.lastmod&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# ISO8601 timestamp of last modify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.changefreq = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Text term for update frequency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.priority&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Float between 0 and 1 (inc)<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def __cmp__(self, other):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self.loc &lt; other.loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self.loc &gt; other.loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return 0<br/>
&nbsp;&nbsp;#end def __cmp__<br/>
<br/>
&nbsp;&nbsp;def TrySetAttribute(self, attribute, value):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Attempt to set the attribute to the value, with a pretty try<br/>
&nbsp;&nbsp;&nbsp;&nbsp;block around it.&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if attribute == 'loc':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.loc = self.Canonicalize(value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setattr(self, attribute, value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except AttributeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Unknown URL attribute: %s' % attribute)<br/>
&nbsp;&nbsp;#end def TrySetAttribute<br/>
<br/>
&nbsp;&nbsp;def IsAbsolute(loc):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Decide if the URL is absolute or not """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;narrow = encoder.NarrowText(loc, None)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(scheme, netloc, path, query, frag) = urlparse.urlsplit(narrow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (not scheme) or (not netloc):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return True<br/>
&nbsp;&nbsp;#end def IsAbsolute<br/>
&nbsp;&nbsp;IsAbsolute = staticmethod(IsAbsolute)<br/>
<br/>
&nbsp;&nbsp;def Canonicalize(loc):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Do encoding and canonicalization on a URL string """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return loc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Let the encoder try to narrow it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;narrow = encoder.NarrowText(loc, None)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Escape components individually<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(scheme, netloc, path, query, frag) = urlparse.urlsplit(narrow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;unr&nbsp;&nbsp;&nbsp;&nbsp;= '-._~'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sub&nbsp;&nbsp;&nbsp;&nbsp;= '!$&amp;\'()*+,;='<br/>
&nbsp;&nbsp;&nbsp;&nbsp;netloc = urllib.quote(netloc, unr + sub + '%:@/[]')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;&nbsp; = urllib.quote(path,&nbsp;&nbsp; unr + sub + '%:@/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;query&nbsp;&nbsp;= urllib.quote(query,&nbsp;&nbsp;unr + sub + '%:@/?')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;frag&nbsp;&nbsp; = urllib.quote(frag,&nbsp;&nbsp; unr + sub + '%:@/?')<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Try built-in IDNA encoding on the netloc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ignore, widenetloc, ignore, ignore, ignore) = urlparse.urlsplit(loc)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for c in widenetloc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if c &gt;= unichr(128):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;netloc = widenetloc.encode(ENC_IDNA)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;netloc = urllib.quote(netloc, unr + sub + '%:@/[]')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except UnicodeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# urlsplit must have failed, based on implementation differences in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# library.&nbsp;&nbsp;There is not much we can do here, except ignore it.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except LookupError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('An International Domain Name (IDN) is being used, but this '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'version of Python does not have support for IDNA encoding. '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' (IDNA support was introduced in Python 2.3)&nbsp;&nbsp;The encoding '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'we have used instead is wrong and will probably not yield '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'valid URLs.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bad_netloc = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if '%' in netloc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bad_netloc = True<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Put it all back together<br/>
&nbsp;&nbsp;&nbsp;&nbsp;narrow = urlparse.urlunsplit((scheme, netloc, path, query, frag))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# I let '%' through.&nbsp;&nbsp;Fix any that aren't pre-existing escapes.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;HEXDIG = '0123456789abcdefABCDEF'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;&nbsp; = narrow.split('%')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;narrow = list[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;del list[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for item in list:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (len(item) &gt;= 2) and (item[0] in HEXDIG) and (item[1] in HEXDIG):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;narrow = narrow + '%' + item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;narrow = narrow + '%25' + item<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Issue a warning if this is a bad URL<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if bad_netloc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Invalid characters in the host or domain portion of a URL: '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ narrow)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return narrow<br/>
&nbsp;&nbsp;#end def Canonicalize<br/>
&nbsp;&nbsp;Canonicalize = staticmethod(Canonicalize)<br/>
<br/>
&nbsp;&nbsp;def Validate(self, base_url, allow_fragment):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Verify the data in this URL is well-formed, and override if not. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert type(base_url) == types.StringType<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Test (and normalize) the ref<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self.loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Empty URL')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if allow_fragment:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.loc = urlparse.urljoin(base_url, self.loc)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self.loc.startswith(base_url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Discarded URL for not starting with the base_url: %s' %<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.loc)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.loc = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Test the lastmod<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self.lastmod:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.lastmod = self.lastmod.upper()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for pattern in LASTMOD_PATTERNS:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = pattern.match(self.lastmod)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if match:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not match:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Lastmod "%s" does not appear to be in ISO8601 format on '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'URL: %s' % (self.lastmod, self.loc))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.lastmod = None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Test the changefreq<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self.changefreq:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.changefreq = self.changefreq.lower()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for pattern in CHANGEFREQ_PATTERNS:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self.changefreq == pattern:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = True<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not match:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Changefreq "%s" is not a valid change frequency on URL '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;': %s' % (self.changefreq, self.loc))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.changefreq = None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Test the priority<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self.priority:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;priority = -1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;priority = float(self.priority)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except ValueError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (priority &lt; 0.0) or (priority &gt; 1.0):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Priority "%s" is not a number between 0 and 1 inclusive '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'on URL: %s' % (self.priority, self.loc))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.priority = None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return True<br/>
&nbsp;&nbsp;#end def Validate<br/>
<br/>
&nbsp;&nbsp;def MakeHash(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Provides a uniform way of hashing URLs """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self.loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self.loc.endswith('/'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return md5.new(self.loc[:-1]).digest()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return md5.new(self.loc).digest()<br/>
&nbsp;&nbsp;#end def MakeHash<br/>
<br/>
&nbsp;&nbsp;def Log(self, prefix='URL', level=3):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Dump the contents, empty or not, to the log. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out = prefix + ':'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for attribute in self.__slots__:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = getattr(self, attribute)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not value:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = ''<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = out + ('&nbsp;&nbsp;%s=[%s]' % (attribute, value))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('%s' % encoder.NarrowText(out, None), level)<br/>
&nbsp;&nbsp;#end def Log<br/>
<br/>
&nbsp;&nbsp;def WriteXML(self, file):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Dump non-empty contents to the output file, in XML format. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self.loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out = SITEURL_XML_PREFIX<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for attribute in self.__slots__:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = getattr(self, attribute)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if value:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if type(value) == types.UnicodeType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = encoder.NarrowText(value, None)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif type(value) != types.StringType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = str(value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = xml.sax.saxutils.escape(value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = out + ('&nbsp;&nbsp;&lt;%s&gt;%s&lt;/%s&gt;\n' % (attribute, value, attribute))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out = out + SITEURL_XML_SUFFIX<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.write(out)<br/>
&nbsp;&nbsp;#end def WriteXML<br/>
#end class URL<br/>
<br/>
<br/>
class Filter:<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;A filter on the stream of URLs we find.&nbsp;&nbsp;A filter is, in essence,<br/>
&nbsp;&nbsp;a wildcard applied to the stream.&nbsp;&nbsp;You can think of this as an<br/>
&nbsp;&nbsp;operator that returns a tri-state when given a URL:<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;True&nbsp;&nbsp;-- this URL is to be included in the sitemap<br/>
&nbsp;&nbsp;&nbsp;&nbsp;None&nbsp;&nbsp;-- this URL is undecided<br/>
&nbsp;&nbsp;&nbsp;&nbsp;False -- this URL is to be dropped from the sitemap<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self, attributes):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._wildcard&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Pattern for wildcard match<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._regexp&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Pattern for regexp match<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._pass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # "Drop" filter vs. "Pass" filter<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not ValidateAttributes('FILTER', attributes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;('pattern', 'type', 'action')):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Check error count on the way in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;num_errors = output.num_errors<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Fetch the attributes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pattern = attributes.get('pattern')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;= attributes.get('type', 'wildcard')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;action&nbsp;&nbsp;= attributes.get('action', 'drop')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if type:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type = type.lower()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if action:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action = action.lower()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Verify the attributes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not pattern:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('On a filter you must specify a "pattern" to match')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif (not type) or ((type != 'wildcard') and (type != 'regexp')):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('On a filter you must specify either \'type="wildcard"\' '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'or \'type="regexp"\'')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif (action != 'pass') and (action != 'drop'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('If you specify a filter action, it must be either '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '\'action="pass"\' or \'action="drop"\'')<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Set the rule<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if action == 'drop':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._pass = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif action == 'pass':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._pass = True<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if type == 'wildcard':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._wildcard = pattern<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif type == 'regexp':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._regexp = re.compile(pattern)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except re.error:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Bad regular expression: %s' %&nbsp;&nbsp;pattern)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Log the final results iff we didn't add any errors<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if num_errors == output.num_errors:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Filter: %s any URL that matches %s "%s"' %<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (action, type, pattern), 2)<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def Apply(self, url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Process the URL, as above. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (not url) or (not url.loc):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._wildcard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if fnmatch.fnmatchcase(url.loc, self._wildcard):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return self._pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._regexp:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._regexp.search(url.loc):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return self._pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert False # unreachable<br/>
&nbsp;&nbsp;#end def Apply<br/>
#end class Filter<br/>
<br/>
<br/>
class InputURL:<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Each Input class knows how to yield a set of URLs from a data source.<br/>
<br/>
&nbsp;&nbsp;This one handles a single URL, manually specified in the config file.<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self, attributes):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._url = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The lonely URL<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not ValidateAttributes('URL', attributes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;('href', 'lastmod', 'changefreq', 'priority')):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;url = URL()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for attr in attributes.keys():<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if attr == 'href':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.TrySetAttribute('loc', attributes[attr])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.TrySetAttribute(attr, attributes[attr])<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not url.loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Url entries must have an href attribute.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._url = url<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Input: From URL "%s"' % self._url.loc, 2)<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def ProduceURLs(self, consumer):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Produces URLs from our data source, hands them in to the consumer. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._url:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;consumer(self._url, True)<br/>
&nbsp;&nbsp;#end def ProduceURLs<br/>
#end class InputURL<br/>
<br/>
<br/>
class InputURLList:<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Each Input class knows how to yield a set of URLs from a data source.<br/>
<br/>
&nbsp;&nbsp;This one handles a text file with a list of URLs<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self, attributes):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The file path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._encoding&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Encoding of that file<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not ValidateAttributes('URLLIST', attributes, ('path', 'encoding')):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= attributes.get('path')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._encoding&nbsp;&nbsp;= attributes.get('encoding', ENC_UTF8)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._path:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;= encoder.MaybeNarrowPath(self._path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if os.path.isfile(self._path):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Input: From URLLIST "%s"' % self._path, 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Can not locate file: %s' % self._path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._path = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Urllist entries must have a "path" attribute.')<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def ProduceURLs(self, consumer):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Produces URLs from our data source, hands them in to the consumer. """<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Open the file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(frame, file) = OpenFileForRead(self._path, 'URLLIST')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not file:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Iterate lines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;linenum = 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for line in file.readlines():<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linenum = linenum + 1<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Strip comments and empty lines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._encoding:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line = encoder.WidenText(line, self._encoding)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line = line.strip()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (not line) or line[0] == '#':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Split the line on space<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = URL()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cols = line.split(' ')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(0,len(cols)):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cols[i] = cols[i].strip()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.TrySetAttribute('loc', cols[0])<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Extract attributes from the other columns<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(1,len(cols)):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if cols[i]:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(attr_name, attr_val) = cols[i].split('=', 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.TrySetAttribute(attr_name, attr_val)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except ValueError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Line %d: Unable to parse attribute: %s' %<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(linenum, cols[i]))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Pass it on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;consumer(url, False)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.close()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if frame:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame.close()<br/>
&nbsp;&nbsp;#end def ProduceURLs<br/>
#end class InputURLList<br/>
<br/>
<br/>
class InputDirectory:<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Each Input class knows how to yield a set of URLs from a data source.<br/>
<br/>
&nbsp;&nbsp;This one handles a directory that acts as base for walking the filesystem.<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self, attributes, base_url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # The directory<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # The URL equivelant<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._default_file = None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not ValidateAttributes('DIRECTORY', attributes, ('path', 'url',<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'default_file')):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Prep the path -- it MUST end in a sep<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path = attributes.get('path')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not path:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Directory entries must have both "path" and "url" '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'attributes')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path = encoder.MaybeNarrowPath(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not path.endswith(os.sep):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path = path + os.sep<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not os.path.isdir(path):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Can not locate directory: %s' % path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Prep the URL -- it MUST end in a sep<br/>
&nbsp;&nbsp;&nbsp;&nbsp;url = attributes.get('url')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not url:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Directory entries must have both "path" and "url" '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'attributes')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;url = URL.Canonicalize(url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not url.endswith('/'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = url + '/'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not url.startswith(base_url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = urlparse.urljoin(base_url, url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not url.startswith(base_url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('The directory URL "%s" is not relative to the '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'base_url: %s' % (url, base_url))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Prep the default file -- it MUST be just a filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file = attributes.get('default_file')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if file:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = encoder.MaybeNarrowPath(file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if os.sep in file:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('The default_file "%s" can not include path information.'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= url<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._default_file = file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if file:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Input: From DIRECTORY "%s" (%s) with default file "%s"'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % (path, url, file), 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Input: From DIRECTORY "%s" (%s) with no default file'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % (path, url), 2)<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def ProduceURLs(self, consumer):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Produces URLs from our data source, hands them in to the consumer. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self._path:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root_path = self._path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root_URL&nbsp;&nbsp;= self._url<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root_file = self._default_file<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def PerFile(dirpath, name):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called once per file.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Note that 'name' will occasionally be None -- for a directory itself<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Pull a timestamp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = URL()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isdir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if name:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= os.path.join(dirpath, name)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= dirpath<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isdir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = os.path.isdir(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if isdir and root_file:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= os.path.join(path, root_file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;&nbsp;&nbsp;&nbsp;= os.stat(file)[stat.ST_MTIME];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except OSError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not time:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= os.stat(path)[stat.ST_MTIME];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.lastmod = TimestampISO8601(time)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except OSError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except ValueError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Build a URL<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= dirpath[len(root_path):]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if os.sep != '/':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle = middle.replace(os.sep, '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if middle:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= middle + '/'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if name:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= middle + name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if isdir:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle&nbsp;&nbsp;&nbsp;&nbsp;= middle + '/'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.TrySetAttribute('loc', root_URL + encoder.WidenText(middle, None))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Suppress default files.&nbsp;&nbsp;(All the way down here so we can log it.)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if name and (root_file == name):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.Log(prefix='IGNORED (default file)', level=2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;consumer(url, False)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def PerFile<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def PerDirectory(ignore, dirpath, namelist):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called once per directory with a list of all the contained files/dirs.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ignore = ignore&nbsp;&nbsp;# Avoid warnings of an unused parameter<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not dirpath.startswith(root_path):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Unable to decide what the root path is for directory: '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'%s' % dirpath)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for name in namelist:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PerFile(dirpath, name)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def PerDirectory<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Walking DIRECTORY "%s"' % self._path, 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PerFile(self._path, None)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os.path.walk(self._path, PerDirectory, None)<br/>
&nbsp;&nbsp;#end def ProduceURLs<br/>
#end class InputDirectory<br/>
<br/>
<br/>
class InputAccessLog:<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Each Input class knows how to yield a set of URLs from a data source.<br/>
<br/>
&nbsp;&nbsp;This one handles access logs.&nbsp;&nbsp;It's non-trivial in that we want to<br/>
&nbsp;&nbsp;auto-detect log files in the Common Logfile Format (as used by Apache,<br/>
&nbsp;&nbsp;for instance) and the Extended Log File Format (as used by IIS, for<br/>
&nbsp;&nbsp;instance).<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self, attributes):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # The file path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._encoding&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Encoding of that file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._is_elf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Extended Log File Format?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._is_clf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Common Logfile Format?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._elf_status&nbsp;&nbsp; = -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ELF field: '200'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._elf_method&nbsp;&nbsp; = -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ELF field: 'HEAD'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._elf_uri&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ELF field: '/foo?bar=1'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._elf_urifrag1 = -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ELF field: '/foo'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._elf_urifrag2 = -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ELF field: 'bar=1'<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not ValidateAttributes('ACCESSLOG', attributes, ('path', 'encoding')):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= attributes.get('path')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._encoding&nbsp;&nbsp;= attributes.get('encoding', ENC_UTF8)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._path:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;= encoder.MaybeNarrowPath(self._path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if os.path.isfile(self._path):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Input: From ACCESSLOG "%s"' % self._path, 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Can not locate file: %s' % self._path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._path = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Accesslog entries must have a "path" attribute.')<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def RecognizeELFLine(self, line):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Recognize the Fields directive that heads an ELF file """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not line.startswith('#Fields:'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fields = line.split(' ')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;del fields[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for i in range(0, len(fields)):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;field = fields[i].strip()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if field == 'sc-status':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._elf_status&nbsp;&nbsp; = i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif field == 'cs-method':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._elf_method&nbsp;&nbsp; = i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif field == 'cs-uri':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._elf_uri&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif field == 'cs-uri-stem':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._elf_urifrag1 = i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif field == 'cs-uri-query':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._elf_urifrag2 = i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Recognized an Extended Log File Format file.', 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return True<br/>
&nbsp;&nbsp;#end def RecognizeELFLine<br/>
<br/>
&nbsp;&nbsp;def GetELFLine(self, line):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Fetch the requested URL from an ELF line """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fields = line.split(' ')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;count&nbsp;&nbsp;= len(fields)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Verify status was Ok<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_status &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_status &gt;= count:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not fields[self._elf_status].strip() == '200':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Verify method was HEAD or GET<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_method &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_method &gt;= count:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not fields[self._elf_method].strip() in ('HEAD', 'GET'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Pull the full URL if we can<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_uri &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_uri &gt;= count:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = fields[self._elf_uri].strip()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if url != '-':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return url<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Put together a fragmentary URL<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_urifrag1 &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_urifrag1 &gt;= count or self._elf_urifrag2 &gt;= count:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlfrag1 = fields[self._elf_urifrag1].strip()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlfrag2 = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._elf_urifrag2 &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlfrag2 = fields[self._elf_urifrag2]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if urlfrag1 and (urlfrag1 != '-'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if urlfrag2 and (urlfrag2 != '-'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlfrag1 = urlfrag1 + '?' + urlfrag2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return urlfrag1<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;#end def GetELFLine<br/>
<br/>
&nbsp;&nbsp;def RecognizeCLFLine(self, line):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Try to tokenize a logfile line according to CLF pattern and see if<br/>
&nbsp;&nbsp;&nbsp;&nbsp;it works. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;match = ACCESSLOG_CLF_PATTERN.match(line)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;recognize = match and (match.group(1) in ('HEAD', 'GET'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if recognize:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Recognized a Common Logfile Format file.', 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return recognize<br/>
&nbsp;&nbsp;#end def RecognizeCLFLine<br/>
<br/>
&nbsp;&nbsp;def GetCLFLine(self, line):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Fetch the requested URL from a CLF line """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;match = ACCESSLOG_CLF_PATTERN.match(line)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if match:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request = match.group(1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if request in ('HEAD', 'GET'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return match.group(2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;#end def GetCLFLine<br/>
<br/>
&nbsp;&nbsp;def ProduceURLs(self, consumer):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Produces URLs from our data source, hands them in to the consumer. """<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Open the file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(frame, file) = OpenFileForRead(self._path, 'ACCESSLOG')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not file:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Iterate lines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for line in file.readlines():<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._encoding:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line = encoder.WidenText(line, self._encoding)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line = line.strip()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If we don't know the format yet, try them both<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (not self._is_clf) and (not self._is_elf):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._is_elf = self.RecognizeELFLine(line)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._is_clf = self.RecognizeCLFLine(line)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Digest the line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._is_elf:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = self.GetELFLine(line)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif self._is_clf:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = self.GetCLFLine(line)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not match:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Pass it on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = URL()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.TrySetAttribute('loc', match)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;consumer(url, True)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.close()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if frame:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame.close()<br/>
&nbsp;&nbsp;#end def ProduceURLs<br/>
#end class InputAccessLog<br/>
<br/>
<br/>
class InputSitemap(xml.sax.handler.ContentHandler):<br/>
<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Each Input class knows how to yield a set of URLs from a data source.<br/>
<br/>
&nbsp;&nbsp;This one handles Sitemap files and Sitemap index files.&nbsp;&nbsp;For the sake<br/>
&nbsp;&nbsp;of simplicity in design (and simplicity in interfacing with the SAX<br/>
&nbsp;&nbsp;package), we do not handle these at the same time, recursively.&nbsp;&nbsp;Instead<br/>
&nbsp;&nbsp;we read an index file completely and make a list of Sitemap files, then<br/>
&nbsp;&nbsp;go back and process each Sitemap.<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;class _ContextBase(object):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Base class for context handlers in our SAX processing.&nbsp;&nbsp;A context<br/>
&nbsp;&nbsp;&nbsp;&nbsp;handler is a class that is responsible for understanding one level of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;depth in the XML schema.&nbsp;&nbsp;The class knows what sub-tags are allowed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;and doing any processing specific for the tag we're in.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This base class is the API filled in by specific context handlers,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;all defined below.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, subtags):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Initialize with a sequence of the sub-tags that would be valid in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this context."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._allowed_tags = subtags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Sequence of sub-tags we can have<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._last_tag&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Most recent seen sub-tag<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def AcceptTag(self, tag):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Returns True iff opening a sub-tag is valid in this context."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valid = tag in self._allowed_tags<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if valid:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._last_tag = tag<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._last_tag = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return valid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def AcceptTag<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def AcceptText(self, text):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Returns True iff a blurb of text is valid in this context."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def AcceptText<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Open(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""The context is opening.&nbsp;&nbsp;Do initialization."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Open<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Close(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""The context is closing.&nbsp;&nbsp;Return our result, if any."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Close<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Return(self, result):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""We're returning to this context after handling a sub-tag.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method is called with the result data from the sub-tag that just<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closed.&nbsp;&nbsp;Here in _ContextBase, if we ever see a result it means<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the derived child class forgot to override this method."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if result:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise NotImplementedError<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Return<br/>
&nbsp;&nbsp;#end class _ContextBase<br/>
<br/>
&nbsp;&nbsp;class _ContextUrlSet(_ContextBase):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Context handler for the document node in a Sitemap."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextBase.__init__(self, ('url',))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def __init__<br/>
&nbsp;&nbsp;#end class _ContextUrlSet<br/>
<br/>
&nbsp;&nbsp;class _ContextUrl(_ContextBase):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Context handler for a URL node in a Sitemap."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, consumer):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Initialize this context handler with the callable consumer that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wants our URLs."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextBase.__init__(self, URL.__slots__)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The URL object we're building<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._consumer&nbsp;&nbsp;&nbsp;&nbsp; = consumer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Who wants to consume it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Open(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Initialize the URL."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert not self._url<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._url = URL()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Open<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Close(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Pass the URL to the consumer and reset it to None."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert self._url<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._consumer(self._url, False)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._url = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Close<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Return(self, result):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""A value context has closed, absorb the data it gave us."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert self._url<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if result:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._url.TrySetAttribute(self._last_tag, result)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Return<br/>
&nbsp;&nbsp;#end class _ContextUrl<br/>
<br/>
&nbsp;&nbsp;class _ContextSitemapIndex(_ContextBase):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Context handler for the document node in an index file."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextBase.__init__(self, ('sitemap',))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._loclist = []&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# List of accumulated Sitemap URLs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Open(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Just a quick verify of state."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert not self._loclist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Open<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Close(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Return our list of accumulated URLs."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._loclist:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = self._loclist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._loclist = []<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return temp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Close<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Return(self, result):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Getting a new loc URL, add it to the collection."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if result:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._loclist.append(result)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Return<br/>
&nbsp;&nbsp;#end class _ContextSitemapIndex<br/>
<br/>
&nbsp;&nbsp;class _ContextSitemap(_ContextBase):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Context handler for a Sitemap entry in an index file."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextBase.__init__(self, ('loc', 'lastmod'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._loc = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The URL to the Sitemap<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Open(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Just a quick verify of state."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert not self._loc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Open<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Close(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Return our URL to our parent."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = self._loc<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._loc = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return temp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('In the Sitemap index file, a "sitemap" entry had no "loc".')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Close<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Return(self, result):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""A value has closed.&nbsp;&nbsp;If it was a 'loc', absorb it."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if result and (self._last_tag == 'loc'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._loc = result<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Return<br/>
&nbsp;&nbsp;#end class _ContextSitemap<br/>
<br/>
&nbsp;&nbsp;class _ContextValue(_ContextBase):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Context handler for a single value.&nbsp;&nbsp;We return just the value.&nbsp;&nbsp;The<br/>
&nbsp;&nbsp;&nbsp;&nbsp;higher level context has to remember what tag led into us."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextBase.__init__(self, ())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def AcceptText(self, text):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Allow all text, adding it to our buffer."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._text:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._text = self._text + text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._text = text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return True<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def AcceptText<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Open(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Initialize our buffer."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._text = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Open<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;def Close(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"""Return what's in our buffer."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = self._text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._text = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if text:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.strip()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end def Close<br/>
&nbsp;&nbsp;#end class _ContextValue<br/>
<br/>
&nbsp;&nbsp;def __init__(self, attributes):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Initialize with a dictionary of attributes from our entry in the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;config file."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xml.sax.handler.ContentHandler.__init__(self)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._pathlist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# A list of files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._current&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Current context in _contexts<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._contexts&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The stack of contexts we allow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._contexts_idx&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# ...contexts for index files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._contexts_stm&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# ...contexts for Sitemap files<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not ValidateAttributes('SITEMAP', attributes, ['path']):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Init the first file path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path = attributes.get('path')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if path:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path = encoder.MaybeNarrowPath(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if os.path.isfile(path):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Input: From SITEMAP "%s"' % path, 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._pathlist = [path]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Can not locate file "%s"' % path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Sitemap entries must have a "path" attribute.')<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def ProduceURLs(self, consumer):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""In general: Produces URLs from our data source, hand them to the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;callable consumer.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;In specific: Iterate over our list of paths and delegate the actual<br/>
&nbsp;&nbsp;&nbsp;&nbsp;processing to helper methods.&nbsp;&nbsp;This is a complexity no other data source<br/>
&nbsp;&nbsp;&nbsp;&nbsp;needs to suffer.&nbsp;&nbsp;We are unique in that we can have files that tell us<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to bring in other files.<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Note the decision to allow an index file or not is made in this method.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;If we call our parser with (self._contexts == None) the parser will<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grab whichever context stack can handle the file.&nbsp;&nbsp;IE: index is allowed.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;If instead we set (self._contexts = ...) before parsing, the parser<br/>
&nbsp;&nbsp;&nbsp;&nbsp;will only use the stack we specify.&nbsp;&nbsp;IE: index not allowed.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Set up two stacks of contexts<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._contexts_idx = [InputSitemap._ContextSitemapIndex(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextSitemap(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextValue()]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._contexts_stm = [InputSitemap._ContextUrlSet(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextUrl(consumer),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputSitemap._ContextValue()]<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Process the first file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert self._pathlist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path = self._pathlist[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._contexts = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# We allow an index file here<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._ProcessFile(path)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Iterate over remaining files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._contexts = self._contexts_stm&nbsp;&nbsp;# No index files allowed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for path in self._pathlist[1:]:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._ProcessFile(path)<br/>
&nbsp;&nbsp;#end def ProduceURLs<br/>
<br/>
&nbsp;&nbsp;def _ProcessFile(self, path):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Do per-file reading/parsing/consuming for the file path passed in."""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Open our file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(frame, file) = OpenFileForRead(path, 'SITEMAP')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not file:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Rev up the SAX engine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._current = -1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xml.sax.parse(file, self)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except SchemaError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('An error in file "%s" made us abort reading the Sitemap.'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except IOError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Cannot read from file "%s"' % path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except xml.sax._exceptions.SAXParseException, e:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('XML error in the file "%s" (line %d, column %d): %s' %<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (path, e._linenum, e._colnum, e.getMessage()))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Clean up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.close()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if frame:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame.close()<br/>
&nbsp;&nbsp;#end def _ProcessFile<br/>
<br/>
&nbsp;&nbsp;def _MungeLocationListIntoFiles(self, urllist):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""Given a list of URLs, munge them into our self._pathlist property.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;We do this by assuming all the files live in the same directory as<br/>
&nbsp;&nbsp;&nbsp;&nbsp;the first file in the existing pathlist.&nbsp;&nbsp;That is, we assume a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Sitemap index points to Sitemaps only in the same directory.&nbsp;&nbsp;This<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is not true in general, but will be true for any output produced<br/>
&nbsp;&nbsp;&nbsp;&nbsp;by this script.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert self._pathlist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path = self._pathlist[0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path = os.path.normpath(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dir&nbsp;&nbsp;= os.path.dirname(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;wide = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if type(path) == types.UnicodeType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wide = True<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for url in urllist:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = URL.Canonicalize(url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Index points to Sitemap file at: %s' % url, 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(scheme, netloc, path, query, frag) = urlparse.urlsplit(url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = os.path.basename(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = urllib.unquote(file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if wide:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = encoder.WidenText(file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if dir:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = dir + os.sep + file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if file:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._pathlist.append(file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Will attempt to read Sitemap file: %s' % file, 1)<br/>
&nbsp;&nbsp;#end def _MungeLocationListIntoFiles<br/>
<br/>
&nbsp;&nbsp;def startElement(self, tag, attributes):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""SAX processing, called per node in the config stream.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;As long as the new tag is legal in our current context, this<br/>
&nbsp;&nbsp;&nbsp;&nbsp;becomes an Open call on one context deeper.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# If this is the document node, we may have to look for a context stack<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (self._current &lt; 0) and not self._contexts:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert self._contexts_idx and self._contexts_stm<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if tag == 'urlset':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._contexts = self._contexts_stm<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif tag == 'sitemapindex':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._contexts = self._contexts_idx<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('File is a Sitemap index.', 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('The document appears to be neither a Sitemap nor a '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Sitemap index.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise SchemaError<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Display a kinder error on a common mistake<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (self._current &lt; 0) and (self._contexts == self._contexts_stm) and (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tag == 'sitemapindex'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('A Sitemap index can not refer to another Sitemap index.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise SchemaError<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Verify no unexpected attributes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if attributes:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = ''<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for attr in attributes.keys():<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The document node will probably have namespaces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._current &lt; 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if attr.find('xmlns') &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if attr.find('xsi') &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if text:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text + ', '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text + attr<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if text:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Did not expect any attributes on any tag, instead tag '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '"%s" had attributes: %s' % (tag, text))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Switch contexts<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (self._current &lt; 0) or (self._contexts[self._current].AcceptTag(tag)):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._current = self._current + 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert self._current &lt; len(self._contexts)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._contexts[self._current].Open()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Can not accept tag "%s" where it appears.' % tag)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise SchemaError<br/>
&nbsp;&nbsp;#end def startElement<br/>
<br/>
&nbsp;&nbsp;def endElement(self, tag):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""SAX processing, called per node in the config stream.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;This becomes a call to Close on one context followed by a call<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to Return on the previous.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tag = tag&nbsp;&nbsp;# Avoid warning on unused argument<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert self._current &gt;= 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;retval = self._contexts[self._current].Close()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._current = self._current - 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._current &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._contexts[self._current].Return(retval)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif retval and (self._contexts == self._contexts_idx):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._MungeLocationListIntoFiles(retval)<br/>
&nbsp;&nbsp;#end def endElement<br/>
<br/>
&nbsp;&nbsp;def characters(self, text):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""SAX processing, called when text values are read.&nbsp;&nbsp;Important to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;note that one single text value may be split across multiple calls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;of this method.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (self._current &lt; 0) or (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;not self._contexts[self._current].AcceptText(text)):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if text.strip():<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Can not accept text "%s" where it appears.' % text)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise SchemaError<br/>
&nbsp;&nbsp;#end def characters<br/>
#end class InputSitemap<br/>
<br/>
<br/>
class FilePathGenerator:<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;This class generates filenames in a series, upon request.<br/>
&nbsp;&nbsp;You can request any iteration number at any time, you don't<br/>
&nbsp;&nbsp;have to go in order.<br/>
<br/>
&nbsp;&nbsp;Example of iterations for '/path/foo.xml.gz':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; /path/foo.xml.gz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; /path/foo1.xml.gz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt; /path/foo2.xml.gz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;_index.xml&nbsp;&nbsp;--&gt; /path/foo_index.xml<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.is_gzip&nbsp;&nbsp;&nbsp;&nbsp; = False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Is this a&nbsp;&nbsp;GZIP file?<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# '/path/'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._prefix&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 'foo'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._suffix&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# '.xml.gz'<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def Preload(self, path):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Splits up a path into forms ready for recombination. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path = encoder.MaybeNarrowPath(path)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Get down to a base name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path = os.path.normpath(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;base = os.path.basename(path).lower()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not base:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Couldn\'t parse the file path: %s' % path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lenbase = len(base)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Recognize extension<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lensuffix = 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;compare_suffix = ['.xml', '.xml.gz', '.gz']<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for suffix in compare_suffix:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if base.endswith(suffix):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lensuffix = len(suffix)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not lensuffix:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('The path "%s" doesn\'t end in a supported file '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'extension.' % path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.is_gzip = suffix.endswith('.gz')<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Split the original path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lenpath = len(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._path&nbsp;&nbsp; = path[:lenpath-lenbase]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._prefix = path[lenpath-lenbase:lenpath-lensuffix]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._suffix = path[lenpath-lensuffix:]<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return True<br/>
&nbsp;&nbsp;#end def Preload<br/>
<br/>
&nbsp;&nbsp;def GeneratePath(self, instance):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Generates the iterations, as described above. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;prefix = self._path + self._prefix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if type(instance) == types.IntType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if instance:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return '%s%d%s' % (prefix, instance, self._suffix)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prefix + self._suffix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return prefix + instance<br/>
&nbsp;&nbsp;#end def GeneratePath<br/>
<br/>
&nbsp;&nbsp;def GenerateURL(self, instance, root_url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Generates iterations, but as a URL instead of a path. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;prefix = root_url + self._prefix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;retval = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if type(instance) == types.IntType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if instance:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = '%s%d%s' % (prefix, instance, self._suffix)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = prefix + self._suffix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = prefix + instance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return URL.Canonicalize(retval)<br/>
&nbsp;&nbsp;#end def GenerateURL<br/>
<br/>
&nbsp;&nbsp;def GenerateWildURL(self, root_url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Generates a wildcard that should match all our iterations """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;prefix = URL.Canonicalize(root_url + self._prefix)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;&nbsp; = URL.Canonicalize(prefix + self._suffix)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;suffix = temp[len(prefix):]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return prefix + '*' + suffix<br/>
&nbsp;&nbsp;#end def GenerateURL<br/>
#end class FilePathGenerator<br/>
<br/>
<br/>
class PerURLStatistics:<br/>
&nbsp;&nbsp;""" Keep track of some simple per-URL statistics, like file extension. """<br/>
<br/>
&nbsp;&nbsp;def __init__(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._extensions&nbsp;&nbsp;= {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Count of extension instances<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def Consume(self, url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Log some stats for the URL.&nbsp;&nbsp;At the moment, that means extension. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if url and url.loc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(scheme, netloc, path, query, frag) = urlparse.urlsplit(url.loc)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not path:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Recognize directories<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if path.endswith('/'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._extensions.has_key('/'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._extensions['/'] = self._extensions['/'] + 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._extensions['/'] = 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Strip to a filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = path.rfind('/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if i &gt;= 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert i &lt; len(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path = path[i:]<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Find extension<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = path.rfind('.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if i &gt; 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert i &lt; len(path)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ext = path[i:].lower()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._extensions.has_key(ext):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._extensions[ext] = self._extensions[ext] + 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._extensions[ext] = 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._extensions.has_key('(no extension)'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._extensions['(no extension)'] = self._extensions[<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'(no extension)'] + 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._extensions['(no extension)'] = 1<br/>
&nbsp;&nbsp;#end def Consume<br/>
<br/>
&nbsp;&nbsp;def Log(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Dump out stats to the output. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if len(self._extensions):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Count of file extensions on URLs:', 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set = self._extensions.keys()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set.sort()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for ext in set:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log(' %7d&nbsp;&nbsp;%s' % (self._extensions[ext], ext), 1)<br/>
&nbsp;&nbsp;#end def Log<br/>
<br/>
class Sitemap(xml.sax.handler.ContentHandler):<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;This is the big workhorse class that processes your inputs and spits<br/>
&nbsp;&nbsp;out sitemap files.&nbsp;&nbsp;It is built as a SAX handler for set up purposes.<br/>
&nbsp;&nbsp;That is, it processes an XML stream to bring itself up.<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;def __init__(self, suppress_notify):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xml.sax.handler.ContentHandler.__init__(self)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._filters&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= []&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Filter objects<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._inputs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = []&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Input objects<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._urls&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Maps URLs to count of dups<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._set&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= []&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Current set of URLs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._filegen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Path generator for output files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._wildurl1&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Sitemap URLs to filter out<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._wildurl2&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Sitemap URLs to filter out<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._sitemaps&nbsp;&nbsp;&nbsp;&nbsp; = 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Number of output files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# We init _dup_max to 2 so the default priority is 0.5 instead of 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._dup_max&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Max number of duplicate URLs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._stat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = PerURLStatistics()&nbsp;&nbsp;# Some simple stats<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._in_site&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # SAX: are we in a Site node?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._in_Site_ever = False&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # SAX: were we ever in a Site?<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._default_enc&nbsp;&nbsp;= None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Best encoding to try on URLs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._base_url&nbsp;&nbsp;&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Prefix to all valid URLs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._store_into&nbsp;&nbsp; = None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Output filepath<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._suppress&nbsp;&nbsp;&nbsp;&nbsp; = suppress_notify&nbsp;&nbsp;&nbsp;&nbsp; # Suppress notify of servers<br/>
&nbsp;&nbsp;#end def __init__<br/>
<br/>
&nbsp;&nbsp;def ValidateBasicConfig(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Verifies (and cleans up) the basic user-configurable options. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;all_good = True<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._default_enc:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoder.SetUserEncoding(self._default_enc)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Canonicalize the base_url<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if all_good and not self._base_url:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('A site needs a "base_url" attribute.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_good = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if all_good and not URL.IsAbsolute(self._base_url):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('The "base_url" must be absolute, not relative: %s' %<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self._base_url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_good = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if all_good:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._base_url = URL.Canonicalize(self._base_url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not self._base_url.endswith('/'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._base_url = self._base_url + '/'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('BaseURL is set to: %s' % self._base_url, 2)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Load store_into into a generator<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if all_good:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._store_into:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._filegen = FilePathGenerator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not self._filegen.Preload(self._store_into):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_good = False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('A site needs a "store_into" attribute.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_good = False<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Ask the generator for patterns on what its output will look like<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if all_good:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._wildurl1 = self._filegen.GenerateWildURL(self._base_url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._wildurl2 = self._filegen.GenerateURL(SITEINDEX_SUFFIX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self._base_url)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Unify various forms of False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if all_good:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._suppress:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (type(self._suppress) == types.StringType) or (type(self._suppress)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == types.UnicodeType):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (self._suppress == '0') or (self._suppress.lower() == 'false'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._suppress = False<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Done<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not all_good:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('See "example_config.xml" for more information.', 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return all_good<br/>
&nbsp;&nbsp;#end def ValidateBasicConfig<br/>
<br/>
&nbsp;&nbsp;def Generate(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Run over all the Inputs and ask them to Produce """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Run the inputs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for input in self._inputs:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input.ProduceURLs(self.ConsumeURL)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Do last flushes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if len(self._set):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.FlushSet()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self._sitemaps:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('No URLs were recorded, writing an empty sitemap.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.FlushSet()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Write an index as needed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._sitemaps &gt; 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.WriteIndex()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Notify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self.NotifySearch()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Dump stats<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._stat.Log()<br/>
&nbsp;&nbsp;#end def Generate<br/>
<br/>
&nbsp;&nbsp;def ConsumeURL(self, url, allow_fragment):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;All per-URL processing comes together here, regardless of Input.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Here we run filters, remove duplicates, spill to disk as needed, etc.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not url:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Validate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not url.Validate(self._base_url, allow_fragment):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Run filters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;accept = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for filter in self._filters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;accept = filter.Apply(url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if accept != None:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not (accept or (accept == None)):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.Log(prefix='FILTERED', level=2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Ignore our out output URLs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if fnmatch.fnmatchcase(url.loc, self._wildurl1) or fnmatch.fnmatchcase(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.loc, self._wildurl2):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.Log(prefix='IGNORED (output file)', level=2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Note the sighting<br/>
&nbsp;&nbsp;&nbsp;&nbsp;hash = url.MakeHash()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._urls.has_key(hash):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dup = self._urls[hash]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if dup &gt; 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dup = dup + 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._urls[hash] = dup<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._dup_max &lt; dup:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._dup_max = dup<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.Log(prefix='DUPLICATE')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Acceptance -- add to set<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._urls[hash] = 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._set.append(url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._stat.Consume(url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;url.Log()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Flush the set if needed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if len(self._set) &gt;= MAXURLS_PER_SITEMAP:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.FlushSet()<br/>
&nbsp;&nbsp;#end def ConsumeURL<br/>
<br/>
&nbsp;&nbsp;def FlushSet(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Flush the current set of URLs to the output.&nbsp;&nbsp;This is a little<br/>
&nbsp;&nbsp;&nbsp;&nbsp;slow because we like to sort them all and normalize the priorities<br/>
&nbsp;&nbsp;&nbsp;&nbsp;before dumping.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Sort and normalize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Sorting and normalizing collected URLs.', 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._set.sort()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for url in self._set:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash = url.MakeHash()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dup = self._urls[hash]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if dup &gt; 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._urls[hash] = -1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not url.priority:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.priority = '%.4f' % (float(dup) / float(self._dup_max))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Get the filename we're going to write to<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename = self._filegen.GeneratePath(self._sitemaps)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not filename:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Fatal('Unexpected: Couldn\'t generate output filename.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._sitemaps = self._sitemaps + 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Writing Sitemap file "%s" with %d URLs' %<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(filename, len(self._set)), 1)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Write to it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;frame = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&nbsp;= None<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._filegen.is_gzip:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basename = os.path.basename(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame = open(filename, 'wb')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = gzip.GzipFile(fileobj=frame, filename=basename, mode='wt')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = open(filename, 'wt')<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.write(SITEMAP_HEADER)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for url in self._set:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url.WriteXML(file)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.write(SITEMAP_FOOTER)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.close()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if frame:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame.close()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&nbsp;= None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except IOError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Fatal('Couldn\'t write out to file: %s' % filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os.chmod(filename, 0644)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Flush<br/>
&nbsp;&nbsp;&nbsp;&nbsp;self._set = []<br/>
&nbsp;&nbsp;#end def FlushSet<br/>
<br/>
&nbsp;&nbsp;def WriteIndex(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Write the master index of all Sitemap files """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Make a filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename = self._filegen.GeneratePath(SITEINDEX_SUFFIX)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not filename:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Fatal('Unexpected: Couldn\'t generate output index filename.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Writing index file "%s" with %d Sitemaps' %<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(filename, self._sitemaps), 1)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Make a lastmod time<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lastmod = TimestampISO8601(time.time())<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Write to it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd = open(filename, 'wt')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.write(SITEINDEX_HEADER)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for mapnumber in range(0,self._sitemaps):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Write the entry<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapurl = self._filegen.GenerateURL(mapnumber, self._base_url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapattributes = { 'loc' : mapurl, 'lastmod' : lastmod }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.write(SITEINDEX_ENTRY % mapattributes)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.write(SITEINDEX_FOOTER)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.close()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd = None<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except IOError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Fatal('Couldn\'t write out to file: %s' % filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os.chmod(filename, 0644)<br/>
&nbsp;&nbsp;#end def WriteIndex<br/>
<br/>
&nbsp;&nbsp;def NotifySearch(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" Send notification of the new Sitemap(s) to the search engines. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._suppress:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Search engine notification is suppressed.', 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Notifying search engines.', 1)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Override the urllib's opener class with one that doesn't ignore 404s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;class ExceptionURLopener(urllib.FancyURLopener):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def http_error_default(self, url, fp, errcode, errmsg, headers):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('HTTP error %d: %s' % (errcode, errmsg), 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise IOError<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#end def http_error_default<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#end class ExceptionURLOpener<br/>
&nbsp;&nbsp;&nbsp;&nbsp;old_opener = urllib._urlopener<br/>
&nbsp;&nbsp;&nbsp;&nbsp;urllib._urlopener = ExceptionURLopener()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Build the URL we want to send in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if self._sitemaps &gt; 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = self._filegen.GenerateURL(SITEINDEX_SUFFIX, self._base_url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = self._filegen.GenerateURL(0, self._base_url)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Test if we can hit it ourselves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = urllib.urlopen(url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.close()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except IOError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('When attempting to access our generated Sitemap at the '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'following URL:\n&nbsp;&nbsp;&nbsp;&nbsp;%s\n&nbsp;&nbsp;we failed to read it.&nbsp;&nbsp;Please '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'verify the store_into path you specified in\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '&nbsp;&nbsp;your configuration file is web-accessable.&nbsp;&nbsp;Consult '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'the FAQ for more\n&nbsp;&nbsp;information.' % url)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Proceeding to notify with an unverifyable URL.')<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# Cycle through notifications<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# To understand this, see the comment near the NOTIFICATION_SITES comment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for ping in NOTIFICATION_SITES:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query_map&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = ping[3]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query_attr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ping[5]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query_map[query_attr] = url<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query = urllib.urlencode(query_map)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notify = urlparse.urlunsplit((ping[0], ping[1], ping[2], query, ping[4]))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Send the notification<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Notifying: %s' % ping[1], 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Notification URL: %s' % notify, 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = urllib.urlopen(notify)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.read()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.close()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except IOError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('Cannot contact: %s' % ping[1])<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if old_opener:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urllib._urlopener = old_opener<br/>
&nbsp;&nbsp;#end def NotifySearch<br/>
<br/>
&nbsp;&nbsp;def startElement(self, tag, attributes):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" SAX processing, called per node in the config stream. """<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if tag == 'site':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if self._in_site:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Can not nest Site entries in the configuration.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._in_site&nbsp;&nbsp;&nbsp;&nbsp; = True<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not ValidateAttributes('SITE', attributes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;('verbose', 'default_encoding', 'base_url', 'store_into',<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'suppress_search_engine_notify')):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = attributes.get('verbose', 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if verbose:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.SetVerbose(verbose)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._default_enc = attributes.get('default_encoding')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._base_url&nbsp;&nbsp;&nbsp;&nbsp;= attributes.get('base_url')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._store_into&nbsp;&nbsp;= attributes.get('store_into')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not self._suppress:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._suppress&nbsp;&nbsp;= attributes.get('suppress_search_engine_notify',<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;False)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.ValidateBasicConfig()<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif tag == 'filter':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._filters.append(Filter(attributes))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif tag == 'url':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._inputs.append(InputURL(attributes))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif tag == 'urllist':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for attributeset in ExpandPathAttribute(attributes, 'path'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._inputs.append(InputURLList(attributeset))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif tag == 'directory':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._inputs.append(InputDirectory(attributes, self._base_url))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif tag == 'accesslog':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for attributeset in ExpandPathAttribute(attributes, 'path'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._inputs.append(InputAccessLog(attributeset))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elif tag == 'sitemap':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for attributeset in ExpandPathAttribute(attributes, 'path'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._inputs.append(InputSitemap(attributeset))<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Unrecognized tag in the configuration: %s' % tag)<br/>
&nbsp;&nbsp;#end def startElement<br/>
<br/>
&nbsp;&nbsp;def endElement(self, tag):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" SAX processing, called per node in the config stream. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if tag == 'site':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert self._in_site<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._in_site&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= False<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._in_site_ever = True<br/>
&nbsp;&nbsp;#end def endElement<br/>
<br/>
&nbsp;&nbsp;def endDocument(self):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;""" End of SAX, verify we can proceed. """<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not self._in_site_ever:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('The configuration must specify a "site" element.')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not self._inputs:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Warn('There were no inputs to generate a sitemap from.')<br/>
&nbsp;&nbsp;#end def endDocument<br/>
#end class Sitemap<br/>
<br/>
<br/>
def ValidateAttributes(tag, attributes, goodattributes):<br/>
&nbsp;&nbsp;""" Makes sure 'attributes' does not contain any attribute not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listed in 'goodattributes' """<br/>
&nbsp;&nbsp;all_good = True<br/>
&nbsp;&nbsp;for attr in attributes.keys():<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not attr in goodattributes:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Unknown %s attribute: %s' % (tag, attr))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all_good = False<br/>
&nbsp;&nbsp;return all_good<br/>
#end def ValidateAttributes<br/>
<br/>
def ExpandPathAttribute(src, attrib):<br/>
&nbsp;&nbsp;""" Given a dictionary of attributes, return a list of dictionaries<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with all the same attributes except for the one named attrib.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;That one, we treat as a file path and expand into all its possible<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;variations. """<br/>
&nbsp;&nbsp;# Do the path expansion.&nbsp;&nbsp;On any error, just return the source dictionary.<br/>
&nbsp;&nbsp;path = src.get(attrib)<br/>
&nbsp;&nbsp;if not path:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return [src]<br/>
&nbsp;&nbsp;path = encoder.MaybeNarrowPath(path);<br/>
&nbsp;&nbsp;pathlist = glob.glob(path)<br/>
&nbsp;&nbsp;if not pathlist:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return [src]<br/>
<br/>
&nbsp;&nbsp;# If this isn't actually a dictionary, make it one<br/>
&nbsp;&nbsp;if type(src) != types.DictionaryType:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tmp = {}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;for key in src.keys():<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp[key] = src[key]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;src = tmp<br/>
<br/>
&nbsp;&nbsp;# Create N new dictionaries<br/>
&nbsp;&nbsp;retval = []<br/>
&nbsp;&nbsp;for path in pathlist:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dst = src.copy()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dst[attrib] = path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;retval.append(dst)<br/>
<br/>
&nbsp;&nbsp;return retval<br/>
#end def ExpandPathAttribute<br/>
<br/>
def OpenFileForRead(path, logtext):<br/>
&nbsp;&nbsp;""" Opens a text file, be it GZip or plain """<br/>
<br/>
&nbsp;&nbsp;frame = None<br/>
&nbsp;&nbsp;file&nbsp;&nbsp;= None<br/>
<br/>
&nbsp;&nbsp;if not path:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return (frame, file)<br/>
<br/>
&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if path.endswith('.gz'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame = open(path, 'rb')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = gzip.GzipFile(fileobj=frame, mode='rt')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = open(path, 'rt')<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if logtext:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Opened %s file: %s' % (logtext, path), 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Opened file: %s' % path, 1)<br/>
&nbsp;&nbsp;except IOError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Can not open file: %s' % path)<br/>
<br/>
&nbsp;&nbsp;return (frame, file)<br/>
#end def OpenFileForRead<br/>
<br/>
def TimestampISO8601(t):<br/>
&nbsp;&nbsp;"""Seconds since epoch (1970-01-01) --&gt; ISO 8601 time string."""<br/>
&nbsp;&nbsp;return time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime(t))<br/>
#end def TimestampISO8601<br/>
<br/>
def CreateSitemapFromFile(configpath, suppress_notify):<br/>
&nbsp;&nbsp;""" Sets up a new Sitemap object from the specified configuration file.&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;# Remember error count on the way in<br/>
&nbsp;&nbsp;num_errors = output.num_errors<br/>
<br/>
&nbsp;&nbsp;# Rev up SAX to parse the config<br/>
&nbsp;&nbsp;sitemap = Sitemap(suppress_notify)<br/>
&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Reading configuration file: %s' % configpath, 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xml.sax.parse(configpath, sitemap)<br/>
&nbsp;&nbsp;except IOError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Cannot read configuration file: %s' % configpath)<br/>
&nbsp;&nbsp;except xml.sax._exceptions.SAXParseException, e:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Error('XML error in the config file (line %d, column %d): %s' %<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (e._linenum, e._colnum, e.getMessage()))<br/>
&nbsp;&nbsp;except xml.sax._exceptions.SAXReaderNotAvailable:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Error('Some installs of Python 2.2 did not include complete support'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' for XML.\n&nbsp;&nbsp;Please try upgrading your version of Python'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' and re-running the script.')<br/>
<br/>
&nbsp;&nbsp;# If we added any errors, return no sitemap<br/>
&nbsp;&nbsp;if num_errors == output.num_errors:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return sitemap<br/>
&nbsp;&nbsp;return None<br/>
#end def CreateSitemapFromFile<br/>
<br/>
def ProcessCommandFlags(args):<br/>
&nbsp;&nbsp;"""<br/>
&nbsp;&nbsp;Parse command line flags per specified usage, pick off key, value pairs<br/>
&nbsp;&nbsp;All flags of type "--key=value" will be processed as __flags[key] = value,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"--option" will be processed as __flags[option] = option<br/>
&nbsp;&nbsp;"""<br/>
<br/>
&nbsp;&nbsp;flags&nbsp;&nbsp; = {}<br/>
&nbsp;&nbsp;rkeyval = '--(?P&lt;key&gt;\S*)[=](?P&lt;value&gt;\S*)' # --key=val<br/>
&nbsp;&nbsp;roption = '--(?P&lt;option&gt;\S*)'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # --key<br/>
&nbsp;&nbsp;r = '(' + rkeyval + ')|(' + roption + ')'<br/>
&nbsp;&nbsp;rc = re.compile(r)<br/>
&nbsp;&nbsp;for a in args:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;try:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rcg = rc.search(a).groupdict()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if rcg.has_key('key'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flags[rcg['key']] = rcg['value']<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if rcg.has_key('option'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flags[rcg['option']] = rcg['option']<br/>
&nbsp;&nbsp;&nbsp;&nbsp;except AttributeError:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br/>
&nbsp;&nbsp;return flags<br/>
#end def ProcessCommandFlags<br/>
<br/>
<br/>
#<br/>
# __main__<br/>
#<br/>
<br/>
if __name__ == '__main__':<br/>
&nbsp;&nbsp;flags = ProcessCommandFlags(sys.argv[1:])<br/>
&nbsp;&nbsp;if not flags or not flags.has_key('config') or flags.has_key('help'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;output.Log(__usage__, 0)<br/>
&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;suppress_notify = flags.has_key('testing')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sitemap = CreateSitemapFromFile(flags['config'], suppress_notify)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if not sitemap:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Configuration file errors -- exiting.', 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sitemap.Generate()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Number of errors: %d' % output.num_errors, 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.Log('Number of warnings: %d' % output.num_warns, 1)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/sitemapgeneratormenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/sitemapgeneratormenudialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RichelbilderbeekNlSitemapGenerator, generates the richelbilderbeek.nl sitemap<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> SITEMAPGENERATORMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> SITEMAPGENERATORMENUDIALOG_H<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "menudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SitemapGeneratorMenuDialog : <b><a href="CppPublic.htm">public</a></b> MenuDialog<br/>
{<br/>
&nbsp;&nbsp;SitemapGeneratorMenuDialog();<br/>
&nbsp;&nbsp;~SitemapGeneratorMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Help GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>)&gt; m_signal_log;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppAdd.htm">Add</a>Header(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; files) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateConfig<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; local_website_path,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; urllist_path) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Returns date in YYYY-MM-DD format<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetDateIso8601.htm">GetDateIso8601</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetDateIso8601.htm">GetDateIso8601</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetHtmlFilesInFolder.htm">GetHtmlFilesInFolder</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SITEMAPGENERATORMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/sitemapgeneratormenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/sitemapgeneratormenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RichelbilderbeekNlSitemapGenerator, generates the richelbilderbeek.nl sitemap<br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">sitemapgenerator</a>menudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostXpressive.htm">xpressive</a>/<a href="CppBoostXpressive.htm">xpressive</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::SitemapGeneratorMenuDialog()<br/>
&nbsp;&nbsp;: m_signal_log{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::<a href="CppAdd.htm">Add</a>Header(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; files) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("# To add a list of URLs, <a href="CppMake.htm">make</a> a space-delimited text file. The first");<br/>
&nbsp;&nbsp;v.push_back("# column contains the URL; then you can specify various optional");<br/>
&nbsp;&nbsp;v.push_back("# attributes in the form key=value:");<br/>
&nbsp;&nbsp;v.push_back("#");<br/>
&nbsp;&nbsp;v.push_back("# lastmod <a href="CppOperatorAssign.htm">=</a> modification <a href="CppTime.htm">time</a> in ISO8601 (YYYY-MM-DDThh:mm:ss+00:00)");<br/>
&nbsp;&nbsp;v.push_back("# changefreq <a href="CppOperatorAssign.htm">=</a> 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' |");<br/>
&nbsp;&nbsp;v.push_back("# 'yearly' | 'never'");<br/>
&nbsp;&nbsp;v.push_back("# priority <a href="CppOperatorAssign.htm">=</a> priority of the page relative to other pages on the same site;");<br/>
&nbsp;&nbsp;v.push_back("# a number between 0.0 and 1.0, where 0.0 is the lowest priority");<br/>
&nbsp;&nbsp;v.push_back("# and 1.0 is the highest priority");<br/>
&nbsp;&nbsp;v.push_back("#");<br/>
&nbsp;&nbsp;v.push_back("# Note that all URLs must be part of the site, and therefore must begin with");<br/>
&nbsp;&nbsp;v.push_back("# the base_url (e.g., 'http://www.example.com/') as specified in config.xml.");<br/>
&nbsp;&nbsp;v.push_back("#");<br/>
&nbsp;&nbsp;v.push_back("# Any line beginning with a # is a comment.");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(files.begin(),files.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::CreateConfig<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; local_website_path,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; urllist_path) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
<br/>
&nbsp;&nbsp;v.push_back("&lt;?xml <a href="CppVersion.htm">version</a>=\"1.0\" encoding=\"UTF-8\"?&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;!<a href="CppOperatorDecrement.htm">--</a>");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;sitemap_gen.py example configuration script");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;This file specifies a set of sample input parameters <b><a href="CppFor.htm">for</a></b> the");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;sitemap_gen.py client.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;You should copy <b><a href="CppThis.htm">this</a></b> file into \"config.xml\" and modify it <b><a href="CppFor.htm">for</a></b>");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;your server.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;********************************************************* <a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&lt;!<a href="CppOperatorDecrement.htm">--</a> ** MODIFY **");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;The \"site\" node describes your basic web site.");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;Required attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;base_url&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> the top-level URL of the site being mapped");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;store_into <a href="CppOperatorMinus.htm">-</a> the webserver path to the desired output file.");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This should end in '.xml' or '.xml.gz'");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (the script will create <b><a href="CppThis.htm">this</a></b> file)");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;Optional attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;verbose&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> an <a href="CppInt.htm">integer</a> from 0 (quiet) to 3 (noisy) <b><a href="CppFor.htm">for</a></b>");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; how much diagnostic output the script gives");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;suppress_search_engine_notify=\"1\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> disables notifying search engines <a href="CppAbout.htm">about</a> the <b><a href="CppNew.htm">new</a></b> map");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (same as the \"testing\" command-line argument.)");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;default_encoding");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> names a <a href="CppChar.htm">character</a> encoding to use <b><a href="CppFor.htm">for</a></b> URLs and");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file paths.&nbsp;&nbsp;(Example: \"UTF-8\")");<br/>
&nbsp;&nbsp;v.push_back("<a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;site");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;base_url=\"http://www.richelbilderbeek.nl\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;store_into=\""+urllist_path+"/sitemap.xml.gz\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;verbose=\"1\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> ********************************************************");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INPUTS");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;All the various nodes in <b><a href="CppThis.htm">this</a></b> section control where the script");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;looks to find URLs.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;MODIFY or DELETE these entries as appropriate <b><a href="CppFor.htm">for</a></b> your server.");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;********************************************************* <a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> ** MODIFY or DELETE **");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;\"url\" nodes specify individual URLs to include in the map.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Required attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;href&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> the URL");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Optional attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastmod&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppTime.htm">time</a>stamp of last modification (ISO8601 format)");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changefreq <a href="CppOperatorMinus.htm">-</a> how often content at <b><a href="CppThis.htm">this</a></b> URL is usually updated");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;priority&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> value 0.0 to 1.0 of relative importance in your site");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;url");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; href=\"http://www.richelbilderbeek.nl/stats?q=name\""); <a href="CppComment.htm">//</a><b><a href="CppNew.htm">new</a></b><br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; href=\"http://www.richelbilderbeek.nl/stats?q=age\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; lastmod=\"" <a href="CppOperatorPlus.htm">+</a> <a href="CppGetDateIso8601.htm">GetDateIso8601</a>() <a href="CppOperatorPlus.htm">+</a>"T01:00:00-07:00\"");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; changefreq=\"weekly\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; priority=\"0.5\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> ** MODIFY or DELETE **");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;\"urllist\" nodes name text files with lists of URLs.");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;An example file \"example_urllist.txt\" is provided.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Required attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> path to the file");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Optional attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoding&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> encoding of the file <b><a href="CppIf.htm">if</a></b> not US-ASCII");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;&lt;urllist path=\"c:\\Progra~1\\Richel~1\\urllist.txt\"&nbsp;&nbsp;encoding=\"UTF-8\"&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;urllist path=\"" <a href="CppOperatorPlus.htm">+</a> urllist_path <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;"/urllist.txt\"&nbsp;&nbsp;encoding=\"UTF-8\"&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> ** MODIFY or DELETE **");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;\"directory\" nodes tell the script to walk the file system");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;and include all files and directories in the Sitemap.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Required attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> path to begin walking from");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> URL equivalent of that path");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Optional attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default_file <a href="CppOperatorMinus.htm">-</a> name of the index or <b><a href="CppDefault.htm">default</a></b> file <b><a href="CppFor.htm">for</a></b> directory URLs");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;directory");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; path=\"C:\\docume~1\\richel~1\\mydocu~1\\richel~1\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; path=\"" <a href="CppOperatorPlus.htm">+</a> local_website_path <a href="CppOperatorPlus.htm">+</a> "\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; url=\"http://www.richelbilderbeek.nl\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp; default_file=\"index.html\"");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> ** MODIFY or DELETE **");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;\"accesslog\" nodes tell the script to scan webserver log files to");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;extract URLs on your site.&nbsp;&nbsp;Both Common Logfile Format (Apache's <b><a href="CppDefault.htm">default</a></b>");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;logfile) and Extended Logfile Format (IIS's <b><a href="CppDefault.htm">default</a></b> logfile) can be read.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Required attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> path to the file");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Optional attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoding&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> encoding of the file <b><a href="CppIf.htm">if</a></b> not US-ASCII");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> ** MODIFY or DELETE **");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;\"sitemap\" nodes tell the script to scan other Sitemap files.&nbsp;&nbsp;This can");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;be useful to aggregate the results of multiple runs of <b><a href="CppThis.htm">this</a></b> script into");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;a single Sitemap.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;Required attributes:");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> path to the file");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> ********************************************************");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FILTERS");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;Filters specify wild-card patterns that the script compares");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;against all URLs it finds.&nbsp;&nbsp;Filters can be used to exclude");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;certain URLs from your Sitemap, <b><a href="CppFor.htm">for</a></b> <a href="CppInstance.htm">instance</a> <b><a href="CppIf.htm">if</a></b> you have");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;hidden content that you hope the search engines don't find.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;Filters can be either type=\"wildcard\", which means standard");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;path wildcards (* and ?) are used to compare against URLs,");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;or type=\"<a href="CppRegex.htm">regex</a>p\", which means regular expressions are used");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;to compare.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;Filters are applied in the order specified in <b><a href="CppThis.htm">this</a></b> file.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;An action=\"drop\" filter causes exclusion of matching URLs.");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;An action=\"pass\" filter causes inclusion of matching URLs,");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;shortcutting <a href="CppAny.htm">any</a> other later filters that might also match.");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;If no filter at all matches a URL, the URL will be included.");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;Together you can build up fairly complex rules.");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;The <b><a href="CppDefault.htm">default</a></b> action is \"drop\".");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;The <b><a href="CppDefault.htm">default</a></b> type is \"wildcard\".");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;You can MODIFY or DELETE these entries as appropriate <b><a href="CppFor.htm">for</a></b>");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;your site.&nbsp;&nbsp;However, unlike above, the example entries in");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b> section are not contrived and may be useful to you as");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;they are.");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;********************************************************* <a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> Exclude URLs that end with a '~'&nbsp;&nbsp; (IE: emacs backup files)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;filter&nbsp;&nbsp;action=\"drop\"&nbsp;&nbsp;type=\"wildcard\"&nbsp;&nbsp;pattern=\"*~\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;!<a href="CppOperatorDecrement.htm">--</a> Exclude URLs within <a href="CppUnix.htm">UNIX</a>-style hidden files or directories&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&lt;filter&nbsp;&nbsp;action=\"drop\"&nbsp;&nbsp;type=\"<a href="CppRegex.htm">regex</a>p\"&nbsp;&nbsp;&nbsp;&nbsp;pattern=\"/\\.[^/]*\"&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&lt;/site&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find page location<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> page_location;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdCount.htm">std::count</a>(<a href="CppArgc.htm">argv</a>.begin(),<a href="CppArgc.htm">argv</a>.end(),"<a href="CppOperatorDecrement.htm">--</a>page"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(<a href="CppArgc.htm">argv</a>.begin(),<a href="CppStdFind.htm">std::find</a>(<a href="CppArgc.htm">argv</a>.begin(),<a href="CppArgc.htm">argv</a>.end(),"<a href="CppOperatorDecrement.htm">--</a>page"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (index <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size() <a href="CppOperatorMinus.htm">-</a> 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Please supply an argument after <a href="CppOperatorDecrement.htm">--</a>page.\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"For example:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;RichelbilderbeekNlSitemapGenerator <a href="CppOperatorDecrement.htm">--</a>page myhome/myhomepagefolder <a href="CppOperatorDecrement.htm">--</a>exe myhome/mybin"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;page_location <a href="CppOperatorAssign.htm">=</a> <a href="CppArgc.htm">argv</a>[index <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find page location<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> sitemapgen_location;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdCount.htm">std::count</a>(<a href="CppArgc.htm">argv</a>.begin(),<a href="CppArgc.htm">argv</a>.end(),"<a href="CppOperatorDecrement.htm">--</a>exe"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(<a href="CppArgc.htm">argv</a>.begin(),<a href="CppStdFind.htm">std::find</a>(<a href="CppArgc.htm">argv</a>.begin(),<a href="CppArgc.htm">argv</a>.end(),"<a href="CppOperatorDecrement.htm">--</a>exe"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (index <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size() <a href="CppOperatorMinus.htm">-</a> 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Please supply an argument after <a href="CppOperatorDecrement.htm">--</a>exe.\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"For example:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;RichelbilderbeekNlSitemapGenerator <a href="CppOperatorDecrement.htm">--</a>page myhome/myhomepagefolder <a href="CppOperatorDecrement.htm">--</a>exe myhome/mybin\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sitemapgen_location <a href="CppOperatorAssign.htm">=</a> <a href="CppArgc.htm">argv</a>[index <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* This <a href="CppApplication.htm">application</a> runs in the folder \'"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> sitemapgen_location<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "'"<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* Searching <b><a href="CppFor.htm">for</a></b> HTML files found in folder '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(page_location)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "\'"<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; files_raw <a href="CppOperatorAssign.htm">=</a> <a href="CppGetHtmlFilesInFolder.htm">GetHtmlFilesInFolder</a>(page_location);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (files_raw.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* No HTML files found in folder '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppStdString.htm">std::string</a>(page_location.c_str())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "\'"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* Please select the correct folder with the websites' HTML files"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(files_raw.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " HTML files found in folder '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> page_location<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "\'"<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Save config.xml to file CreateConfig<a href="CppXml.htm">Xml</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> config_filename <a href="CppOperatorAssign.htm">=</a> "config.xml";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> config_filename <a href="CppOperatorAssign.htm">=</a> <a href="CppGetCurrentFolder.htm">GetCurrentFolder</a>() <a href="CppOperatorPlus.htm">+</a> "/config.xml";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* Creating '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> config_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "' in <b><a href="CppThis.htm">this</a></b> app's folder"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file(config_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; config_file(CreateConfig<a href="CppXml.htm">Xml</a>(page_location,sitemapgen_location));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(config_file.begin(),config_file.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"'"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> config_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "' created successfully"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Save urllist to file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <b><a href="CppShort.htm">short</a></b> filenames to full filenames<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; files_full;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; line: files_raw)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files_full.push_back("http://www.richelbilderbeek.nl/" <a href="CppOperatorPlus.htm">+</a> line);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> header to full filenames<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; full_files_with_header <a href="CppOperatorAssign.htm">=</a> <a href="CppAdd.htm">Add</a>Header(files_full);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log("* Saving urllist.txt in <b><a href="CppThis.htm">this</a></b> app's folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> sitemapgen_url_list_filename <a href="CppOperatorAssign.htm">=</a> sitemapgen_location <a href="CppOperatorPlus.htm">+</a> "/urllist.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> file(sitemapgen_url_list_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(full_files_with_header.begin(),full_files_with_header.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(file,"\n"));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> sitemap_gen.py<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log("* Check <b><a href="CppFor.htm">for</a></b> sitemap_gen.py in <b><a href="CppThis.htm">this</a></b> app's folder");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> sitemap_file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> sitemapgen_location <a href="CppOperatorPlus.htm">+</a> "/sitemap_gen.py";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQFile.htm">QFile</a>::exists(sitemap_file.c_str()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log("* sitemap_gen.py present");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log("* creating sitemap_py");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f_in(":/files/sitemap_gen.py");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f_in.copy(sitemap_file.c_str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume file does exist now<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(sitemap_file));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log("* sitemap_py created successfully");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> python_command<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "python "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> sitemapgen_location<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "/sitemap_gen.py"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorDecrement.htm">--</a>config="<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> sitemapgen_location<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "/config.xml &gt; output.txt";<br/>
<br/>
&nbsp;&nbsp;m_signal_log("* Starting following command:");<br/>
&nbsp;&nbsp;m_signal_log(python_command);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> DO_NOT_EXECUTE_COMMAND<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> DO_NOT_EXECUTE_COMMAND<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log("* DEBUG: COMMAND NOT EXECUTED ");<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> system_<b><a href="CppReturn.htm">return</a></b>_code <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSystem.htm">std::system</a>(python_command.c_str());<br/>
&nbsp;&nbsp;m_signal_log(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* System command finished with <b><a href="CppReturn.htm">return</a></b> code "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(system_<b><a href="CppReturn.htm">return</a></b>_code)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;m_signal_log("* Program finished");<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; output(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppFileToVector.htm">FileToVector</a>("output.txt"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: output)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_signal_log(" " <a href="CppOperatorPlus.htm">+</a> s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_signal_log("* Now copy sitemap.xml.gz to website manually");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"RichelbilderbeekNlSitemapGenerator",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"generates the richelbilderbeek.nl sitemap",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 15th of December 2012",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-2014",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="ToolRichelbilderbeekNlSitemapGenerator.htm">ToolRichelbilderbeekNlSitemapGenerator</a>.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("ProFile <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtCreatorProFile.htm">QtCreatorProFile</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::<a href="CppGetDateIso8601.htm">GetDateIso8601</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdTime_t.htm">std::time_t</a> t <a href="CppOperatorAssign.htm">=</a> <a href="CppStdTime.htm">std::time</a>(0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdTm.htm">std::tm</a> * <b><a href="CppConst.htm">const</a></b> now <a href="CppOperatorAssign.htm">=</a> <a href="CppStdLocaltime.htm">std::localtime</a>( &amp;t );<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> year;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (now-&gt;tm_year <a href="CppOperatorPlus.htm">+</a> 1900);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;year <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(year.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> month;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (now-&gt;tm_mon <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;month <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (month.size() <a href="CppOperatorEqual.htm">==</a> 1) month <a href="CppOperatorAssign.htm">=</a> "0" <a href="CppOperatorPlus.htm">+</a> month;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(month.size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> day;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (now-&gt;tm_mday);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;day <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (day.size() <a href="CppOperatorEqual.htm">==</a> 1) day <a href="CppOperatorAssign.htm">=</a> "0" <a href="CppOperatorPlus.htm">+</a> month;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(day.size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> year <a href="CppOperatorPlus.htm">+</a> "-" <a href="CppOperatorPlus.htm">+</a> month <a href="CppOperatorPlus.htm">+</a> "-" <a href="CppOperatorPlus.htm">+</a> day;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Help <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Help(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileTitle(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileDescription(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::<a href="CppGetHtmlFilesInFolder.htm">GetHtmlFilesInFolder</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get all filenames<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetFilesInFolder.htm">GetFilesInFolder</a>(folder);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the <a href="CppRegex.htm">regex</a> <b><a href="CppFor.htm">for</a></b> a correct HTML filename<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> cpp_file_<a href="CppRegex.htm">regex</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(".*\\.(html|htm)\\&gt;");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the resulting <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy all filenames matching the <a href="CppRegex.htm">regex</a> in the resulting <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match(s,cpp_file_<a href="CppRegex.htm">regex</a>)) w.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> ProgramRichelBilderbeekNlSitemapGenerator<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.3";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-08-08: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-15: <a href="CppVersion.htm">version</a> 1.1: improved code",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-06-20: <a href="CppVersion.htm">version</a> 1.2: improved code",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-12-15: <a href="CppVersion.htm">version</a> 1.3: made global <a href="CppFunction.htm">function</a>s <a href="CppStaticMemberFunction.htm">static member function</a>s, use of <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>, added some graphics to menu"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::SitemapGeneratorMenuDialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRichelbilderbeekNlSitemapGenerator/zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRichelbilderbeekNlSitemapGenerator/zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
<br/>
echo "Removing user information"<br/>
rm *.user<br/>
<br/>
echo "Removing possible temp file"<br/>
rm copy.txt<br/>
rm tmp.txt<br/>
<br/>
<br/>
echo "Creating of all main folders"<br/>
<br/>
mkdir temp_zip<br/>
mkdir temp_zip/Classes<br/>
mkdir temp_zip/Tools<br/>
<br/>
echo "Creating of all subfolders"<br/>
<br/>
mkdir temp_zip/Classes/CppAbout<br/>
mkdir temp_zip/Classes/CppQtAboutDialog<br/>
mkdir temp_zip/Classes/CppQtHideAndShowDialog<br/>
mkdir temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator<br/>
<br/>
echo "Copying files"<br/>
<br/>
cp ../../Classes/CppAbout/Licence.txt temp_zip/Classes/CppAbout/Licence.txt<br/>
cp ../../Classes/CppAbout/about.cpp temp_zip/Classes/CppAbout/about.cpp<br/>
cp ../../Classes/CppAbout/about.h temp_zip/Classes/CppAbout/about.h<br/>
cp ../../Classes/CppQtAboutDialog/Licence.txt temp_zip/Classes/CppQtAboutDialog/Licence.txt<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.cpp temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.cpp<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.h temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.h<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.ui temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.ui<br/>
cp ../../Classes/CppQtHideAndShowDialog/Licence.txt temp_zip/Classes/CppQtHideAndShowDialog/Licence.txt<br/>
cp ../../Classes/CppQtHideAndShowDialog/qthideandshowdialog.cpp temp_zip/Classes/CppQtHideAndShowDialog/qthideandshowdialog.cpp<br/>
cp ../../Classes/CppQtHideAndShowDialog/qthideandshowdialog.h temp_zip/Classes/CppQtHideAndShowDialog/qthideandshowdialog.h<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/Licence.txt temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/Licence.txt<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/PicR14x14.png temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/PicR14x14.png<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/PicSitemap14x14.png temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/PicSitemap14x14.png<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/PicTo14x14.png temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/PicTo14x14.png<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGenerator.pro temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGenerator.pro<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGenerator.qrc temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/ToolRichelbilderbeekNlSitemapGenerator.qrc<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/qtmain.cpp temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/qtmain.cpp<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/qtmain.cpp\ temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/qtmain.cpp\<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.cpp temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.cpp<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.h temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.h<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.ui temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormaindialog.ui<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.cpp temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.cpp<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.h temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.h<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.ui temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/qtsitemapgeneratormenudialog.ui<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/sitemap_gen.py temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/sitemap_gen.py<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/sitemapgeneratormenudialog.cpp temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/sitemapgeneratormenudialog.cpp<br/>
cp ../../Tools/ToolRichelbilderbeekNlSitemapGenerator/sitemapgeneratormenudialog.h temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/sitemapgeneratormenudialog.h<br/>
<br/>
FILENAME="ToolRichelbilderbeekNlSitemapGeneratorSource"<br/>
ZIP_FILENAME=$FILENAME".zip"<br/>
<br/>
echo "Compressing files"<br/>
<br/>
cd temp_zip<br/>
zip -r $FILENAME Classes<br/>
zip -r $FILENAME Tools<br/>
cd ..<br/>
cp "temp_zip/"$ZIP_FILENAME $ZIP_FILENAME<br/>
<br/>
echo "Cleaning up"<br/>
<br/>
echo "Emptying subfolders"<br/>
<br/>
rm temp_zip/Classes/CppAbout/*.*<br/>
rm temp_zip/Classes/CppQtAboutDialog/*.*<br/>
rm temp_zip/Classes/CppQtHideAndShowDialog/*.*<br/>
rm temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator/*.*<br/>
<br/>
echo "Removing subfolders"<br/>
<br/>
rmdir temp_zip/Classes/CppAbout<br/>
rmdir temp_zip/Classes/CppQtAboutDialog<br/>
rmdir temp_zip/Classes/CppQtHideAndShowDialog<br/>
rmdir temp_zip/Tools/ToolRichelbilderbeekNlSitemapGenerator<br/>
<br/>
echo "Removing main folders"<br/>
<br/>
rmdir temp_zip/Classes<br/>
rmdir temp_zip/Tools<br/>
<br/>
echo "Removing temporary folder"<br/>
<br/>
rm temp_zip/*.*<br/>
rmdir temp_zip<br/>
<br/>
echo "Done"<br/>
<br/>
# CreateQtProjectZipFile, version 1.3<br/>
# Copyright (C) 2012 Richel Bilderbeek<br/>
# Programmed on the 10th of June 2012<br/>
# by Richel Bilderbeek<br/>
# <br/>
# CreateQtProjectZipFile can be downloaded from http://www.richelbilderbeek.nl/ToolCreateQtProjectZipFile.htm<br/>
# Licenced under GPL 3.0<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
