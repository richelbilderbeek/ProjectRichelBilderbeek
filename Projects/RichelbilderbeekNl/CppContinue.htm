<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>continue</title>
  <meta name="description" content="C++ continue"/>
  <meta name="keywords" content="C++ continue keyword code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppContinue.htm">continue</a></h1>
<p>&nbsp;</p>
<p><a href="CppContinue.htm">continue</a> is a <a href="CppKeyword.htm">keyword</a> to skip the rest of a <a href="CppFor.htm">for</a>/<a
href="CppWhile.htm">while</a>-<a href="CppLoop.htm">loop</a> and continue to perform the next.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppFor.htm">for</a></b> (<a href="CppComment.htm">/*</a> something #1 <a href="CppComment.htm">*/</a> )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This line is always executed<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppComment.htm">/*</a> something #2 <a href="CppComment.htm">*/</a>) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This line is only executed <b><a href="CppIf.htm">if</a></b> 'something #2' is <b><a href="CppFalse.htm">false</a></b><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Consider to never use <a href="CppContinue.htm">continue</a> [1].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example: <a href="CppCountDeadEnds.htm">CountDeadEnds</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCountDeadEnds.htm">CountDeadEnds</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppCountDeadEnds.htm">CountDeadEnds</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(maze.size());<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nDeadEnds <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=1; y<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=1; x<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (maze[y][x] <a href="CppOperatorNotEqual.htm">!=</a> 0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>Continue <b><a href="CppIf.htm">if</a></b> here is a wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nWalls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (maze[y+1][x ] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y-1][x ] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y ][x+1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y ][x-1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 ? 1 : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nWalls <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3) <a href="CppOperatorPlus.htm">+</a>+nDeadEnds; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nDeadEnds;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!-- [1] -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 190 (MISRA Rule 57): 'The continue statement shall not be used.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
