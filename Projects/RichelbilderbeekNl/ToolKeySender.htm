<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>KeySender</title>
  <meta name="description" content="C++ KeySender"/>
  <meta name="keywords" content="C++ KeySender "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolKeySender.htm">KeySender</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug  5 12:03:26 2014
 -->
<p>
  <a href="ToolKeySender.htm">KeySender</a> is a demonstration tool of 
  <a href="http://www.codeproject.com/KB/cpp/sendkeys_cpp_Article.aspx">Lallous' CSendKey class</a> 
  with which you can send virtual key presses to any window. 
  For example, you can let <a href="ToolKeySender.htm">KeySender</a> type a
  notepad document for you (as seen in the screenshot).
</p>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolKeySender_1_0.png">View a screenshot of 'KeySender' (version 1.0)(png)</a></li>
  <li><a href="ToolKeySenderExe_1_0.zip">Download the 'KeySender' Windows executable (zip)</a></li>
  <li><a href="ToolKeySenderSource_1_0.zip">Download the 'KeySender' source code (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.codeproject.com/Articles/6819/SendKeys-in-C">Lallous' article about his CSendKey class</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKeySender/ProjectKeySender.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKeySender/ProjectKeySender.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormKeySender<a href="CppImplementationFile.htm">.cpp</a>", FormKeySender);<br/>
USEFORM("UnitForm<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "KeySender";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormKeySender), &amp;FormKeySender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKeySender/UnitFormAbout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKeySender/UnitFormAbout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;KeySender, demonstration of CSendKey <b><a href="CppClass.htm">class</a></b> by Lallous<br/>
&nbsp;&nbsp;Copyright (C) 2010&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppAbout.htm">About</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppAbout.htm">About</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppAbout.htm">About</a> : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEditCopyrightKeySender;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAuthor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTopRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelWebsite;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelDate;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelAuthor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCopyright;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTitle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel<a href="CppVersion.htm">Version</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEditCopyrightCSendKey;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppAbout.htm">About</a> *Form<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKeySender/UnitFormAbout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKeySender/UnitFormAbout.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;KeySender, demonstration of CSendKey <b><a href="CppClass.htm">class</a></b> by Lallous<br/>
&nbsp;&nbsp;Copyright (C) 2010&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppAbout.htm">About</a> *Form<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppAbout.htm">About</a>::TForm<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKeySender/UnitFormKeySender.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKeySender/UnitFormKeySender.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;KeySender, demonstration of CSendKey <b><a href="CppClass.htm">class</a></b> by Lallous<br/>
&nbsp;&nbsp;Copyright (C) 2010&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormKeySenderH<br/>
<a href="CppDefine.htm">#define</a> UnitFormKeySenderH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormKeySender : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonSend;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabeledEdit *EditWindowTitle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonStartNotepad;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonSendClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonStartNotepadClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Button<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormKeySender(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormKeySender *FormKeySender;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKeySender/UnitFormKeySender.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKeySender/UnitFormKeySender.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;KeySender, demonstration of CSendKey <b><a href="CppClass.htm">class</a></b> by Lallous<br/>
&nbsp;&nbsp;Copyright (C) 2010&nbsp;&nbsp;Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitSendKeys.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormKeySender.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormKeySender *FormKeySender;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormKeySender::TFormKeySender(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormKeySender::ButtonSendClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;CSendKeys c;<br/>
&nbsp;&nbsp;c.AppActivate(EditWindowTitle-&gt;Text.c_str());<br/>
<br/>
&nbsp;&nbsp;c.SetDelay(20);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> RichEdit-&gt;Lines-&gt;Count;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.SendKeys(RichEdit-&gt;Lines-&gt;<b><a href="CppOperator.htm">operator</a></b>[](i).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Send an enter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.SendKeys("{enter}");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormKeySender::ButtonStartNotepadClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;CSendKeys c;<br/>
&nbsp;&nbsp;c.SendKeys("{DELAY=100}@rnotepad~");<br/>
&nbsp;&nbsp;EditWindowTitle-&gt;Text <a href="CppOperatorAssign.htm">=</a> "Untitled <a href="CppOperatorMinus.htm">-</a> Notepad";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormKeySender::Button<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKeySender/UnitSendKeys.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKeySender/UnitSendKeys.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSendKeysH<br/>
<a href="CppDefine.htm">#define</a> UnitSendKeysH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a> Copyright (c) 2004 lallous &lt;lallousx86@yahoo.com&gt;<br/>
 * All rights reserved.<br/>
 *<br/>
 * Redistribution and use in source and binary forms, with or without<br/>
 * modification, are permitted provided that the following conditions<br/>
 * are met:<br/>
 * 1. Redistributions of source code must retain the above copyright<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;notice, <b><a href="CppThis.htm">this</a></b> list of conditions and the following disclaimer.<br/>
 * 2. Redistributions in binary form must reproduce the above copyright<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;notice, <b><a href="CppThis.htm">this</a></b> list of conditions and the following disclaimer in the<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDocumentation.htm">documentation</a> and/or other materials provided with the distribution.<br/>
 *<br/>
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND<br/>
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE<br/>
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE<br/>
 * ARE DISCLAIMED.&nbsp;&nbsp;IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE<br/>
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL<br/>
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS<br/>
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)<br/>
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT<br/>
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY<br/>
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF<br/>
 * SUCH DAMAGE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> Modified by Bilderbikkel (RJCB)<br/>
<a href="CppComment.htm">//</a> http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;windows.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;t<b><a href="CppChar.htm">char</a></b>.h&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> CSendKeys<br/>
{<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_bWait, m_bUsingParens, m_bShiftDown, m_bAltDown, m_bControlDown, m_bWinDown;<br/>
&nbsp;&nbsp;DWORD&nbsp;&nbsp;m_nDelayAlways, m_nDelayNow;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: <a href="CppAdd.htm">Add</a>ed <b><a href="CppStatic.htm">static</a></b> member variable<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> HWND <b><a href="CppEnum.htm">enum</a></b>windowsProc_hwnd;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: <a href="CppAdd.htm">Add</a>ed <b><a href="CppStatic.htm">static</a></b> member variable<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> LPARAM <b><a href="CppEnum.htm">enum</a></b>windowsProc_lParam;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Removed the arguments<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> BOOL CALLBACK <b><a href="CppEnum.htm">enum</a></b>windowsProc(HWND hwnd, LPARAM lParam);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Use <b><a href="CppStatic.htm">static</a></b> member variables instead<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> BOOL CALLBACK <b><a href="CppEnum.htm">enum</a></b>windowsProc();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b>&nbsp;&nbsp; CarryDelay();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> BYTE KEYBOARDSTATE_t[256];<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <b><a href="CppEnum.htm">enum</a></b>window_t<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;LPTSTR str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;HWND hwnd;<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> key_desc_t<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;LPCTSTR keyName;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BYTE VKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> normalkey; <a href="CppComment.htm">//</a> a normal <a href="CppChar.htm">character</a> or a VKEY ?<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MaxSendKeysRecs&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 71,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MaxExtendedVKeys <a href="CppOperatorAssign.htm">=</a> 10<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Reference: VkKeyScan() <a href="CppOperatorDivide.htm">/</a> MSDN<br/>
&nbsp;&nbsp;Bit Meaning <br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorDecrement.htm">--</a>------<br/>
&nbsp;&nbsp;1&nbsp;&nbsp; Either SHIFT key is pressed. <br/>
&nbsp;&nbsp;2&nbsp;&nbsp; Either CTRL key is pressed. <br/>
&nbsp;&nbsp;4&nbsp;&nbsp; Either ALT key is pressed. <br/>
&nbsp;&nbsp;8&nbsp;&nbsp; The Hankaku key is pressed <br/>
&nbsp;&nbsp;16&nbsp;&nbsp;Reserved (defined by the keyboard layout driver). <br/>
&nbsp;&nbsp;32&nbsp;&nbsp;Reserved (defined by the keyboard layout driver). <br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> WORD VKKEYSCANSHIFTON;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> WORD VKKEYSCANCTRLON;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> WORD VKKEYSCANALTON;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> WORD INVALIDKEY;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> key_desc_t KeyNames[MaxSendKeysRecs]; <br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> BYTE ExtendedVKeys[MaxExtendedVKeys];<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> BitSet(BYTE BitTable, UINT BitMask);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PopUpShiftKeys();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> IsVkExtended(BYTE VKey);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SendKeyUp(BYTE VKey);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SendKeyDown(BYTE VKey, WORD Num<a href="CppTime.htm">Time</a>s, <b><a href="CppBool.htm">bool</a></b> GenUpMsg, <b><a href="CppBool.htm">bool</a></b> bDelay <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SendKey(WORD MKey, WORD Num<a href="CppTime.htm">Time</a>s, <b><a href="CppBool.htm">bool</a></b> GenDownMsg);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> WORD StringToVKey(LPCTSTR KeyString, <b><a href="CppInt.htm">int</a></b> &amp;idx);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> KeyboardEvent(BYTE VKey, BYTE ScanCode, LONG Flags);<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> SendKeys(LPCTSTR KeysString, <b><a href="CppBool.htm">bool</a></b> Wait <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> AppActivate(HWND wnd);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> AppActivate(LPCTSTR WindowTitle, LPCTSTR WindowClass <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDelay(<b><a href="CppConst.htm">const</a></b> DWORD delay) { m_nDelayAlways <a href="CppOperatorAssign.htm">=</a> delay; }<br/>
&nbsp;&nbsp;CSendKeys();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKeySender/UnitSendKeys.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKeySender/UnitSendKeys.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitSendKeys.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a> Copyright (c) 2004 lallous &lt;lallousx86@yahoo.com&gt;<br/>
 * All rights reserved.<br/>
 *<br/>
 * Redistribution and use in source and binary forms, with or without<br/>
 * modification, are permitted provided that the following conditions<br/>
 * are met:<br/>
 * 1. Redistributions of source code must retain the above copyright<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;notice, <b><a href="CppThis.htm">this</a></b> list of conditions and the following disclaimer.<br/>
 * 2. Redistributions in binary form must reproduce the above copyright<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;notice, <b><a href="CppThis.htm">this</a></b> list of conditions and the following disclaimer in the<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDocumentation.htm">documentation</a> and/or other materials provided with the distribution.<br/>
 *<br/>
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND<br/>
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE<br/>
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE<br/>
 * ARE DISCLAIMED.&nbsp;&nbsp;IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE<br/>
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL<br/>
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS<br/>
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)<br/>
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT<br/>
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY<br/>
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF<br/>
 * SUCH DAMAGE.<br/>
<br/>
The Original SendKeys copyright info<br/>
---------------------------------------<br/>
SendKeys (sndkeys32.pas) routine <b><a href="CppFor.htm">for</a></b> 32-bit Delphi.<br/>
Written by Ken Henderson<br/>
Copyright (c) 1995 Ken Henderson &lt;khen@compuserve.com&gt;<br/>
<br/>
History<br/>
----------<br/>
04/19/2004<br/>
&nbsp;&nbsp;* Initial <a href="CppVersion.htm">version</a> development<br/>
04/21/2004<br/>
&nbsp;&nbsp;* <a href="CppAdd.htm">Add</a>ed number of <a href="CppTime.htm">time</a>s specifier to special keys<br/>
&nbsp;&nbsp;* <a href="CppAdd.htm">Add</a>ed {BEEP X Y}<br/>
&nbsp;&nbsp;* <a href="CppAdd.htm">Add</a>ed {APPACTIVATE WindowTitle}<br/>
&nbsp;&nbsp;* <a href="CppAdd.htm">Add</a>ed CarryDelay() and now delay works properly with all keys<br/>
&nbsp;&nbsp;* <a href="CppAdd.htm">Add</a>ed SetDelay() <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;* Fixed code in AppActivate that allowed to pass both <a href="CppNULL.htm">NULL</a> windowTitle/windowClass<br/>
<br/>
05/21/2004<br/>
&nbsp;&nbsp;* Fixed a <a href="CppBug.htm">bug</a> in StringToVKey() that caused the search <b><a href="CppFor.htm">for</a></b> RIGHTPAREN to be matched as RIGHT<br/>
&nbsp;&nbsp;* Adjusted code so it <a href="CppCompile.htm">compile</a>s w<a href="CppOperatorDivide.htm">/</a> VC6<br/>
05/24/2004<br/>
&nbsp;&nbsp;* <a href="CppAdd.htm">Add</a>ed unicode support<br/>
<br/>
Todo<br/>
-------<br/>
* perhaps add mousecontrol: mousemove+mouse clicks<br/>
* allow sending of normal keys multiple <a href="CppTime.htm">time</a>s as: {a 10}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> Modified by Bilderbikkel (RJCB)<br/>
<a href="CppComment.htm">//</a> http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a>RJCB: <a href="CppAdd.htm">Add</a>ed <b><a href="CppStatic.htm">static</a></b> member variable<br/>
HWND CSendKeys::<b><a href="CppEnum.htm">enum</a></b>windowsProc_hwnd <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppComment.htm">//</a>RJCB: <a href="CppAdd.htm">Add</a>ed <b><a href="CppStatic.htm">static</a></b> member variable<br/>
LPARAM CSendKeys::<b><a href="CppEnum.htm">enum</a></b>windowsProc_lParam;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> WORD CSendKeys::VKKEYSCANSHIFTON <a href="CppOperatorAssign.htm">=</a> 0x01;<br/>
<b><a href="CppConst.htm">const</a></b> WORD CSendKeys::VKKEYSCANCTRLON&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0x02;<br/>
<b><a href="CppConst.htm">const</a></b> WORD CSendKeys::VKKEYSCANALTON&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0x04;<br/>
<b><a href="CppConst.htm">const</a></b> WORD CSendKeys::INVALIDKEY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0xFFFF;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> BYTE CSendKeys::ExtendedVKeys[MaxExtendedVKeys] <a href="CppOperatorAssign.htm">=</a><br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_UP,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_DOWN,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_LEFT,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_RIGHT,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_HOME,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_END,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_PRIOR, <a href="CppComment.htm">//</a> PgUp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_NEXT,&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;PgDn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_INSERT,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VK_DELETE<br/>
};<br/>
<br/>
CSendKeys::CSendKeys()<br/>
{<br/>
&nbsp;&nbsp;m_nDelayNow <a href="CppOperatorAssign.htm">=</a> m_nDelayAlways <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Delphi port <a href="CppRegex.htm">regex</a>ps:<br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorDecrement.htm">--</a>-------------------<br/>
<a href="CppComment.htm">//</a> search: .+Name:'([^']+)'.+vkey:([^\)]+)\)<br/>
<a href="CppComment.htm">//</a> replace: {"\1", \2}<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> **If you add to <b><a href="CppThis.htm">this</a></b> list, you must be sure to keep it sorted alphabetically<br/>
<a href="CppComment.htm">//</a> by Name because a binary search routine is used to scan it.**<br/>
<a href="CppComment.htm">//</a><br/>
CSendKeys::key_desc_t CSendKeys::KeyNames[CSendKeys::MaxSendKeysRecs] <a href="CppOperatorAssign.htm">=</a> <br/>
{<br/>
&nbsp;&nbsp;{_T("ADD"), VK_ADD}, <br/>
&nbsp;&nbsp;{_T("APPS"), VK_APPS},<br/>
&nbsp;&nbsp;{_T("AT"), '@', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("BACKSPACE"), VK_BACK},<br/>
&nbsp;&nbsp;{_T("BKSP"), VK_BACK},<br/>
&nbsp;&nbsp;{_T("BREAK"), VK_CANCEL},<br/>
&nbsp;&nbsp;{_T("BS"), VK_BACK},<br/>
&nbsp;&nbsp;{_T("CAPSLOCK"), VK_CAPITAL},<br/>
&nbsp;&nbsp;{_T("CARET"), '^', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("CLEAR"), VK_CLEAR},<br/>
&nbsp;&nbsp;{_T("DECIMAL"), VK_DECIMAL}, <br/>
&nbsp;&nbsp;{_T("DEL"), VK_DELETE},<br/>
&nbsp;&nbsp;{_T("DELETE"), VK_DELETE},<br/>
&nbsp;&nbsp;{_T("DIVIDE"), VK_DIVIDE}, <br/>
&nbsp;&nbsp;{_T("DOWN"), VK_DOWN},<br/>
&nbsp;&nbsp;{_T("END"), VK_END},<br/>
&nbsp;&nbsp;{_T("ENTER"), VK_RETURN},<br/>
&nbsp;&nbsp;{_T("ESC"), VK_ESCAPE},<br/>
&nbsp;&nbsp;{_T("ESCAPE"), VK_ESCAPE},<br/>
&nbsp;&nbsp;{_T("F1"), VK_F1},<br/>
&nbsp;&nbsp;{_T("F10"), VK_F10},<br/>
&nbsp;&nbsp;{_T("F11"), VK_F11},<br/>
&nbsp;&nbsp;{_T("F12"), VK_F12},<br/>
&nbsp;&nbsp;{_T("F13"), VK_F13},<br/>
&nbsp;&nbsp;{_T("F14"), VK_F14},<br/>
&nbsp;&nbsp;{_T("F15"), VK_F15},<br/>
&nbsp;&nbsp;{_T("F16"), VK_F16},<br/>
&nbsp;&nbsp;{_T("F2"), VK_F2},<br/>
&nbsp;&nbsp;{_T("F3"), VK_F3},<br/>
&nbsp;&nbsp;{_T("F4"), VK_F4},<br/>
&nbsp;&nbsp;{_T("F5"), VK_F5},<br/>
&nbsp;&nbsp;{_T("F6"), VK_F6},<br/>
&nbsp;&nbsp;{_T("F7"), VK_F7},<br/>
&nbsp;&nbsp;{_T("F8"), VK_F8},<br/>
&nbsp;&nbsp;{_T("F9"), VK_F9},<br/>
&nbsp;&nbsp;{_T("HELP"), VK_HELP},<br/>
&nbsp;&nbsp;{_T("HOME"), VK_HOME},<br/>
&nbsp;&nbsp;{_T("INS"), VK_INSERT},<br/>
&nbsp;&nbsp;{_T("LEFT"), VK_LEFT},<br/>
&nbsp;&nbsp;{_T("LEFTBRACE"), '{', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("LEFTPAREN"), '(', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("LWIN"), VK_LWIN},<br/>
&nbsp;&nbsp;{_T("MULTIPLY"), VK_MULTIPLY}, <br/>
&nbsp;&nbsp;{_T("NUMLOCK"), VK_NUMLOCK},<br/>
&nbsp;&nbsp;{_T("NUMPAD0"), VK_NUMPAD0}, <br/>
&nbsp;&nbsp;{_T("NUMPAD1"), VK_NUMPAD1}, <br/>
&nbsp;&nbsp;{_T("NUMPAD2"), VK_NUMPAD2},<br/>
&nbsp;&nbsp;{_T("NUMPAD3"), VK_NUMPAD3}, <br/>
&nbsp;&nbsp;{_T("NUMPAD4"), VK_NUMPAD4}, <br/>
&nbsp;&nbsp;{_T("NUMPAD5"), VK_NUMPAD5}, <br/>
&nbsp;&nbsp;{_T("NUMPAD6"), VK_NUMPAD6}, <br/>
&nbsp;&nbsp;{_T("NUMPAD7"), VK_NUMPAD7}, <br/>
&nbsp;&nbsp;{_T("NUMPAD8"), VK_NUMPAD8}, <br/>
&nbsp;&nbsp;{_T("NUMPAD9"), VK_NUMPAD9}, <br/>
&nbsp;&nbsp;{_T("PERCENT"), '%', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("PGDN"), VK_NEXT},<br/>
&nbsp;&nbsp;{_T("PGUP"), VK_PRIOR},<br/>
&nbsp;&nbsp;{_T("PLUS"), '+', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("PRTSC"), VK_PRINT},<br/>
&nbsp;&nbsp;{_T("RIGHT"), VK_RIGHT},<br/>
&nbsp;&nbsp;{_T("RIGHTBRACE"), '}', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("RIGHTPAREN"), ')', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("RWIN"), VK_RWIN},<br/>
&nbsp;&nbsp;{_T("SCROLL"), VK_SCROLL},<br/>
&nbsp;&nbsp;{_T("SEPARATOR"), VK_SEPARATOR}, <br/>
&nbsp;&nbsp;{_T("SNAPSHOT"), VK_SNAPSHOT},<br/>
&nbsp;&nbsp;{_T("SUBTRACT"), VK_SUBTRACT}, <br/>
&nbsp;&nbsp;{_T("TAB"), VK_TAB},<br/>
&nbsp;&nbsp;{_T("TILDE"), '~', <b><a href="CppTrue.htm">true</a></b>},<br/>
&nbsp;&nbsp;{_T("UP"), VK_UP},<br/>
&nbsp;&nbsp;{_T("WIN"), VK_LWIN}<br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a> calls keybd_event() and waits, <b><a href="CppIf.htm">if</a></b> needed, till the sent input is processed<br/>
<b><a href="CppVoid.htm">void</a></b> CSendKeys::KeyboardEvent(BYTE VKey, BYTE ScanCode, LONG Flags)<br/>
{<br/>
&nbsp;&nbsp;MSG KeyboardMsg;<br/>
<br/>
&nbsp;&nbsp;keybd_event(VKey, ScanCode, Flags, 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_bWait)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (::PeekMessage(&amp;KeyboardMsg, 0, WM_KEYFIRST, WM_KEYLAST, PM_REMOVE))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::TranslateMessage(&amp;KeyboardMsg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::DispatchMessage(&amp;KeyboardMsg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Checks whether the specified VKey is an extended key or not<br/>
<b><a href="CppBool.htm">bool</a></b> CSendKeys::IsVkExtended(BYTE VKey)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0;i&lt;MaxExtendedVKeys;i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ExtendedVKeys[i] <a href="CppOperatorEqual.htm">==</a> VKey)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Generates KEYUP<br/>
<b><a href="CppVoid.htm">void</a></b> CSendKeys::SendKeyUp(BYTE VKey)<br/>
{<br/>
&nbsp;&nbsp;BYTE ScanCode <a href="CppOperatorAssign.htm">=</a> LOBYTE(::MapVirtualKey(VKey, 0));<br/>
<br/>
&nbsp;&nbsp;KeyboardEvent(VKey,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScanCode, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KEYEVENTF_KEYUP | (IsVkExtended(VKey) ? KEYEVENTF_EXTENDEDKEY : 0));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> CSendKeys::SendKeyDown(BYTE VKey, WORD Num<a href="CppTime.htm">Time</a>s, <b><a href="CppBool.htm">bool</a></b> GenUpMsg, <b><a href="CppBool.htm">bool</a></b> bDelay)<br/>
{<br/>
&nbsp;&nbsp;WORD Cnt <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;BYTE ScanCode <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> Num<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (VKey <a href="CppOperatorEqual.htm">==</a> VK_NUMLOCK)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DWORD dw<a href="CppVersion.htm">Version</a> <a href="CppOperatorAssign.htm">=</a> ::Get<a href="CppVersion.htm">Version</a>();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (Cnt=1; Cnt<a href="CppOperatorLessEqual.htm">&lt;=</a>Num<a href="CppTime.htm">Time</a>s; Cnt<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bDelay)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CarryDelay();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> snippet based on:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> http://www.codeproject.com/cpp/togglekeys.asp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dw<a href="CppVersion.htm">Version</a> &lt; 0x80000000)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::keybd_event(VKey, 0x45, KEYEVENTF_EXTENDEDKEY, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::keybd_event(VKey, 0x45, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Win98 and later<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( ((DWORD)(HIBYTE(LOWORD(dw<a href="CppVersion.htm">Version</a>))) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 10) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Define _WIN32_WINNT &gt; 0x0400<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> to <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INPUT input[2] <a href="CppOperatorAssign.htm">=</a> {0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input[0].type <a href="CppOperatorAssign.htm">=</a> input[1].type <a href="CppOperatorAssign.htm">=</a> INPUT_KEYBOARD;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input[0].ki.wVk <a href="CppOperatorAssign.htm">=</a> input[1].ki.wVk <a href="CppOperatorAssign.htm">=</a> VKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input[1].ki.dwFlags <a href="CppOperatorAssign.htm">=</a> KEYEVENTF_KEYUP;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::SendInput(<b><a href="CppSizeof.htm">sizeof</a></b>(input) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppSizeof.htm">sizeof</a></b>(INPUT), input, <b><a href="CppSizeof.htm">sizeof</a></b>(INPUT));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Win95<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KEYBOARDSTATE_t Keyboard<a href="CppState.htm">State</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Num<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> GetKey<a href="CppState.htm">State</a>(VK_NUMLOCK) &amp; 1 ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetKeyboard<a href="CppState.htm">State</a>(&amp;Keyboard<a href="CppState.htm">State</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Num<a href="CppState.htm">State</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Keyboard<a href="CppState.htm">State</a>[VK_NUMLOCK] &amp;<a href="CppOperatorAssign.htm">=</a> ~1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Keyboard<a href="CppState.htm">State</a>[VK_NUMLOCK] |<a href="CppOperatorAssign.htm">=</a> 1;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetKeyboard<a href="CppState.htm">State</a>(&amp;Keyboard<a href="CppState.htm">State</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Get scancode<br/>
&nbsp;&nbsp;ScanCode <a href="CppOperatorAssign.htm">=</a> LOBYTE(::MapVirtualKey(VKey, 0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Send keys<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (Cnt=1; Cnt<a href="CppOperatorLessEqual.htm">&lt;=</a>Num<a href="CppTime.htm">Time</a>s; Cnt<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Carry needed delay ?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bDelay)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CarryDelay();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;KeyboardEvent(VKey, ScanCode, IsVkExtended(VKey) ? KEYEVENTF_EXTENDEDKEY : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GenUpMsg)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyboardEvent(VKey, ScanCode, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Checks whether a bit is set<br/>
<b><a href="CppBool.htm">bool</a></b> CSendKeys::BitSet(BYTE BitTable, UINT BitMask)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> BitTable &amp; BitMask ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Sends a single key<br/>
<b><a href="CppVoid.htm">void</a></b> CSendKeys::SendKey(WORD MKey, WORD Num<a href="CppTime.htm">Time</a>s, <b><a href="CppBool.htm">bool</a></b> GenDownMsg)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Send appropriate shift keys associated with the given VKey<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitSet(HIBYTE(MKey), VKKEYSCANSHIFTON))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SendKeyDown(VK_SHIFT, 1, <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitSet(HIBYTE(MKey), VKKEYSCANCTRLON))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SendKeyDown(VK_CONTROL, 1, <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitSet(HIBYTE(MKey), VKKEYSCANALTON))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SendKeyDown(VK_MENU, 1, <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Send the actual VKey<br/>
&nbsp;&nbsp;SendKeyDown(LOBYTE(MKey), Num<a href="CppTime.htm">Time</a>s, GenDownMsg, <b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> toggle up shift keys<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitSet(HIBYTE(MKey), VKKEYSCANSHIFTON))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SendKeyUp(VK_SHIFT);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitSet(HIBYTE(MKey), VKKEYSCANCTRLON))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SendKeyUp(VK_CONTROL);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (BitSet(HIBYTE(MKey), VKKEYSCANALTON))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SendKeyUp(VK_MENU);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Implements a simple binary search to locate special key name strings<br/>
WORD CSendKeys::StringToVKey(LPCTSTR KeyString, <b><a href="CppInt.htm">int</a></b> &amp;idx)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> Found <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>, Collided;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b>&nbsp;&nbsp;Bottom <a href="CppOperatorAssign.htm">=</a> 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Top <a href="CppOperatorAssign.htm">=</a> MaxSendKeysRecs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Middle <a href="CppOperatorAssign.htm">=</a> (Bottom <a href="CppOperatorPlus.htm">+</a> Top) <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;WORD retval <a href="CppOperatorAssign.htm">=</a> INVALIDKEY;<br/>
<br/>
&nbsp;&nbsp;idx&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Collided <a href="CppOperatorAssign.htm">=</a> (Bottom <a href="CppOperatorEqual.htm">==</a> Middle) <a href="CppOperatorLogicalOr.htm">||</a> (Top <a href="CppOperatorEqual.htm">==</a> Middle);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cmp <a href="CppOperatorAssign.htm">=</a> _tcsnicmp(KeyNames[Middle].keyName, KeyString, _tcslen(KeyString));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cmp <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Found <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval <a href="CppOperatorAssign.htm">=</a> KeyNames[Middle].VKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idx&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Middle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cmp &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bottom <a href="CppOperatorAssign.htm">=</a> Middle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Top <a href="CppOperatorAssign.htm">=</a> Middle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Middle <a href="CppOperatorAssign.htm">=</a> (Bottom <a href="CppOperatorPlus.htm">+</a> Top) <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (!(Found <a href="CppOperatorLogicalOr.htm">||</a> Collided));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> retval;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Releases all shift keys (keys that can be depressed <b><a href="CppWhile.htm">while</a></b> other keys are being pressed<br/>
<a href="CppComment.htm">//</a> If we are in a modifier group <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> does nothing<br/>
<b><a href="CppVoid.htm">void</a></b> CSendKeys::PopUpShiftKeys()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_bUsingParens)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_bShiftDown)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyUp(VK_SHIFT);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_bControlDown)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyUp(VK_CONTROL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_bAltDown)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyUp(VK_MENU);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_bWinDown)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyUp(VK_LWIN);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_bWinDown <a href="CppOperatorAssign.htm">=</a> m_bShiftDown <a href="CppOperatorAssign.htm">=</a> m_bControlDown <a href="CppOperatorAssign.htm">=</a> m_bAltDown <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Sends a key string<br/>
<b><a href="CppBool.htm">bool</a></b> CSendKeys::SendKeys(LPCTSTR KeysString, <b><a href="CppBool.htm">bool</a></b> Wait)<br/>
{<br/>
&nbsp;&nbsp;WORD MKey, Num<a href="CppTime.htm">Time</a>s;<br/>
&nbsp;&nbsp;TCHAR KeyString[300] <a href="CppOperatorAssign.htm">=</a> {0};<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> retval&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b>&nbsp;&nbsp;keyIdx;<br/>
<br/>
&nbsp;&nbsp;LPTSTR pKey <a href="CppOperatorAssign.htm">=</a> (LPTSTR) KeysString;<br/>
&nbsp;&nbsp;TCHAR&nbsp;&nbsp;ch;<br/>
<br/>
&nbsp;&nbsp;m_bWait <a href="CppOperatorAssign.htm">=</a> Wait;<br/>
<br/>
&nbsp;&nbsp;m_bWinDown <a href="CppOperatorAssign.htm">=</a> m_bShiftDown <a href="CppOperatorAssign.htm">=</a> m_bControlDown <a href="CppOperatorAssign.htm">=</a> m_bAltDown <a href="CppOperatorAssign.htm">=</a> m_bUsingParens <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (ch <a href="CppOperatorAssign.htm">=</a> *pKey)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (ch)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> begin modifier group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> _TXCHAR('('):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_bUsingParens <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> end modifier group<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> _TXCHAR(')'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_bUsingParens <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PopUpShiftKeys(); <a href="CppComment.htm">//</a> pop all shift keys when we finish a modifier group close<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> ALT key<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> _TXCHAR('%'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_bAltDown <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyDown(VK_MENU, 1, <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> SHIFT key<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> _TXCHAR('+'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_bShiftDown <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyDown(VK_SHIFT, 1, <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> CTRL key<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> _TXCHAR('^'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_bControlDown <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyDown(VK_CONTROL, 1, <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> WINKEY (Left-WinKey)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '@':<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_bWinDown <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyDown(VK_LWIN, 1, <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> enter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> _TXCHAR('~'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKeyDown(VK_RETURN, 1, <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PopUpShiftKeys();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> begin special keys<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> _TXCHAR('{'):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LPTSTR p <a href="CppOperatorAssign.htm">=</a> pKey+1; <a href="CppComment.htm">//</a> skip past the beginning '{'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSize_t.htm">size_t</a></b> t;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> find end of close<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (*p <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> *p <a href="CppOperatorNotEqual.htm">!=</a> _TXCHAR('}'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> p <a href="CppOperatorMinus.htm">-</a> pKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> special key <a href="CppDefinition.htm">definition</a> too big?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (t &gt; <b><a href="CppSizeof.htm">sizeof</a></b>(KeyString))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Take <b><a href="CppThis.htm">this</a></b> KeyString into local buffer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_tcsncpy(KeyString, pKey+1, t);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyString[t-1] <a href="CppOperatorAssign.htm">=</a> _TXCHAR('\0');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyIdx <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pKey <a href="CppOperatorPlusAssign.htm">+=</a> t; <a href="CppComment.htm">//</a> skip to next keystring<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Invalidate key<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MKey <a href="CppOperatorAssign.htm">=</a> INVALIDKEY;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> sending arbitrary vkeys?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (_tcsnicmp(KeyString, _T("VKEY"), 4) <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> KeyString <a href="CppOperatorPlus.htm">+</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MKey <a href="CppOperatorAssign.htm">=</a> _ttoi(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (_tcsnicmp(KeyString, _T("BEEP"), 4) <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> KeyString <a href="CppOperatorPlus.htm">+</a> 4 <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LPTSTR p1 <a href="CppOperatorAssign.htm">=</a> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DWORD frequency, delay;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((p1 <a href="CppOperatorAssign.htm">=</a> _tcsstr(p, _T(" "))) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*p1<a href="CppOperatorIncrement.htm">++</a> <a href="CppOperatorAssign.htm">=</a> _TXCHAR('\0');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frequency <a href="CppOperatorAssign.htm">=</a> _ttoi(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay <a href="CppOperatorAssign.htm">=</a> _ttoi(p1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::Beep(frequency, delay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Should activate a window?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (_tcsnicmp(KeyString, _T("APPACTIVATE"), 11) <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> KeyString <a href="CppOperatorPlus.htm">+</a> 11 <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AppActivate(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> want to send/set delay?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (_tcsnicmp(KeyString, _T("DELAY"), 5) <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Advance to parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> KeyString <a href="CppOperatorPlus.htm">+</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> set "sleep factor"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*p <a href="CppOperatorEqual.htm">==</a> _TXCHAR('='))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_nDelayAlways <a href="CppOperatorAssign.htm">=</a> _ttoi(p <a href="CppOperatorPlus.htm">+</a> 1); <a href="CppComment.htm">//</a> Take number after the '=' <a href="CppChar.htm">character</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> set "sleep now"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_nDelayNow <a href="CppOperatorAssign.htm">=</a> _ttoi(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> not command special keys, then process as keystring to VKey<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MKey <a href="CppOperatorAssign.htm">=</a> StringToVKey(KeyString, keyIdx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Key found in table<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (keyIdx <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Num<a href="CppTime.htm">Time</a>s <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Does the key string have also count specifier?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> _tcslen(KeyNames[keyIdx].keyName);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (_tcslen(KeyString) &gt; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> KeyString <a href="CppOperatorPlus.htm">+</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Take the specified number of <a href="CppTime.htm">time</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Num<a href="CppTime.htm">Time</a>s <a href="CppOperatorAssign.htm">=</a> _ttoi(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (KeyNames[keyIdx].normalkey)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MKey <a href="CppOperatorAssign.htm">=</a> ::VkKeyScan(KeyNames[keyIdx].VKey);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> A valid key to send?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (MKey <a href="CppOperatorNotEqual.htm">!=</a> INVALIDKEY)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKey(MKey, Num<a href="CppTime.htm">Time</a>s, <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PopUpShiftKeys();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> a normal key was pressed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Get the VKey from the key<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MKey <a href="CppOperatorAssign.htm">=</a> ::VkKeyScan(ch);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendKey(MKey, 1, <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PopUpShiftKeys();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pKey<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_bUsingParens <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;PopUpShiftKeys();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> CSendKeys::AppActivate(HWND wnd)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (wnd <a href="CppOperatorEqual.htm">==</a> <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;::SendMessage(wnd, WM_SYSCOMMAND, SC_HOTKEY, (LPARAM) wnd);<br/>
&nbsp;&nbsp;::SendMessage(wnd, WM_SYSCOMMAND, SC_RESTORE, (LPARAM) wnd);<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;::ShowWindow(wnd, SW_SHOW);<br/>
&nbsp;&nbsp;::SetForegroundWindow(wnd);<br/>
&nbsp;&nbsp;::SetFocus(wnd);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>RJCB: Removed the arguments<br/>
<a href="CppComment.htm">//</a>BOOL CALLBACK CSendKeys::<b><a href="CppEnum.htm">enum</a></b>windowsProc(HWND hwnd, LPARAM lParam)<br/>
BOOL CALLBACK CSendKeys::<b><a href="CppEnum.htm">enum</a></b>windowsProc()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Removed argument<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppEnum.htm">enum</a></b>window_t *t <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppEnum.htm">enum</a></b>window_t *) lParam;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Now use member variable instead<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>window_t *t <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppEnum.htm">enum</a></b>window_t *) <b><a href="CppEnum.htm">enum</a></b>windowsProc_lParam;<br/>
<br/>
&nbsp;&nbsp;LPTSTR wtitle <a href="CppOperatorAssign.htm">=</a> 0, w<b><a href="CppClass.htm">class</a></b> <a href="CppOperatorAssign.htm">=</a> 0, str <a href="CppOperatorAssign.htm">=</a> t-&gt;str;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!*str)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;str<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;wtitle <a href="CppOperatorAssign.htm">=</a> str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;str <a href="CppOperatorPlusAssign.htm">+=</a> _tcslen(str) <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*str)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;w<b><a href="CppClass.htm">class</a></b> <a href="CppOperatorAssign.htm">=</a> str;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> bMatch(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w<b><a href="CppClass.htm">class</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TCHAR szClass[300];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Remove <a href="CppMemberFunction.htm">member function</a> argument<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (::GetClassName(hwnd, szClass, <b><a href="CppSizeof.htm">sizeof</a></b>(szClass)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Use member variable instead<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (::GetClassName(<b><a href="CppEnum.htm">enum</a></b>windowsProc_hwnd, szClass, <b><a href="CppSizeof.htm">sizeof</a></b>(szClass)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bMatch |<a href="CppOperatorAssign.htm">=</a> (_tcsstr(szClass, w<b><a href="CppClass.htm">class</a></b>) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (wtitle)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TCHAR szTitle[300];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Remove <a href="CppMemberFunction.htm">member function</a> argument<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (::GetWindowText(hwnd, szTitle, <b><a href="CppSizeof.htm">sizeof</a></b>(szTitle)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Use member variable instead<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (::GetWindowText(<b><a href="CppEnum.htm">enum</a></b>windowsProc_hwnd, szTitle, <b><a href="CppSizeof.htm">sizeof</a></b>(szTitle)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bMatch |<a href="CppOperatorAssign.htm">=</a> (_tcsstr(szTitle, wtitle) <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bMatch)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Removed <a href="CppMemberFunction.htm">member function</a> argument hwnd<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>t-&gt;hwnd <a href="CppOperatorAssign.htm">=</a> hwnd;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Now use member variable instead<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t-&gt;hwnd <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>windowsProc_hwnd;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Searchs and activates a window given its title or <b><a href="CppClass.htm">class</a></b> name<br/>
<b><a href="CppBool.htm">bool</a></b> CSendKeys::AppActivate(LPCTSTR WindowTitle, LPCTSTR WindowClass)<br/>
{<br/>
&nbsp;&nbsp;HWND w;<br/>
<br/>
&nbsp;&nbsp;w <a href="CppOperatorAssign.htm">=</a> ::FindWindow(WindowClass, WindowTitle);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w <a href="CppOperatorEqual.htm">==</a> <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Must specify at least a criteria<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (WindowTitle <a href="CppOperatorEqual.htm">==</a> <a href="CppNULL.htm">NULL</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> WindowClass <a href="CppOperatorEqual.htm">==</a> <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Code to serialize the windowtitle/window<b><a href="CppClass.htm">class</a></b> in order to send to EnumWindowProc()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSize_t.htm">size_t</a></b> l1(0), l2(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (WindowTitle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l1 <a href="CppOperatorAssign.htm">=</a> _tcslen(WindowTitle);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (WindowClass)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l2 <a href="CppOperatorAssign.htm">=</a> _tcslen(WindowClass);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;LPTSTR title<b><a href="CppClass.htm">class</a></b> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> TCHAR [l1 <a href="CppOperatorPlus.htm">+</a> l2 <a href="CppOperatorPlus.htm">+</a> 5];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;memset(title<b><a href="CppClass.htm">class</a></b>, '\0', l1+l2+5);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (WindowTitle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_tcscpy(title<b><a href="CppClass.htm">class</a></b>, WindowTitle);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;title<b><a href="CppClass.htm">class</a></b>[l1] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (WindowClass)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_tcscpy(title<b><a href="CppClass.htm">class</a></b>+l1+1, WindowClass);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorStreamIn.htm">&gt;&gt;</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>window_t t;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.hwnd <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t.str&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> title<b><a href="CppClass.htm">class</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: [C<a href="CppOperatorIncrement.htm">++</a> Error] SendKeys<a href="CppImplementationFile.htm">.cpp</a>(626): E2034 Cannot <a href="CppConvert.htm">convert</a> '<b><a href="CppInt.htm">int</a></b> (__<a href="CppStd.htm">std</a>call *)(<b><a href="CppVoid.htm">void</a></b> *,<b><a href="CppLong.htm">long</a></b>)' to '<b><a href="CppInt.htm">int</a></b> (__<a href="CppStd.htm">std</a>call *)()'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Removed the arguments<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>::Enum<a href="CppWindows.htm">Windows</a>(<b><a href="CppEnum.htm">enum</a></b>windowsProc, (LPARAM) &amp; t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: <a href="CppInitialize.htm">Initialize</a>s <b><a href="CppStatic.htm">static</a></b> member variables<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CSendKeys::<b><a href="CppEnum.htm">enum</a></b>windowsProc_lParam <a href="CppOperatorAssign.htm">=</a> (LPARAM) &amp; t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CSendKeys::<b><a href="CppEnum.htm">enum</a></b>windowsProc_hwnd <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB: Use <b><a href="CppStatic.htm">static</a></b> member variables instead<br/>
&nbsp;&nbsp;&nbsp;&nbsp;::Enum<a href="CppWindows.htm">Windows</a>(<b><a href="CppEnum.htm">enum</a></b>windowsProc, (LPARAM) &amp; t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;w <a href="CppOperatorAssign.htm">=</a> t.hwnd;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> [] title<b><a href="CppClass.htm">class</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (w <a href="CppOperatorEqual.htm">==</a> <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> AppActivate(w);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> Carries the required delay and clears the m_nDelaynow value<br/>
<b><a href="CppVoid.htm">void</a></b> CSendKeys::CarryDelay()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Should we delay once?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_nDelayNow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> should we delay always?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nDelayNow <a href="CppOperatorAssign.htm">=</a> m_nDelayAlways;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> No delay specified?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_nDelayNow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;::Sleep(m_nDelayNow); <a href="CppComment.htm">//</a>::Beep(100, m_nDelayNow);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> clear SleepNow<br/>
&nbsp;&nbsp;m_nDelayNow <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
