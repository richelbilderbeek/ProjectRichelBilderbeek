<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>compile time</title>
  <meta name="description" content="C++ compile time"/>
  <meta name="keywords" content="C++ compile time code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCompileTime.htm">compile time</a></h1>
<p>&nbsp;</p>
<p><a href="CppCompileTime.htm">compile time</a> is the term used for:</p>
<ul>
  <li>
    the time it takes to <a href="CppCompile.htm">compile</a>. Techniques to shorten this are:</p>
    <ul>
      <li>use of <a href="CppForwardDeclaration.htm">forward declarations</a></li>
      <li>use of <a href="CppPimpl.htm">pimpl idiom</a></li>
      <li>use of precompiled <a href="CppHeaderFile.htm">header files</a></li>
    </ul>
  </li>
  <li>
    properties known when <a href="CppCompile.htm">compiling</a>. For example, the <a href="CppFactorial.htm">factorial</a> of any
    (<a href="CppCompileTime.htm">compile time</a>) <a href="CppConst.htm">constant</a> is known. 
    <a href="CppTemplateMetaprogramming.htm">Template metaprogramming</a> shifts the runtime calculations to <a href="CppCompileTime.htm">compile time</a>
  </li>
</ul>
<p>&nbsp;</p>
<p>What can be checked at <a href="CppCompileTime.htm">compile time</a> is usually best checked 
at <a href="CppCompileTime.htm">compile time</a>, for example by using <a href="CppStatic_assert.htm">static_assert</a>.</p>
<p>&nbsp;</p>
<p><a href="CppCompileTime.htm">compile time</a> is followed by <a href="CppLinkTime.htm">link time</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>List of <a href="CppCompileTime.htm">compile time</a> checks (incomplete)</h2>
<p>&nbsp;</p>
<p>From <a href="CppType_traitsH.htm">type_traits.h</a>:</p>
<ul>
  <li><a href="CppAdd_const.htm">add_const</a></li>
  <li><a href="CppAdd_cv.htm">add_cv</a></li>
  <li><a href="CppAdd_lvalue_reference.htm">add_lvalue_reference</a></li>
  <li><a href="CppAdd_pointer.htm">add_pointer</a></li>
  <li><a href="CppAdd_rvalue_reference.htm">add_rvalue_reference</a></li>
  <li><a href="CppAdd_volatile.htm">add_volatile</a></li>
  <li><a href="CppAligned_storage.htm">aligned_storage</a></li>
  <li><a href="CppAlignment_of.htm">alignment_of</a></li>
  <li><a href="CppCommon_type.htm">common_type</a></li>
  <li><a href="CppConditional.htm">conditional</a></li>
  <li><a href="CppEnable_if.htm">enable_if</a></li>
  <li><a href="CppExtent.htm">extent</a></li>
  <li><a href="CppHas_trivial_copy_assign.htm">has_trivial_copy_assign</a></li>
  <li><a href="CppHas_trivial_copy_constructor.htm">has_trivial_copy_constructor</a></li>
  <li><a href="CppHas_trivial_default_constructor.htm">has_trivial_default_constructor</a></li>
  <li><a href="CppHas_virtual_destructor.htm">has_virtual_destructor</a></li>
  <li><a href="CppIntegral_constant.htm">integral_constant</a></li>
  <li><a href="CppIs_abstract.htm">is_abstract</a></li>
  <li><a href="CppIs_arithmetic.htm">is_arithmetic</a></li>
  <li><a href="CppIs_array.htm">is_array</a></li>
  <li><a href="CppIs_assignable.htm">is_assignable</a></li>
  <li><a href="CppIs_base_of.htm">is_base_of</a></li>
  <li><a href="CppIs_class.htm">is_class</a></li>
  <li><a href="CppIs_compound.htm">is_compound</a></li>
  <li><a href="CppIs_const.htm">is_const</a></li>
  <li><a href="CppIs_const<_Tp.htm">is_const<_Tp</a></li>
  <li><a href="CppIs_constructible.htm">is_constructible</a></li>
  <li><a href="CppIs_convertible.htm">is_convertible</a></li>
  <li><a href="CppIs_copy_assignable.htm">is_copy_assignable</a></li>
  <li><a href="CppIs_copy_constructible.htm">is_copy_constructible</a></li>
  <li><a href="CppIs_default_constructible.htm">is_default_constructible</a></li>
  <li><a href="CppIs_destructible.htm">is_destructible</a></li>
  <li><a href="CppIs_empty.htm">is_empty</a></li>
  <li><a href="CppIs_enum.htm">is_enum</a></li>
  <li><a href="CppIs_floating_point.htm">is_floating_point</a></li>
  <li><a href="CppIs_function.htm">is_function</a></li>
  <li><a href="CppIs_fundamental.htm">is_fundamental</a></li>
  <li><a href="CppIs_integral.htm">is_integral</a></li>
  <li><a href="CppIs_literal_type.htm">is_literal_type</a></li>
  <li><a href="CppIs_lvalue_reference.htm">is_lvalue_reference</a></li>
  <li><a href="CppIs_lvalue_reference<_Tp&>.htm">is_lvalue_reference<_Tp&></a></li>
  <li><a href="CppIs_member_function_pointer.htm">is_member_function_pointer</a></li>
  <li><a href="CppIs_member_object_pointer.htm">is_member_object_pointer</a></li>
  <li><a href="CppIs_member_pointer.htm">is_member_pointer</a></li>
  <li><a href="CppIs_move_assignable.htm">is_move_assignable</a></li>
  <li><a href="CppIs_move_constructible.htm">is_move_constructible</a></li>
  <li><a href="CppIs_nothrow_assignable.htm">is_nothrow_assignable</a></li>
  <li><a href="CppIs_nothrow_constructible.htm">is_nothrow_constructible</a></li>
  <li><a href="CppIs_nothrow_copy_assignable.htm">is_nothrow_copy_assignable</a></li>
  <li><a href="CppIs_nothrow_copy_constructible.htm">is_nothrow_copy_constructible</a></li>
  <li><a href="CppIs_nothrow_default_constructible.htm">is_nothrow_default_constructible</a></li>
  <li><a href="CppIs_nothrow_destructible.htm">is_nothrow_destructible</a></li>
  <li><a href="CppIs_nothrow_move_assignable.htm">is_nothrow_move_assignable</a></li>
  <li><a href="CppIs_nothrow_move_constructible.htm">is_nothrow_move_constructible</a></li>
  <li><a href="CppIs_object.htm">is_object</a></li>
  <li><a href="CppIs_pod.htm">is_pod</a></li>
  <li><a href="CppIs_pointer.htm">is_pointer</a></li>
  <li><a href="CppIs_polymorphic.htm">is_polymorphic</a></li>
  <li><a href="CppIs_reference.htm">is_reference</a></li>
  <li><a href="CppIs_rvalue_reference.htm">is_rvalue_reference</a></li>
  <li><a href="CppIs_rvalue_reference<_Tp&&>.htm">is_rvalue_reference<_Tp&&></a></li>
  <li><a href="CppIs_same.htm">is_same</a></li>
  <li><a href="CppIs_scalar.htm">is_scalar</a></li>
  <li><a href="CppIs_signed.htm">is_signed</a></li>
  <li><a href="CppIs_standard_layout.htm">is_standard_layout</a></li>
  <li><a href="CppIs_trivial.htm">is_trivial</a></li>
  <li><a href="CppIs_trivially_destructible.htm">is_trivially_destructible</a></li>
  <li><a href="CppIs_union.htm">is_union</a></li>
  <li><a href="CppIs_unsigned.htm">is_unsigned</a></li>
  <li><a href="CppIs_void.htm">is_void</a></li>
  <li><a href="CppIs_volatile.htm">is_volatile</a></li>
  <li><a href="CppIs_volatile<_Tp.htm">is_volatile<_Tp</a></li>
  <li><a href="CppMake_signed.htm">make_signed</a></li>
  <li><a href="CppMake_unsigned.htm">make_unsigned</a></li>
  <li><a href="CppRank.htm">rank</a></li>
  <li><a href="CppRemove_all_extents.htm">remove_all_extents</a></li>
  <li><a href="CppRemove_const.htm">remove_const</a></li>
  <li><a href="CppRemove_const<_Tp.htm">remove_const<_Tp</a></li>
  <li><a href="CppRemove_cv.htm">remove_cv</a></li>
  <li><a href="CppRemove_extent.htm">remove_extent</a></li>
  <li><a href="CppRemove_pointer.htm">remove_pointer</a></li>
  <li><a href="CppRemove_reference.htm">remove_reference</a></li>
  <li><a href="CppRemove_volatile.htm">remove_volatile</a></li>
  <li><a href="CppResult_of.htm">result_of</a></li>
  <li><a href="CppUnderlying_type.htm">underlying_type</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">Reference</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[21] What can be checked at compile time is usually best checked at compile time (using static_assert)'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
