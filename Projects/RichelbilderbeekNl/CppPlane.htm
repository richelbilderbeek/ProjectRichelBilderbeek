<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Plane</title>
  <meta name="description" content="C++ Plane"/>
  <meta name="keywords" content="C++ Plane "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPlane.htm">Plane</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppPlane-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/CppPlane.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/CppPlane.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/plane.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planez.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planex.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planey.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/plane_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planez_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planey_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planex_test.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/plane.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planez.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planex.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/planey.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/plane.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/plane.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RIBI_PLANE_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_PLANE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppMake_shared.htm">make_shared</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppIfndef.htm">#ifndef</a> _WIN32<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/polygon.hpp&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppApfloat.htm">apfloat</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PlaneX;<br/>
<b><a href="CppStruct.htm">struct</a></b> PlaneY;<br/>
<b><a href="CppStruct.htm">struct</a></b> PlaneZ;<br/>
<br/>
<a href="CppComment.htm">///</a>Any 3D plane, even a single <a href="CppPointer.htm">point</a><br/>
<a href="CppComment.htm">///</a>Can be <a href="CppConstructor.htm">construct</a>ed from its equation and at least three 3D <a href="CppPointer.htm">point</a>s<br/>
<a href="CppComment.htm">//</a>A plane stores its coefficients in the following form:<br/>
<a href="CppComment.htm">//</a> A.x <a href="CppOperatorPlus.htm">+</a> B.y <a href="CppOperatorPlus.htm">+</a> C.z <a href="CppOperatorAssign.htm">=</a> D<br/>
<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a>ing <b><a href="CppThis.htm">this</a></b> to z being a <a href="CppFunction.htm">function</a> of x and y:<br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>C.z <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;A&nbsp;&nbsp;.x <a href="CppOperatorPlus.htm">+</a> B&nbsp;&nbsp;.y <a href="CppOperatorMinus.htm">-</a> D<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.x <a href="CppOperatorMinus.htm">-</a> B/C.y <a href="CppOperatorPlus.htm">+</a> D/C<br/>
<b><a href="CppStruct.htm">struct</a></b> Plane<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppApfloat.htm">apfloat</a> <a href="CppDouble.htm">Double</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<a href="CppApfloat.htm">apfloat</a>&gt; Coordinat2D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<a href="CppApfloat.htm">apfloat</a>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; Coordinats2D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; Coordinats3D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppDouble.htm">Double</a>&gt; <a href="CppDouble.htm">Double</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> a Plane from three <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp; |<br/>
&nbsp;&nbsp; |&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorDecrement.htm">--</a>+<br/>
&nbsp;&nbsp; |\/|<br/>
&nbsp;&nbsp; |/\|<br/>
 <a href="CppOperatorDecrement.htm">--</a>+<a href="CppOperatorDecrement.htm">--</a>+---------<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|<br/>
 <a href="CppOperatorDivide.htm">/</a> |<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Plane(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the 2D projection of these 3D <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assumes these are in a Plane<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;A: (0,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0)<br/>
&nbsp;&nbsp;B: (1,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (SQRT(2),0)<br/>
&nbsp;&nbsp;C: (1,1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (SQRT(2),SQRT(2))<br/>
<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;A---<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;C<br/>
&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;|/\ <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorDecrement.htm">--</a>B-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A<a href="CppOperatorDecrement.htm">--</a>B---<a href="CppOperatorDecrement.htm">--</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;Coordinats2D CalcProjection(<b><a href="CppConst.htm">const</a></b> Coordinats3D&amp; <a href="CppPointer.htm">point</a>s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the Plane can be expressed as X <a href="CppOperatorAssign.htm">=</a> A*Y <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C, <b><a href="CppReturn.htm">return</a></b> the X<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcX(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the Plane can be expressed as Y <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C, <b><a href="CppReturn.htm">return</a></b> the Y<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcY(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the Plane can be expressed as Z <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Y <a href="CppOperatorPlus.htm">+</a> C, <b><a href="CppReturn.htm">return</a></b> the Z<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcZ(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can the Plane be expressed as X <a href="CppOperatorAssign.htm">=</a> A*Y <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C ?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanCalcX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can the Plane be expressed as Y <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C ?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanCalcY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can the Plane be expressed as Z <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Y <a href="CppOperatorPlus.htm">+</a> C ?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanCalcZ() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates the error between plane and coordinat<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates the maximum allowed error <b><a href="CppFor.htm">for</a></b> that coordinat <b><a href="CppFor.htm">for</a></b> it to be in the plane<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcMaxError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the Plane can be expressed as X <a href="CppOperatorAssign.htm">=</a> A*Y <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C, <b><a href="CppReturn.htm">return</a></b> the coefficients<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a>s GetCoefficientsX() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the Plane can be expressed as Y <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C, <b><a href="CppReturn.htm">return</a></b> the coefficients<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a>s GetCoefficientsY() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the Plane can be expressed as Z <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Y <a href="CppOperatorPlus.htm">+</a> C, <b><a href="CppReturn.htm">return</a></b> the coefficients<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a>s GetCoefficientsZ() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the coordinat is in the plane<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsInPlane(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Plane() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A non-horizontal plane; a plane that can be expressed as 'X(Y,Z) <a href="CppOperatorAssign.htm">=</a> A*Y <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> PlaneX&gt; m_plane_x;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A non-horizontal plane; a plane that can be expressed as 'Y(X,Z) <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> PlaneY&gt; m_plane_y;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A non-vertical plane; a plane that can be expressed as 'Z(X,Y) <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Y <a href="CppOperatorPlus.htm">+</a> C'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> PlaneZ&gt; m_plane_z;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinats3D m_<a href="CppPointer.htm">point</a>s;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneX&gt; CreatePlaneX(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients_x) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneY&gt; CreatePlaneY(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients_y) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneZ&gt; CreatePlaneZ(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients_z) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneX&gt; CreatePlaneX(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneY&gt; CreatePlaneY(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneZ&gt; CreatePlaneZ(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Plane*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> Plane*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Plane&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;<b><a href="CppConst.htm">const</a></b> Plane&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppBoost.htm">boost</a>::detail::sp_ms_deleter&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Plane&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppBoost.htm">boost</a>::detail::sp_ms_deleter&lt;<b><a href="CppConst.htm">const</a></b> Plane&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Plane&amp; plane) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Plane&amp; plane) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_PLANE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/plane.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/plane.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "plane.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "planex.h"<br/>
<a href="CppInclude.htm">#include</a> "planey.h"<br/>
<a href="CppInclude.htm">#include</a> "planez.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Plane::Plane(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
: m_plane_x(CreatePlaneX(p1,p2,p3)),<br/>
&nbsp;&nbsp;m_plane_y(CreatePlaneY(p1,p2,p3)),<br/>
&nbsp;&nbsp;m_plane_z(CreatePlaneZ(p1,p2,p3)),<br/>
&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s( {p1,p2,p3} )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Geometry().IsEqual3d(m_<a href="CppPointer.htm">point</a>s[0],p1));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Geometry().IsEqual3d(m_<a href="CppPointer.htm">point</a>s[1],p2));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Geometry().IsEqual3d(m_<a href="CppPointer.htm">point</a>s[2],p3));<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_plane_z)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>A();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>B();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>C();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::Plane::CalcError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(coordinat);<br/>
<br/>
&nbsp;&nbsp;<a href="CppApfloat.htm">apfloat</a> min_error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(99) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcX()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(GetCoefficientsX())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcY()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(GetCoefficientsY())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcZ()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(GetCoefficientsZ())); }<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Absolute <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcX())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> expected <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> calculated <a href="CppOperatorAssign.htm">=</a> CalcX(y,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> error <a href="CppOperatorAssign.htm">=</a> abs(calculated <a href="CppOperatorMinus.htm">-</a> expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;min_error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(error,min_error);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcY())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> expected <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> calculated <a href="CppOperatorAssign.htm">=</a> CalcY(x,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> abs(calculated <a href="CppOperatorMinus.htm">-</a> expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;min_error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(error,min_error);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcZ())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> expected <a href="CppOperatorAssign.htm">=</a> z;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> calculated <a href="CppOperatorAssign.htm">=</a> CalcZ(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> abs(calculated <a href="CppOperatorMinus.htm">-</a> expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;min_error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(error,min_error);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> min_error;<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::Plane::CalcMaxError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppApfloat.htm">apfloat</a> max_error{<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min()};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcX())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;max_error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(max_error,m_plane_x-&gt;CalcMaxError(coordinat));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcY())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;max_error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(max_error,m_plane_y-&gt;CalcMaxError(coordinat));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CanCalcZ())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;max_error <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(max_error,m_plane_z-&gt;CalcMaxError(coordinat));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max_error;<br/>
}<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Plane::Coordinats2D <a href="CppRibi.htm">ribi</a>::Plane::CalcProjection(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinats3D&amp; <a href="CppPointer.htm">point</a>s<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_plane_x <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !m_plane_y <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !m_plane_z)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane::CalcProjection: cannot express <a href="CppAny.htm">any</a> plane");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <b><a href="CppIf.htm">if</a></b> (m_plane_x) { <b><a href="CppReturn.htm">return</a></b> m_plane_x-&gt;CalcProjection(<a href="CppPointer.htm">point</a>s); }}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppComment.htm">/*</a> OK, <b><a href="CppTry.htm">try</a></b> next plane <a href="CppComment.htm">*/</a> }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <b><a href="CppIf.htm">if</a></b> (m_plane_y) { <b><a href="CppReturn.htm">return</a></b> m_plane_y-&gt;CalcProjection(<a href="CppPointer.htm">point</a>s); }}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppComment.htm">/*</a> OK, <b><a href="CppTry.htm">try</a></b> next plane <a href="CppComment.htm">*/</a> }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <b><a href="CppIf.htm">if</a></b> (m_plane_z) { <b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;CalcProjection(<a href="CppPointer.htm">point</a>s); }}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppComment.htm">/*</a> OK, <b><a href="CppTry.htm">try</a></b> next plane <a href="CppComment.htm">*/</a> }<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("INITIAL POINTS");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; <a href="CppPointer.htm">point</a>: m_<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(<a href="CppPointer.htm">point</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ","<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(<a href="CppPointer.htm">point</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ","<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(<a href="CppPointer.htm">point</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppPointer.htm">point</a>s.size());<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_plane_x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppTRACE.htm">TRACE</a>(*m_plane_x); } <b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppTRACE.htm">TRACE</a>("Failed m_plane_x"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { m_plane_x-&gt;CalcProjection(<a href="CppPointer.htm">point</a>s); } <b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppTRACE.htm">TRACE</a>("Failed m_plane_x-&gt;CalcProjection"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_plane_y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppTRACE.htm">TRACE</a>(*m_plane_y); } <b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppTRACE.htm">TRACE</a>("Failed m_plane_y"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { m_plane_y-&gt;CalcProjection(<a href="CppPointer.htm">point</a>s); } <b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppTRACE.htm">TRACE</a>("Failed m_plane_y-&gt;CalcProjection"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_plane_z)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppTRACE.htm">TRACE</a>(*m_plane_z); } <b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppTRACE.htm">TRACE</a>("Failed m_plane_z"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { m_plane_z-&gt;CalcProjection(<a href="CppPointer.htm">point</a>s); } <b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;) { <a href="CppTRACE.htm">TRACE</a>("Failed m_plane_z-&gt;CalcProjection"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; <a href="CppPointer.htm">point</a>: <a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(<a href="CppPointer.htm">point</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ","<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(<a href="CppPointer.htm">point</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ","<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(<a href="CppPointer.htm">point</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane::CalcProjection: unexpected behavior");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Plane::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::Plane::CalcX(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanCalcX())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane::CalcX: cannot express the plane as 'X <a href="CppOperatorAssign.htm">=</a> A*Y <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_x-&gt;CalcX(y,z);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Plane::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::Plane::CalcY(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Plane::<a href="CppDouble.htm">Double</a>&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Plane::<a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanCalcY())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane::CalcY: cannot express the plane as 'Y <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Y <a href="CppOperatorPlus.htm">+</a> C'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_y-&gt;CalcY(x,z);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Plane::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::Plane::CalcZ(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Plane::<a href="CppDouble.htm">Double</a>&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Plane::<a href="CppDouble.htm">Double</a>&amp; y) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanCalcZ())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane::CalcZ: cannot express the plane as 'Z <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Y <a href="CppOperatorPlus.htm">+</a> C'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;CalcZ(x,y);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::Plane::CanCalcX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_x.get();<br/>
}<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::Plane::CanCalcY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_y.get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::Plane::CanCalcZ() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z.get();<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::PlaneX&gt; <a href="CppRibi.htm">ribi</a>::Plane::CreatePlaneX(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneX&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;PlaneX&gt;(p1,p2,p3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>(e.what()); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneX&gt;();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::PlaneY&gt; <a href="CppRibi.htm">ribi</a>::Plane::CreatePlaneY(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneY&gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;PlaneY&gt;(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneY&gt;();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::PlaneZ&gt; <a href="CppRibi.htm">ribi</a>::Plane::CreatePlaneZ(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneZ&gt; p<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;PlaneZ&gt;(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;PlaneZ&gt;();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppApfloat.htm">apfloat</a>&gt; <a href="CppRibi.htm">ribi</a>::Plane::GetCoefficientsX() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_plane_x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane::GetCoefficientsX: cannot express the plane as 'X <a href="CppOperatorAssign.htm">=</a> A*Y <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_x-&gt;GetCoefficients();<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppApfloat.htm">apfloat</a>&gt; <a href="CppRibi.htm">ribi</a>::Plane::GetCoefficientsY() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_plane_y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane::GetCoefficientsY: cannot express the plane as 'Y <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Z <a href="CppOperatorPlus.htm">+</a> C'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_y-&gt;GetCoefficients();<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppApfloat.htm">apfloat</a>&gt; <a href="CppRibi.htm">ribi</a>::Plane::GetCoefficientsZ() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_plane_z)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane::GetCoefficientsZ: cannot express the plane as 'Z <a href="CppOperatorAssign.htm">=</a> A*X <a href="CppOperatorPlus.htm">+</a> B*Y <a href="CppOperatorPlus.htm">+</a> C'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;GetCoefficients();<br/>
}<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::Plane::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.9";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::Plane::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-07: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-10: <a href="CppVersion.htm">version</a> 1.1: allow vertical planes",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-13: <a href="CppVersion.htm">version</a> 1.2: <a href="CppBug.htm">bug</a> fixed",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-04-01: <a href="CppVersion.htm">version</a> 1.3: use of <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-06-13: <a href="CppVersion.htm">version</a> 1.4: added <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>, ToStr calls <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>, shortened <a href="CppTime.htm">time</a> to <a href="CppCompile.htm">compile</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-06-16: <a href="CppVersion.htm">version</a> 1.5: improved detection of planes that can be expressed in less than three dimensions"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-03: <a href="CppVersion.htm">version</a> 1.6: use of <a href="CppApfloat.htm">apfloat</a>, improved accuracy",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-10: <a href="CppVersion.htm">version</a> 1.7: use of <a href="CppApfloat.htm">apfloat</a> only",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-15: <a href="CppVersion.htm">version</a> 1.8: multiple <a href="CppBug.htm">bug</a>fixes",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-08-02: <a href="CppVersion.htm">version</a> 1.9: use of <a href="CppStub.htm">stub</a>s, to speed up testing"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::Plane::IsInPlane(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> CalcError(coordinat) <a href="CppOperatorLessEqual.htm">&lt;=</a> CalcMaxError(coordinat);;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_x <a href="CppOperatorLogicalOr.htm">||</a> m_plane_y <a href="CppOperatorLogicalOr.htm">||</a> m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_in_plane {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (m_plane_x <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_plane_x-&gt;IsInPlane(coordinat))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (m_plane_y <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_plane_y-&gt;IsInPlane(coordinat))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (m_plane_z <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_plane_z-&gt;IsInPlane(coordinat))<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_error_below_max <a href="CppOperatorAssign.htm">=</a> CalcError(coordinat) <a href="CppOperatorLessEqual.htm">&lt;=</a> CalcMaxError(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_in_plane <a href="CppOperatorNotEqual.htm">!=</a> has_error_below_max)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(is_in_plane);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(has_error_below_max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcError(coordinat));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(CalcMaxError(coordinat));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is_in_plane <a href="CppOperatorEqual.htm">==</a> has_error_below_max);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is_in_plane;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Plane&amp; plane) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '(';<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(plane.m_<a href="CppPointer.htm">point</a>s.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppComment.htm">/*</a> <b><a href="CppConst.htm">const</a></b> <a href="CppComment.htm">*/</a> <b><a href="CppAuto.htm">auto</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppPointer.htm">point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(plane.m_<a href="CppPointer.htm">point</a>s[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (i <a href="CppOperatorNotEqual.htm">!=</a> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorMinus.htm">-</a> 1 ? ',' : ')');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ',';<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (plane.m_plane_x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*plane.m_plane_x); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;) { os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "divnull"; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "null";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ',';<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (plane.m_plane_y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*plane.m_plane_y); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;) { os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "divnull"; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "null";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ',';<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (plane.m_plane_z)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*plane.m_plane_z); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;) { os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "divnull"; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "null";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/plane_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/plane_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "plane.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/limits.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppMake_shared.htm">make_shared</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "planex.h"<br/>
<a href="CppInclude.htm">#include</a> "planey.h"<br/>
<a href="CppInclude.htm">#include</a> "planez.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Plane::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppContainer.htm">Container</a>();<br/>
&nbsp;&nbsp;Geometry();<br/>
&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> planex <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;PlaneX&gt;(); <a href="CppAssert.htm">assert</a>(planex); }<br/>
&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> planey <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;PlaneY&gt;(); <a href="CppAssert.htm">assert</a>(planey); }<br/>
&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> planez <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;PlaneZ&gt;(); <a href="CppAssert.htm">assert</a>(planez); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> show_warning{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sorted by difficulty<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> series <a href="CppOperatorAssign.htm">=</a> PlaneZ::GetTestSeries();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("Plane that can be expressed in all three forms");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1( 1.0, 2.0,3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2( 4.0, 6.0,9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(12.0,11.0,9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.CanCalcZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!p.CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("Plane X <a href="CppOperatorAssign.htm">=</a> 2");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(2.0, 2.0,3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(2.0, 6.0,9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(2.0,11.0,9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!p.CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("Plane X <a href="CppOperatorAssign.htm">=</a> 123");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(123.0, 2.0,3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(123.0, 6.0,9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(123.0,11.0,9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!p.CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("Plane Y <a href="CppOperatorAssign.htm">=</a> 3");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1( 2.0, 3.0, 5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2( 7.0, 3.0, 9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(11.0,3.0,13.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!p.CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("Plane Z <a href="CppOperatorAssign.htm">=</a> 5");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1( 2.0, 3.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2( 7.0,11.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(13.0,17.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.CanCalcZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!p.CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsInPlane <b><a href="CppFor.htm">for</a></b> Z=0 plane<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CanCalcZ and IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> 0 plane, from 1.0 coordinat");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,1.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(1.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcZ());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 0.0, 0.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CanCalcZ and IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> 0 plane, from smallest possible coordinat");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcZ());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 0.0, 0.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0, 1.0,0.0)));<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CanCalcZ, Z <a href="CppOperatorAssign.htm">=</a> 0 plane, from biggest possible coordinat");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcZ());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 0.0, 0.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CanCalcZ, Z <a href="CppOperatorAssign.htm">=</a> 0 plane, zooming in");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0.0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot express plane when all its coordinats are at origin");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcZ());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> j:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0,0.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j,&nbsp;&nbsp;j,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j, <a href="CppOperatorMinus.htm">-</a>j,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j,&nbsp;&nbsp;j,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j, <a href="CppOperatorMinus.htm">-</a>j,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>#/##########<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; B#/###########<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>#/############<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a>#/#############<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/#/##############<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A-------C-------<a href="CppOperatorDecrement.htm">--</a> Z <a href="CppOperatorAssign.htm">=</a> z<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>O---------------<a href="CppOperatorDecrement.htm">--</a> Z <a href="CppOperatorAssign.htm">=</a> 0<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CanCalcZ, Z <a href="CppOperatorAssign.htm">=</a> z plane, varying height");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.CanCalcZ())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcZ());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> j:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (show_warning <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !p.IsInPlane(Coordinat3D(j,j,z)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Warning: coordinat " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(Coordinat3D(j,j,z))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " is determined not to be in a Plane that was created from <a href="CppPointer.htm">point</a>s "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p2) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " and "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p3) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ". Error: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.CalcError(Coordinat3D(j,j,z))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", max error: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.CalcMaxError(Coordinat3D(j,j,z))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (p.CalcError(Coordinat3D(j,j,z)) <a href="CppOperatorDivide.htm">/</a> p.CalcMaxError(Coordinat3D(j,j,z)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "x)"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(Coordinat3D(j,j,z)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error <a href="CppOperatorAssign.htm">=</a> p.CalcMaxError(Coordinat3D(j,j,z));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> p.CalcError(Coordinat3D(j,j,z));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error <a href="CppOperatorEqual.htm">==</a> 0.0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(max_error);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(error);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (abs(1.0 <a href="CppOperatorMinus.htm">-</a> (max_error <a href="CppOperatorDivide.htm">/</a> error)) &lt; 0.01)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow another percent of freedom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("AGAIN");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j,&nbsp;&nbsp;j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j, <a href="CppOperatorMinus.htm">-</a>j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j,&nbsp;&nbsp;j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j, <a href="CppOperatorMinus.htm">-</a>j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CanCalcZ, Z <a href="CppOperatorAssign.htm">=</a> z plane, zooming in");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min <a href="CppOperatorAssign.htm">=</a> 10e+8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max <a href="CppOperatorAssign.htm">=</a> 10e-8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> z=min; z&lt;max; z<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> i=min; i&lt;max; i<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0.0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot express plane when all its coordinats are at origin");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.CanCalcZ())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcZ());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> j:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(Coordinat3D(j,j,z)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Warning: coordinat " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(Coordinat3D(j,j,z))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " is determined not to be in a Plane that was created from <a href="CppPointer.htm">point</a>s "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p2) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " and "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p3) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ". Error: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.CalcError(Coordinat3D(j,j,z))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", max error: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.CalcMaxError(Coordinat3D(j,j,z))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (p.CalcError(Coordinat3D(j,j,z)) <a href="CppOperatorDivide.htm">/</a> p.CalcMaxError(Coordinat3D(j,j,z)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "x)"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(Coordinat3D(j,j,z)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("AGAIN");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j,&nbsp;&nbsp;j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j, <a href="CppOperatorMinus.htm">-</a>j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j,&nbsp;&nbsp;j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j, <a href="CppOperatorMinus.htm">-</a>j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsInPlane <b><a href="CppFor.htm">for</a></b> X=0 plane<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |####/<br/>
&nbsp;&nbsp;&nbsp;&nbsp; B###C<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |##/<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |#/<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |/<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>-A------<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>#|<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>##|<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, X <a href="CppOperatorAssign.htm">=</a> 0 plane, from 1.0 coordinats");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(0.0,1.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcZ());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &lt; 1.0e-8; <a href="CppComment.htm">//</a><a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorMultiplyAssign.htm">*=</a> 10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0, i, i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0, i,-i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0,-i, i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0,-i,-i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, X <a href="CppOperatorAssign.htm">=</a> 0 plane, from smallest possible coordinats");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,0.0,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(0.0,i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcZ());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, X <a href="CppOperatorAssign.htm">=</a> 0 plane, zooming in, #223");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0.0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot express plane when all its coordinats are at origin");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,0.0,&nbsp;&nbsp;i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(0.0,&nbsp;&nbsp;i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> j:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(Coordinat3D(0.0, j, j)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(0.0, j, j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(0.0, j, j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.CanCalcX()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsX())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.CanCalcY()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsY())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.CanCalcZ()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsZ())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0, j, j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0, j,-j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0,-j, j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0,-j,-j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsInPlane <b><a href="CppFor.htm">for</a></b> Y=0 plane<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |####/<br/>
&nbsp;&nbsp;&nbsp;&nbsp; B###/#<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |##/##<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |#/###<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |/####<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>-A---C-<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, Y <a href="CppOperatorAssign.htm">=</a> 0 plane, from 1.0 coordinats");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(1.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcZ());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &lt; 1.0e8 <a href="CppComment.htm">/*</a><a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max()<a href="CppComment.htm">*/</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorMultiplyAssign.htm">*=</a> 10.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( i,0.0, i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( i,0.0,-i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(-i,0.0, i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(-i,0.0,-i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, Y <a href="CppOperatorAssign.htm">=</a> 0 plane, from smallest possible coordinats");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,0.0,&nbsp;&nbsp;i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcZ());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, Y <a href="CppOperatorAssign.htm">=</a> 0 plane, zooming in, #223");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0.0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot express plane when all its coordinats are at origin");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,0.0,&nbsp;&nbsp;i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> j:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(Coordinat3D(j,0.0, j)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(j,0.0, j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(j,0.0,j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.CanCalcX()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsX())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.CanCalcY()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsY())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.CanCalcZ()) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsZ())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( j,0.0, j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( j,0.0,-j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(-j,0.0, j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(-j,0.0,-j)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create plane with different slopes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __<a href="CppOperatorDecrement.htm">--</a>D<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; __<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>__<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; __<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|/__<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|/<br/>
&nbsp;&nbsp;A---------------<a href="CppOperatorDecrement.htm">--</a>+---------------<br/>
<br/>
&nbsp;&nbsp;A <a href="CppOperatorAssign.htm">=</a> p1 <a href="CppOperatorAssign.htm">=</a> Origin, fixed<br/>
&nbsp;&nbsp;B <a href="CppOperatorAssign.htm">=</a> p2 <a href="CppOperatorAssign.htm">=</a> At y axis, fixed<br/>
&nbsp;&nbsp;C <a href="CppOperatorAssign.htm">=</a> p3 <a href="CppOperatorAssign.htm">=</a> Above X axis, dependent on slope<br/>
&nbsp;&nbsp;D <a href="CppOperatorAssign.htm">=</a> p4 <a href="CppOperatorAssign.htm">=</a> To be calculated<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, Slope, Slope in Z direction");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> slope <a href="CppOperatorAssign.htm">=</a> 1.0; slope &gt; 1.0e-8; slope <a href="CppOperatorDivideAssign.htm">/=</a> 10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>(slope); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> slope_less <a href="CppOperatorAssign.htm">=</a> slope * 0.999999;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> slope_more <a href="CppOperatorAssign.htm">=</a> slope * 1.000001;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,1.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(1.0,0.0,slope);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0, 1.0,slope)));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (slope_less &lt; slope) <a href="CppComment.htm">//</a>Not always <b><a href="CppTrue.htm">true</a></b>, when slope is very small<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.IsInPlane(Coordinat3D(1.0, 1.0,slope_less)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(1.0, 1.0,slope_less)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(1.0, 1.0,slope_less)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.IsInPlane(Coordinat3D( 1.0, 1.0,slope_less)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (slope_more &gt; slope) <a href="CppComment.htm">//</a>Not always <b><a href="CppTrue.htm">true</a></b>, when slope is very big<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p.IsInPlane(Coordinat3D( 1.0, 1.0,slope_more)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D( 1.0, 1.0,slope_more)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.IsInPlane(Coordinat3D( 1.0, 1.0,slope_more)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create plane with different slopes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>__-D<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; __<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;| __<a href="CppOperatorDecrement.htm">--</a> <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;B<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__-C<br/>
&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; __<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|/__<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;A---------+---------------------<a href="CppOperatorDecrement.htm">--</a><br/>
<br/>
&nbsp;&nbsp;A <a href="CppOperatorAssign.htm">=</a> p1 <a href="CppOperatorAssign.htm">=</a> Origin, fixed<br/>
&nbsp;&nbsp;B <a href="CppOperatorAssign.htm">=</a> p2 <a href="CppOperatorAssign.htm">=</a> At y axis, fixed<br/>
&nbsp;&nbsp;C <a href="CppOperatorAssign.htm">=</a> p3 <a href="CppOperatorAssign.htm">=</a> Above X axis, dependent on slope<br/>
&nbsp;&nbsp;D <a href="CppOperatorAssign.htm">=</a> p4 <a href="CppOperatorAssign.htm">=</a> To be calculated<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, Slope, vertical plane");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; Pair;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> Pair co:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;&nbsp;&nbsp;1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(&nbsp;&nbsp; 10.0,&nbsp;&nbsp; 10.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(&nbsp;&nbsp;100.0,&nbsp;&nbsp;100.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>( 1000.0, 1000.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(10000.0,10000.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(1.0,1.000),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(1.0,0.100),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(1.0,0.010),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(1.0,0.001),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(co.first,co.second,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(co.first,co.second,1.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CalcProjection, from a crash in the program");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1( 1.0,-0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(-1.0, 0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3( 1.0,-0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(-1.0, 0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.CanCalcY());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcX());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CanCalcZ());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.CalcProjection( { p1,p2,p3,p4 } ).empty());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, from #218");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>0.5500000000000004884981308350688777863979339599609375;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a> 2.000000000000000444089209850062616169452667236328125;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z1 <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3.78623595505618038004058689693920314311981201171875;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> 2; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z2 <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x3 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>0.5500000000000004884981308350688777863979339599609375;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y3 <a href="CppOperatorAssign.htm">=</a> 2.000000000000000444089209850062616169452667236328125;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z3 <a href="CppOperatorAssign.htm">=</a> 10; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x4 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3.78623595505618038004058689693920314311981201171875;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y4 <a href="CppOperatorAssign.htm">=</a> 2; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z4 <a href="CppOperatorAssign.htm">=</a> 10; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(x1,y1,z1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(x2,y2,z2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(x3,y3,z3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(x4,y4,z4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> must_be_<b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorAssign.htm">=</a> p.IsInPlane(p4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(must_be_<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(99)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsX()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsY()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsZ()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p4));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, crashes with Plane v1.5");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> 0.0004035051226622692510832834944523028752882964909076690673828125;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a> 0.00023296416881187433805568132161312178141088224947452545166015625;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z1 <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> 0.000403505141811931846741734464245610070065595209598541259765625;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> 0.00023296414405748076185791173298156309101614169776439666748046875;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z2 <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x3 <a href="CppOperatorAssign.htm">=</a> 0.0004035051226622692510832834944523028752882964909076690673828125;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y3 <a href="CppOperatorAssign.htm">=</a> 0.00023296416881187433805568132161312178141088224947452545166015625;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z3 <a href="CppOperatorAssign.htm">=</a> 0.00025000000000000000520417042793042128323577344417572021484375;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x4 <a href="CppOperatorAssign.htm">=</a> 0.000403505141811931846741734464245610070065595209598541259765625;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y4 <a href="CppOperatorAssign.htm">=</a> 0.00023296414405748076185791173298156309101614169776439666748046875;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z4 <a href="CppOperatorAssign.htm">=</a> 0.00025000000000000000520417042793042128323577344417572021484375;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x1_as_<a href="CppApfloat.htm">apfloat</a>(x1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&nbsp;&nbsp;x1_as_<b><a href="CppDouble.htm">double</a></b>(Geometry().<a href="CppToDouble.htm">ToDouble</a>Safe(x1_as_<a href="CppApfloat.htm">apfloat</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 <a href="CppOperatorEqual.htm">==</a> x1_as_<b><a href="CppDouble.htm">double</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(x1,y1,z1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(x2,y2,z2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(x3,y3,z3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(x4,y4,z4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(p4))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p4));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p4));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> NOT_TODAY_20140714<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, crashes with Plane v1.6");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppTRACE.htm">TRACE</a> '"ERROR"' line 392 in file '..\..\<a href="CppClass.htm">Classes</a>\<a href="CppTriangleMesh.htm">CppTriangleMesh</a>\trianglemeshcellscreator<a href="CppImplementationFile.htm">.cpp</a>': 'ERROR'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppTRACE.htm">TRACE</a> 's.str()' line 399 in file '..\..\<a href="CppClass.htm">Classes</a>\<a href="CppTriangleMesh.htm">CppTriangleMesh</a>\trianglemeshcellscreator<a href="CppImplementationFile.htm">.cpp</a>': '4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> (-5,5,0) (index: 659) (-5,-0.9999999999999997779553950749686919152736663818359375,0) (index: 666) (-5,5,1) (index: 700) (-5,-0.9999999999999997779553950749686919152736663818359375,1) (index: 707) '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppTRACE.htm">TRACE</a> '"BREAK"' line 400 in file '..\..\<a href="CppClass.htm">Classes</a>\<a href="CppTriangleMesh.htm">CppTriangleMesh</a>\trianglemeshcellscreator<a href="CppImplementationFile.htm">.cpp</a>': 'BREAK'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppAssert.htm">Assert</a>ion failed!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>5; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a> 5; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z1 <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>5; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>0.9999999999999997779553950749686919152736663818359375;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z2 <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x3 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>5; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y3 <a href="CppOperatorAssign.htm">=</a> 5; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z3 <a href="CppOperatorAssign.htm">=</a> 1; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x4 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>5; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y4 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>0.9999999999999997779553950749686919152736663818359375;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z4 <a href="CppOperatorAssign.htm">=</a> 1; <a href="CppComment.htm">//</a>left out the '.0' intentionally<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(x1,y1,z1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(x2,y2,z2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(x3,y3,z3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(x4,y4,z4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Plane p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdSetprecision.htm">std::setprecision</a>(99)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsX()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsY()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppContainer.htm">Container</a>().ToStr(p.GetCoefficientsZ()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p4));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planex.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planex.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RIBI_PLANEX_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_PLANEX_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppMake_shared.htm">make_shared</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "planez.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppApfloat.htm">apfloat</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PlaneZ;<br/>
<br/>
<a href="CppComment.htm">///</a>A 3D plane that can have its X expressed as a <a href="CppFunction.htm">function</a> of Y and Z.<br/>
<a href="CppComment.htm">///</a>Can be <a href="CppConstructor.htm">construct</a>ed from its equation and at least three 3D <a href="CppPointer.htm">point</a>s<br/>
<a href="CppComment.htm">///</a>A plane stores its coefficients in the following form:<br/>
/<a href="CppComment.htm">//</a> A.z <a href="CppOperatorPlus.htm">+</a> B.x <a href="CppOperatorPlus.htm">+</a> C.y <a href="CppOperatorAssign.htm">=</a> D<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a>ing <b><a href="CppThis.htm">this</a></b> to x being a <a href="CppFunction.htm">function</a> of y and z:<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>B.x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;A&nbsp;&nbsp;.z <a href="CppOperatorPlus.htm">+</a> C&nbsp;&nbsp;.y <a href="CppOperatorMinus.htm">-</a> D<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/B.z <a href="CppOperatorMinus.htm">-</a> C/B.y <a href="CppOperatorPlus.htm">+</a> D/B<br/>
<a href="CppComment.htm">///</a>where A,B,C and D can be obtained by GetCoefficients<br/>
<a href="CppComment.htm">///</a>Easier is to express X as<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> Ay <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C<br/>
<a href="CppComment.htm">///</a>where A,B,C can be obtained by Get<a href="CppFunction.htm">Function</a>A/B/C<br/>
<b><a href="CppStruct.htm">struct</a></b> PlaneX<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppApfloat.htm">apfloat</a> <a href="CppDouble.htm">Double</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<a href="CppApfloat.htm">apfloat</a>&gt; Coordinat2D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<a href="CppApfloat.htm">apfloat</a>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppDouble.htm">Double</a>&gt; <a href="CppDouble.htm">Double</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; Coordinats2D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; Coordinats3D;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create plane X <a href="CppOperatorAssign.htm">=</a> 0.0<br/>
&nbsp;&nbsp;PlaneX() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> from three <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> PlaneX(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcMaxError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the 2D projection of these 3D <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;A: (0,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0)<br/>
&nbsp;&nbsp;B: (1,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (SQRT(2),0)<br/>
&nbsp;&nbsp;C: (1,1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (SQRT(2),SQRT(2))<br/>
<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;A---<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;C<br/>
&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;|/\ <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorDecrement.htm">--</a>B-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A<a href="CppOperatorDecrement.htm">--</a>B---<a href="CppOperatorDecrement.htm">--</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;Coordinats2D CalcProjection(<b><a href="CppConst.htm">const</a></b> Coordinats3D&amp; <a href="CppPointer.htm">point</a>s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws when cannot calculate X, which is when the plane is horizontal<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcX(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a>s GetCoefficients() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x <a href="CppOperatorAssign.htm">=</a> Ay <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> A cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>A() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x <a href="CppOperatorAssign.htm">=</a> Ay <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> B cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>B() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x <a href="CppOperatorAssign.htm">=</a> Ay <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> C cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>C() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the coordinat is in the plane<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsInPlane(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~PlaneX() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A PlaneX is actually a PlaneZ used with its coordinats rotated from (X,Y,Z) to (Z,Y,Y)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;PlaneZ&gt; m_plane_z;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates m_min_error per Get<a href="CppFunction.htm">Function</a>C()<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a> CalcMinErrorPerC() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> plane cannot be created<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;PlaneZ&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a>s <a href="CppRotate.htm">Rotate</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppRotate.htm">Rotate</a>s the X,Y and Z value of a Coordinat<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Coordinat3D <a href="CppRotate.htm">Rotate</a>(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; <a href="CppPointer.htm">point</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the PlaneX to a x(y,z), e.g 'x=(2*y) <a href="CppOperatorPlus.htm">+</a> (3*z) <a href="CppOperatorPlus.htm">+</a> 5' (spaces exactly as shown)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> To<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneX*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> PlaneX*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneX&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;<b><a href="CppConst.htm">const</a></b> PlaneX&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppBoost.htm">boost</a>::detail::sp_ms_deleter&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneX&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppBoost.htm">boost</a>::detail::sp_ms_deleter&lt;<b><a href="CppConst.htm">const</a></b> PlaneX&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> PlaneX&amp; planex);<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> PlaneX&amp; planex);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_PLANEX_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planex.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planex.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "planex.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "planez.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>Create plane X <a href="CppOperatorAssign.htm">=</a> 0.0<br/>
<a href="CppRibi.htm">ribi</a>::PlaneX::PlaneX() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: PlaneX(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,1.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0)<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneX::PlaneX(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
) : m_plane_z{Create(p1,p2,p3)}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneX::~PlaneX() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nothing to <b><a href="CppDo.htm">do</a></b><br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneX::CalcError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> expected <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> calculated <a href="CppOperatorAssign.htm">=</a> CalcX(y,z);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> error <a href="CppOperatorAssign.htm">=</a> abs(calculated <a href="CppOperatorMinus.htm">-</a> expected);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneX::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneX::CalcMinErrorPerC() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>min_error_per_c will be <a href="CppAbout.htm">about</a> 0.000000001<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStub.htm">stub</a>_value increases <b><a href="CppThis.htm">this</a></b> jut a little, by a 0.000001%<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppStub.htm">stub</a>_value <a href="CppOperatorAssign.htm">=</a> 0.000000001 * 1.00000001;<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> USE_STUB<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> USE_STUB<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStub.htm">stub</a>_value;<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">//</a>USE_STUB<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>PlaneX calculates its own tolerance <b><a href="CppFor.htm">for</a></b> errors, by measuring it<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a> min_error_per_c <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (min_error_per_c &gt; 0.0) <b><a href="CppReturn.htm">return</a></b> min_error_per_c;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> low <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> high <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> low&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0e-16;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> high <a href="CppOperatorAssign.htm">=</a> 1.0e+16;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_x <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_x <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_y <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_y <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_z <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_z <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> zero(0.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> z <a href="CppOperatorAssign.htm">=</a> min_z; z &lt; max_z; z<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> min_y; y &lt; max_y; y<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> min_x; x &lt; max_x; x<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(&nbsp;&nbsp;x,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(&nbsp;&nbsp;x,&nbsp;&nbsp;y,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;x,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneX p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; p4: { p1, p2, p3 } )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> p.CalcError(p4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error_per_c <a href="CppOperatorAssign.htm">=</a> error <a href="CppOperatorDivide.htm">/</a> p.Get<a href="CppFunction.htm">Function</a>C();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(error_per_c <a href="CppOperatorGreaterEqual.htm">&gt;=</a> zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(<a href="CppApfloat.htm">apfloat</a>(min_error_per_c) <a href="CppOperatorDivide.htm">/</a> p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error_per_c &gt; min_error_per_c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min_error_per_c <a href="CppOperatorAssign.htm">=</a> error_per_c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(<a href="CppApfloat.htm">apfloat</a>(min_error_per_c) <a href="CppOperatorDivide.htm">/</a> p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p4) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> min_error;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c); <a href="CppComment.htm">//</a>0.000000001e0<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &gt; zero);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &lt; <a href="CppStub.htm">stub</a>_value);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &gt; 0.99 * <a href="CppStub.htm">stub</a>_value);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> min_error_per_c;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a>USE_STUB<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneX::CalcMaxError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; <a href="CppComment.htm">/*</a>coordinat<a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcMinErrorPerC() &gt; <a href="CppApfloat.htm">apfloat</a>(0.0));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error <a href="CppOperatorAssign.htm">=</a> abs(CalcMinErrorPerC() * Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_error <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppApfloat.htm">apfloat</a>(0.0));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max_error;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coefficients <a href="CppOperatorAssign.htm">=</a> GetCoefficients();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> coefficients[0];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> coefficients[1];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> coefficients[2];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> e <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::smallest();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/B.z <a href="CppOperatorMinus.htm">-</a> C/B.y <a href="CppOperatorPlus.htm">+</a> D/B<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If B is zero, the slope in X and Y cannot be calculated<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.sign())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> rc_y <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>c <a href="CppOperatorDivide.htm">/</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> rc_z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>a <a href="CppOperatorDivide.htm">/</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_z <a href="CppOperatorAssign.htm">=</a> abs(e * rc_z * z) <a href="CppOperatorPlus.htm">+</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_y <a href="CppOperatorAssign.htm">=</a> abs(e * rc_y * y) <a href="CppOperatorPlus.htm">+</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error <a href="CppOperatorAssign.htm">=</a> max_error_x <a href="CppOperatorPlus.htm">+</a> max_error_y <a href="CppOperatorPlus.htm">+</a> max_error_z;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_error <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max_error;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> e;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneX::Coordinats2D <a href="CppRibi.htm">ribi</a>::PlaneX::CalcProjection(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinats3D&amp; <a href="CppPointer.htm">point</a>s<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> v(<a href="CppPointer.htm">point</a>s);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppAuto.htm">auto</a></b>&amp; i: v) { i <a href="CppOperatorAssign.htm">=</a> <a href="CppRotate.htm">Rotate</a>(i); }<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;CalcProjection(v);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("PlaneX::CalcProjection: cannot calculate projection");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneX::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneX::CalcX(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;CalcZ(y,z);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::PlaneX::CalcX: cannot calculate X of a horizontal plane");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::PlaneZ&gt; <a href="CppRibi.htm">ribi</a>::PlaneX::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;PlaneZ&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PlaneZ(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRotate.htm">Rotate</a>(p1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRotate.htm">Rotate</a>(p2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRotate.htm">Rotate</a>(p3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppApfloat.htm">apfloat</a>&gt; <a href="CppRibi.htm">ribi</a>::PlaneX::GetCoefficients() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v(m_plane_z-&gt;GetCoefficients());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> { v[2],v[0],v[1],v[3] };<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneX::Get<a href="CppFunction.htm">Function</a>A() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>A();<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneX::Get<a href="CppFunction.htm">Function</a>B() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>B();<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneX::Get<a href="CppFunction.htm">Function</a>C() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>C();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::PlaneX::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.6";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::PlaneX::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-10: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>, split off from PlaneZ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-13: <a href="CppVersion.htm">version</a> 1.1: <a href="CppBug.htm">bug</a> fixed",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-04-01: <a href="CppVersion.htm">version</a> 1.2: use of <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-06-13: <a href="CppVersion.htm">version</a> 1.3: shortened <a href="CppTime.htm">time</a> to <a href="CppCompile.htm">compile</a>, allow obtaining the constants in <a href="CppFunction.htm">function</a> 'x <a href="CppOperatorAssign.htm">=</a> Ay <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C'",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-03: <a href="CppVersion.htm">version</a> 1.4: use of <a href="CppApfloat.htm">apfloat</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-09: <a href="CppVersion.htm">version</a> 1.5: use <b><a href="CppDouble.htm">double</a></b> in <a href="CppInterface.htm">interface</a> only",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-10: <a href="CppVersion.htm">version</a> 1.6: use of <a href="CppApfloat.htm">apfloat</a> only"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::PlaneX::IsInPlane(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> error <a href="CppOperatorAssign.htm">=</a> CalcError(coordinat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> max_error <a href="CppOperatorAssign.htm">=</a> CalcMaxError(coordinat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error <a href="CppOperatorLessEqual.htm">&lt;=</a> max_error;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppApfloat.htm">apfloat</a>&gt; <a href="CppRibi.htm">ribi</a>::PlaneX::<a href="CppRotate.htm">Rotate</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(coefficients.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coefficients[2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coefficients[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coefficients[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coefficients[3]<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneX::Coordinat3D <a href="CppRibi.htm">ribi</a>::PlaneX::<a href="CppRotate.htm">Rotate</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; <a href="CppPointer.htm">point</a><br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(<a href="CppPointer.htm">point</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(<a href="CppPointer.htm">point</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(<a href="CppPointer.htm">point</a>)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::PlaneX::To<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> PlaneX&amp; planex)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(planex.m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "x=("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planex.m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>A() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "*y) <a href="CppOperatorPlus.htm">+</a> ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planex.m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>B() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "*z) <a href="CppOperatorPlus.htm">+</a> "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planex.m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>C()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::PlaneX::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>: cannot display <a href="CppFunction.htm">function</a> of a horizontal plane");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planex_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planex_test.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "planex.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "planez.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::PlaneX::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested { <b><a href="CppFalse.htm">false</a></b> };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("<a href="CppDefaultConstructor.htm">Default construction</a>");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneX p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.To<a href="CppFunction.htm">Function</a>().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.GetCoefficients().empty());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_x { 1.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_y { 2.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_z { 3.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_x { 4.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_y { 6.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_z { 9.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_x {12.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_y {11.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_z { 9.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneX p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(p1_x,p1_y,p1_z),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(p2_x,p2_y,p2_z),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(p3_x,p3_y,p3_z)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t(p.GetCoefficients());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a { t[0] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b { t[1] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c { t[2] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d { t[3] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a_expected {&nbsp;&nbsp;30.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_expected { <a href="CppOperatorMinus.htm">-</a>48.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c_expected {&nbsp;&nbsp;17.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_expected { <a href="CppOperatorMinus.htm">-</a>15.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(a <a href="CppOperatorMinus.htm">-</a> a_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(b <a href="CppOperatorMinus.htm">-</a> b_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(c <a href="CppOperatorMinus.htm">-</a> c_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p1_expected { (a * p1_x) <a href="CppOperatorPlus.htm">+</a> (b * p1_y) <a href="CppOperatorPlus.htm">+</a> (c * p1_z) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p2_expected { (a * p2_x) <a href="CppOperatorPlus.htm">+</a> (b * p2_y) <a href="CppOperatorPlus.htm">+</a> (c * p2_z) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p3_expected { (a * p3_x) <a href="CppOperatorPlus.htm">+</a> (b * p3_y) <a href="CppOperatorPlus.htm">+</a> (c * p3_z) };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(a * x) <a href="CppOperatorPlus.htm">+</a> (b * y) <a href="CppOperatorPlus.htm">+</a> (c * z) <a href="CppOperatorAssign.htm">=</a> d" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * x) <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * y) <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * z) <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p1_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p1_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p1_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p2_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p2_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p2_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p3_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p3_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p3_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p1_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p2_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p3_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcPlaneX<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcPlaneX <b><a href="CppReturn.htm">return</a></b> the coefficients in the following form:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> A.x <a href="CppOperatorPlus.htm">+</a> B.y <a href="CppOperatorPlus.htm">+</a> C.z <a href="CppOperatorAssign.htm">=</a> D<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a>ing <b><a href="CppThis.htm">this</a></b> to z being a <a href="CppFunction.htm">function</a> of x and y:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>C.z <a href="CppOperatorAssign.htm">=</a> A.x <a href="CppOperatorPlus.htm">+</a> B.y <a href="CppOperatorMinus.htm">-</a> D<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.x <a href="CppOperatorMinus.htm">-</a> B/C.y <a href="CppOperatorPlus.htm">+</a> D/C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>In <b><a href="CppThis.htm">this</a></b> test, use the formula:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;z <a href="CppOperatorAssign.htm">=</a> (2.0 * x) <a href="CppOperatorPlus.htm">+</a> (3.0 * y) <a href="CppOperatorPlus.htm">+</a> (5.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Coefficients must then become:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>A/C <a href="CppOperatorAssign.htm">=</a> 2.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>B/C <a href="CppOperatorAssign.htm">=</a> 3.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; D/C <a href="CppOperatorAssign.htm">=</a> 5.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Coefficients are, when setting C to 1.0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>A <a href="CppOperatorAssign.htm">=</a> 2.0 <a href="CppOperatorAssign.htm">=</a>&gt; A <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>B <a href="CppOperatorAssign.htm">=</a> 3.0 <a href="CppOperatorAssign.htm">=</a>&gt; B <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; C <a href="CppOperatorAssign.htm">=</a> 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; D <a href="CppOperatorAssign.htm">=</a> 5.0<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>3D p1(1.0,1.0,10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>3D p2(1.0,2.0,13.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>3D p3(2.0,1.0,12.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneX p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t(p.GetCoefficients());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a { t[0] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b { t[1] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c { t[2] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d { t[3] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a_expected { <a href="CppOperatorMinus.htm">-</a>2.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_expected { <a href="CppOperatorMinus.htm">-</a>3.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c_expected {&nbsp;&nbsp;1.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_expected {&nbsp;&nbsp;5.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(a <a href="CppOperatorMinus.htm">-</a> a_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(b <a href="CppOperatorMinus.htm">-</a> b_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(c <a href="CppOperatorMinus.htm">-</a> c_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p1_expected { (a * 1.0) <a href="CppOperatorPlus.htm">+</a> (b * 1.0) <a href="CppOperatorPlus.htm">+</a> (c * 10.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p2_expected { (a * 1.0) <a href="CppOperatorPlus.htm">+</a> (b * 2.0) <a href="CppOperatorPlus.htm">+</a> (c * 13.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p3_expected { (a * 2.0) <a href="CppOperatorPlus.htm">+</a> (b * 1.0) <a href="CppOperatorPlus.htm">+</a> (c * 12.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p1_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p2_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p3_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CalcX, diagonal plane");<br/>
&nbsp;&nbsp;{<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(1.0,2.0,3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(2.0,5.0,8.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(3.0,7.0,11.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneX p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcX(2.0, 3.0)<a href="CppOperatorMinus.htm">-</a> 1.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcX(5.0, 8.0)<a href="CppOperatorMinus.htm">-</a> 2.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcX(7.0,11.0)-3.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CalcX, vertical plane X <a href="CppOperatorAssign.htm">=</a> 2.0");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|####/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|###/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|##/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|#/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/<br/>
 <a href="CppOperatorDecrement.htm">--</a>-+------<a href="CppOperatorDecrement.htm">--</a><br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> |<br/>
 <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;{<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(2.0, 3.0, 5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(2.0, 7.0,11.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(2.0,13.0,17.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneX p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcX(1.0,2.0)-2.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcX(3.0,5.0)-2.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcX(7.0,9.0)-2.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("To<a href="CppFunction.htm">Function</a>, 3 <a href="CppPointer.htm">point</a>s and 4 <a href="CppPointer.htm">point</a>s");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFunction.htm">std::function</a>&lt;<b><a href="CppDouble.htm">double</a></b>(<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>)&gt; f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (2.0 * y) <a href="CppOperatorPlus.htm">+</a> (3.0 * z) <a href="CppOperatorPlus.htm">+</a> 5.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 { 2.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z1 { 3.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 { 5.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z2 { 7.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y3 { 11.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z3 { 13.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y4 { 17.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z4 { 29.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(f(y1,z1),y1,z1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(f(y2,z2),y2,z2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(f(y3,z3),y3,z3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneX a(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "x=(2*y) <a href="CppOperatorPlus.htm">+</a> (3*z) <a href="CppOperatorPlus.htm">+</a> 5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!a.To<a href="CppFunction.htm">Function</a>().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(f(y4,z4),y4,z4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p1,p2,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p1,p3,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p1,p4,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p2,p1,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p2,p1,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p2,p3,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p2,p3,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p2,p4,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p2,p4,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p3,p1,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p3,p1,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p3,p2,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p3,p2,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p3,p4,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p3,p4,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p4,p1,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p4,p1,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p4,p2,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p4,p2,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p4,p3,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneX(p4,p3,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, X <a href="CppOperatorAssign.htm">=</a> 1, zooming to smallest three <a href="CppPointer.htm">point</a>s to determine a plane, <a href="CppPointer.htm">point</a> above origin");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> 1.0; i &gt; 1.0e-8; i<a href="CppOperatorDivideAssign.htm">/=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(1.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(1.0,&nbsp;&nbsp;i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(1.0,0.0,&nbsp;&nbsp;i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneX p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("----------------------------");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>A());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>B());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdSqrt.htm">std::sqrt</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, <b><a href="CppFor.htm">for</a></b> <a href="CppBug.htm">bug</a> #228");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Values copied literally, so no .0 on purpose<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(-5,-5,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(-5,-0.999999999999999880,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(-5,-5,10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(-5,-0.999999999999999880,10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneX p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("----------------------------");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>A());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>B());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p4));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("GetProjection");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: ( 0,1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;B: (1,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: ( 0,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;C: (1,1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (SQRT(2),0)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A---<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/\ <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| \<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>+<a href="CppOperatorDecrement.htm">--</a>B-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>B<a href="CppOperatorDecrement.htm">--</a>C<a href="CppOperatorDecrement.htm">--</a><br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneX().CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdSqrt.htm">std::sqrt</a>(2.0) ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("GetProjection, <b><a href="CppFor.htm">for</a></b> X <a href="CppOperatorAssign.htm">=</a> 2 plane");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A: (2,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;B: (2,1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (1,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;C: (2,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (0,1)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|######<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;C#####<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|\###<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|#\#<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|##B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt; |&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|#<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
 <a href="CppOperatorDecrement.htm">--</a>-A------<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>-A---<a href="CppOperatorDecrement.htm">--</a>B---<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
 <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneX(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0+2.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0+2.0,1.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0+2.0,0.0,1.0)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0+2.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0+2.0,1.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0+2.0,0.0,1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 0.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 0.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 1.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 0.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 0.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 1.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planey.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planey.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RIBI_PLANEY_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_PLANEY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppMake_shared.htm">make_shared</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "planez.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppApfloat.htm">apfloat</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PlaneZ;<br/>
<br/>
<a href="CppComment.htm">///</a>A 3D plane that can have its X expressed as a <a href="CppFunction.htm">function</a> of Y and Z.<br/>
<a href="CppComment.htm">///</a>Can be <a href="CppConstructor.htm">construct</a>ed from its equation and at least three 3D <a href="CppPointer.htm">point</a>s<br/>
<a href="CppComment.htm">///</a>A plane stores its coefficients in the following form:<br/>
/<a href="CppComment.htm">//</a> A.z <a href="CppOperatorPlus.htm">+</a> B.x <a href="CppOperatorPlus.htm">+</a> C.y <a href="CppOperatorAssign.htm">=</a> D<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a>ing <b><a href="CppThis.htm">this</a></b> to y being a <a href="CppFunction.htm">function</a> of x and z:<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>C.y <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;A&nbsp;&nbsp;.z <a href="CppOperatorPlus.htm">+</a> B&nbsp;&nbsp;.x <a href="CppOperatorMinus.htm">-</a> D<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.z <a href="CppOperatorMinus.htm">-</a> B/C.x <a href="CppOperatorPlus.htm">+</a> D/C<br/>
<a href="CppComment.htm">///</a>Where A,B,C and D can be obtained by <b><a href="CppUsing.htm">using</a></b> GetCoefficients<br/>
<a href="CppComment.htm">///</a>Easier might be to express Y as:<br/>
<a href="CppComment.htm">///</a>y <a href="CppOperatorAssign.htm">=</a> Ax <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C<br/>
<a href="CppComment.htm">///</a>Where A,B and C can be obtained by <b><a href="CppUsing.htm">using</a></b> Get<a href="CppFunction.htm">Function</a>A/B/C<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PlaneY<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<a href="CppApfloat.htm">apfloat</a>&gt; Coordinat2D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<a href="CppApfloat.htm">apfloat</a>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; Coordinats2D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; Coordinats3D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppApfloat.htm">apfloat</a> <a href="CppDouble.htm">Double</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppDouble.htm">Double</a>&gt; <a href="CppDouble.htm">Double</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create plane Y <a href="CppOperatorAssign.htm">=</a> 0.0<br/>
&nbsp;&nbsp;PlaneY() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> from three <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> PlaneY(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcMaxError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the 2D projection of these 3D <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;A: (0,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0)<br/>
&nbsp;&nbsp;B: (1,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (SQRT(2),0)<br/>
&nbsp;&nbsp;C: (1,1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (SQRT(2),SQRT(2))<br/>
<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;A---<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;C<br/>
&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;|/\ <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorDecrement.htm">--</a>B-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A<a href="CppOperatorDecrement.htm">--</a>B---<a href="CppOperatorDecrement.htm">--</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;Coordinats2D CalcProjection(<b><a href="CppConst.htm">const</a></b> Coordinats3D&amp; <a href="CppPointer.htm">point</a>s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws when cannot calculate Y, which is when the plane is horizontal<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcY(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/y <a href="CppOperatorAssign.htm">=</a> Ax <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> A cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>A() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/y <a href="CppOperatorAssign.htm">=</a> Ax <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> B cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>B() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/y <a href="CppOperatorAssign.htm">=</a> Ax <a href="CppOperatorPlus.htm">+</a> Bz <a href="CppOperatorPlus.htm">+</a> C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> C cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>C() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a>s GetCoefficients() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the coordinat is in the plane<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsInPlane(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~PlaneY() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A PlaneY is actually a PlaneZ used with its coordinats rotated from (X,Y,Z) to (Z,Y,Y)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;PlaneZ&gt; m_plane_z;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates m_min_error per Get<a href="CppFunction.htm">Function</a>C()<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a> CalcMinErrorPerC() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;PlaneZ&gt; Create(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a>s <a href="CppRotate.htm">Rotate</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Coordinat3D <a href="CppRotate.htm">Rotate</a>(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; <a href="CppPointer.htm">point</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the PlaneY to a y(x,z), e.g 'y=(2*x) <a href="CppOperatorPlus.htm">+</a> (3*z) <a href="CppOperatorPlus.htm">+</a> 5' (spaces exactly as shown)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> To<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneY*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> PlaneY*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneY&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;<b><a href="CppConst.htm">const</a></b> PlaneY&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppBoost.htm">boost</a>::detail::sp_ms_deleter&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneY&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppBoost.htm">boost</a>::detail::sp_ms_deleter&lt;<b><a href="CppConst.htm">const</a></b> PlaneY&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> PlaneY&amp; planey);<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> PlaneY&amp; planey);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_PLANEY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planey.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planey.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "planey.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "planez.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::PlaneY() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: PlaneY(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0)<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::PlaneY(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
)<br/>
&nbsp;&nbsp;: m_plane_z{Create(p1,p2,p3)}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::~PlaneY()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneY::CalcError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> expected <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> calculated <a href="CppOperatorAssign.htm">=</a> CalcY(x,z);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> abs(calculated <a href="CppOperatorMinus.htm">-</a> expected);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneY::CalcMinErrorPerC() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>min_error_per_c will be <a href="CppAbout.htm">about</a> 0.000000001<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStub.htm">stub</a>_value increases <b><a href="CppThis.htm">this</a></b> jut a little, by a 0.000001%<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppStub.htm">stub</a>_value <a href="CppOperatorAssign.htm">=</a> 0.000000001 * 1.00000001;<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> USE_STUB<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> USE_STUB<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStub.htm">stub</a>_value;<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">//</a>USE_STUB<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>PlaneX calculates its own tolerance <b><a href="CppFor.htm">for</a></b> errors, by measuring it<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a> min_error_per_c <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (min_error_per_c &gt; 0.0) <b><a href="CppReturn.htm">return</a></b> min_error_per_c;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> low <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> high <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> low&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0e-16;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> high <a href="CppOperatorAssign.htm">=</a> 1.0e+16;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_x <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_x <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_y <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_y <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_z <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_z <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> zero(0.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> z <a href="CppOperatorAssign.htm">=</a> min_z; z &lt; max_z; z<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> min_y; y &lt; max_y; y<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> min_x; x &lt; max_x; x<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,&nbsp;&nbsp;y,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(&nbsp;&nbsp;x,&nbsp;&nbsp;y,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(0.0,&nbsp;&nbsp;y,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneY p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; p4: { p1, p2, p3 } )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> p.CalcError(p4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error_per_c <a href="CppOperatorAssign.htm">=</a> error <a href="CppOperatorDivide.htm">/</a> p.Get<a href="CppFunction.htm">Function</a>C();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(error_per_c <a href="CppOperatorGreaterEqual.htm">&gt;=</a> zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(<a href="CppApfloat.htm">apfloat</a>(min_error_per_c) <a href="CppOperatorDivide.htm">/</a> p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error_per_c &gt; min_error_per_c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min_error_per_c <a href="CppOperatorAssign.htm">=</a> error_per_c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(<a href="CppApfloat.htm">apfloat</a>(min_error_per_c) <a href="CppOperatorDivide.htm">/</a> p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p4) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> min_error;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c); <a href="CppComment.htm">//</a>Output: <a href="CppTRACE.htm">TRACE</a> 'min_error_per_c' line 127 in file '..\..\<a href="CppClass.htm">Classes</a>\<a href="CppPlane.htm">CppPlane</a>\planey<a href="CppImplementationFile.htm">.cpp</a>': '0.000000001e0'<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &gt; zero);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &lt; <a href="CppStub.htm">stub</a>_value);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &gt; 0.99 * <a href="CppStub.htm">stub</a>_value);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> min_error_per_c;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> USE_STUB<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneY::CalcMaxError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; <a href="CppComment.htm">/*</a>coordinat<a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcMinErrorPerC() &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error <a href="CppOperatorAssign.htm">=</a> abs(CalcMinErrorPerC() * Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_error <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max_error;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(coordinat);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coefficients <a href="CppOperatorAssign.htm">=</a> GetCoefficients();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> coefficients[0];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> coefficients[1];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> coefficients[2];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> e <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::smallest();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.z <a href="CppOperatorMinus.htm">-</a> B/C.x <a href="CppOperatorPlus.htm">+</a> D/C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If C is zero, the slope in X and Y cannot be calculated<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.sign())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> rc_x <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>b <a href="CppOperatorDivide.htm">/</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> rc_z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>a <a href="CppOperatorDivide.htm">/</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_x <a href="CppOperatorAssign.htm">=</a> abs(e * rc_x * x) <a href="CppOperatorPlus.htm">+</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_z <a href="CppOperatorAssign.htm">=</a> abs(e * rc_z * z) <a href="CppOperatorPlus.htm">+</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error <a href="CppOperatorAssign.htm">=</a> max_error_x <a href="CppOperatorPlus.htm">+</a> max_error_y <a href="CppOperatorPlus.htm">+</a> max_error_z;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_error <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max_error;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> e;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::Coordinats2D <a href="CppRibi.htm">ribi</a>::PlaneY::CalcProjection(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinats3D&amp; <a href="CppPointer.htm">point</a>s<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> v(<a href="CppPointer.htm">point</a>s);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppAuto.htm">auto</a></b>&amp; i: v) { i <a href="CppOperatorAssign.htm">=</a> <a href="CppRotate.htm">Rotate</a>(i); }<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;CalcProjection(v);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("PlaneY::CalcProjection: cannot calculate projection");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneY::CalcY(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; z) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;CalcZ(x,z);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::PlaneY::CalcY: cannot calculate Y of a horizontal plane");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::PlaneZ&gt; <a href="CppRibi.htm">ribi</a>::PlaneY::Create(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;PlaneZ&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> PlaneZ(<a href="CppRotate.htm">Rotate</a>(p1), <a href="CppRotate.htm">Rotate</a>(p2), <a href="CppRotate.htm">Rotate</a>(p3))<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppApfloat.htm">apfloat</a>&gt; <a href="CppRibi.htm">ribi</a>::PlaneY::GetCoefficients() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v(m_plane_z-&gt;GetCoefficients());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> { v[1],v[2],v[0],v[3] };<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneY::Get<a href="CppFunction.htm">Function</a>A() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>A();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneY::Get<a href="CppFunction.htm">Function</a>B() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>B();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneY::Get<a href="CppFunction.htm">Function</a>C() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>C();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::PlaneY::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.6";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::PlaneY::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-10: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>, split off from PlaneX",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-13: <a href="CppVersion.htm">version</a> 1.1: <a href="CppBug.htm">bug</a> fixed",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-04-01: <a href="CppVersion.htm">version</a> 1.2: use of <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-06-13: <a href="CppVersion.htm">version</a> 1.3: shortened <a href="CppTime.htm">time</a> to <a href="CppCompile.htm">compile</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-03: <a href="CppVersion.htm">version</a> 1.4: use of <a href="CppApfloat.htm">apfloat</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-09: <a href="CppVersion.htm">version</a> 1.5: use <b><a href="CppDouble.htm">double</a></b> in <a href="CppInterface.htm">interface</a> only",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-10: <a href="CppVersion.htm">version</a> 1.6: use of <a href="CppApfloat.htm">apfloat</a> only"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::PlaneY::IsInPlane(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> error <a href="CppOperatorAssign.htm">=</a> CalcError(coordinat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> max_error <a href="CppOperatorAssign.htm">=</a> CalcMaxError(coordinat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error <a href="CppOperatorLessEqual.htm">&lt;=</a> max_error;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::<a href="CppDouble.htm">Double</a>s <a href="CppRibi.htm">ribi</a>::PlaneY::<a href="CppRotate.htm">Rotate</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(coefficients.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coefficients[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coefficients[2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coefficients[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;coefficients[3]<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneY::Coordinat3D <a href="CppRibi.htm">ribi</a>::PlaneY::<a href="CppRotate.htm">Rotate</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; <a href="CppPointer.htm">point</a><br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The 0-2-1 order is confirmed by doing a projection of a triangle on the Y=0 plane<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>on a Y=0 plane<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(<a href="CppPointer.htm">point</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(<a href="CppPointer.htm">point</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(<a href="CppPointer.htm">point</a>)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::PlaneY::To<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
 }<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> PlaneY&amp; planey)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(planey.m_plane_z);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "y=("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planey.m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>A() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "*x) <a href="CppOperatorPlus.htm">+</a> ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planey.m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>B() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "*z) <a href="CppOperatorPlus.htm">+</a> "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planey.m_plane_z-&gt;Get<a href="CppFunction.htm">Function</a>C()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "<a href="CppRibi.htm">ribi</a>::PlaneY::To<a href="CppFunction.htm">Function</a>: cannot calculate X of a horizontal plane";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(error.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planey_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planey_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "planey.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "planez.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::PlaneY::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested { <b><a href="CppFalse.htm">false</a></b> };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("<a href="CppDefaultConstructor.htm">Default construction</a>");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneY p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.To<a href="CppFunction.htm">Function</a>().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.GetCoefficients().empty());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("GetProjection, <b><a href="CppFor.htm">for</a></b> plane Y <a href="CppOperatorAssign.htm">=</a> 0.0, <a href="CppPointer.htm">point</a>s on plane");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;B: (0,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (0,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;C: (1,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (1,0)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; |\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | \<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>B<a href="CppOperatorDecrement.htm">--</a>C-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>B<a href="CppOperatorDecrement.htm">--</a>C---<a href="CppOperatorDecrement.htm">--</a><br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D a(0.0,0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D b(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D c(1.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(PlaneY().To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(a,b,c).To<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "The three <a href="CppPointer.htm">point</a>s are on the Y <a href="CppOperatorAssign.htm">=</a> 0 plane");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; v { PlaneY().CalcProjection( { a,b,c } ) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_x { 1.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_y { 2.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_z { 3.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_x { 4.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_y { 6.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_z { 9.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_x {12.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_y {11.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_z { 9.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneY p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(p1_x,p1_y,p1_z),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(p2_x,p2_y,p2_z),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(p3_x,p3_y,p3_z)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t(p.GetCoefficients());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a { t[0] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b { t[1] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c { t[2] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d { t[3] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a_expected {&nbsp;&nbsp;30.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_expected { <a href="CppOperatorMinus.htm">-</a>48.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c_expected {&nbsp;&nbsp;17.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_expected { <a href="CppOperatorMinus.htm">-</a>15.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(a <a href="CppOperatorMinus.htm">-</a> a_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(b <a href="CppOperatorMinus.htm">-</a> b_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(c <a href="CppOperatorMinus.htm">-</a> c_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p1_expected { (a * p1_x) <a href="CppOperatorPlus.htm">+</a> (b * p1_y) <a href="CppOperatorPlus.htm">+</a> (c * p1_z) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p2_expected { (a * p2_x) <a href="CppOperatorPlus.htm">+</a> (b * p2_y) <a href="CppOperatorPlus.htm">+</a> (c * p2_z) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p3_expected { (a * p3_x) <a href="CppOperatorPlus.htm">+</a> (b * p3_y) <a href="CppOperatorPlus.htm">+</a> (c * p3_z) };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(a * x) <a href="CppOperatorPlus.htm">+</a> (b * y) <a href="CppOperatorPlus.htm">+</a> (c * z) <a href="CppOperatorAssign.htm">=</a> d" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * x) <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * y) <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * z) <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p1_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p1_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p1_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p2_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p2_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p2_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p3_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p3_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p3_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p1_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p2_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p3_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CalcPlaneY");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcPlaneY <b><a href="CppReturn.htm">return</a></b> the coefficients in the following form:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> A.x <a href="CppOperatorPlus.htm">+</a> B.y <a href="CppOperatorPlus.htm">+</a> C.z <a href="CppOperatorAssign.htm">=</a> D<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a>ing <b><a href="CppThis.htm">this</a></b> to z being a <a href="CppFunction.htm">function</a> of x and y:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>C.z <a href="CppOperatorAssign.htm">=</a> A.x <a href="CppOperatorPlus.htm">+</a> B.y <a href="CppOperatorMinus.htm">-</a> D<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.x <a href="CppOperatorMinus.htm">-</a> B/C.y <a href="CppOperatorPlus.htm">+</a> D/C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>In <b><a href="CppThis.htm">this</a></b> test, use the formula:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;z <a href="CppOperatorAssign.htm">=</a> (2.0 * x) <a href="CppOperatorPlus.htm">+</a> (3.0 * y) <a href="CppOperatorPlus.htm">+</a> (5.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Coefficients must then become:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>A/C <a href="CppOperatorAssign.htm">=</a> 2.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>B/C <a href="CppOperatorAssign.htm">=</a> 3.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; D/C <a href="CppOperatorAssign.htm">=</a> 5.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Coefficients are, when setting C to 1.0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>A <a href="CppOperatorAssign.htm">=</a> 2.0 <a href="CppOperatorAssign.htm">=</a>&gt; A <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>B <a href="CppOperatorAssign.htm">=</a> 3.0 <a href="CppOperatorAssign.htm">=</a>&gt; B <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; C <a href="CppOperatorAssign.htm">=</a> 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; D <a href="CppOperatorAssign.htm">=</a> 5.0<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>3D p1(1.0,1.0,10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>3D p2(1.0,2.0,13.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>3D p3(2.0,1.0,12.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneY p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t(p.GetCoefficients());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a { t[0] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b { t[1] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c { t[2] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d { t[3] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a_expected { <a href="CppOperatorMinus.htm">-</a>2.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_expected { <a href="CppOperatorMinus.htm">-</a>3.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c_expected {&nbsp;&nbsp;1.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_expected {&nbsp;&nbsp;5.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(a <a href="CppOperatorMinus.htm">-</a> a_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(b <a href="CppOperatorMinus.htm">-</a> b_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(c <a href="CppOperatorMinus.htm">-</a> c_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p1_expected { (a * 1.0) <a href="CppOperatorPlus.htm">+</a> (b * 1.0) <a href="CppOperatorPlus.htm">+</a> (c * 10.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p2_expected { (a * 1.0) <a href="CppOperatorPlus.htm">+</a> (b * 2.0) <a href="CppOperatorPlus.htm">+</a> (c * 13.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_p3_expected { (a * 2.0) <a href="CppOperatorPlus.htm">+</a> (b * 1.0) <a href="CppOperatorPlus.htm">+</a> (c * 12.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p1_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p2_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d <a href="CppOperatorMinus.htm">-</a> d_p3_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CalcY, diagonal plane");<br/>
&nbsp;&nbsp;{<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(1.0,2.0,3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(2.0,5.0,8.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(3.0,7.0,11.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneY p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcY(1.0, 3.0)<a href="CppOperatorMinus.htm">-</a> 2.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcY(2.0, 8.0)<a href="CppOperatorMinus.htm">-</a> 5.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcY(3.0,11.0)<a href="CppOperatorMinus.htm">-</a> 7.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CalcY, vertical plane Y <a href="CppOperatorAssign.htm">=</a> 3.0");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|####/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|###/#<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|##/##<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|#/###<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/####<br/>
 <a href="CppOperatorDecrement.htm">--</a>-+---<a href="CppOperatorDecrement.htm">--</a><br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> |<br/>
 <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;{<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1( 2.0,3.0, 5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2( 7.0,3.0,11.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(13.0,3.0,17.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneY p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcY(1.0,2.0)-3.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcY(3.0,5.0)-3.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcY(7.0,9.0)-3.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, Y <a href="CppOperatorAssign.htm">=</a> 1, zooming to smallest three <a href="CppPointer.htm">point</a>s to determine a plane, <a href="CppPointer.htm">point</a> above origin");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &gt; 1.0e-8; <a href="CppComment.htm">//</a>i &gt; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i<a href="CppOperatorDivideAssign.htm">/=</a>10.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,1.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(&nbsp;&nbsp;i,1.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(0.0,1.0,&nbsp;&nbsp;i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneY p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("----------------------------");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>A());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>B());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdSqrt.htm">std::sqrt</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsPlane");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(-3.64472,-0.25,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(-4.52988,-0.25,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(-3.64472,-0.25,10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(-4.52988,-0.25,10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneY p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("----------------------------");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.CalcMaxError(p1)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.CalcError(p1)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.CalcMaxError(p2)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.CalcError(p2)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.CalcMaxError(p3)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.CalcError(p3)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.CalcMaxError(p4)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.CalcError(p4)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.Get<a href="CppFunction.htm">Function</a>A()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.Get<a href="CppFunction.htm">Function</a>B()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.Get<a href="CppFunction.htm">Function</a>C()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.GetCoefficients()[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.GetCoefficients()[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.GetCoefficients()[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStrSafe(p.GetCoefficients()[3]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinats3D v{p1,p2,p3,p4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Geometry().IsPlane(v));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("To<a href="CppFunction.htm">Function</a>, 3 <a href="CppPointer.htm">point</a>s and 4 <a href="CppPointer.htm">point</a>s");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFunction.htm">std::function</a>&lt;<b><a href="CppDouble.htm">double</a></b>(<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>)&gt; f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (2.0 * x) <a href="CppOperatorPlus.htm">+</a> (3.0 * z) <a href="CppOperatorPlus.htm">+</a> 5.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 { 2.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z1 { 3.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 { 5.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z2 { 7.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x3 { 11.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z3 { 13.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x4 { 17.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z4 { 29.0 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(x1,f(x1,z1),z1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(x2,f(x2,z2),z2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(x3,f(x3,z3),z3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneY a(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "y=(2*x) <a href="CppOperatorPlus.htm">+</a> (3*z) <a href="CppOperatorPlus.htm">+</a> 5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!a.To<a href="CppFunction.htm">Function</a>().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(x4,f(x4,z4),z4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p1,p2,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p1,p3,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p1,p4,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p2,p1,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p2,p1,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p2,p3,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p2,p3,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p2,p4,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p2,p4,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p3,p1,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p3,p1,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p3,p2,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p3,p2,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p3,p4,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p3,p4,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p4,p1,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p4,p1,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p4,p2,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p4,p2,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p4,p3,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneY(p4,p3,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("GetProjection, <b><a href="CppFor.htm">for</a></b> plane Y <a href="CppOperatorAssign.htm">=</a> 0.0, <a href="CppPointer.htm">point</a>s not on plane");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;B: (1,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (1,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;C: (1,1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (SQRT(2),0)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A---<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; |\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/\ <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | \<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>+<a href="CppOperatorDecrement.htm">--</a>B-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>B<a href="CppOperatorDecrement.htm">--</a>C---<a href="CppOperatorDecrement.htm">--</a><br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneY().CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> <a href="CppStdSqrt.htm">std::sqrt</a>(2.0)) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planez.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planez.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RIBI_PLANEZ_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_PLANEZ_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppMake_shared.htm">make_shared</a>.hpp&gt;<br/>
<a href="CppIfndef.htm">#ifndef</a> _WIN32<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/polygon.hpp&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppInclude.htm">#include</a> "<a href="CppApfloat.htm">apfloat</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>A 3D plane that can have its Z expressed as a <a href="CppFunction.htm">function</a> of X and Y;<br/>
<a href="CppComment.htm">///</a>A 3D plane that encompasses all X and Y coordinats;<br/>
<a href="CppComment.htm">///</a>Examples are:<br/>
/<a href="CppComment.htm">//</a> Z <a href="CppOperatorAssign.htm">=</a> X <a href="CppOperatorPlus.htm">+</a> Y<br/>
/<a href="CppComment.htm">//</a> Z <a href="CppOperatorAssign.htm">=</a> X<br/>
/<a href="CppComment.htm">//</a> Z <a href="CppOperatorAssign.htm">=</a> Y<br/>
/<a href="CppComment.htm">//</a> Z <a href="CppOperatorAssign.htm">=</a> 0<br/>
<a href="CppComment.htm">///</a>Can be <a href="CppConstructor.htm">construct</a>ed from its equation and at least three 3D <a href="CppPointer.htm">point</a>s<br/>
<a href="CppComment.htm">//</a>A plane stores its coefficients in the following form:<br/>
<a href="CppComment.htm">//</a> A.x <a href="CppOperatorPlus.htm">+</a> B.y <a href="CppOperatorPlus.htm">+</a> C.z <a href="CppOperatorAssign.htm">=</a> D<br/>
<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a>ing <b><a href="CppThis.htm">this</a></b> to z being a <a href="CppFunction.htm">function</a> of x and y:<br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>C.z <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;A&nbsp;&nbsp;.x <a href="CppOperatorPlus.htm">+</a> B&nbsp;&nbsp;.y <a href="CppOperatorMinus.htm">-</a> D<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.x <a href="CppOperatorMinus.htm">-</a> B/C.y <a href="CppOperatorPlus.htm">+</a> D/C<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><br/>
<b><a href="CppStruct.htm">struct</a></b> PlaneZ<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<a href="CppApfloat.htm">apfloat</a>&gt; Coordinat2D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<a href="CppApfloat.htm">apfloat</a>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; Coordinats2D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; Coordinats3D;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppApfloat.htm">apfloat</a> <a href="CppDouble.htm">Double</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppDouble.htm">Double</a>&gt; <a href="CppDouble.htm">Double</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create plane Z <a href="CppOperatorAssign.htm">=</a> 0.0<br/>
&nbsp;&nbsp;PlaneZ() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> from three <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> PlaneZ(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the 2D projection of these 3D <a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assumes these are in a plane<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;A: (0,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0)<br/>
&nbsp;&nbsp;B: (1,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (SQRT(2),0)<br/>
&nbsp;&nbsp;C: (1,1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (SQRT(2),SQRT(2))<br/>
<br/>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;A---<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;C<br/>
&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;|/\ <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorDecrement.htm">--</a>B-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A<a href="CppOperatorDecrement.htm">--</a>B---<a href="CppOperatorDecrement.htm">--</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;Coordinats2D CalcProjection(<b><a href="CppConst.htm">const</a></b> Coordinats3D&amp; <a href="CppPointer.htm">point</a>s) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates the maximum allowed error <b><a href="CppFor.htm">for</a></b> that coordinat <b><a href="CppFor.htm">for</a></b> it to be in the plane<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcMaxError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws when cannot calculate Z, which is when the plane is vertical<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> CalcZ(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; GetCoefficients() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_coefficients; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This plane has equation 'z <a href="CppOperatorAssign.htm">=</a> Ax <a href="CppOperatorPlus.htm">+</a> By <a href="CppOperatorPlus.htm">+</a> C'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> A cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>A() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This plane has equation 'z <a href="CppOperatorAssign.htm">=</a> Ax <a href="CppOperatorPlus.htm">+</a> By <a href="CppOperatorPlus.htm">+</a> C'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> B cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>B() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This plane has equation 'z <a href="CppOperatorAssign.htm">=</a> Ax <a href="CppOperatorPlus.htm">+</a> By <a href="CppOperatorPlus.htm">+</a> C'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> C cannot be calculated<br/>
&nbsp;&nbsp;<a href="CppDouble.htm">Double</a> Get<a href="CppFunction.htm">Function</a>C() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the coordinat is in the plane<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsInPlane(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a testing series of <b><a href="CppDouble.htm">double</a></b>s (to be used as coordinat elements)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/in increasing order of difficulty<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetTestSeries() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> from its coefficients<br/>
&nbsp;&nbsp;PlaneZ(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients);<br/>
<br/>
&nbsp;&nbsp;~PlaneZ() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_coefficients.size <a href="CppOperatorEqual.htm">==</a> 4<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s m_coefficients;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates m_min_error per Get<a href="CppFunction.htm">Function</a>C()<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a> CalcMinErrorPerC() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a>s CalcPlaneZ(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the Plane to <a href="CppFunction.htm">function</a> z(x,y), e.g<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/'z=(2*x) <a href="CppOperatorPlus.htm">+</a> (3*y) <a href="CppOperatorPlus.htm">+</a> 5' (spaces exactly as shown)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Where 2,3 and 5 can be obtained with Get<a href="CppFunction.htm">Function</a>A,Get<a href="CppFunction.htm">Function</a>B and Get<a href="CppFunction.htm">Function</a>C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/respectively<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> To<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneZ*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> PlaneZ*);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneZ&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppStruct.htm">struct</a></b> <a href="CppStd.htm">std</a>::default_delete&lt;<b><a href="CppConst.htm">const</a></b> PlaneZ&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppBoost.htm">boost</a>::detail::sp_ms_deleter&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneZ&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppBoost.htm">boost</a>::detail::sp_ms_deleter&lt;<b><a href="CppConst.htm">const</a></b> PlaneZ&gt;;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> PlaneZ&amp; planez);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_PLANEZ_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planez.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planez.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Plane, 3D plane <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppPlane.htm">CppPlane</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "planez.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneZ::PlaneZ() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: PlaneZ(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,1.0,0.0)<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneZ::PlaneZ(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>s&amp; coefficients<br/>
)<br/>
&nbsp;&nbsp;: m_coefficients(coefficients)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetCoefficients().size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_coefficients[2] <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(m_coefficients)); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("PlaneZ (from coeffients) cannot be expressed in less than 3D space");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(Get<a href="CppFunction.htm">Function</a>A());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(Get<a href="CppFunction.htm">Function</a>B());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Get<a href="CppFunction.htm">Function</a>A() <a href="CppOperatorEqual.htm">==</a> 0.0 <a href="CppOperatorLogicalOr.htm">||</a> Get<a href="CppFunction.htm">Function</a>A() <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Get<a href="CppFunction.htm">Function</a>B() <a href="CppOperatorEqual.htm">==</a> 0.0 <a href="CppOperatorLogicalOr.htm">||</a> Get<a href="CppFunction.htm">Function</a>B() <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Get<a href="CppFunction.htm">Function</a>C() <a href="CppOperatorEqual.htm">==</a> 0.0 <a href="CppOperatorLogicalOr.htm">||</a> Get<a href="CppFunction.htm">Function</a>C() <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneZ::PlaneZ(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
) : PlaneZ(CalcPlaneZ(p1,p2,p3))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetCoefficients().size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_coefficients[2] <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>(<a href="CppContainer.htm">Container</a>().ToStr(m_coefficients)); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Plane (from <a href="CppPointer.htm">point</a>s) that can be expressed in less than 3D space");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneZ::~PlaneZ() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::CalcError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> expected <a href="CppOperatorAssign.htm">=</a> z;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> calculated <a href="CppOperatorAssign.htm">=</a> CalcZ(x,y);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> abs(calculated <a href="CppOperatorMinus.htm">-</a> expected);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneZ::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::CalcMinErrorPerC() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>min_error_per_c will be <a href="CppAbout.htm">about</a> 0.000000001<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStub.htm">stub</a>_value increases <b><a href="CppThis.htm">this</a></b> jut a little, by a 0.000001%<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppStub.htm">stub</a>_value <a href="CppOperatorAssign.htm">=</a> 0.000000001 * 1.00000001;<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> USE_STUB<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> USE_STUB<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStub.htm">stub</a>_value;<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">//</a>USE_STUB<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>PlaneZ calculates its own tolerance <b><a href="CppFor.htm">for</a></b> errors, by measuring it<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppDouble.htm">Double</a> min_error_per_c <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (min_error_per_c &gt; 0.0) <b><a href="CppReturn.htm">return</a></b> min_error_per_c;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> low <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> high <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> low&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0e-16;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> high <a href="CppOperatorAssign.htm">=</a> 1.0e+16;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_x <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_x <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_y <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_y <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_z <a href="CppOperatorAssign.htm">=</a> low;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_z <a href="CppOperatorAssign.htm">=</a> high;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> zero(0.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> z <a href="CppOperatorAssign.htm">=</a> min_z; z &lt; max_z; z<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> min_y; y &lt; max_y; y<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> min_x; x &lt; max_x; x<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;y,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;x,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; p4: { p1,p2,p3 } )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error <a href="CppOperatorAssign.htm">=</a> p.CalcError(p4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> error_per_c <a href="CppOperatorAssign.htm">=</a> error <a href="CppOperatorDivide.htm">/</a> p.Get<a href="CppFunction.htm">Function</a>C();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(error_per_c <a href="CppOperatorGreaterEqual.htm">&gt;=</a> zero);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error_per_c &gt; min_error_per_c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min_error_per_c <a href="CppOperatorAssign.htm">=</a> error_per_c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(<a href="CppApfloat.htm">apfloat</a>(min_error_per_c) <a href="CppOperatorDivide.htm">/</a> p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p4) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> min_error;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(min_error_per_c);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &gt; zero);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &lt; <a href="CppStub.htm">stub</a>_value);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_error_per_c &gt; 0.99 * <a href="CppStub.htm">stub</a>_value);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> min_error_per_c;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> USE_STUB<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::CalcMaxError(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; <a href="CppComment.htm">/*</a>coordinat<a href="CppComment.htm">*/</a>) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcMinErrorPerC() &gt; <a href="CppApfloat.htm">apfloat</a>(0.0));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error <a href="CppOperatorAssign.htm">=</a> abs(CalcMinErrorPerC() * Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_error <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppApfloat.htm">apfloat</a>(0.0));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max_error;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> y <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(coordinat);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(coordinat);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coefficients <a href="CppOperatorAssign.htm">=</a> GetCoefficients();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> coefficients[0];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> coefficients[1];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> coefficients[2];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> e <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::smallest();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> e <a href="CppOperatorAssign.htm">=</a> CalcMinErrorPerC(); <a href="CppComment.htm">//</a><a href="CppStdSqrt.htm">std::sqrt</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e &gt; 0.0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(Geometry().ToStr(coordinat));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(c);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.x <a href="CppOperatorMinus.htm">-</a> B/C.y <a href="CppOperatorPlus.htm">+</a> D/C <a href="CppOperatorAssign.htm">=</a> (-A.x <a href="CppOperatorMinus.htm">-</a> B.y <a href="CppOperatorPlus.htm">+</a> D) <a href="CppOperatorDivide.htm">/</a> C<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If C is zero, the slope in X and Y cannot be calculated<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.sign())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> rc_x <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>a <a href="CppOperatorDivide.htm">/</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> rc_y <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>b <a href="CppOperatorDivide.htm">/</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_x <a href="CppOperatorAssign.htm">=</a> abs(e * rc_x * x) <a href="CppOperatorPlus.htm">+</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_y <a href="CppOperatorAssign.htm">=</a> abs(e * rc_y * y) <a href="CppOperatorPlus.htm">+</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error_z <a href="CppOperatorAssign.htm">=</a> e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_error <a href="CppOperatorAssign.htm">=</a> max_error_x <a href="CppOperatorPlus.htm">+</a> max_error_y <a href="CppOperatorPlus.htm">+</a> max_error_z;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(rc_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(rc_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(max_error_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(max_error_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(max_error);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_error &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max_error;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> e;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppApfloat.htm">apfloat</a>&gt; <a href="CppRibi.htm">ribi</a>::PlaneZ::CalcPlaneZ(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; p3<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Geometry().CalcPlane(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneZ::Coordinats2D <a href="CppRibi.htm">ribi</a>::PlaneZ::CalcProjection(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinats3D&amp; <a href="CppPointer.htm">point</a>s<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> x_origin <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> y_origin <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> z_origin <a href="CppOperatorAssign.htm">=</a> CalcZ(x_origin,y_origin);<br/>
<br/>
&nbsp;&nbsp;Coordinats2D v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; <a href="CppPointer.htm">point</a>: <a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a> x(<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(<a href="CppPointer.htm">point</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a> y(<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(<a href="CppPointer.htm">point</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a> z(<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(<a href="CppPointer.htm">point</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a> dx <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqrt( <a href="CppComment.htm">//</a><a href="CppApfloat.htm">Apfloat</a> does not add the <a href="CppStd.htm">std</a>::<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x <a href="CppOperatorMinus.htm">-</a> x_origin) * (x <a href="CppOperatorMinus.htm">-</a> x_origin))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((z <a href="CppOperatorMinus.htm">-</a> z_origin) * (z <a href="CppOperatorMinus.htm">-</a> z_origin))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) * (x <a href="CppOperatorMinus.htm">-</a> x_origin)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a> dy <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqrt( <a href="CppComment.htm">//</a><a href="CppApfloat.htm">Apfloat</a> does not add the <a href="CppStd.htm">std</a>::<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((y <a href="CppOperatorMinus.htm">-</a> y_origin) * (y <a href="CppOperatorMinus.htm">-</a> y_origin))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((z <a href="CppOperatorMinus.htm">-</a> z_origin) * (z <a href="CppOperatorMinus.htm">-</a> z_origin))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) * (y <a href="CppOperatorMinus.htm">-</a> y_origin)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Coordinat2D <a href="CppPointer.htm">point</a>_xy(dx,dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppPointer.htm">point</a>_xy);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::PlaneZ::<a href="CppDouble.htm">Double</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::CalcZ(<b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppDouble.htm">Double</a>&amp; y) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.x <a href="CppOperatorMinus.htm">-</a> B/C.y <a href="CppOperatorPlus.htm">+</a> D/C <a href="CppOperatorAssign.htm">=</a> (-A.x <a href="CppOperatorMinus.htm">-</a> B.y <a href="CppOperatorPlus.htm">+</a> D) <a href="CppOperatorDivide.htm">/</a> C<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> m_coefficients[0];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> m_coefficients[1];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> m_coefficients[2];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d <a href="CppOperatorAssign.htm">=</a> m_coefficients[3];<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::PlaneZ::CalcZ: cannot calculate Z of a vertical plane");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> term1 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>a*x;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> term2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>b*y;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> numerator <a href="CppOperatorAssign.htm">=</a> term1 <a href="CppOperatorPlus.htm">+</a> term2 <a href="CppOperatorPlus.htm">+</a> d;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(numerator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> result <a href="CppOperatorAssign.htm">=</a> numerator <a href="CppOperatorDivide.htm">/</a> c;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::Get<a href="CppFunction.htm">Function</a>A() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coeff_a <a href="CppOperatorAssign.htm">=</a> m_coefficients[0];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coeff_c <a href="CppOperatorAssign.htm">=</a> m_coefficients[2];<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> zero(0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(coeff_c <a href="CppOperatorNotEqual.htm">!=</a> zero);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(coeff_c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>coeff_a/coeff_c;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::Get<a href="CppFunction.htm">Function</a>B() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coeff_b <a href="CppOperatorAssign.htm">=</a> m_coefficients[1];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coeff_c <a href="CppOperatorAssign.htm">=</a> m_coefficients[2];<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> zero(0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(coeff_c <a href="CppOperatorNotEqual.htm">!=</a> zero);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>coeff_b/coeff_c;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> b;<br/>
}<br/>
<br/>
<a href="CppApfloat.htm">apfloat</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::Get<a href="CppFunction.htm">Function</a>C() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coeff_c <a href="CppOperatorAssign.htm">=</a> m_coefficients[2];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> coeff_d <a href="CppOperatorAssign.htm">=</a> m_coefficients[3];<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> zero(0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(coeff_c <a href="CppOperatorNotEqual.htm">!=</a> zero);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> coeff_d/coeff_c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> c;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::PlaneZ::GetTestSeries() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; 1.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a><a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp; 1.e8,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1.e8,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>-<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> 1.e64,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>-1.e64,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::min(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max()<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.6";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::PlaneZ::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-10: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>, split off from Plane",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-10: <a href="CppVersion.htm">version</a> 1.1: <a href="CppBug.htm">bug</a> fixed, only occurred at <a href="CppDebug.htm">debugging</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-13: <a href="CppVersion.htm">version</a> 1.2: <a href="CppBug.htm">bug</a> fixed",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-04-01: <a href="CppVersion.htm">version</a> 1.3: use of <a href="CppStdUnique_ptr.htm">std::unique_ptr</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-03: <a href="CppVersion.htm">version</a> 1.4: use of <a href="CppApfloat.htm">apfloat</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-09: <a href="CppVersion.htm">version</a> 1.5: use <b><a href="CppDouble.htm">double</a></b> in <a href="CppInterface.htm">interface</a> only"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-10: <a href="CppVersion.htm">version</a> 1.6: use of <a href="CppApfloat.htm">apfloat</a> only"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::PlaneZ::IsInPlane(<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> error <a href="CppOperatorAssign.htm">=</a> CalcError(coordinat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppApfloat.htm">apfloat</a> max_error <a href="CppOperatorAssign.htm">=</a> CalcMaxError(coordinat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error <a href="CppOperatorLessEqual.htm">&lt;=</a> max_error;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::PlaneZ::To<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> PlaneZ&amp; planez)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "z=("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planez.Get<a href="CppFunction.htm">Function</a>A() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "*x) <a href="CppOperatorPlus.htm">+</a> ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planez.Get<a href="CppFunction.htm">Function</a>B() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "*y) <a href="CppOperatorPlus.htm">+</a> "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> planez.Get<a href="CppFunction.htm">Function</a>C()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "<a href="CppRibi.htm">ribi</a>::PlaneZ::To<a href="CppFunction.htm">Function</a>: cannot calculate Z of a vertical plane";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(error.c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPlane/planez_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPlane/planez_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "planez.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::PlaneZ::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> show_warning{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> series <a href="CppOperatorAssign.htm">=</a> GetTestSeries();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("<a href="CppDefaultConstructor.htm">Default construction</a>"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.To<a href="CppFunction.htm">Function</a>().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p.GetCoefficients().empty());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("PlaneZ, Z <a href="CppOperatorAssign.htm">=</a> 5");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1( 2.0, 3.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2( 7.0,11.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(13.0,17.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!p.CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>IsInPlane <b><a href="CppFor.htm">for</a></b> Z=0 plane<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("PlaneZ, preparation <b><a href="CppFor.htm">for</a></b> Plane::CanCalcZ and Plane::IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> 0 plane, from 1.0 coordinat");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,1.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(1.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 0.0, 0.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("PlaneZ, preparation <b><a href="CppFor.htm">for</a></b> Plane::CanCalcZ and Plane::IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> 0 plane, from smallest possible coordinat");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 0.0, 0.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0, 1.0,0.0)));<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("PlaneZ, preparation <b><a href="CppFor.htm">for</a></b> Plane::CanCalcZ and Plane::IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> 0 plane, from biggest possible coordinat");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &gt; 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 0.0, 0.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0,-1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D(-1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( p.IsInPlane(Coordinat3D( 1.0, 1.0,0.0)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("PlaneZ, preparation <b><a href="CppFor.htm">for</a></b> Plane::CanCalcZ and Plane::IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> 0 plane, zooming in");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0.0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot express plane when all its coordinats are at origin");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> j:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0,0.0,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j,&nbsp;&nbsp;j,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j, <a href="CppOperatorMinus.htm">-</a>j,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j,&nbsp;&nbsp;j,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j, <a href="CppOperatorMinus.htm">-</a>j,0.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> 1, zooming to smallest three <a href="CppPointer.htm">point</a>s to determine a plane, <a href="CppPointer.htm">point</a> above origin");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &gt; 1.0e-8; <a href="CppComment.htm">//</a>i &gt; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i<a href="CppOperatorDivideAssign.htm">/=</a>10.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("----------------------------");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>A());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>B());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.GetCoefficients()[3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdSqrt.htm">std::sqrt</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::denorm_min());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> 1, zooming to smallest three <a href="CppPointer.htm">point</a>s to determine a plane, <a href="CppPointer.htm">point</a> above origin");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min <a href="CppOperatorAssign.htm">=</a> 1.0e-8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max <a href="CppOperatorAssign.htm">=</a> 1.0e+8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> z <a href="CppOperatorAssign.htm">=</a> min; z &lt; max; z<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> min; i &lt; max; i<a href="CppOperatorMultiplyAssign.htm">*=</a>10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( (!p.IsInPlane(p1) <a href="CppOperatorLogicalOr.htm">||</a> !p.IsInPlane(p2) <a href="CppOperatorLogicalOr.htm">||</a> !p.IsInPlane(p3)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Warning: coordinats " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " and " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " are determined not to be in a PlaneZ that was created from <a href="CppPointer.htm">point</a>s"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (abs(1.0 <a href="CppOperatorMinus.htm">-</a> (p.CalcMaxError(p1) <a href="CppOperatorDivide.htm">/</a> p.CalcError(p1))) &lt; 0.01)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow another percent of freedom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!show_warning) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p1) <a href="CppOperatorEqual.htm">==</a> p.IsInPlane(p2) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p.IsInPlane(p2) <a href="CppOperatorEqual.htm">==</a> p.IsInPlane(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p1) <a href="CppOperatorDivide.htm">/</a> p.CalcError(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p2) <a href="CppOperatorDivide.htm">/</a> p.CalcError(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(p3) <a href="CppOperatorDivide.htm">/</a> p.CalcError(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>A());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>B());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.Get<a href="CppFunction.htm">Function</a>C());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(p3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("CanCalcZ, Z <a href="CppOperatorAssign.htm">=</a> 1.0 plane, zooming in");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0.0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot express plane when all its coordinats are at origin");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> j:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(Coordinat3D(0.0,0.0,1.0)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(0.0,0.0,1.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(0.0,0.0,1.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(0.0,0.0,1.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j,&nbsp;&nbsp;j,1.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j, <a href="CppOperatorMinus.htm">-</a>j,1.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j,&nbsp;&nbsp;j,1.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j, <a href="CppOperatorMinus.htm">-</a>j,1.0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>#/##########<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; B#/###########<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>#/############<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a>#/#############<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/#/##############<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A-------C-------<a href="CppOperatorDecrement.htm">--</a> Z <a href="CppOperatorAssign.htm">=</a> z<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>O---------------<a href="CppOperatorDecrement.htm">--</a> Z <a href="CppOperatorAssign.htm">=</a> 0<br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) <a href="CppTRACE.htm">TRACE</a>("PlaneZ, preparation <b><a href="CppFor.htm">for</a></b> Plane::CanCalcZ and Plane::IsInPlane, Z <a href="CppOperatorAssign.htm">=</a> z plane, zooming in");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The height of the plane<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The distance from the origin, will be used by the two <a href="CppConstructor.htm">construct</a>ion <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0.0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot express plane when all its coordinats are at origin");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(0.0,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(0.0,&nbsp;&nbsp;i,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(&nbsp;&nbsp;i,0.0,z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The distance (actually, half the Manhattan distance) from the origin,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be used by <a href="CppPointer.htm">point</a>s tested to be in <b><a href="CppThis.htm">this</a></b> plane<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> j:series)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(Coordinat3D(j,j,z)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (show_warning)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Warning: coordinat " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(Coordinat3D(j,j,z))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " is determined not to be in a PlaneZ that was created from <a href="CppPointer.htm">point</a>s "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p2) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " and "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Geometry().ToStr(p3) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "."<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!p.IsInPlane(Coordinat3D(j,j,z)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("AGAIN");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p.CalcMaxError(Coordinat3D(j,j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(p);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j,&nbsp;&nbsp;j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D(&nbsp;&nbsp;j, <a href="CppOperatorMinus.htm">-</a>j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j,&nbsp;&nbsp;j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.IsInPlane(Coordinat3D( <a href="CppOperatorMinus.htm">-</a>j, <a href="CppOperatorMinus.htm">-</a>j,z)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("Check formulas"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_x{ 1.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_y{ 2.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1_z{ 3.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_x{ 4.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_y{ 6.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2_z{ 9.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_x{12.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_y{11.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p3_z{ 9.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PlaneZ p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(p1_x,p1_y,p1_z),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(p2_x,p2_y,p2_z),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(p3_x,p3_y,p3_z)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t(Geometry().<a href="CppToDouble.htm">ToDouble</a>(p.GetCoefficients()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> t[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> t[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> t[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d <a href="CppOperatorAssign.htm">=</a> t[3];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a_expected <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;30.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b_expected <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>48.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c_expected <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;17.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d_expected <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>15.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(a <a href="CppOperatorMinus.htm">-</a> a_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(b <a href="CppOperatorMinus.htm">-</a> b_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(c <a href="CppOperatorMinus.htm">-</a> c_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d <a href="CppOperatorMinus.htm">-</a> d_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d_p1_expected <a href="CppOperatorAssign.htm">=</a> (a * p1_x) <a href="CppOperatorPlus.htm">+</a> (b * p1_y) <a href="CppOperatorPlus.htm">+</a> (c * p1_z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d_p2_expected <a href="CppOperatorAssign.htm">=</a> (a * p2_x) <a href="CppOperatorPlus.htm">+</a> (b * p2_y) <a href="CppOperatorPlus.htm">+</a> (c * p2_z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d_p3_expected <a href="CppOperatorAssign.htm">=</a> (a * p3_x) <a href="CppOperatorPlus.htm">+</a> (b * p3_y) <a href="CppOperatorPlus.htm">+</a> (c * p3_z);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(a * x) <a href="CppOperatorPlus.htm">+</a> (b * y) <a href="CppOperatorPlus.htm">+</a> (c * z) <a href="CppOperatorAssign.htm">=</a> d" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * x) <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * y) <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * z) <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p1_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p1_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p1_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p2_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p2_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p2_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p3_z <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (a * p3_x) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (b * p3_y) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorPlus.htm">+</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (c * p3_z) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Screen output<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(a * x) <a href="CppOperatorPlus.htm">+</a> (b * y) <a href="CppOperatorPlus.htm">+</a> (c * z) <a href="CppOperatorAssign.htm">=</a> d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(30 * x) <a href="CppOperatorPlus.htm">+</a> (-48 * y) <a href="CppOperatorPlus.htm">+</a> (17 * z) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>15<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(30 * 1) <a href="CppOperatorPlus.htm">+</a> (-48 * 2) <a href="CppOperatorPlus.htm">+</a> (17 * 3) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>15<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(30) <a href="CppOperatorPlus.htm">+</a> (-96) <a href="CppOperatorPlus.htm">+</a> (51) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>15<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(30 * 4) <a href="CppOperatorPlus.htm">+</a> (-48 * 6) <a href="CppOperatorPlus.htm">+</a> (17 * 9) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>15<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(120) <a href="CppOperatorPlus.htm">+</a> (-288) <a href="CppOperatorPlus.htm">+</a> (153) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>15<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(30 * 12) <a href="CppOperatorPlus.htm">+</a> (-48 * 11) <a href="CppOperatorPlus.htm">+</a> (17 * 9) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>15<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(360) <a href="CppOperatorPlus.htm">+</a> (-528) <a href="CppOperatorPlus.htm">+</a> (153) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>15<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d <a href="CppOperatorMinus.htm">-</a> d_p1_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d <a href="CppOperatorMinus.htm">-</a> d_p2_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d <a href="CppOperatorMinus.htm">-</a> d_p3_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("CalcPlaneZ"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcPlaneZ <b><a href="CppReturn.htm">return</a></b> the coefficients in the following form:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> A.x <a href="CppOperatorPlus.htm">+</a> B.y <a href="CppOperatorPlus.htm">+</a> C.z <a href="CppOperatorAssign.htm">=</a> D<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a>ing <b><a href="CppThis.htm">this</a></b> to z being a <a href="CppFunction.htm">function</a> of x and y:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>C.z <a href="CppOperatorAssign.htm">=</a> A.x <a href="CppOperatorPlus.htm">+</a> B.y <a href="CppOperatorMinus.htm">-</a> D<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> z <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>A/C.x <a href="CppOperatorMinus.htm">-</a> B/C.y <a href="CppOperatorPlus.htm">+</a> D/C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>In <b><a href="CppThis.htm">this</a></b> test, use the formula:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;z <a href="CppOperatorAssign.htm">=</a> (2.0 * x) <a href="CppOperatorPlus.htm">+</a> (3.0 * y) <a href="CppOperatorPlus.htm">+</a> (5.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Coefficients must then become:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>A/C <a href="CppOperatorAssign.htm">=</a> 2.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>B/C <a href="CppOperatorAssign.htm">=</a> 3.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; D/C <a href="CppOperatorAssign.htm">=</a> 5.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Coefficients are, when setting C to 1.0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>A <a href="CppOperatorAssign.htm">=</a> 2.0 <a href="CppOperatorAssign.htm">=</a>&gt; A <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>B <a href="CppOperatorAssign.htm">=</a> 3.0 <a href="CppOperatorAssign.htm">=</a>&gt; B <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; C <a href="CppOperatorAssign.htm">=</a> 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; D <a href="CppOperatorAssign.htm">=</a> 5.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(1.0,1.0,10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(1.0,2.0,13.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(2.0,1.0,12.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t(Geometry().<a href="CppToDouble.htm">ToDouble</a>(p.GetCoefficients()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> t[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> t[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> t[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d <a href="CppOperatorAssign.htm">=</a> t[3];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a_expected <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b_expected <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c_expected <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d_expected <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;5.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(a <a href="CppOperatorMinus.htm">-</a> a_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(b <a href="CppOperatorMinus.htm">-</a> b_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(c <a href="CppOperatorMinus.htm">-</a> c_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d <a href="CppOperatorMinus.htm">-</a> d_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d_p1_expected <a href="CppOperatorAssign.htm">=</a> (a * 1.0) <a href="CppOperatorPlus.htm">+</a> (b * 1.0) <a href="CppOperatorPlus.htm">+</a> (c * 10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d_p2_expected <a href="CppOperatorAssign.htm">=</a> (a * 1.0) <a href="CppOperatorPlus.htm">+</a> (b * 2.0) <a href="CppOperatorPlus.htm">+</a> (c * 13.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d_p3_expected <a href="CppOperatorAssign.htm">=</a> (a * 2.0) <a href="CppOperatorPlus.htm">+</a> (b * 1.0) <a href="CppOperatorPlus.htm">+</a> (c * 12.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d <a href="CppOperatorMinus.htm">-</a> d_p1_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d <a href="CppOperatorMinus.htm">-</a> d_p2_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d <a href="CppOperatorMinus.htm">-</a> d_p3_expected) &lt; 0.001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("CalcZ, diagonal plane"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(1.0,2.0,3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(2.0,5.0,8.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(3.0,7.0,11.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(p.CalcZ(1.0,2.0)<a href="CppOperatorMinus.htm">-</a> 3.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(p.CalcZ(2.0,5.0)<a href="CppOperatorMinus.htm">-</a> 8.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(p.CalcZ(3.0,7.0)-11.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("CalcZ, horizontal plane Z <a href="CppOperatorAssign.htm">=</a> 5.0"); }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>#<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>##<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorDivide.htm">/</a>###<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/####<br/>
 <a href="CppOperatorDecrement.htm">--</a>-+---<a href="CppOperatorDecrement.htm">--</a><br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> |<br/>
 <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;|<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;{<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1( 2.0, 3.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2( 7.0,11.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(13.0,17.0,5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ p(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcZ(1.0,2.0)-5.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcZ(3.0,5.0)-5.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( abs(p.CalcZ(7.0,9.0)-5.0) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("To<a href="CppFunction.htm">Function</a>, 3 <a href="CppPointer.htm">point</a>s and 4 <a href="CppPointer.htm">point</a>s"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFunction.htm">std::function</a>&lt;<b><a href="CppDouble.htm">double</a></b>(<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>)&gt; f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (2.0 * x) <a href="CppOperatorPlus.htm">+</a> (3.0 * y) <a href="CppOperatorPlus.htm">+</a> 5.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;5.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;7.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x3 <a href="CppOperatorAssign.htm">=</a> 11.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y3 <a href="CppOperatorAssign.htm">=</a> 13.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x4 <a href="CppOperatorAssign.htm">=</a> 17.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y4 <a href="CppOperatorAssign.htm">=</a> 29.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p1(x1,y1,f(x1,y1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p2(x2,y2,f(x2,y2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p3(x3,y3,f(x3,y3));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlaneZ a(p1,p2,p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> "z=(2*x) <a href="CppOperatorPlus.htm">+</a> (3*y) <a href="CppOperatorPlus.htm">+</a> 5");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!a.To<a href="CppFunction.htm">Function</a>().empty());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D p4(x4,y4,f(x4,y4));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p1,p2,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p1,p3,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p1,p4,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p2,p1,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p2,p1,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p2,p3,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p2,p3,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p2,p4,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p2,p4,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p3,p1,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p3,p1,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p3,p2,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p3,p2,p4).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p3,p4,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p3,p4,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p4,p1,p2).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p4,p1,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p4,p2,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p4,p2,p3).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p4,p3,p1).To<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.To<a href="CppFunction.htm">Function</a>() <a href="CppOperatorEqual.htm">==</a> PlaneZ(p4,p3,p2).To<a href="CppFunction.htm">Function</a>());<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("GetProjection, <b><a href="CppFor.htm">for</a></b> Z <a href="CppOperatorAssign.htm">=</a> 0 plane"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;B: (1,0,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (1,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;C: (1,1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (1,1)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A---<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/\ <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorDecrement.htm">--</a>B-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A<a href="CppOperatorDecrement.htm">--</a>B---<a href="CppOperatorDecrement.htm">--</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneZ().CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("CalcProjection, <b><a href="CppFor.htm">for</a></b> Z <a href="CppOperatorAssign.htm">=</a> 2 plane"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0,1+2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A: (0,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;B: (1,0,0+2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B: (1,0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;C: (1,1,0+2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C: (1,1)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;A---<a href="CppOperatorDecrement.htm">--</a>C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|\<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&gt; becomes <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp; | <a href="CppOperatorDivide.htm">/</a>|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|/\ <a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<a href="CppOperatorDivide.htm">/</a> |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorDecrement.htm">--</a>B-<a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A<a href="CppOperatorDecrement.htm">--</a>B---<a href="CppOperatorDecrement.htm">--</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat2D&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PlaneZ(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,0.0+2.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,1.0,0.0+2.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0+2.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).CalcProjection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(0.0,0.0,1.0+2.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,0.0,0.0+2.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(1.0,1.0,0.0+2.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[0]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[1]) <a href="CppOperatorMinus.htm">-</a> 0.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;0&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(get&lt;1&gt;(v[2]) <a href="CppOperatorMinus.htm">-</a> 1.0 ) &lt; 0.001); <a href="CppComment.htm">//</a>no <a href="CppStd.htm">std</a>:: , as <a href="CppApfloat.htm">apfloat</a> puts abs in the global <b><a href="CppNamespace.htm">namespace</a></b><br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
