<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::binary_search</title>
  <meta name="description" content="C++ std::binary_search"/>
  <meta name="keywords" content="C++ STL std::binary_search binary_search binary search code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBinary_search.htm">std::binary_search</a></h1>
<p>&nbsp;</p>
<p><a href="CppBinary_search.htm">std::binary_search</a> is an <a href="CppStl.htm">STL</a> <a href="CppAlgorithm.htm">algorithm</a> to determine if a value is present in a sorted <a href="CppContainer.htm">container</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Project and source code</h2>
<p>&nbsp;</p>
<p>Operating system: <a href="http://www.ubuntu.com">Ubuntu</a> 10.04 LTS Lucid Lynx</p>
<p><a href="CppIde.htm">IDE</a>: <a href="CppQt.htm">Qt Creator</a> 2.0.0</p>
<p><a href="CppQtProjectType.htm">Project type</a>: Qt4 console Application</p>
<p><a href="CppCompiler.htm">Compiler</a>: <a href="CppGpp.htm">G++</a> 4.4.1</p>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
<!--  <li><a href="CppBoost.htm">Boost</a>: version 1.40</li>  -->
<!--  <li><a href="CppQt.htm">Qt</a>: version 4.7.0 (32 bit)</li> -->
  <li><a href="CppStl.htm">STL</a>: from <a href="CppGcc.htm">GCC</a>, shipped with <a href="CppQt.htm">Qt Creator</a> 2.0.0</li>
</ul>
<p>&nbsp;</p>
<ul>
  <li><a href="CppBinary_search.zip">Download the Qt Creator project 'CppBinary_search' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>main.cpp</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Gossip<br/>
{<br/>
&nbsp;&nbsp;Gossip(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> any_i) : i(any_i) {}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Gossip&amp; lhs, <b><a href="CppConst.htm">const</a></b> Gossip&amp; rhs);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Gossip&amp; lhs, <b><a href="CppConst.htm">const</a></b> Gossip&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Gossip&amp; lhs, <b><a href="CppConst.htm">const</a></b> Gossip&amp; rhs)\n";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.i &lt; rhs.i;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;Gossip&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>100; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Gossip(i));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I will be found\n";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBinary_search.htm">std::binary_search</a>(v.begin(),v.end(),Gossip(90))<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I will not be found\n";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBinary_search.htm">std::binary_search</a>(v.begin(),v.end(),Gossip(100))<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
I will be found
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
I will not be found
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
bool operator<(const Gossip& lhs, const Gossip& rhs)
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
