<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>ThresholdFilter</title>
  <meta name="description" content="C++ ThresholdFilter"/>
  <meta name="keywords" content="C++ ThresholdFilter"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppThresholdFilter.htm">ThresholdFilter</a></h1>
<p>&nbsp;</p>
<p><a href="CppVcl.htm">VCL</a> <a href="CppGraphics.htm">graphics</a> <a href="CppCodeSnippets.htm">code snippet</a> to perform a threshold filter
operation on a <a href="CppVcl.htm">VCL</a> <a href="CppTImage.htm">TImage</a>.</p>
<p>&nbsp;</p>
<p>There are two types of <a href="CppThresholdFilter.htm">ThresholdFilter</a>
operations: ThresholdFilterColor and ThresholdFilterNoColor.
ThresholdFilterColor makes a pixel black if its color is below the threshold.
ThresholdFilterNoColor additionally makes a pixel white if it is above or equal
to the thresholdvalue. <a href="CppThresholdFilter.PNG">This example image</a>
show the difference between the two versions.</p>
<p>&nbsp;</p>
<p>The tool <a href="ToolThresholdFilterer.htm">ThresholdFilterer</a> demonstrates
the use of <a href="CppThresholdFilter.htm">ThresholdFilter</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppThresholdFilter.PNG">View an example image</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="s2l0.33.cpp" border = "1"><tr><td><code>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>If a pixel's grey value is below threshold, the pixel is made black<br/>
<a href="CppComment.htm">//</a>Else it keeps it color<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppThresholdFilter.htm<br/>
<b><a href="CppVoid.htm">void</a></b> ThresholdFilterColor(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageOriginal,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> threshold,<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageResult)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageOriginal<a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "imageOriginal must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageOriginal-&gt;Picture <a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Picture of imageOriginal must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageOriginal-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap of imageOriginal must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageOriginal-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> pf24bit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap of imageOriginal must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageResult<a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "imageResult must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageResult-&gt;Picture <a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Picture of imageResult must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageResult-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap of imageResult must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageResult-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> pf24bit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap of imageResult must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(threshold <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> threshold &lt; 256<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Threshold must be in range [0,255]");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> imageOriginal-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> imageOriginal-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;imageResult-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;imageResult-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> height;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> lineOriginal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(imageOriginal-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> lineResult<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(imageResult-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> grey<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (lineOriginal[x*3+2] <a href="CppOperatorPlus.htm">+</a> lineOriginal[x*3+1] <a href="CppOperatorPlus.htm">+</a> lineOriginal[x*3+0]) <a href="CppOperatorDivide.htm">/</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (grey &lt; threshold)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+2] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+1] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+0] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+2] <a href="CppOperatorAssign.htm">=</a> lineOriginal[x*3+2]; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+1] <a href="CppOperatorAssign.htm">=</a> lineOriginal[x*3+1]; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+0] <a href="CppOperatorAssign.htm">=</a> lineOriginal[x*3+0]; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>If a pixel's grey value is below threshold, the pixel is made black<br/>
<a href="CppComment.htm">//</a>Else it is made white<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppThresholdFilter.htm<br/>
<b><a href="CppVoid.htm">void</a></b> ThresholdFilterNoColor(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageOriginal,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> threshold,<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imageResult)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageOriginal<a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "imageOriginal must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageOriginal-&gt;Picture <a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Picture of imageOriginal must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageOriginal-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap of imageOriginal must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageOriginal-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> pf24bit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap of imageOriginal must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageResult<a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "imageResult must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageResult-&gt;Picture <a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Picture of imageResult must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageResult-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a>0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap of imageResult must not be <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imageResult-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> pf24bit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap of imageResult must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(threshold <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> threshold &lt; 256<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Threshold must be in range [0,255]");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> imageOriginal-&gt;Picture-&gt;Bitmap-&gt;Width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> imageOriginal-&gt;Picture-&gt;Bitmap-&gt;Height;<br/>
&nbsp;&nbsp;imageResult-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;imageResult-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> height;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> lineOriginal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(imageOriginal-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> lineResult<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(imageResult-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> grey<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (lineOriginal[x*3+2] <a href="CppOperatorPlus.htm">+</a> lineOriginal[x*3+1] <a href="CppOperatorPlus.htm">+</a> lineOriginal[x*3+0]) <a href="CppOperatorDivide.htm">/</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (grey &lt; threshold)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+2] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+1] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+0] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+2] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+1] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineResult[x*3+0] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
