<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Thinking Wt 2: creating a TicTacToe widget</title>
  <meta name="description" content="C++ Thinking Wt 2: creating a TicTacToe widget"/>
  <meta name="keywords" content="C++ Thinking Wt 2: creating a TicTacToe widget"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <img src="PicWt.png" alt="Wt"/> <a href="CppThinkingWt2.htm">Thinking Wt 2: creating a TicTacToe widget</a></h1>
<p>&nbsp;</p>
<p>This <a href="CppArticle.htm">article</a> shows the way to create a TicTacToe widget when using the
<a href="CppWt.htm">Wt</a> <a href="CppLibrary.htm">library</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppThinkingWt2_1.png">View a screenshot of application developed in step 1 of this article (png)</a></li>
  <li><a href="CppThinkingWt2_2.png">View a screenshot of application developed in step 2 of this article (png)</a></li>
  <li><a href="CppThinkingWt2_3.png">View a screenshot of application developed in step 3 of this article (png)</a></li>
  <li><a href="CppThinkingWt2_1.zip">Download the Qt Creator source code of 'CppThinkingWt2_1' (zip)</a></li>
  <li><a href="CppThinkingWt2_2.zip">Download the Qt Creator source code of 'CppThinkingWt2_2' (zip)</a></li>
  <li><a href="CppThinkingWt2_3.zip">Download the Qt Creator source code of 'CppThinkingWt2_3' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Overview</h2>
<p>&nbsp;</p>
<p>This <a href="CppArticle.htm">article</a> follows the same architecture as 
<a href="CppThinkingWt1.htm">Thinking Wt 1: general</a>. First the bare-bone architecture is implemented, so the programmer
can test the application as early as possible. Next follows the dialog and widget implementation, ending with
a conclusion.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Architecture</h2>
<p>&nbsp;</p>
<p>The architecture, from biggest to smallest, consists of:</p>
<p>&nbsp;</p>
<ul>
  <li>
    <a href="CppMain.htm">main</a> creates a single class called WtApplication
  </li>
  <li>
    WtApplication (a <a href="CppDerivedClass.htm">derived class</a> of <a href="CppWApplication.htm">Wt::WApplication</a>) 
    creates a single dialog, called WtTicTacToeDialog
  </li>
  <li>
    WtTicTacToeDialog (a <a href="CppDerivedClass.htm">derived class</a> of 
    <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a>) consists of multiple widgets, 
    among others the WtTicTacToeWidget
  </li>
  <li>
    WtTicTacToeWidget (a <a href="CppDerivedClass.htm">derived class</a> of <a href="CppWPaintedWidget.htm">Wt::WPaintedWidget</a>) is 
    the widget to display the <a href="CppTicTacToe.htm">TicTacToe</a> board. The logic of the 
    <a href="CppTicTacToe.htm">TicTacToe</a> game is embodied in a <a href="CppTicTacToe.htm">TicTacToe</a>
    class, which is managed by WtTicTacToeWidget
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Step 1: implementing the bare-bone architecture</h2>
<p>&nbsp;</p>
<p>The purpose of first implementing the bare-bone architecture is to get the program running, so it can be tested.
The same architecture as <a href="CppThinkingWt1.htm">Thinking Wt 1</a> is used:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<b><a href="CppQtSignals.htm">signals</a></b>2.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WApplication&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WEnvironment&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintDevice.htm">WPaintDevice</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintedWidget.htm">WPaintedWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPainter.htm">WPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "tictactoe.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget : <b><a href="CppPublic.htm">public</a></b> <a href="CppWPaintedWidget.htm">Wt::WPaintedWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;resize(32,32);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppWPaintDevice.htm">Wt::WPaintDevice</a> *paintDevice)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPainter.htm">Wt::WPainter</a> painter(paintDevice);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawImage(0,0,<a href="CppWPainter.htm">Wt::WPainter</a>::Image("R.png",32,32));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppTicTacToe.htm">TicTacToe</a> m_tictactoe;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Dialog()<br/>
&nbsp;&nbsp;: m_tictactoe(<b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(m_tictactoe);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget * <b><a href="CppConst.htm">const</a></b> m_tictactoe;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a>Application : <b><a href="CppPublic.htm">public</a></b> <a href="CppWApplication.htm">Wt::WApplication</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a>Application(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppWApplication.htm">Wt::WApplication</a>(env),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dialog(<b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Dialog)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setTitle("Thinking <a href="CppWt.htm">Wt</a> 2: creating a <a href="CppTicTacToe.htm">TicTacToe</a> widget");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root()-&gt;addWidget(m_dialog);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Dialog * <b><a href="CppConst.htm">const</a></b> m_dialog;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppWApplication.htm">Wt::WApplication</a> *createApplication(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a>Application(env);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WRun(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>, &amp;createApplication);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The most notable in this setup is that WtTicTacToeWidget is a <a href="CppDerivedClass.htm">derived class</a> 
of <a href="CppWPaintedWidget.htm">Wt::WPaintedWidget</a>. This is because then there is most control in drawing the TicTacToe board.
For now, the widget shows an image called 'R.png'.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Running the Wt application</h2>
<p>&nbsp;</p>
<p>
  Add the following line to your <a href="CppQtProjectFile.htm">Qt project file</a> (to prevent 
  <a href="CppLinkError.htm">link errors</a> like 
  <a href="CppLinkErrorUndefinedReferenceToWtWrun.htm">undefined reference to 'Wt::WRun(int, char**, Wt::WApplication* (*)(Wt::WEnvironment const&))'</a>):
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="How to link the Wt library" border = "1"><tr><td><code>
LIBS += -lwt -lwthttp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>
  Additionally, add the following line to your <a href="CppQtProjectFile.htm">Qt project file</a>, 
  as <a href="CppWt.htm">Wt</a> uses the <a href="CppBoostSignals.htm">Boost.Signals</a>
  <a href="CppLibrary.htm">library</a>, that needs to be <a href="CppLink.htm">linked</a> to as well:
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="How to link the Boost.Signals library" border = "1"><tr><td><code>
LIBS += -lboost_signals<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Add the following arguments to the <a href="CppQtCreatorRunSettings.png">Run Settings</a> (to
prevent the <a href="CppMiscError.htm">misc error</a>
<a href="CppMiscErrorStatNoSuchFileOrDirectoryDocumentRootNotValid.htm">stat: No such file or directory. Document root ("") not valid.</a></p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
--docroot . --http-address 0.0.0.0 --http-port 8080<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Start the program and your favorite webbrowser. Take the webbrowser to the following address:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
http://127.0.0.1:8080/<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Step 2: implementing the WtTicTacToeDialog</h2>
<p>&nbsp;</p>
<p>In this simple example, the WtTicTacToeDialog shows both a WtTicTacToeWidget and a restart button, 
aligned vertically. The restart button also shows the state of the game (that is: player 1 has won, 
player 2 has won, draw, game is still unfinished):</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<b><a href="CppQtSignals.htm">signals</a></b>2.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WApplication&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WEnvironment&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WEvent&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintDevice.htm">WPaintDevice</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintedWidget.htm">WPaintedWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPainter.htm">WPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "tictactoe.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget : <b><a href="CppPublic.htm">public</a></b> <a href="CppWPaintedWidget.htm">Wt::WPaintedWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;resize(32,32);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<b><a href="CppQtSignals.htm">signals</a></b>2::<a href="CppSignal.htm">signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_<a href="CppSignal.htm">signal</a>_state_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetState() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 0; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart() {}<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppWPaintDevice.htm">Wt::WPaintDevice</a> *paintDevice)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPainter.htm">Wt::WPainter</a> painter(paintDevice);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawImage(0,0,<a href="CppWPainter.htm">Wt::WPainter</a>::Image("R.png",32,32));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppTicTacToe.htm">TicTacToe</a> m_tictactoe;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Dialog()<br/>
&nbsp;&nbsp;: m_button(<b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tictactoe(<b><a href="CppNew.htm">new</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(m_tictactoe);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>(<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(m_button);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_button-&gt;setText("Restart");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tictactoe-&gt;m_<a href="CppSignal.htm">signal</a>_state_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Dialog::OnStateChanged,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_button-&gt;clicked().connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Dialog::OnRestart);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppWPushButton.htm">Wt::WPushButton</a> * <b><a href="CppConst.htm">const</a></b> m_button;<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget * <b><a href="CppConst.htm">const</a></b> m_tictactoe;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnRestart()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tictactoe-&gt;Restart();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnStateChanged()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_tictactoe-&gt;GetState())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>::player1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_button-&gt;setText("Player 1 has won. Click to restart");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>::player2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_button-&gt;setText("Player 2 has won. Click to restart");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>::draw:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_button-&gt;setText("Draw. Click to restart");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppTicTacToe.htm">TicTacToe</a>::no_winner:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_button-&gt;setText("Restart");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note that the widget has only dummy <a href="CppMemberFunction.htm">member functions</a> yet, but that the dialog is fully 
functional. Because I prefer using the same signal/slot system in all my programs, I use the 
<a href="CppBoostSignal.htm">Boost signals</a> instead of the Wt signals. To get the widgets align vertically,
I put a <a href="CppWBreak.htm">Wt::WBreak</a> between the two relevant widgets. The unnamed 
<a href="CppWBreak.htm">Wt::WBreak</a> will be <a href="CppDelete.htm">deleted</a> by the dialog.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Step 3: implementing the WtTicTacToeWidget</h2>
<p>&nbsp;</p>
<p>The widget handles the interface between the TicTacToe class and the user's mouse clicks.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<b><a href="CppQtSignals.htm">signals</a></b>2.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WApplication&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WBrush&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WEnvironment&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WEvent&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintDevice.htm">WPaintDevice</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPaintedWidget.htm">WPaintedWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPainter.htm">WPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/WPen&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "tictactoe.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget : <b><a href="CppPublic.htm">public</a></b> <a href="CppWPaintedWidget.htm">Wt::WPaintedWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Without resize, there is nothing to paint on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;resize(GetWidth(),GetHeight());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppWt.htm">Wt</a><a href="CppTicTacToe.htm">TicTacToe</a>Widget::OnClicked);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<b><a href="CppQtSignals.htm">signals</a></b>2::<a href="CppSignal.htm">signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_<a href="CppSignal.htm">signal</a>_has_winner;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<b><a href="CppQtSignals.htm">signals</a></b>2::<a href="CppSignal.htm">signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_<a href="CppSignal.htm">signal</a>_state_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetState() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_tictactoe.GetWinner();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Restart()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tictactoe <a href="CppOperatorAssign.htm">=</a> <a href="CppTicTacToe.htm">TicTacToe</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppWPaintDevice.htm">Wt::WPaintDevice</a> *paintDevice)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPainter.htm">Wt::WPainter</a> painter(paintDevice);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetWidth();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> GetHeight();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set black pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWt.htm">Wt</a>::WPen pen <a href="CppOperatorAssign.htm">=</a> painter.pen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setCapStyle(<a href="CppWt.htm">Wt</a>::RoundCap);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setColor(<a href="CppWt.htm">Wt</a>::WColor(255,255,255));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.setPen(pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.setBrush(<a href="CppWt.htm">Wt</a>::WBrush(<a href="CppWt.htm">Wt</a>::WColor(255,255,255)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawRect(0.0,0.0,GetWidth(),GetHeight());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set thick white pen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setColor(<a href="CppWt.htm">Wt</a>::WColor(0,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> line_width <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(width,height) <a href="CppOperatorDivide.htm">/</a> 15;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setWidth(line_width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.setPen(pen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vertical lines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((1*width)/3)+4,&nbsp;&nbsp;&nbsp;&nbsp; 0+(line_width/2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((1*width)/3)-4,height-(line_width/2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((2*width)/3)-4,&nbsp;&nbsp;&nbsp;&nbsp; 0+(line_width/2),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((2*width)/3)+8,height-(line_width/2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Horizontal lines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0+(line_width/2),((1*height)/3)+4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width-(line_width/2),((1*height)/3)-4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0+(line_width/2),((2*height)/3)-4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width-(line_width/2),((2*height)/3)+8);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorPlus.htm">+</a>+row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> ((row <a href="CppOperatorPlus.htm">+</a> 0) * (width <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (line_width/1) <a href="CppOperatorPlus.htm">+</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> ((row <a href="CppOperatorPlus.htm">+</a> 1) * (width <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (line_width/1) <a href="CppOperatorMinus.htm">-</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorPlus.htm">+</a>+col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> ((col <a href="CppOperatorPlus.htm">+</a> 0) * (height <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorPlus.htm">+</a> (line_width/1) <a href="CppOperatorPlus.htm">+</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2 <a href="CppOperatorAssign.htm">=</a> ((col <a href="CppOperatorPlus.htm">+</a> 1) * (height <a href="CppOperatorDivide.htm">/</a> 3)) <a href="CppOperatorMinus.htm">-</a> (line_width/1) <a href="CppOperatorMinus.htm">-</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state <a href="CppOperatorAssign.htm">=</a> m_tictactoe.GetSquare(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (state <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppTicTacToe.htm">TicTacToe</a>::player1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>player1 <a href="CppOperatorAssign.htm">=</a> cross<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawLine(x1,y1,x2,y2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawLine(x1,y2,x2,y1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (state <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppTicTacToe.htm">TicTacToe</a>::player2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>player1 <a href="CppOperatorAssign.htm">=</a> circle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawEllipse(x1,y1,x2-x1,y2-y1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppTicTacToe.htm">TicTacToe</a> m_tictactoe;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 300.0; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> 300.0; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnClicked(<b><a href="CppConst.htm">const</a></b> <a href="CppWMouseEvent.htm">Wt::WMouseEvent</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_tictactoe.GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppTicTacToe.htm">TicTacToe</a>::no_winner) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 3 * e.widget().x <a href="CppOperatorDivide.htm">/</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetWidth();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; 0 <a href="CppOperatorLogicalOr.htm">||</a> x &gt; 2) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 3 * e.widget().y <a href="CppOperatorDivide.htm">/</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetHeight();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &lt; 0 <a href="CppOperatorLogicalOr.htm">||</a> y &gt; 2) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_tictactoe.CanDoMove(x,y))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_tictactoe.DoMove(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppEmit.htm">emit</a></b> that the state has changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_<a href="CppSignal.htm">signal</a>_state_changed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_tictactoe.GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppTicTacToe.htm">TicTacToe</a>::no_winner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppEmit.htm">emit</a></b> that there is a winner<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_<a href="CppSignal.htm">signal</a>_has_winner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;}<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>&nbsp;</p>
<p>This <a href="CppArticle.htm">article</a> described the gradual development of a custom dialog and widget.
Using the architecture described in <a href="CppThinkingWt1.htm">Thinking Wt 1: general</a>, it is possible
to have multiple steps-in-between to check if the program still works.</p>
<p>&nbsp;</p>
<p>The <a href="Tools.htm">tool</a> <a href="ToolTestTicTacToe.htm">TestTicTacToe</a> contains the polished 
and slightly extended version of the code in this <a href="CppArticle.htm">article</a>.</p>
<p>&nbsp;</p>
<p>My next article, <a href="CppThinkingWt3.htm">Thinking Wt 3: TicTacToe game</a> describes how I implement the
WtTicTacToeWidget in a full game.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppThinkingWt2_1.png">View a screenshot of application developed in step 1 of this article (png)</a></li>
  <li><a href="CppThinkingWt2_2.png">View a screenshot of application developed in step 2 of this article (png)</a></li>
  <li><a href="CppThinkingWt2_3.png">View a screenshot of application developed in step 3 of this article (png)</a></li>
  <li><a href="CppThinkingWt2_1.zip">Download the Qt Creator source code of 'CppThinkingWt2_1' (zip)</a></li>
  <li><a href="CppThinkingWt2_2.zip">Download the Qt Creator source code of 'CppThinkingWt2_2' (zip)</a></li>
  <li><a href="CppThinkingWt2_3.zip">Download the Qt Creator source code of 'CppThinkingWt2_3' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.webtoolkit.eu/wt">Wt homepage</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://www.webtoolkit.eu/wt">Wt homepage</a></li>
  <li><a href="http://www.codeguru.com/cpp/i-n/internet/browsercontrol/article.php/c15275__2/Wt-C-Web-Toolkit-Library-Lets-You-Write-Scripting-Independent-Web-Apps.htm">Victor Volkman. Wt: C++ Web Toolkit Library Lets You Write Scripting-Independent Web Apps. www.codeguru.com</a></li>
  <li><a href="http://www.webtoolkit.eu/wt#/src/hello">Wt homepage, source code of the 'Hello world' example</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Acknowledgements</h2>
<p>&nbsp;</p>
<p>
  Thanks Tor Arne Fallingen for notifying me that I omitted linking to Boost.Signals.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
