<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>CopyFile</title>
  <meta name="description" content="C++ CopyFile"/>
  <meta name="keywords" content="C++ CopyFile "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCopyFile.htm">CopyFile</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.680 at Sun Jul  6 18:34:46 2014
 -->
<p><a href="CppCopyFile.htm">CopyFile</a> is a <a href="CppFileIo.htm">file I/O</a> <a href="CppCodeSnippets.htm">code snippet</a> to copy a file.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppCopyFile.zip">Download the Qt Creator project 'CppCopyFile' (zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppCopyFile/CppCopyFile.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCopyFile/CppCopyFile.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri) #Or use the code below<br/>
# QT += core<br/>
# QT += gui<br/>
# greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
# <a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
#&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
# }<br/>
# <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
# unix {<br/>
#&nbsp;&nbsp; <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
# }<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri) #Or use the code below<br/>
# win32 {<br/>
#&nbsp;&nbsp; <a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
# }<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppCopyFile/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppCopyFile/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> BOOST_H<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> VCL_H<br/>
<a href="CppInclude.htm">#include</a> &lt;SysUtils.hpp&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a>Determines <b><a href="CppIf.htm">if</a></b> a filename is a regular file<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppIsRegularFile.htm">IsRegularFile</a>.htm<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppIsRegularFile.htm">IsRegularFile</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdFstream.htm">std::fstream</a> f;<br/>
&nbsp;&nbsp;f.open(filename.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> f.is_open();<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCopyFile.htm">CopyFile</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCopyFile.htm">CopyFile</a>Stl(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileNameFrom, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileNameTo)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameFrom));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameTo))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Cannot copy over an existing file");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in (fileNameFrom.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> out(fileNameTo.c_str());<br/>
&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> in.rdbuf();<br/>
&nbsp;&nbsp;out.close();<br/>
&nbsp;&nbsp;in.close();<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> BOOST_H<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCopyFile.htm">CopyFile</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCopyFile.htm">CopyFile</a><a href="CppBoost.htm">Boost</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; from, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; to)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(fileNameFrom));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoost.htm">Boost</a> will check <b><a href="CppIf.htm">if</a></b> the copy is made over an existing file<br/>
&nbsp;&nbsp;<a href="CppBoostCopy_file.htm">boost::filesystem::copy_file</a>(from,to);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> VCL_H<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCopyFile.htm">CopyFile</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCopyFile.htm">CopyFile</a>Vcl(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; from, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; to, <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> failIfExists)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use VCL its <a href="CppCopyFile.htm">CopyFile</a><br/>
&nbsp;&nbsp;<a href="CppCopyFile.htm">CopyFile</a>("FileFrom.txt","FileTo.txt",failIfExists);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tmp_filename <a href="CppOperatorAssign.htm">=</a> "temp.txt";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete file (in <b><a href="CppCase.htm">case</a></b> it exists)<br/>
&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(tmp_filename.c_str());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy file<br/>
&nbsp;&nbsp;<a href="CppCopyFile.htm">CopyFile</a>Stl(<a href="CppArgc.htm">argv</a>[0],tmp_filename);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsRegularFile.htm">IsRegularFile</a>(tmp_filename));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clean up temp file by deleting it<br/>
&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(tmp_filename.c_str());<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
