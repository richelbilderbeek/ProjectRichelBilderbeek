<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>boost::property_tree example 1: read and write</title>
  <meta name="description" content="C++ boost::property_tree example 1: read and write"/>
  <meta name="keywords" content="C++ boost::property_tree boost property_tree property tree example 1: read and write code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppProperty_treeExample1.htm">boost::property_tree example 1: read and write</a></h1>
<p>&nbsp;</p>
<p><a href="CppProperty_tree.htm">boost::property_tree</a> example 1: read and write.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppProperty_treeExample1.zip">Download the Qt Creator project 'CppProperty_treeExample1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 11.04 (natty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.5.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.42</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.5.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppProperty_treeExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by <a href="CppQtCreator.htm">QtCreator</a> 2011-08-13T07:58:58<br/>
#<br/>
#-------------------------------------------------<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
TARGET = CppProperty_treeExample1<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> ----------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> Copyright (C) 2002-2006 Marcin Kalicinski<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Distributed under the <a href="CppBoost.htm">Boost</a> Software License, <a href="CppVersion.htm">Version</a> 1.0.<br/>
<a href="CppComment.htm">//</a> (See accomp<a href="CppAny.htm">any</a>ing file LICENSE_1_0.txt or copy at<br/>
<a href="CppComment.htm">//</a> http://www.<a href="CppBoost.htm">boost</a>.org/LICENSE_1_0.txt)<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> For more information, see www.<a href="CppBoost.htm">boost</a>.org<br/>
<a href="CppComment.htm">//</a> ----------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppProperty_tree.htm">boost/property_tree</a>/ptree.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppProperty_tree.htm">boost/property_tree</a>/xml_parser.hpp&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBOOST_FOREACH.htm">foreach</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppExceptionH.htm">exception</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppDebug.htm">debug</a>_settings<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a> m_file;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> log filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_level;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppDebug.htm">debug</a> level<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSet.htm">std::set</a>&lt;<a href="CppString.htm">std::string</a>&gt; m_modules;&nbsp;&nbsp;<a href="CppComment.htm">//</a> modules where logging is enabled<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> load(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> &amp;filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> save(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> &amp;filename);<br/>
};<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDebug.htm">debug</a>_settings::load(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> &amp;filename)<br/>
{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Create empty property tree object<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppProperty_tree.htm">boost::property_tree</a>::ptree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ptree pt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Load <a href="CppXml.htm">XML</a> file and put its contents in property tree.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> No <b><a href="CppNamespace.htm">namespace</a></b> qualification is needed, because of Koenig<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> lookup on the second argument. If reading fails, exception<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> is <b><a href="CppThrow.htm">throw</a></b>n.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;read_xml(filename, pt);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Get filename and store it in m_file variable. Note that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> we specify a path to the value <b><a href="CppUsing.htm">using</a></b> notation where keys<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> are separated with dots (different separator may be used<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <b><a href="CppIf.htm">if</a></b> keys themselves contain dots). If <a href="CppDebug.htm">debug</a>.filename key is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> not found, exception is <b><a href="CppThrow.htm">throw</a></b>n.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file <a href="CppOperatorAssign.htm">=</a> pt.get&lt;<a href="CppString.htm">std::string</a>&gt;("<a href="CppDebug.htm">debug</a>.filename");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Get <a href="CppDebug.htm">debug</a> level and store it in m_level variable. This is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> another <a href="CppVersion.htm">version</a> of get method: <b><a href="CppIf.htm">if</a></b> <a href="CppDebug.htm">debug</a>.level key is not<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> found, it will <b><a href="CppReturn.htm">return</a></b> <b><a href="CppDefault.htm">default</a></b> value (specified by second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> parameter) instead of <b><a href="CppThrow.htm">throw</a></b>ing. Type of the value extracted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> is determined by type of second parameter, so we can simply<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> write get(...) instead of get&lt;<b><a href="CppInt.htm">int</a></b>&gt;(...).<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_level <a href="CppOperatorAssign.htm">=</a> pt.get("<a href="CppDebug.htm">debug</a>.level", 0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppIterator.htm">Iterate</a> over <a href="CppDebug.htm">debug</a>.modules section and store all found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> modules in m_modules set. get_child() <a href="CppFunction.htm">function</a> <a href="CppReturn.htm">returns</a> a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> reference to child at specified path; <b><a href="CppIf.htm">if</a></b> there is no such<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> child, it <b><a href="CppThrow.htm">throw</a></b>s. Property tree <a href="CppIterator.htm">iterator</a> can be used in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> the same way as standard <a href="CppContainer.htm">container</a> <a href="CppIterator.htm">iterator</a>. Category<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> is bidirectional_<a href="CppIterator.htm">iterator</a>.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(ptree::value_type &amp;v, pt.get_child("<a href="CppDebug.htm">debug</a>.modules"))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;m_modules.insert(v.second.data());<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppDebug.htm">debug</a>_settings::save(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> &amp;filename)<br/>
{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Create empty property tree object<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppProperty_tree.htm">boost::property_tree</a>::ptree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ptree pt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Put log filename in property tree<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pt.put("<a href="CppDebug.htm">debug</a>.filename", m_file);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Put <a href="CppDebug.htm">debug</a> level in property tree<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pt.put("<a href="CppDebug.htm">debug</a>.level", m_level);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppIterator.htm">Iterate</a> over modules in set and put them in property<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> tree. Note that put <a href="CppFunction.htm">function</a> places <b><a href="CppNew.htm">new</a></b> key at the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> end of list of keys. This is fine in most of the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> situations. If you want to place item at some other<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> place (i.e. at front or somewhere in the middle),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <b><a href="CppThis.htm">this</a></b> can be achieved <b><a href="CppUsing.htm">using</a></b> combination of insert<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> and put_value <a href="CppFunction.htm">function</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> &amp;name, m_modules)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;pt.put("<a href="CppDebug.htm">debug</a>.modules.module", name, <b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Write property tree to <a href="CppXml.htm">XML</a> file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;write_xml(filename, pt);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>_settings ds;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds.load("<a href="CppDebug.htm">debug</a>_settings.xml");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds.save("<a href="CppDebug.htm">debug</a>_settings_out.xml");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Success\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">std::exception</a> &amp;e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Error: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

