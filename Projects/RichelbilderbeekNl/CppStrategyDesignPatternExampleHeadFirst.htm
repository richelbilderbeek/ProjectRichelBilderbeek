<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Design Pattern: Strategy</title>
  <meta name="description" content="C++ Strategy Design Pattern"/>
  <meta name="keywords" content="C++ Strategy Design Pattern Head First Freeman Qt Creator code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStrategyDesignPatternExampleHeadFirst.htm">Example from 'Head First Design Patterns'</a></h1>
<p>&nbsp;</p>
<p><a href="CppStrategyDesignPatternExampleHeadFirst.htm">Example from 'Head First Design Patterns'</a> [1] is an example of a
<a href="CppDesignPatternStrategy.htm">Strategy</a> <a href="CppDesignPattern.htm">Design Pattern</a>
(converted from Java to C++).</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppStrategyDesignPatternExampleHeadFirst.zip">Download the Qt Creator project 'CppStrategyDesignPatternExampleHeadFirst' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>Both the FlyBehavior and QuackBehavior are <a href="CppDesignPatternStrategy.htm">Strategies</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
  <li><img src="PicRaspbian.png" alt="Raspbian"/> <a href="CppRaspbian.htm">Raspbian</a></li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppStrategyDesignPatternExampleHeadFirst.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppStrategyDesignPatternExampleHeadFirst.pro" border = "1"><tr><td><code>
TEMPLATE = app<br/>
CONFIG += console<br/>
CONFIG -= qt<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;duck.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;flybehavior.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;quackbehavior.cpp<br/>
HEADERS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;duck.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;flybehavior.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;quackbehavior.h<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>duck.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="duck.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> DUCK_H<br/>
<a href="CppDefine.htm">#define</a> DUCK_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> QuackBehavior;<br/>
<b><a href="CppStruct.htm">struct</a></b> FlyBehavior;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Duck<br/>
{<br/>
&nbsp;&nbsp;Duck();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Display() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PerformFly() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PerformQuack() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Swim() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFlyBehavior(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FlyBehavior&gt; fb);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetQuackBehavior(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> QuackBehavior&gt; qb);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Duck() {} <a href="CppComment.htm">//</a>All ABC's must have a <b><a href="CppVirtual.htm">virtual</a></b> <a href="CppDestructor.htm">destructor</a><br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FlyBehavior&gt; m_fly_behavior;<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> QuackBehavior&gt; m_quack_behavior;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MallardDuck : <b><a href="CppPublic.htm">public</a></b> Duck<br/>
{<br/>
&nbsp;&nbsp;MallardDuck();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Display() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> RubberDuck : <b><a href="CppPublic.htm">public</a></b> Duck<br/>
{<br/>
&nbsp;&nbsp;RubberDuck();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Display() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ModelDuck : <b><a href="CppPublic.htm">public</a></b> Duck<br/>
{<br/>
&nbsp;&nbsp;ModelDuck();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Display() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> DUCK_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>duck.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="duck.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "duck.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "flybehavior.h"<br/>
<a href="CppInclude.htm">#include</a> "quackbehavior.h"<br/>
<br/>
Duck::Duck()<br/>
&nbsp;&nbsp;: m_fly_behavior(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;FlyBehavior&gt;()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_quack_behavior(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;QuackBehavior&gt;())<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Duck::PerformFly() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_fly_behavior);<br/>
&nbsp;&nbsp;m_fly_behavior-&gt;Fly();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Duck::PerformQuack() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_quack_behavior);<br/>
&nbsp;&nbsp;m_quack_behavior-&gt;Quack();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Duck::Swim() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "All ducks <b><a href="CppFloat.htm">float</a></b>, even decoys!\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Duck::SetFlyBehavior(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FlyBehavior&gt; fb)<br/>
{<br/>
&nbsp;&nbsp;m_fly_behavior <a href="CppOperatorAssign.htm">=</a> fb;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Duck::SetQuackBehavior(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> QuackBehavior&gt; qb)<br/>
{<br/>
&nbsp;&nbsp;m_quack_behavior <a href="CppOperatorAssign.htm">=</a> qb;<br/>
}<br/>
<br/>
MallardDuck::MallardDuck()<br/>
{<br/>
&nbsp;&nbsp;m_fly_behavior.reset(<b><a href="CppNew.htm">new</a></b> FlyWithWings);<br/>
&nbsp;&nbsp;m_quack_behavior.reset(<b><a href="CppNew.htm">new</a></b> NormalQuack);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MallardDuck::Display() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I'm a real mallard duck\n";<br/>
}<br/>
<br/>
RubberDuck::RubberDuck()<br/>
{<br/>
&nbsp;&nbsp;m_fly_behavior.reset(<b><a href="CppNew.htm">new</a></b> FlyNoWay);<br/>
&nbsp;&nbsp;m_quack_behavior.reset(<b><a href="CppNew.htm">new</a></b> Squeak);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> RubberDuck::Display() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I'm a rubber duck\n";<br/>
}<br/>
<br/>
ModelDuck::ModelDuck()<br/>
{<br/>
&nbsp;&nbsp;m_fly_behavior.reset(<b><a href="CppNew.htm">new</a></b> FlyNoWay);<br/>
&nbsp;&nbsp;m_quack_behavior.reset(<b><a href="CppNew.htm">new</a></b> MuteQuack);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> ModelDuck::Display() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I'm a model duck\n";<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>flybehavior.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="flybehavior.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> FLYBEHAVIOR_H<br/>
<a href="CppDefine.htm">#define</a> FLYBEHAVIOR_H<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FlyBehavior<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Fly() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~FlyBehavior() {} <a href="CppComment.htm">//</a>All ABC's must have a <b><a href="CppVirtual.htm">virtual</a></b> <a href="CppDestructor.htm">destructor</a><br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FlyWithWings : <b><a href="CppPublic.htm">public</a></b> FlyBehavior<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Fly() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FlyNoWay : <b><a href="CppPublic.htm">public</a></b> FlyBehavior<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Fly() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FlyRocketPowered : <b><a href="CppPublic.htm">public</a></b> FlyBehavior<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Fly() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FLYBEHAVIOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>flybehavior.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="flybehavior.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "flybehavior.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> FlyWithWings::Fly() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I'm flying!!\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> FlyNoWay::Fly() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I can't fly\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> FlyRocketPowered::Fly() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I'm flying with a rocket!\n";<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "duck.h"<br/>
<a href="CppInclude.htm">#include</a> "flybehavior.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Duck&gt; mallard(<b><a href="CppNew.htm">new</a></b> MallardDuck);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mallard-&gt;Display();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mallard-&gt;PerformQuack();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mallard-&gt;PerformFly();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Duck&gt; rubberDuck(<b><a href="CppNew.htm">new</a></b> RubberDuck);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rubberDuck-&gt;Display();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rubberDuck-&gt;PerformQuack();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rubberDuck-&gt;PerformFly();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Duck&gt; modelDuck(<b><a href="CppNew.htm">new</a></b> ModelDuck);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;modelDuck-&gt;Display();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;modelDuck-&gt;PerformQuack();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;modelDuck-&gt;PerformFly();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Let the modelduck fly rocket powered!\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;FlyBehavior&gt; rocketPowered(<b><a href="CppNew.htm">new</a></b> FlyRocketPowered);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;modelDuck-&gt;SetFlyBehavior(rocketPowered);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;modelDuck-&gt;PerformFly();<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>quackbehavior.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="quackbehavior.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QUACKBEHAVIOR_H<br/>
<a href="CppDefine.htm">#define</a> QUACKBEHAVIOR_H<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> QuackBehavior<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Quack() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~QuackBehavior() {} <a href="CppComment.htm">//</a>All ABC's must have a <b><a href="CppVirtual.htm">virtual</a></b> <a href="CppDestructor.htm">destructor</a><br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> NormalQuack : <b><a href="CppPublic.htm">public</a></b> QuackBehavior<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Quack() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MuteQuack : <b><a href="CppPublic.htm">public</a></b> QuackBehavior<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Quack() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Squeak : <b><a href="CppPublic.htm">public</a></b> QuackBehavior<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Quack() <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QUACKBEHAVIOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>quackbehavior.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="quackbehavior.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "quackbehavior.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "quackbehavior.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> NormalQuack::Quack() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Quack\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MuteQuack::Quack() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> silence <a href="CppOperatorStreamIn.htm">&gt;&gt;</a>\n";<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Squeak::Quack() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Squeak\n";<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppEricFreeman.htm">Eric Freeman</a>, <a href="CppElisabethFreeman.htm">Elisabeth Freeman</a>. Head First Design Patterns. 2004. ISBN: 978-0-596-00712-6.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
