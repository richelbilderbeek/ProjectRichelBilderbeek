<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Smart pointer</title>
  <meta name="description" content="C++ Smart pointer"/>
  <meta name="keywords" content="C++ C++0x Smart pointer code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSmartPointer.htm">Smart pointer</a></h1>
<p>&nbsp;</p>
<p>
  A <a href="CppSmartPointer.htm">smart pointer</a> is a <a href="CppContainer.htm">container</a> that 
  manages a <a href="CppPointer.htm">pointer</a>. 
</p>
<p>&nbsp;</p>
<p><a href="CppSmart_ptr.htm">Boost.Smart_ptr</a> is the <a href="CppBoost.htm">Boost</a> <a href="CppSmartPointer.htm">smart pointer</a> <a href="CppLibrary.htm">library</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>List of <a href="CppSmartPointer.htm">smart pointers</a> (incomplete)</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicBoost.png" alt="Boost"/> <a href="CppScoped_ptr.htm">boost::scoped_ptr</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicBoost.png" alt="Boost"/> <a href="CppShared_ptr.htm">boost::shared_ptr</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicBoost.png" alt="Boost"/> <a href="CppWeak_ptr.htm">boost::weak_ptr</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicQt.png" alt="Qt"/> <a href="CppQPointer.htm">QPointer</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicStl.png" alt="STL"/> <a href="CppAuto_ptr.htm">std::auto_ptr</a></li>
  <li><img src="PicCpp11.png" alt="C++11"/><img src="PicStl.png" alt="STL"/> <a href="CppShared_ptr.htm">std::shared_ptr</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicStl.png" alt="STL"/> <a href="CppShared_ptr.htm">std::tr1::shared_ptr</a></li>
  <li><img src="PicCpp11.png" alt="C++11"/><img src="PicStl.png" alt="STL"/> <a href="CppUnique_ptr.htm">std::unique_ptr</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppExample.htm">Examples</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppSmartPointerExample1.htm">Smart pointers example 1: do the classes check for uninitialized pointers?</a></li>
  <li><a href="CppSmartPointerExample2.htm">Smart pointers example 2: reset smart pointers to nullptr</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Prefer to use <a href="CppSmartPointer.htm">smart pointers</a> over "naked" new and delete [1-6]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 13: 'Use objects to manage resources'.</li>
  <li><!--  2 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 17: 'Store <a href="CppNew.htm">new</a>ed objects in <a href="CppSmartPointer.htm">smart pointer</a>s in standalone statements'</li>
  <li><!--  3 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Chapter 13: 'Ensure resources are owned by objects. Use explicit RAII and smart pointers.</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Page 19, 1.3.2 'Advice', item 3: 'Avoid 'naked' new and delete'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[4] Avoid "naked new" and "naked delete"'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 21.4. Advice. page 640: '[1] Use unique_ptr or shared_ptr to avoid forgetting to delete objects created using new'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
