<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #5: The many types of const</title>
  <meta name="description" content="C++ Answer of exercise #5: The many types of const"/>
  <meta name="keywords" content="C++ Answer of exercise #5: The many types of const"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseTheManyTypesOfConstAnswer.htm">Answer of exercise #5: The many types of const</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseTheManyTypesOfConst.htm">exercise #5: The many types of const</a>.</p>
<p>&nbsp;</p>
<p>The five types of <a href="CppConst.htm">const</a> are:</p>
<ol>
  <li><a href="CppConstVariable.htm">const variable</a></li>
  <li><a href="CppConstArgument.htm">const argument</a></li>
  <li><a href="CppConstReturnType.htm">const return type</a></li>
  <li><a href="CppConstMemberFunction.htm">const member function</a></li>
  <li><a href="CppConstMember.htm">const member</a></li>
</ol>
<p>&nbsp;</p>
<p>The five types of <a href="CppConst.htm">const</a> prevent the following from modification:</p>
<p>&nbsp;</p>
<ol>
  <li><a href="CppConstVariable.htm">const variable</a>: the <a href="CppVariable.htm">variable</a></li>
  <li><a href="CppConstArgument.htm">const argument</a>: the <a href="CppArgument.htm">argument</a></li>
  <li><a href="CppConstReturnType.htm">const return type</a>: this only mostly applied to references to members of a class. Then, <a href="CppConst.htm">const</a> can prevent the original member from being modified.</li>
  <li><a href="CppConstMemberFunction.htm">const member function</a>: all non-<a href="CppMutable.htm">mutable</a> class members</li>
  <li><a href="CppConstMember.htm">const member</a>: the member</li>
</ol>
<p>&nbsp;</p>
<p>Below are examples of each type of <a href="CppConst.htm">const</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example of a <a href="CppConstVariable.htm">const variable</a></h2>
<p>&nbsp;</p>
<p>This applies to both local and global variables.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{ <br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <b><a href="CppDo.htm">do</a></b>zen = 12;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDo.htm">do</a></b>zen cannot be changed<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example of a <a href="CppConstArgument.htm">const argument</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> Cout(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; anyString)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>anyString cannot be changed<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> something <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example of a <a href="CppConstReturnType.htm">const return type</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Values<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; GetValues() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Even after <b><a href="CppReturn.htm">return</a></b>ing a reference to mV, mV cannot be changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mV;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; mV;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example of a <a href="CppConstMemberFunction.htm">const member function</a></h2>
<p>&nbsp;</p>
<p>Nearly all 'getters' are <a href="CppConstMemberFunction.htm">const member functions</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetValue() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Getting mValue <b><a href="CppDo.htm">do</a></b>es not change the (non-<b><a href="CppMutable.htm">mutable</a></b>) members of MyClass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mValue;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mValue;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example of a <a href="CppConstMember.htm">const member</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Person<br/>
{<br/>
&nbsp;&nbsp;Person(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> isMale) : mIsMale(isMale) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> mIsMale; <a href="CppComment.htm">//</a>After con<b><a href="CppStruct.htm">struct</a></b>ion mIsMale cannot be changed<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
