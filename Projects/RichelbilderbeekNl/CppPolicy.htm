<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Policy</title>
  <meta name="description" content="C++ Policy"/>
  <meta name="keywords" content="C++ Policy"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPolicy.htm">Policy</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppPolicy.htm"> policy</a> is a <a href="CppClass.htm">class</a> behaviour set at compile-time.</p>
<p>&nbsp;</p>
<p>A <a href="CppPolicy.htm"> policy</a> consts of a <a href="CppHostClass.htm">host class</a> and 
<a href="CppPolicyClass.htm">policy classes</a>. The user of a <a href="CppPolicy.htm"> policy</a> chooses which 
<a href="CppPolicyClass.htm">policy class</a> is used, by template.</p>
<p>&nbsp;</p>
<p>A <a href="CppPolicyClass.htm">policy class</a> is a <a href="CppBaseClass.htm">base class</a>. 
All <a href="CppBaseClass.htm"> base class</a> <a href="CppDestructor.htm">destructors</a> should be <a
href="CppPublic.htm">public</a> and <a href="CppVirtual.htm">virtual</a>, or <a
href="CppProtected.htm">protected</a> and non<a href="CppVirtual.htm">virtual</a>' [1]. The <a href="CppDestructor.htm">destructor</a>
of a <a href="CppPolicyClass.htm">policy class</a> should be <a
href="CppProtected.htm">protected</a> and non<a href="CppVirtual.htm">virtual</a> [2].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>During debugging, you might want to trace (keep track of) variables.</p>
<p>Sometimes, you might want to write it to <a href="CppCout.htm">std::cout</a>, file or other ways.</p>
<p>The example below shows a Tracer <a href="CppClass.htm">class</a>, whose behavior is set at <a href="CppCompileTime.htm">compile-time</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Policy example: Tracer" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> OutputPolicy&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppTrace.htm">Trace</a>r : <b><a href="CppPublic.htm">public</a></b> OutputPolicy<br/>
{<br/>
<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> OutputPolicyCout<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppTrace.htm">Trace</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;~OutputPolicyCout()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> The <a href="CppDestructor.htm">destructor</a> of a policy <b><a href="CppClass.htm">class</a></b> should be <b><a href="CppProtected.htm">protected</a></b> and non-<b><a href="CppVirtual.htm">virtual</a></b> [1].<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> OutputPolicyFile<br/>
{<br/>
&nbsp;&nbsp;OutputPolicyFile() : m_file("<a href="CppTrace.htm">Trace</a>.txt")<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppTrace.htm">Trace</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppOfstream.htm">std::ofstream</a> m_file;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;~OutputPolicyFile()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> The <a href="CppDestructor.htm">destructor</a> of a policy <b><a href="CppClass.htm">class</a></b> should be <b><a href="CppProtected.htm">protected</a></b> and non-<b><a href="CppVirtual.htm">virtual</a></b> [2].<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTrace.htm">Trace</a>r&lt;OutputPolicyCout&gt; p1;<br/>
&nbsp;&nbsp;<a href="CppTrace.htm">Trace</a>r&lt;OutputPolicyFile&gt; p2;<br/>
&nbsp;&nbsp;p1.<a href="CppTrace.htm">Trace</a>("x");<br/>
&nbsp;&nbsp;p2.<a href="CppTrace.htm">Trace</a>("x");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>In this example, Tracer is the <a href="CppHostClass.htm">host class</a>, where OutputPolicyCout and OutputPolicyFile are <a href="CppPolicyClass.htm">policy classes</a>.</p>
<p>&nbsp;</p>
<p>Note that p1 and p2 have types as different as <a href="CppVector.htm">std::vectors</a>
with different elements.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 50: 'Make base class destructors public and virtual, or protected and nonvirtual'</li>
  <li><a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. Modern C++ Design. 2001. ISBN: 0201704315. Page 13. Section 1.7: 'The lightweight, effective solution that policies should use is to define a nonvirtual protected destructor'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
