<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>KalmanFilterer</title>
  <meta name="description" content="C++ KalmanFilterer"/>
  <meta name="keywords" content="C++ KalmanFilterer "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolKalmanFilterer.htm">KalmanFilterer</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.636 at Sun Apr 27 13:05:20 2014
 -->
<p><a href="ToolKalmanFilterer.htm">KalmanFilterer</a> is a <a href="Tools.htm">tool</a> to learn to work
with <a href="CppKalmanFilter.htm">Kalman filters</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_11.png">View a screenshot of 'KalmanFilterer' (version 1.11)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_4.png">View a screenshot of 'KalmanFilterer' (version 1.4)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicConsole.png" alt="Console"/> <a href="ToolKalmanFiltererConsoleExe.zip">Download the 'KalmanFilterer' Windows executable (latest version)(zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFiltererDesktopExe.zip">Download the 'KalmanFilterer' Windows executable (latest version)(zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicWeb.png" alt="Web"/> <a href="ToolKalmanFiltererWebsiteExe.zip">Download the 'KalmanFilterer' Windows executable (latest version)(zip)</a></li>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="ToolKalmanFiltererSource_1_11.zip">Download the 'KalmanFilterer' source code (version 1.11)(zip)</a></li>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFiltererSource_1_11.htm">View the 'KalmanFilterer' source code as web page (version 1.11)(htm)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFiltererExe_1_9.zip">Download a Windows executable of 'KalmanFilterer' (version 1.9)(zip)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_9.png">View a screenshot of 'KalmanFilterer' (version 1.9)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_6.png">View a screenshot of 'KalmanFilterer' (version 1.6)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_5.png">View a screenshot of 'KalmanFilterer' (version 1.5)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_3.png">View a screenshot of 'KalmanFilterer' (version 1.3)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_2.png">View a screenshot of 'KalmanFilterer' (version 1.2)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_1.png">View a screenshot of 'KalmanFilterer' (version 1.1)(png)</a></li>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolKalmanFilterer_1_0.png">View a screenshot of 'KalmanFilterer' (version 1.0)(png)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="https://en.wikipedia.org/wiki/Kalman_filter">Wikipedia page about the Kalman filter</a></li>
  <li><a href="http://academic.csuohio.edu/simond/estimation">Kalman filter examples (in Matlab)</a></li>
  <li><a href="http://greg.czerniak.info/guides/kalman1/">Kalman filter tutorial by Greg Czerniak</a></li>
</ol>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.2.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolKalmanFilterer/ToolKalmanFiltererConsole.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/ToolKalmanFiltererConsole.pro" border = "1"><tr><td><code>
# Go ahead and use Qt.Core: it is <a href="CppAbout.htm">about</a> as platform-independent as<br/>
# the STL and Boost<br/>
QT += core<br/>
<br/>
# Go ahead and use Qt.Gui: it is <a href="CppAbout.htm">about</a> as platform-independent as<br/>
# the STL and Boost. It is needed for QImage<br/>
QT += gui<br/>
<br/>
# Don't define <a href="CppWidget.htm">widget</a>s: it would defy the purpose of this console<br/>
# application to work non-GUI<br/>
#greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">CppAbout</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppHelp.htm">CppHelp</a>/<a href="CppHelp.htm">CppHelp</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a>/<a href="CppMatrix.htm">CppMatrix</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtModel.htm">CppQtModel</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">CppTrace</a>.pri)<br/>
include(<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>Console.pri)<br/>
<br/>
#<br/>
#<br/>
# Type of compile<br/>
#<br/>
#<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
}<br/>
<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
<br/>
unix {<br/>
&nbsp;&nbsp;<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
}<br/>
<br/>
#<br/>
#<br/>
# Boost<br/>
#<br/>
#<br/>
<br/>
win32 {<br/>
&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
}<br/>
<br/>
#<br/>
#<br/>
# Warp's function parser<br/>
#<br/>
#<br/>
#unix {<br/>
&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1<br/>
<br/>
&nbsp;&nbsp;<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/extrasrc/fpaux.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/extrasrc/fptypes.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser_gmpint.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser_mpfr.hh \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fpconfig.hh<br/>
<br/>
&nbsp;&nbsp;<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.cc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fpoptimizer.cc<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/extrasrc/fp_identifier_parser.inc \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/extrasrc/fp_opcode_add.inc<br/>
#}<br/>
<br/>
#<br/>
#<br/>
# Qwt<br/>
#<br/>
#<br/>
<br/>
unix {<br/>
<br/>
&nbsp;&nbsp;exists(/usr/include/qwt-qt4) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;message(Linux: Qwt: use qwt-qt4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += /usr/include/qwt-qt4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += <a href="CppQwt.htm">-lqwt-qt4</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;exists(/usr/include/qwt) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;message(Linux: Qwt: link to qwt)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += /usr/include/qwt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += -lqwt<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
win32 {<br/>
<br/>
&nbsp;&nbsp;exists (../../<a href="CppLibrary.htm">Libraries</a>/qwt-6.1.0/src) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;message(Windows: Qwt: link dynamically)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a>+= ../../<a href="CppLibrary.htm">Libraries</a>/qwt-6.1.0/src<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a>+= -L../../<a href="CppLibrary.htm">Libraries</a>/qwt-6.1.0/lib<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message(Windows: Qwt: Linking to qwt)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += -lqwt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeConfig.htm">CONFIG</a>(debug, debug|release) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message(Windows: Qwt: Linking to qwtd)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQmakeLibs.htm">LIBS</a> += -lqwtd<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolKalmanFilterer/ToolKalmanFiltererDesktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/ToolKalmanFiltererDesktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Fparser.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Qwt.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppAbout.htm">CppAbout</a>/<a href="CppAbout.htm">CppAbout</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppHelp.htm">CppHelp</a>/<a href="CppHelp.htm">CppHelp</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>/<a href="CppKalmanFilter.htm">CppKalmanFilter</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>/<a href="CppMenuDialog.htm">CppMenuDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a>/<a href="CppMatrix.htm">CppMatrix</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>/<a href="CppQtAboutDialog.htm">CppQtAboutDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>/<a href="CppQtHideAndShowDialog.htm">CppQtHideAndShowDialog</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtMatrix.htm">CppQtMatrix</a>/<a href="CppQtMatrix.htm">CppQtMatrix</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtModel.htm">CppQtModel</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>/<a href="CppRichelBilderbeekProgram.htm">CppRichelBilderbeekProgram</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">CppTrace</a>.pri)<br/>
include(<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>Desktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/ToolKalmanFiltererConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/ToolKalmanFiltererConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/ToolKalmanFiltererDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/ToolKalmanFiltererDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtcopyalltableview.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtcopyalltable<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtfixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a><a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>model.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>examplesdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtstandard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtsteadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtwhitenoisesystemparametersdialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtcopyalltableview.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtcopyalltable<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtfixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a><a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>model.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>examplesdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtstandard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtsteadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtwhitenoisesystemparametersdialog.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtfixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a><a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>examplesdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtstandard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtsteadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/qtwhitenoisesystemparametersdialog.ui<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/ToolKalmanFiltererWebsite.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/ToolKalmanFiltererWebsite.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> +=<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> +=<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/kalmanfilterermenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/kalmanfilterermenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTERERMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTERERMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "help.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRichelBilderbeekProgram.htm">richelbilderbeekprogram</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>GUI independent <a href="ToolKalmanFilterer.htm">KalmanFilterer</a> menu dialog<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::MenuDialog<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Help GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTERERMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/kalmanfilterermenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/kalmanfilterermenudialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"TODO");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="Tools.htm">tool</a> to work with <a href="CppKalmanFilter.htm">Kalman filters</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 17th of July 2013",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-2014",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="ToolKalmanFilterer.htm">ToolKalmanFilterer</a>.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("GapsFilledWhiteNoiseSystem <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> GapsFilledWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppKalmanFilter.htm">KalmanFilter</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("LaggedWhiteNoiseSystem <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> LaggedWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppMatrix.htm">Matrix</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppMatrix.htm">Matrix</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Standard<a href="CppKalmanFilter.htm">KalmanFilter</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("StandardWhiteNoiseSystem <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> StandardWhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("StandardWhiteNoiseSystemParameters <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> StandardWhiteNoiseSystemParameters::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppTrace.htm">Trace</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppTrace.htm">Trace</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("WhiteNoiseSystem <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> WhiteNoiseSystem::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Help <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::Help(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileTitle(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileDescription(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Example options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Program<a href="ToolKalmanFilterer.htm">KalmanFilterer</a><br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.15";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppQt.htm">Qt</a>4 and <a href="CppBoost.htm">Boost</a> 1.49.0 <a href="CppVersion.htm">version</a> that started from <a href="CppKalmanFilter.htm">CppKalmanFilter</a>Example13",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-01: <a href="CppVersion.htm">version</a> 1.1: added plotting, added steady-state <a href="CppKalmanFilter.htm">Kalman filter</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-02: <a href="CppVersion.htm">version</a> 1.2: fixed messed-up graphs and calculation displayal",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-03: <a href="CppVersion.htm">version</a> 1.3: improved parameters GUI and use",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-06: <a href="CppVersion.htm">version</a> 1.4: prepared architecture <b><a href="CppFor.htm">for</a></b> expansion",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-16: <a href="CppVersion.htm">version</a> 1.5: use of model/view architecture, preparations <b><a href="CppFor.htm">for</a></b> adding fixed-lag-smoother <a href="CppKalmanFilter.htm">Kalman filter</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-28: <a href="CppVersion.htm">version</a> 1.6: added loading (from DokuWiki) and saving (to DokuWiki and HTML) of parameters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-28: <a href="CppVersion.htm">version</a> 1.7: added possibility to save graphs to file",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-13: <a href="CppVersion.htm">version</a> 1.8: fixed <a href="CppBug.htm">bug</a> in parameter tables, allow to view data as a table",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-14: <a href="CppVersion.htm">version</a> 1.9: allow to copy data from table",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-17: <a href="CppVersion.htm">version</a> 1.10: removed useless examples",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-27: <a href="CppVersion.htm">version</a> 1.11: added gaps-filled white noise system, added <a href="CppVersion.htm">version</a>ing to parameter files <b><a href="CppFor.htm">for</a></b> backwards compatibility",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-01: <a href="CppVersion.htm">version</a> 1.12: added the constants pi and tau to <a href="CppFunctionParser.htm">function parser</a>, context can be saved to file, tables are displayed correctly",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-05: <a href="CppVersion.htm">version</a> 1.13: added simple statistics",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-08: <a href="CppVersion.htm">version</a> 1.14: display statistics and value tables correctly, allow editing of context, tables resize to the number of rows",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-17: <a href="CppVersion.htm">version</a> 1.15: allow copying from and pasting to parameter tables, transitioned to <a href="CppQt.htm">Qt</a>5, GCC 4.8.0 and <a href="CppBoost.htm">Boost</a> 1.54.0, able to cross<a href="CppCompile.htm">compile</a> again"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/main.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;START_<a href="CppTRACE.htm">TRACE</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; args { <a href="CppRibi.htm">ribi</a>::MenuDialog::<a href="CppConvert.htm">Convert</a>Arguments(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>) };<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog d;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d.Execute(args);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtcopyalltableview.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtcopyalltableview.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTCOPYALLTABLEVIEW_H<br/>
<a href="CppDefine.htm">#define</a> QTCOPYALLTABLEVIEW_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableView.htm">QTableView</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>CopyAllTableView : <b><a href="CppPublic.htm">public</a></b> <a href="CppQTableView.htm">QTableView</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>CopyAllTableView(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTCOPYALLTABLEVIEW_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtcopyalltableview.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtcopyalltableview.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qtcopyalltableview.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QClipboard&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QHeaderView&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QMimeData&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>CopyAllTableView::<a href="CppQt.htm">Qt</a>CopyAllTableView(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQTableView.htm">QTableView</a>(parent)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>CopyAllTableView::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;selectAll();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b>(event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;selectAll();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;model()-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;model()-&gt;columnCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QByte<a href="CppArray.htm">Array</a> byte_<a href="CppArray.htm">array</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Header<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(" \t"); <a href="CppComment.htm">//</a>Topleft header cell<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;model()-&gt;headerData(col,<a href="CppQt.htm">Qt</a>::Horizontal).toString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> text <a href="CppOperatorAssign.htm">=</a> s.isEmpty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppQString.htm">QString</a>(" ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(col &lt; n_cols <a href="CppOperatorMinus.htm">-</a> 1 ? '\t' : '\n');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vertical header<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;model()-&gt;headerData(row,<a href="CppQt.htm">Qt</a>::Vertical).toString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> text <a href="CppOperatorAssign.htm">=</a> s.isEmpty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppQString.htm">QString</a>(" ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append('\t');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Normal items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;model()-&gt;data( <b><a href="CppThis.htm">this</a></b>-&gt;model()-&gt;index( row,col) ).toString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> text <a href="CppOperatorAssign.htm">=</a> s.isEmpty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppQString.htm">QString</a>(" ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(col &lt; n_cols <a href="CppOperatorMinus.htm">-</a> 1 ? '\t' : '\n');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QMimeData * mimeData <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QMimeData();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mimeData-&gt;setData("text/plain",byte_<a href="CppArray.htm">array</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a>::clipboard()-&gt;setMimeData(mimeData);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_V)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; &gt; table;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> raw_str <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::clipboard()-&gt;text().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; rows <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(raw_str,'\n');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> rows.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row_index=0; row_index<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; row_str <a href="CppOperatorAssign.htm">=</a> rows[row_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; cols <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(row_str,'\t');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table.push_back(cols);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> table.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_rows <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row_index=0; row_index<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; row <a href="CppOperatorAssign.htm">=</a> table[row_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> row.size(); <a href="CppComment.htm">//</a>Note that n_cols might change per row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col_index=0; col_index<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str <a href="CppOperatorAssign.htm">=</a> row[col_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> q <a href="CppOperatorAssign.htm">=</a> str.c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> index <a href="CppOperatorAssign.htm">=</a> model()-&gt;index(row_index,col_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model()-&gt;setData(index,q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;selectAll();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableView.htm">QTableView</a>::keyPressEvent(event);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>CopyAllTableView::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppBoostSplit.htm">boost::algorithm::split</a>(v,input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBind2nd.htm">std::bind2nd</a>(<a href="CppStdEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;(),seperator),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::token_compress_on);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtcopyalltablewidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtcopyalltablewidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTCOPYALLTABLEWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTCOPYALLTABLEWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQTableWidget.htm">QTableWidget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTCOPYALLTABLEWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtcopyalltablewidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtcopyalltablewidget.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qtcopyalltable<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QClipboard&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QMimeData&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQTableWidget.htm">QTableWidget</a>(parent)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a>::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;selectAll();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b>(event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;selectAll();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;columnCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QByte<a href="CppArray.htm">Array</a> byte_<a href="CppArray.htm">array</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Header<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(" \t"); <a href="CppComment.htm">//</a>Topleft header cell<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;horizontalHeaderItem(col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> text <a href="CppOperatorAssign.htm">=</a> item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? item-&gt;text()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppQString.htm">QString</a>(" ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(col &lt; n_cols <a href="CppOperatorMinus.htm">-</a> 1 ? '\t' : '\n');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vertical header<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;verticalHeaderItem(row);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> text <a href="CppOperatorAssign.htm">=</a> item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? item-&gt;text()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppQString.htm">QString</a>(" ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append('\t');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Normal items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;item(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> text <a href="CppOperatorAssign.htm">=</a> item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? item-&gt;text()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppQString.htm">QString</a>(" ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_<a href="CppArray.htm">array</a>.append(col &lt; n_cols <a href="CppOperatorMinus.htm">-</a> 1 ? '\t' : '\n');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QMimeData * mimeData <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QMimeData();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mimeData-&gt;setData("text/plain",byte_<a href="CppArray.htm">array</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a>::clipboard()-&gt;setMimeData(mimeData);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ControlModifier <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_V)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; &gt; table;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> raw_str <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::clipboard()-&gt;text().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; rows <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(raw_str,'\n');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> rows.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row_index=0; row_index<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; row_str <a href="CppOperatorAssign.htm">=</a> rows[row_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; cols <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(row_str,'\t');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table.push_back(cols);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> table.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_rows <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row_index=0; row_index<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; row <a href="CppOperatorAssign.htm">=</a> table[row_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> row.size(); <a href="CppComment.htm">//</a>Note that n_cols might change per row<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col_index=0; col_index<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str <a href="CppOperatorAssign.htm">=</a> row[col_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> q <a href="CppOperatorAssign.htm">=</a> str.c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setItem(row_index,col_index,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;selectAll();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>::keyPressEvent(event);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a>::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppBoostSplit.htm">boost::algorithm::split</a>(v,input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBind2nd.htm">std::bind2nd</a>(<a href="CppStdEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;(),seperator),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::token_compress_on);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTFIXEDLAGSMOOTHERKALMANFILTERCALCULATIONDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTFIXEDLAGSMOOTHERKALMANFILTERCALCULATIONDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Display the calculation of an experiment at a certain <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowCalculation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> t, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> t);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFixedLagSmootherCalculationElements(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation_elements);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetControl(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetEstimatedOptimalKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInput(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetObservation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Names(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; names);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Transition(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectMatrices() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectVectors() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTFIXEDLAGSMOOTHERKALMANFILTERCALCULATIONDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qtfixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtfixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setStyleSheet(<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_1 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fbb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_2 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #ffb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_3 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bfb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_4 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bff, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_5 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bbf, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_6 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fbf, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_7 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fff, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::~<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::CollectMatrices() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_control);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_gain_1);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_gain_2);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_model);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::CollectVectors() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_input);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_measurement);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_previous_state_estimate);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_predicted);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetFixedLagSmootherCalculationElements(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation_elements)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation_elements);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetMeasurement(calculation_elements-&gt;GetMeasurement());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPredicted<a href="CppState.htm">State</a>(calculation_elements-&gt;GetUpdated<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPrevious<a href="CppState.htm">State</a>Estimate(calculation_elements-&gt;GetPrevious<a href="CppState.htm">State</a>());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetControl(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_control);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetInput(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_input);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetEstimatedOptimalKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_gain_1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_gain_2);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_measurement);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetObservation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation_model);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_state_predicted);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetPrevious<a href="CppState.htm">State</a>Estimate(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; )<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_previous_state_estimate);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppState.htm">State</a>Names(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; names)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Matrices<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setColumnCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vectors<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectVectors();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove top text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(" ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(0,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppState.htm">State</a>Transition(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "<a href="CppTime.htm">Time</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i);<br/>
&nbsp;&nbsp;ui-&gt;label_<a href="CppTime.htm">time</a>-&gt;setText(s.c_str());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::ShowCalculation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetType());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetCalculationElements().size()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; calculation_elements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;(experiment-&gt;GetCalculationElements()[i]));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation_elements);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetFixedLagSmootherCalculationElements(calculation_elements);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetControl(parameters-&gt;GetControl());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetInput(experiment-&gt;GetInputs().at(i));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetObservation(parameters-&gt;GetObservation());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b>-&gt;SetEstimatedOptimalKalmanGain(parameters-&gt;GetEstimatedOptimalKalmanGain());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Names(experiment-&gt;Get<a href="CppState.htm">State</a>Names());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Transition(parameters-&gt;Get<a href="CppState.htm">State</a>Transition());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfiltercalculationdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfiltercalculationdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERCALCULATIONDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERCALCULATIONDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> t) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Display the calculation of an experiment at a certain <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> ShowCalculation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> t, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog *ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERCALCULATIONDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfiltercalculationdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfiltercalculationdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERDIALOG<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERDIALOG<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog is a Facade of multiple <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog <a href="CppInstance.htm">instances</a><br/>
<a href="CppComment.htm">///</a>with the <a href="CppKalmanFilter.htm">KalmanFilter</a>Type as its primary <a href="CppState.htm">State</a><br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type the user works on<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the tab to the correct index<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type new_type);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type)&gt; m_signal_kalman_filter_type_changed;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The model<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; m_model;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameter type and its corresponding dialog<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType,<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog *&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the all <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType values, ordered <b><a href="CppFor.htm">for</a></b> humans<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType&gt; GetParameterTypes() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_calculate_optimal_kalman_gain_steady_state_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_filter_type_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERDIALOG<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>dialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>Item&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>types.h"<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="CppKalmanFilter.htm">kalmanfilter</a>dialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_kalman_filter_type_changed{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_model{model},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model);<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType&gt; v <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetParameterTypes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType type <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog * <b><a href="CppConst.htm">const</a></b> dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::ToName(type),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::ToDescription(type),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_model-&gt;Find( <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter(v[i]) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_parameters.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(type,dialog));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> to dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;layout());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;layout()-&gt;addWidget(dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::n_parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All parameters must be in");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFocusPolicy(<a href="CppQt.htm">Qt</a>::NoFocus);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;on_box_filter_type_currentIndexChanged(0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can get an empty <a href="CppKalmanFilter.htm">Kalman filter</a>, with all sizes equal to zero");<br/>
<br/>
&nbsp;&nbsp;m_model-&gt;m_signal_kalman_filter_type_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Type <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (ui-&gt;box_filter_type-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(ui-&gt;box_filter_type-&gt;currentIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented ComboBox index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::GetParameterTypes() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType&gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_state_estimate,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::initial_covariance_estimate,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>P<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::state_transition,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::control,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::observation,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>H<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_optimal_kalman_gain,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>K<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_process_noise_covariance, <a href="CppComment.htm">//</a>Q<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType::estimated_measurement_noise&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>R<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter::GetAll().size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type new_type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type() <a href="CppOperatorNotEqual.htm">!=</a> new_type)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (new_type)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_filter_type-&gt;count() &gt; 0); <a href="CppComment.htm">//</a>Otherwise index <a href="CppOperatorMinus.htm">-</a>1 will be set<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_filter_type-&gt;setCurrentIndex(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_filter_type-&gt;count() &gt; 1); <a href="CppComment.htm">//</a>Otherwise index <a href="CppOperatorMinus.htm">-</a>1 will be set<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_filter_type-&gt;setCurrentIndex(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_filter_type-&gt;count() &gt; 2); <a href="CppComment.htm">//</a>Otherwise index <a href="CppOperatorMinus.htm">-</a>1 will be set<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_filter_type-&gt;setCurrentIndex(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented <a href="CppKalmanFilter.htm">KalmanFilter</a>Type");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type() <a href="CppOperatorEqual.htm">==</a> new_type);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type() <a href="CppOperatorEqual.htm">==</a> new_type);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::on_button_calculate_optimal_kalman_gain_steady_state_clicked()<br/>
{<br/>
&nbsp;&nbsp;m_model-&gt;CalculateOptimalEstimatedKalmanGain();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::on_box_filter_type_currentIndexChanged(<b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update the GUI<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_parameters.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_parameters.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((*i).second)-&gt;setVisible(Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::HasParameterType((*i).first));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_estimated_lag-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_estimated_lag-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_calculate_optimal_kalman_gain_steady_state-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_parameters.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_parameters.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((*i).second)-&gt;setVisible(Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::HasParameterType((*i).first));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_estimated_lag-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_estimated_lag-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_calculate_optimal_kalman_gain_steady_state-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_parameters.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_parameters.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((*i).second)-&gt;setVisible(FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::HasParameterType((*i).first));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_estimated_lag-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_estimated_lag-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_calculate_optimal_kalman_gain_steady_state-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented <a href="CppKalmanFilter.htm">Kalman filter</a> type");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Notify the model<br/>
&nbsp;&nbsp;m_model-&gt;Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type());<br/>
<br/>
&nbsp;&nbsp;m_signal_kalman_filter_type_changed(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type());<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterermaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterermaindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERERMAINDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERERMAINDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qwt_plot.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.h"<br/>
<a href="CppInclude.htm">#include</a> "qtstandard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtsteadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtwhitenoisesystemparametersdialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the dialog to set the experiment its parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog * GetExperimentDialog() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_experiment_dialog; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the checkbox to show the calculation<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetShowCalculation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_show);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the checkbox to show the graphs<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetShowGraph(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_show);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the checkbox to show the statistics<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetShowStatistics(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_show);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the checkbox to show the table<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetShowTable(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_show);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&gt; Create();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The dialog to set the experiment its parameters<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog * <b><a href="CppConst.htm">const</a></b> m_experiment_dialog;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The model<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; m_model;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contains the plots, these must be stored because deleting<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the layout that contains these does not work properly<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;QwtPlot&gt; &gt; m_plots;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Contains the <a href="CppWidget.htm">widget</a>s that must be deleted at a <b><a href="CppNew.htm">new</a></b> run<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/these must be stored because deleting<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the layout that contains these does not work properly<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQWidget.htm">QWidget</a>&gt; &gt; m_to_delete_at_new_run;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; CreateData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&gt; Create<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ExtractAverageSquaredError(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called when a <b><a href="CppNew.htm">new</a></b> context is set in m_model<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnNewContext(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show the results of an experiment in a calculation<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowCalculation(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show the results of an experiment in a graph<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowGraph(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show the results of an experiment its statistics<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowStatistics(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show the results of an experiment in a table<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowTable(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_graph_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_tab_context_currentChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_edit_context_textChanged();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERERMAINDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterermaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterermaindialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>maindialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppFunction.htm">function</a>al.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQLabel.htm">QLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQMessageBox.htm">QMessageBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_curve.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_zoomer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_grid.h&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;qwt_plot_seriesitem.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_legend.h&gt;<br/>
<br/>
<a href="CppPreIf.htm">#if</a> QWT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0x060100<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_<a href="CppPointer.htm">point</a>_data.h&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtcopyalltable<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtfixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>examplesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtstandard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtsteadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtwhitenoisesystemparametersdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>maindialog.h"<br/>
<br/>
<a href="CppPreIf.htm">#if</a> QT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> QT_VERSION_CHECK(5,0,0)<br/>
<a href="CppComment.htm">//</a>Due to Q<a href="CppMake.htm">make</a> error<br/>
<a href="CppComment.htm">//</a>http://richelbilderbeek.nl/CppQ<a href="CppMake.htm">make</a>ErrorUnknownModulesIn<a href="CppQt.htm">Qt</a>LocationSensors.htm<br/>
<a href="CppDefine.htm">#define</a> DISABLE_QWEBVIEW<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_experiment_dialog(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog(model)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_model(model),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_plots{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to_delete_at_new_run{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_experiment_dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_parameters_layout-&gt;layout());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(QWebSettings::globalSettings()-&gt;fontFamily(QWebSettings::FixedFont).toStdString());<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> DISABLE_QWEBVIEW<br/>
&nbsp;&nbsp;QWebSettings::globalSettings()-&gt;setFontFamily(QWebSettings::FixedFont,"Courier New");<br/>
&nbsp;&nbsp;QWebSettings::globalSettings()-&gt;setFontSize(QWebSettings::DefaultFontSize,14);<br/>
&nbsp;&nbsp;QWebSettings::globalSettings()-&gt;setAttribute(QWebSettings::LocalContentCanAccessRemoteUrls,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;web_view_context-&gt;settings()-&gt;setFontFamily(QWebSettings::FixedFont,"Courier New");<br/>
&nbsp;&nbsp;ui-&gt;web_view_context-&gt;settings()-&gt;setFontSize(QWebSettings::DefaultFontSize,14);<br/>
&nbsp;&nbsp;ui-&gt;web_view_context-&gt;settings()-&gt;setAttribute(QWebSettings::LocalContentCanAccessRemoteUrls,<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;web_view_context-&gt;setStyleSheet(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"QWebView,<a href="CppQWidget.htm">QWidget</a>,<a href="CppQLabel.htm">QLabel</a> { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-size: 18px;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;font-family: \"Courier New\", \"Courier\", Courier, monospace;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} ");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_parameters_layout-&gt;layout()-&gt;addWidget(m_experiment_dialog);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> window_rect <a href="CppOperatorAssign.htm">=</a> screen.adjusted(16,32,-16,-64);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(window_rect);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( window_rect.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move splitter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;splitter-&gt;sizes().size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Splitter manages two areas");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;splitter-&gt;setSizes( { 400, <b><a href="CppThis.htm">this</a></b>-&gt;width() <a href="CppOperatorMinus.htm">-</a> 400 } );<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;m_experiment_dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;CreateExperiment() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can get an empty experiment");<br/>
<br/>
&nbsp;&nbsp;m_model-&gt;m_signal_context_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::OnNewContext,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_show_calculation-&gt;setChecked(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;box_show_statistics-&gt;setChecked(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;box_show_table-&gt;setChecked(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetExperimentDialog()-&gt;GetExamplesDialog()-&gt;<a href="CppEmit.htm">Emit</a>Example(0); <a href="CppComment.htm">//</a>Click the 'Voltage' example<br/>
&nbsp;&nbsp;ui-&gt;tab_main-&gt;setCurrentIndex(2); <a href="CppComment.htm">//</a>Set to 'Graphs' tab<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;button_start-&gt;click(); <a href="CppComment.htm">//</a>Start the simulation<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::~<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_experiment_dialog;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Create()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&gt; d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog(model)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::CreateData(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; b,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; c,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; d)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>d contains all the inputs of an experiment and always has maximum size<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Always <b><a href="CppTrue.htm">true</a></b>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorEqual.htm">==</a> b.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorEqual.htm">==</a> c.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorLessEqual.htm">&lt;=</a> d.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Because an experiment might fail, ca<b><a href="CppUsing.htm">using</a></b> a to contain less values");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> a[0].size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppComment.htm">//</a>Trivial second term<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> a[0].size() <a href="CppOperatorEqual.htm">==</a> a[0].size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> a[0].size() <a href="CppOperatorEqual.htm">==</a> b[0].size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> a[0].size() <a href="CppOperatorEqual.htm">==</a> c[0].size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size() <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> a[0].size() <a href="CppOperatorEqual.htm">==</a> d[0].size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> a.size();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> state_sz <a href="CppOperatorAssign.htm">=</a> d.empty() ? 0 : d[0].size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(state_sz * 4,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppTime.htm">time</a>,0.0));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> t=0; t<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>; <a href="CppOperatorIncrement.htm">++</a>t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t &lt; a.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t &lt; b.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t &lt; c.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t &lt; d.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; row_a <a href="CppOperatorAssign.htm">=</a> a[t];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; row_b <a href="CppOperatorAssign.htm">=</a> b[t];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; row_c <a href="CppOperatorAssign.htm">=</a> c[t];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; row_d <a href="CppOperatorAssign.htm">=</a> d[t];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_sz <a href="CppOperatorEqual.htm">==</a> row_a.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_sz <a href="CppOperatorEqual.htm">==</a> row_b.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_sz <a href="CppOperatorEqual.htm">==</a> row_c.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_sz <a href="CppOperatorEqual.htm">==</a> row_d.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> s=0; s<a href="CppOperatorNotEqual.htm">!=</a>state_sz; <a href="CppOperatorIncrement.htm">++</a>s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((s*4)+0 &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((s*4)+1 &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((s*4)+2 &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((s*4)+3 &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s &lt; row_a.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s &lt; row_b.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s &lt; row_c.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s &lt; row_d.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[(s*4)+0][t] <a href="CppOperatorAssign.htm">=</a> row_a[s];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[(s*4)+1][t] <a href="CppOperatorAssign.htm">=</a> row_b[s];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[(s*4)+2][t] <a href="CppOperatorAssign.htm">=</a> row_c[s];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[(s*4)+3][t] <a href="CppOperatorAssign.htm">=</a> row_d[s];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 4 * (d.empty() ? 0 : d[0].size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Create<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&gt; p;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented <a href="CppKalmanFilter.htm">KalmanFilter</a>Type");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> type);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::ExtractAverageSquaredError(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; predictions <a href="CppOperatorAssign.htm">=</a> experiment-&gt;GetPredicted<a href="CppState.htm">State</a>s();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; real_states <a href="CppOperatorAssign.htm">=</a> experiment-&gt;GetReal<a href="CppState.htm">State</a>s();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(real_states.size() <a href="CppOperatorEqual.htm">==</a> predictions.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> real_states.size();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(real_states[0].size() <a href="CppOperatorEqual.htm">==</a> predictions[0].size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_states <a href="CppOperatorAssign.htm">=</a> real_states[0].size();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_states <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; sum(n_states,0.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sum all squared errors<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> <a href="CppTime.htm">time</a>step=0; <a href="CppTime.htm">time</a>step<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppTime.htm">time</a>steps; <a href="CppOperatorIncrement.htm">++</a><a href="CppTime.htm">time</a>step)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a>step &lt; predictions.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a>step &lt; real_states.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; prediction <a href="CppOperatorAssign.htm">=</a> predictions[<a href="CppTime.htm">time</a>step];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real <a href="CppOperatorAssign.htm">=</a> real_states[<a href="CppTime.htm">time</a>step];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> state=0; state<a href="CppOperatorNotEqual.htm">!=</a>n_states; <a href="CppOperatorIncrement.htm">++</a>state)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state &lt; prediction.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state &lt; real.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state &lt; sum.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p <a href="CppOperatorAssign.htm">=</a> prediction[state];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> real[state];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[state] <a href="CppOperatorPlusAssign.htm">+=</a> ((p-r)*(p-r));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the average squared error<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> state=0; state<a href="CppOperatorNotEqual.htm">!=</a>n_states; <a href="CppOperatorIncrement.htm">++</a>state)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state &lt; sum.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum[state] <a href="CppOperatorDivideAssign.htm">/=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_<a href="CppTime.htm">time</a>steps);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sum;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::on_button_save_graph_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Please select a filename to save the graphs to",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"*.png"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (filename.isEmpty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;scroll_area_graph_contents-&gt;contentsRect().size(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a>::Format_ARGB32);&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Create the image with the exact size<br/>
&nbsp;&nbsp;image.fill(<a href="CppQt.htm">Qt</a>::transparent); <a href="CppComment.htm">//</a> Start all pixels transparent<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter(&amp;image);<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_graph_contents-&gt;render(&amp;painter);<br/>
<br/>
&nbsp;&nbsp;image.save(filename);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(filename));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::on_button_start_clicked()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> GetExperimentDialog()-&gt;GetNoiseParametersDialog()-&gt;GetWhiteNoiseSystemType());<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove previous dialogs<br/>
&nbsp;&nbsp;m_plots.resize(0);<br/>
&nbsp;&nbsp;m_to_delete_at_new_run.resize(0);<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui-&gt;scroll_area_calculation_contents-&gt;layout();<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui-&gt;scroll_area_graph_contents-&gt;layout();<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui-&gt;scroll_area_statistics_contents-&gt;layout();<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui-&gt;scroll_area_table_contents-&gt;layout();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scroll_area_calculation_contents-&gt;layout());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scroll_area_graph_contents-&gt;layout());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scroll_area_statistics_contents-&gt;layout());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scroll_area_table_contents-&gt;layout());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do the sim<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_experiment_dialog);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt; experiment <a href="CppOperatorAssign.htm">=</a> m_model-&gt;CreateExperiment();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;IsValid());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_show_calculation-&gt;isChecked()) { ShowCalculation(experiment); }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_show_graphs-&gt;isChecked()) { ShowGraph(experiment); }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_show_statistics-&gt;isChecked()) { ShowStatistics(experiment); }<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_show_table-&gt;isChecked()) { ShowTable(experiment); }<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::SetShowCalculation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_show)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_show_calculation-&gt;setChecked(do_show);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::SetShowGraph(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_show)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_show_graphs-&gt;setChecked(do_show);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::SetShowStatistics(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_show)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_show_statistics-&gt;setChecked(do_show);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::SetShowTable(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_show)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_show_table-&gt;setChecked(do_show);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::ShowCalculation(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_to_delete_at_new_run.empty());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make fresh calculation section<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scroll_area_calculation_contents-&gt;layout());<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_calculation_contents-&gt;setLayout(<b><a href="CppNew.htm">new</a></b> <a href="CppQVBoxLayout.htm">QVBoxLayout</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_calculation_contents-&gt;layout());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>n_<a href="CppTime.htm">time</a>steps may differ from n_<a href="CppTime.htm">time</a>steps_desired, because in the actual simulation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the innovation variance may become degenerate<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetCalculationElements().size()); <a href="CppComment.htm">//</a>Number of rows<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppTime.htm">time</a>steps; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&gt; calculation_dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Create<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetType());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation_dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation_dialog-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetType());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetCalculationElements().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;GetCalculationElements()[i]-&gt;IsComplete());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> style_sheet <a href="CppOperatorAssign.htm">=</a> calculation_dialog-&gt;styleSheet().toStdString()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "<a href="CppQDialog.htm">QDialog</a> { background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (i <a href="CppOperatorModulus.htm">%</a> 6)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#f00, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#ff0, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#0f0, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#0ff, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#f0f, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#fff, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;calculation_dialog-&gt;setStyleSheet(style_sheet.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;calculation_dialog-&gt;Set<a href="CppTime.htm">Time</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;calculation_dialog-&gt;ShowCalculation(i,experiment);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to_delete_at_new_run.push_back(calculation_dialog); <a href="CppComment.htm">//</a>Store <b><a href="CppFor.htm">for</a></b> delettion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_calculation_contents-&gt;layout());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;scroll_area_calculation_contents-&gt;layout()-&gt;addWidget(calculation_dialog.get());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::ShowGraph(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;IsValid());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_plots.empty());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make fresh graph section<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scroll_area_graph_contents-&gt;layout());<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_graph_contents-&gt;setLayout(<b><a href="CppNew.htm">new</a></b> <a href="CppQVBoxLayout.htm">QVBoxLayout</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_graph_contents-&gt;layout());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create plots<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;Get<a href="CppState.htm">State</a>Names().size());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;QwtPlotCurve *&gt; curves;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>state_size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;QwtPlot&gt; plot(<b><a href="CppNew.htm">new</a></b> QwtPlot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;plot-&gt;setTitle(experiment-&gt;Get<a href="CppState.htm">State</a>Names()[i].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;plot-&gt;setAxisTitle(QwtPlot::xBottom,"<a href="CppTime.htm">Time</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;plot-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQBrush.htm">QBrush</a>(<a href="CppQColor.htm">QColor</a>(255,255,255)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;plot-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> curve_real <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotCurve;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_real-&gt;setTitle("Real");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_real-&gt;attach(plot.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_real-&gt;setStyle(QwtPlotCurve::Lines);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_real-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,255)));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> curve_measured <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotCurve;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_measured-&gt;setTitle("Measured");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_measured-&gt;attach(plot.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_measured-&gt;setStyle(QwtPlotCurve::Lines);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_measured-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,196,0)));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> curve_predication <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotCurve;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_predication-&gt;setTitle("Kalman prediction");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_predication-&gt;attach(plot.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_predication-&gt;setStyle(QwtPlotCurve::Lines);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_predication-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(255,0,0)));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> curve_input <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotCurve;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_input-&gt;setTitle("Input");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_input-&gt;attach(plot.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_input-&gt;setStyle(QwtPlotCurve::Lines);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curve_input-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curves.push_back(curve_real);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curves.push_back(curve_measured);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curves.push_back(curve_predication);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curves.push_back(curve_input);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_plots.push_back(plot);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> grid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotGrid * <b><a href="CppConst.htm">const</a></b> grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotGrid;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(128,128,128)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;attach(plot.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> zoomer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> QwtPlotZoomer(plot-&gt;canvas());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> legend<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtLegend * <b><a href="CppConst.htm">const</a></b> legend <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtLegend;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;legend-&gt;setFrameStyle(QFrame::Box|QFrame::Sunken);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot-&gt;insertLegend(legend, QwtPlot::RightLegend);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_graph_contents-&gt;layout());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;scroll_area_graph_contents-&gt;layout()-&gt;addWidget(plot.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_size * 1 <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_plots.size() ) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "One plot per state element");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_size * 4 <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(curves.size()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Four curves per state element");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>n_<a href="CppTime.htm">time</a>steps may differ from n_<a href="CppTime.htm">time</a>steps_desired, because in the actual experiment<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the innovation variance may become degenerate<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>! Do not use GetInputs() its size: <b><a href="CppThis.htm">this</a></b> size is always set to the maximum<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;duration of the experiment<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetReal<a href="CppState.htm">State</a>s().size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetReal<a href="CppState.htm">State</a>s().size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetPredicted<a href="CppState.htm">State</a>s().size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetMeasured<a href="CppState.htm">State</a>s().size()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppTime.htm">time</a> series<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppTime.htm">time</a>_series(n_<a href="CppTime.htm">time</a>steps,0.0);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> t=0; t<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppTime.htm">time</a>steps; <a href="CppOperatorIncrement.htm">++</a>t) <a href="CppTime.htm">time</a>_series[t] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(t);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Layout the data <b><a href="CppFor.htm">for</a></b> plotting<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; vs <a href="CppOperatorAssign.htm">=</a> CreateData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experiment-&gt;GetReal<a href="CppState.htm">State</a>s(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experiment-&gt;GetMeasured<a href="CppState.htm">State</a>s(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experiment-&gt;GetPredicted<a href="CppState.htm">State</a>s(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experiment-&gt;GetInputs());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!vs.empty()); <a href="CppComment.htm">//</a>vs can be empty<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Leave <b><a href="CppIf.htm">if</a></b> there is no data to plot<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vs.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put data on curves<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(curves.size() <a href="CppOperatorEqual.htm">==</a> vs.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_curves <a href="CppOperatorAssign.htm">=</a> curves.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_curves; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; vs.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v <a href="CppOperatorAssign.htm">=</a> vs[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreIf.htm">#if</a> QWT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0x060100 <a href="CppOperatorLogicalOr.htm">||</a> !WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;curves[i]-&gt;setData(<b><a href="CppNew.htm">new</a></b> Qwt<a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;<a href="CppTime.htm">time</a>_series[0],&amp;v[0],<a href="CppTime.htm">time</a>_series.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;curves[i]-&gt;setData(&amp;<a href="CppTime.htm">time</a>_series[0],&amp;v[0],<a href="CppTime.htm">time</a>_series.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put curves in the plots<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_plots <a href="CppOperatorAssign.htm">=</a> m_plots.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_plots; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_curves_per_plot <a href="CppOperatorAssign.htm">=</a> 4;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only plot when there is something to plot<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vs[(i*n_curves_per_plot)+0].empty()) <b><a href="CppBreak.htm">break</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; m_plots.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((i*n_curves_per_plot)+3 &lt; vs.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!vs[(i*n_curves_per_plot)+0].empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!vs[(i*n_curves_per_plot)+1].empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!vs[(i*n_curves_per_plot)+2].empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!vs[(i*n_curves_per_plot)+3].empty());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;setAxisScale(QwtPlot::xBottom,0.0,n_<a href="CppTime.htm">time</a>steps);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; min_values<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMin_element.htm">std::min_element</a>(vs[(i*n_curves_per_plot)+0].begin(),vs[(i*n_curves_per_plot)+0].end()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMin_element.htm">std::min_element</a>(vs[(i*n_curves_per_plot)+1].begin(),vs[(i*n_curves_per_plot)+1].end()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMin_element.htm">std::min_element</a>(vs[(i*n_curves_per_plot)+2].begin(),vs[(i*n_curves_per_plot)+2].end()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMin_element.htm">std::min_element</a>(vs[(i*n_curves_per_plot)+3].begin(),vs[(i*n_curves_per_plot)+3].end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_value <a href="CppOperatorAssign.htm">=</a> *<a href="CppStdMin_element.htm">std::min_element</a>(min_values.begin(),min_values.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; max_values<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMax_element.htm">std::max_element</a>(vs[(i*n_curves_per_plot)+0].begin(),vs[(i*n_curves_per_plot)+0].end()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMax_element.htm">std::max_element</a>(vs[(i*n_curves_per_plot)+1].begin(),vs[(i*n_curves_per_plot)+1].end()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMax_element.htm">std::max_element</a>(vs[(i*n_curves_per_plot)+2].begin(),vs[(i*n_curves_per_plot)+2].end()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMax_element.htm">std::max_element</a>(vs[(i*n_curves_per_plot)+3].begin(),vs[(i*n_curves_per_plot)+3].end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_value <a href="CppOperatorAssign.htm">=</a> *<a href="CppStdMax_element.htm">std::max_element</a>(max_values.begin(),max_values.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;setAxisScale(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtPlot::yLeft,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAbs.htm">std::abs</a>(min_value <a href="CppOperatorMinus.htm">-</a> max_value) &lt; 0.01 ? 0.0 : min_value,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAbs.htm">std::abs</a>(min_value <a href="CppOperatorMinus.htm">-</a> max_value) &lt; 0.01 ? 1.0 : max_value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;replot();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::ShowStatistics(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;IsValid());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make fresh graph section<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scroll_area_statistics_contents-&gt;layout());<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_statistics_contents-&gt;setLayout(<b><a href="CppNew.htm">new</a></b> <a href="CppQVBoxLayout.htm">QVBoxLayout</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_statistics_contents-&gt;layout());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the table <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;Get<a href="CppState.htm">State</a>Names().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> state_size;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store <b><a href="CppFor.htm">for</a></b> deletion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQWidget.htm">QWidget</a>&gt; p(table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to_delete_at_new_run.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;table-&gt;set<a href="Tools.htm">Tool</a>Tip("Display the average squared error <b><a href="CppFor.htm">for</a></b> every state: ((p-r)^2)/t");<br/>
&nbsp;&nbsp;table-&gt;setColumnCount(n_cols);<br/>
&nbsp;&nbsp;table-&gt;setRowCount(n_rows);<br/>
&nbsp;&nbsp;table-&gt;setAlternatingRowColors(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_statistics_contents-&gt;layout());<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_statistics_contents-&gt;layout()-&gt;addWidget(table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Layout the data <b><a href="CppFor.htm">for</a></b> putting in table<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; vs <a href="CppOperatorAssign.htm">=</a> ExtractAverageSquaredError(experiment);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!vs.empty()); <a href="CppComment.htm">//</a>vs can be empty<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Leave <b><a href="CppIf.htm">if</a></b> there is no data to put in table<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vs.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put descriptions in horizontal header<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> col <a href="CppOperatorEqual.htm">==</a> 0 ? "<a href="CppState.htm">State</a> name" : "Average squared error";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(col,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put state names in vertical header<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>state_size; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;Get<a href="CppState.htm">State</a>Names().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> experiment-&gt;Get<a href="CppState.htm">State</a>Names()[row];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(name.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(row,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the average squared error in place<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_cols <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>state_size; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppQString.htm">QString</a>::number(vs[row]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(row,col,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::ShowTable(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;IsValid());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make fresh graph section<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;scroll_area_table_contents-&gt;layout());<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_table_contents-&gt;setLayout(<b><a href="CppNew.htm">new</a></b> <a href="CppQVBoxLayout.htm">QVBoxLayout</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_table_contents-&gt;layout());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the table <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;Get<a href="CppState.htm">State</a>Names().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> state_size * 4; <a href="CppComment.htm">//</a>Display 4 values per state: real, measured, predicted and input<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>n_<a href="CppTime.htm">time</a>steps may differ from n_<a href="CppTime.htm">time</a>steps_desired, because in the actual experiment<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the innovation variance may become degenerate<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>! Do not use GetInputs() its size: <b><a href="CppThis.htm">this</a></b> size is always set to the maximum<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;duration of the experiment<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetReal<a href="CppState.htm">State</a>s().size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> n_<a href="CppTime.htm">time</a>steps;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>CopyAllTable<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store <b><a href="CppFor.htm">for</a></b> deletion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQWidget.htm">QWidget</a>&gt; p(table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to_delete_at_new_run.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;table-&gt;setColumnCount(n_cols);<br/>
&nbsp;&nbsp;table-&gt;setRowCount(n_rows);<br/>
&nbsp;&nbsp;table-&gt;setAlternatingRowColors(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_table_contents-&gt;layout());<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_table_contents-&gt;layout()-&gt;addWidget(table);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetReal<a href="CppState.htm">State</a>s().size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetPredicted<a href="CppState.htm">State</a>s().size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetMeasured<a href="CppState.htm">State</a>s().size()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Layout the data <b><a href="CppFor.htm">for</a></b> putting in table<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; vs <a href="CppOperatorAssign.htm">=</a> CreateData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experiment-&gt;GetReal<a href="CppState.htm">State</a>s(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experiment-&gt;GetMeasured<a href="CppState.htm">State</a>s(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experiment-&gt;GetPredicted<a href="CppState.htm">State</a>s(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;experiment-&gt;GetInputs());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!vs.empty()); <a href="CppComment.htm">//</a>vs can be empty<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Leave <b><a href="CppIf.htm">if</a></b> there is no data to put in table<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vs.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put state descriptions in horizontal header<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state_index <a href="CppOperatorAssign.htm">=</a> col <a href="CppOperatorDivide.htm">/</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_index &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;Get<a href="CppState.htm">State</a>Names().size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text_state <a href="CppOperatorAssign.htm">=</a> experiment-&gt;Get<a href="CppState.htm">State</a>Names()[state_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text_extra;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (col <a href="CppOperatorModulus.htm">%</a> 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: text_extra <a href="CppOperatorAssign.htm">=</a> "_real"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: text_extra <a href="CppOperatorAssign.htm">=</a> "_measured"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: text_extra <a href="CppOperatorAssign.htm">=</a> "_predicted"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: text_extra <a href="CppOperatorAssign.htm">=</a> "_input"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> text_state <a href="CppOperatorPlus.htm">+</a> text_extra;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(text.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(col,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put <a href="CppTime.htm">time</a> series in vertical header<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppTime.htm">time</a>steps; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppQString.htm">QString</a>::number(row));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(row,item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vs.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v <a href="CppOperatorAssign.htm">=</a> vs[col];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppTime.htm">time</a>steps; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppQString.htm">QString</a>::number(v[row]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(row,col,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Test()")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Test: Create self")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&gt; d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d-&gt;m_model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_model-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(2); <a href="CppComment.htm">//</a>Otherwise these tests take too <b><a href="CppLong.htm">long</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;SetShowCalculation(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;SetShowGraph(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;SetShowStatistics(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;SetShowTable(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;on_button_start_clicked();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Test: (1/2) Click on example x and write these to a DokuWiki file")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Test: (2/2) Click on example y and read the file from x")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&gt; d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d-&gt;m_model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d-&gt;m_experiment_dialog);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_model-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(2); <a href="CppComment.htm">//</a>Otherwise these tests take too <b><a href="CppLong.htm">long</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> "Temp<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialogTest.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_examples <a href="CppOperatorAssign.htm">=</a> 6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x<a href="CppOperatorNotEqual.htm">!=</a> n_examples; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>1) Click on example x and write these to a DokuWiki file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_experiment_dialog-&gt;GetExamplesDialog()-&gt;<a href="CppEmit.htm">Emit</a>Example(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_model-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(2); <a href="CppComment.htm">//</a>Otherwise these tests take too <b><a href="CppLong.htm">long</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_experiment_dialog-&gt;SaveToDokuWiki(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y<a href="CppOperatorNotEqual.htm">!=</a> n_examples; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>2) Click on example y and read the file from x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_experiment_dialog-&gt;GetExamplesDialog()-&gt;<a href="CppEmit.htm">Emit</a>Example(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_model-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(2); <a href="CppComment.htm">//</a>Otherwise these tests take too <b><a href="CppLong.htm">long</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_experiment_dialog-&gt;LoadFromDokuWiki(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Test()")<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::on_tab_context_currentChanged(<b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorEqual.htm">==</a> ui-&gt;tab_context-&gt;currentIndex());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (index <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> DISABLE_QWEBVIEW<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Render HTML when user really wants to see it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> s <a href="CppOperatorAssign.htm">=</a> ui-&gt;edit_context-&gt;toPlainText();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;web_view_context-&gt;setHtml(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::OnNewContext(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> context)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;edit_context-&gt;toPlainText().toStdString() <a href="CppOperatorNotEqual.htm">!=</a> context)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;edit_context-&gt;setPlainText(context.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;tab_context-&gt;currentIndex() <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> DISABLE_QWEBVIEW<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only display HTML when visible<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;web_view_context-&gt;setHtml(context.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;edit_context-&gt;toPlainText().toStdString() <a href="CppOperatorEqual.htm">==</a> context);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;edit_context-&gt;toPlainText().toStdString() <a href="CppOperatorEqual.htm">==</a> context);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::on_edit_context_textChanged()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_model-&gt;SetContext(ui-&gt;edit_context-&gt;toPlainText().toStdString());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterermenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterermenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERERMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERERMENUDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_quit_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERERMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterermenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterermenudialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorFunctionModel.htm">qtstdvectorfunctionmodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorStringModel.htm">qtstdvectorstringmodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtUblasMatrixDoubleModel.htm">qtublasmatrixdoublemodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtUblasVectorDoubleModel.htm">qtublasvectordoublemodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtwhitenoisesystemparametersdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::~<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a <a href="CppOperatorAssign.htm">=</a> <a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog().GetAbout();<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtMatrix.htm">QtMatrix</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtMatrix.htm">QtMatrix</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppQtAboutDialog.htm">QtAboutDialog</a> d(a);<br/>
&nbsp;&nbsp;d.setWindowIcon(<b><a href="CppThis.htm">this</a></b>-&gt;windowIcon());<br/>
&nbsp;&nbsp;d.setStyleSheet(<b><a href="CppThis.htm">this</a></b>-&gt;styleSheet());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::on_button_quit_clicked()<br/>
{<br/>
&nbsp;&nbsp;close();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::on_button_start_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&gt; d <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Create();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;ShowChild(d.get());<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::Test()")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog&gt; d <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog::Create();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog::Test()")<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterermodel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterermodel.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERERMODEL_H<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERERMODEL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtUblasMatrixDoubleModel.htm">qtublasmatrixdoublemodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtUblasVectorDoubleModel.htm">qtublasvectordoublemodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppUblas.htm">ublas</a>vectorintmodel.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorFunctionModel.htm">qtstdvectorfunctionmodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorStringModel.htm">qtstdvectorstringmodel</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> ControlModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> EstimatedMeasurementNoiseModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> EstimatedOptimalKalmanGainModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> EstimatedProcessNoiseCovarianceModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> InitialCovarianceEstimateModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> ObservationModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> <a href="CppState.htm">State</a>TransitionModel;<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>StdVector<a href="CppDouble.htm">Double</a>Model;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> Initial<a href="CppState.htm">State</a>EstimateModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> Initial<a href="CppState.htm">State</a>RealModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> RealMeasurementNoiseModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> RealProcessNoiseModel;<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>StdVectorIntModel;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQt.htm">Qt</a>UblasVectorIntModel MeasurementFrequencyModel;<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> <a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a> InputModel;<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> <a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a> <a href="CppState.htm">State</a>NamesModel;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERERMODEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterermodel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterermodel.cpp" border = "1"><tr><td><code>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>model.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfiltererparameterdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfiltererparameterdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERERPARAMETERDIALOG<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERERPARAMETERDIALOG<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>Item&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Dialog <b><a href="CppFor.htm">for</a></b> a parameter, stores a <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog::ValueType<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; parameter_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; parameter_description,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the table and its content to HTML<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToHtml() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when table changes from/to a valid to/from an invalid state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_state_changed();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnModelSizeChanged();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERERPARAMETERDIALOG<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfiltererparameterdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfiltererparameterdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>Item&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>model.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtUblasMatrixDoubleModel.htm">qtublasmatrixdoublemodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtUblasVectorDoubleModel.htm">qtublasvectordoublemodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorFunctionModel.htm">qtstdvectorfunctionmodel</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorStringModel.htm">qtstdvectorstringmodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; parameter_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; parameter_description,<br/>
&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog)<br/>
{<br/>
&nbsp;&nbsp;<br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFocusPolicy(<a href="CppQt.htm">Qt</a>::NoFocus);<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;setModel(model);<br/>
&nbsp;&nbsp;ui-&gt;label-&gt;setText(parameter_name.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;set<a href="Tools.htm">Tool</a>Tip(parameter_description.c_str());<br/>
<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;setAlternatingRowColors(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;setWordWrap(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ui-&gt;table-&gt;horizontalHeader()-&gt;setResizeMode(QHeaderView::ResizeToContents);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ui-&gt;table-&gt;verticalHeader()-&gt;setResizeMode(QHeaderView::ResizeToContents);<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;table-&gt;model(),<a href="CppSignalMacro.htm">SIGNAL</a>(layoutChanged()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnModelSizeChanged()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog::~<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog::ToHtml() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;table summary=\"" <a href="CppOperatorPlus.htm">+</a> ui-&gt;label-&gt;text().toStdString() <a href="CppOperatorPlus.htm">+</a> "\" border=\"1\"&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> ui-&gt;table-&gt;model()-&gt;columnCount();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> ui-&gt;table-&gt;model()-&gt;rowCount();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a>"&lt;tr&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a>"&lt;td&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> index <a href="CppOperatorAssign.htm">=</a> ui-&gt;table-&gt;model()-&gt;index(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> q <a href="CppOperatorAssign.htm">=</a> ui-&gt;table-&gt;model()-&gt;data(index).toString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> q.toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a>"&lt;/td&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a>"&lt;/tr&gt;";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> "&lt;/table&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog::OnModelSizeChanged()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;resizeColumnsToContents();<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;resizeRowsToContents();<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;update();<br/>
&nbsp;&nbsp;ui-&gt;table-&gt;repaint();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set height<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> scrollbar_height <a href="CppOperatorAssign.htm">=</a> 16;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ui-&gt;table-&gt;horizontalHeader()-&gt;height()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (2 * ui-&gt;table-&gt;frameWidth())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> scrollbar_height;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> ui-&gt;table-&gt;model()-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height <a href="CppOperatorPlusAssign.htm">+=</a> ui-&gt;table-&gt;rowHeight(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setMinimumHeight(height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setMaximumHeight(height);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> FOUND_OUT_HOW_THIS_WORKS_CORRECTLY_782346928497284639876487987698742362571101928364<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set width<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> scrollbar_width <a href="CppOperatorAssign.htm">=</a> 100; <a href="CppComment.htm">//</a>0; <a href="CppComment.htm">//</a>16;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ui-&gt;table-&gt;verticalHeader()-&gt;<a href="CppGeometry.htm">geometry</a>().width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (2 * ui-&gt;table-&gt;frameWidth())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> scrollbar_width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> ui-&gt;table-&gt;model()-&gt;columnCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width <a href="CppOperatorPlusAssign.htm">+=</a> <a href="CppStdMax.htm">std::max</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;columnWidth(i),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;horizontalHeader()-&gt;sectionSize(i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setMinimumWidth(width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table-&gt;setMaximumWidth(width);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterexamplesdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterexamplesdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERERPARAMETERSDIALOG<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERERPARAMETERSDIALOG<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Click one of the examples<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppEmit.htm">Emit</a>Example(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the ComboBox display naught<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetShowNoExample();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Never <b><a href="CppEmit.htm">emit</a></b> a <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> [1]<br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example * <b><a href="CppConst.htm">const</a></b> example)&gt; m_signal_example;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog *ui;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a> [1] Don't put a <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> in a <a href="CppSignal.htm">signal</a> as it will be<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>-ed by the MOC:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> <b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::qt_<b><a href="CppStatic.htm">static</a></b>_metacall(<a href="CppQObject.htm">QObject</a> *_o, QMetaObject::Call _c, <b><a href="CppInt.htm">int</a></b> _id, <b><a href="CppVoid.htm">void</a></b> **_a)<br/>
<a href="CppComment.htm">//</a> {<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> (_c <a href="CppOperatorEqual.htm">==</a> QMetaObject::InvokeMeta<a href="CppMemberFunction.htm">Member function</a>) {<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q_ASSERT(<b><a href="CppStatic.htm">static</a></b>MetaObject.cast(_o));<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog *_t <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog *&gt;(_o);<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppSwitch.htm">switch</a></b> (_id) {<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCase.htm">case</a></b> 0: _t-&gt;SetExample((*<b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>&lt; <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt;(*)&gt;(_a[1]))); <b><a href="CppBreak.htm">break</a></b>;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>...<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDefault.htm">default</a></b>: ;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
<a href="CppComment.htm">//</a> }<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERERPARAMETERSDIALOG<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterexamplesdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterexamplesdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>examplesdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppFunction.htm">function</a>al.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPushButton.htm">QPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="CppKalmanFilter.htm">kalmanfilter</a>examplesdialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_example{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;layout());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExamples().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExamples()[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExamples()[i]-&gt;GetTitle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i) <a href="CppOperatorPlus.htm">+</a> ". " <a href="CppOperatorPlus.htm">+</a> title;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box-&gt;addItem(<a href="CppQString.htm">QString</a>(text.c_str()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog::~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog::<a href="CppEmit.htm">Emit</a>Example(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExample(index);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example * <b><a href="CppConst.htm">const</a></b> p <a href="CppOperatorAssign.htm">=</a> example.release();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;m_signal_example(p);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max_index <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExamples().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>max_index; <a href="CppOperatorIncrement.htm">++</a>i) { d.<a href="CppEmit.htm">Emit</a>Example(i); }<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog::on_button_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box-&gt;currentIndex() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> ui-&gt;box-&gt;currentIndex();<br/>
&nbsp;&nbsp;<a href="CppEmit.htm">Emit</a>Example(index);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog::on_box_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;button-&gt;setEnabled(index <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog::SetShowNoExample()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box-&gt;setCurrentIndex(-1);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterexperimentdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterexperimentdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTEREXPERIMENTDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTEREXPERIMENTDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qwt_plot.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>examplesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtwhitenoisesystemparametersdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog is a Facade <b><a href="CppFor.htm">for</a></b><br/>
<a href="CppComment.htm">///</a>the <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment parameters<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Click on an example<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ClickExample(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the dialog on which an predefined example can be selected<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog * GetExamplesDialog() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog * GetExamplesDialog();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get dialog to set up a <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog * GetFilterDialog() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_filter_dialog; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the dialog to set the white noise system parameters with<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog * GetNoiseParametersDialog() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_noise_parameters_dialog; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog * GetNoiseParametersDialog()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> m_noise_parameters_dialog; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the number of <a href="CppTime.htm">time</a>steps in the sim<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOf<a href="CppTime.htm">Time</a>steps() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Load parameters from a file in DokuWiki format<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> LoadFromDokuWiki(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Save the current parameters to a file in DokuWiki format<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SaveToDokuWiki(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the number of <a href="CppTime.htm">time</a>steps in the sim<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetNumberOf<a href="CppTime.htm">Time</a>steps(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>steps);<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Don't put a <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> in a <a href="CppSignal.htm">signal</a> [1]<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetExample(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example * <b><a href="CppConst.htm">const</a></b> example);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Called when the user changes to a different type of <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type new_type);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Dialog with buttons to load a preset example<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog * <b><a href="CppConst.htm">const</a></b> m_examples_dialog;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The dialog to set up a <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog * <b><a href="CppConst.htm">const</a></b> m_filter_dialog;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This model is intended to share with all other parameter <b><a href="CppClass.htm">classes</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; m_model;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The dialog to set the white noise system parameters with<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog * <b><a href="CppConst.htm">const</a></b> m_noise_parameters_dialog;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameter type and its corresponding dialog, specific <b><a href="CppFor.htm">for</a></b> an Experiment<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog *&gt; m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check the internal state of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsValid() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_n_<a href="CppTime.htm">time</a>steps_valueChanged(<b><a href="CppInt.htm">int</a></b> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_load_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_add_state_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_remove_state_clicked();<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a> [1] Don't put a <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a> in a <a href="CppSignal.htm">signal</a> as it will be<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>-ed by the MOC:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> <b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::qt_<b><a href="CppStatic.htm">static</a></b>_metacall(<a href="CppQObject.htm">QObject</a> *_o, QMetaObject::Call _c, <b><a href="CppInt.htm">int</a></b> _id, <b><a href="CppVoid.htm">void</a></b> **_a)<br/>
<a href="CppComment.htm">//</a> {<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> (_c <a href="CppOperatorEqual.htm">==</a> QMetaObject::InvokeMeta<a href="CppMemberFunction.htm">Member function</a>) {<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q_ASSERT(<b><a href="CppStatic.htm">static</a></b>MetaObject.cast(_o));<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog *_t <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog *&gt;(_o);<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppSwitch.htm">switch</a></b> (_id) {<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCase.htm">case</a></b> 0: _t-&gt;SetExample((*<b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>&lt; <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt;(*)&gt;(_a[1]))); <b><a href="CppBreak.htm">break</a></b>;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>...<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppDefault.htm">default</a></b>: ;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
<a href="CppComment.htm">//</a> }<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> <a href="CppAdd.htm">Add</a>itionally, <a href="CppInclude.htm">#include</a> the <a href="CppKalmanFilter.htm">KalmanFilter</a>Example <a href="CppHeaderFile.htm">header file</a> in the dialog its <a href="CppHeaderFile.htm">header file</a>:<br/>
<a href="CppComment.htm">//</a> I have the hypothesis that<br/>
<a href="CppComment.htm">//</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTEREXPERIMENTDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterexperimentdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterexperimentdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppFunction.htm">function</a>al.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQMessageBox.htm">QMessageBox</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>types.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>model.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>examplesdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtstandard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorStringModel.htm">qtstdvectorstringmodel</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtsteadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtwhitenoisesystemparametersdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtwhitenoisesystemparametersdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtypes.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_examples_dialog{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_filter_dialog{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog(model)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_model{model},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_noise_parameters_dialog{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog(model)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples_dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_filter_dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_noise_parameters_dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;layout());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>layout()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>("Example settings"));<br/>
&nbsp;&nbsp;layout()-&gt;addWidget(m_examples_dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; v <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::GetAll();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Skip the <a href="CppKalmanFilter.htm">KalmanFilter</a>ParameterType <a href="CppInstance.htm">instances</a> (these are done by <a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Can<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameter(type))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Can<a href="CppConvert.htm">Convert</a>ToWhiteNoiseSystemParameter(type))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog * <b><a href="CppConst.htm">const</a></b> dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToName(type),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToDescription(type),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_model-&gt;Find(type)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_parameters.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(type,dialog));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> to dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;layout());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;layout()-&gt;addWidget(dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All parameters must be in");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;layout()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>("<a href="CppKalmanFilter.htm">Kalman filter</a> parameters"));<br/>
&nbsp;&nbsp;layout()-&gt;addWidget(m_filter_dialog);<br/>
&nbsp;&nbsp;layout()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppQLabel.htm">QLabel</a>("White noise system parameters"));<br/>
&nbsp;&nbsp;layout()-&gt;addWidget(m_noise_parameters_dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_noise_parameters_dialog);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples_dialog);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect clicking on the example buttons to setting (and showing) these<br/>
&nbsp;&nbsp;m_examples_dialog-&gt;m_signal_example.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::SetExample,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>When the model changes its number of <a href="CppTime.htm">time</a>steps, also display <b><a href="CppThis.htm">this</a></b> <b><a href="CppNew.htm">new</a></b> number<br/>
&nbsp;&nbsp;m_model-&gt;m_signal_number_of_<a href="CppTime.htm">time</a>steps_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::SetNumberOf<a href="CppTime.htm">Time</a>steps,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make the white noise system parameters follow the possible tab changes in parameters<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetFilterDialog()-&gt;m_signal_kalman_filter_type_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_filter_dialog,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_kalman_filter_type_changed(<a href="CppKalmanFilter.htm">KalmanFilter</a>Type)),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<a href="CppKalmanFilter.htm">KalmanFilter</a>Type)));<br/>
<br/>
&nbsp;&nbsp;ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;setValue(5);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_examples_dialog;<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_filter_dialog;<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_noise_parameters_dialog;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::ClickExample(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_examples_dialog-&gt;<a href="CppEmit.htm">Emit</a>Example(i);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog * <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::GetExamplesDialog() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples_dialog);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_examples_dialog;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog * <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::GetExamplesDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_examples_dialog);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_examples_dialog;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::GetNumberOf<a href="CppTime.htm">Time</a>steps() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;value();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::IsValid() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps() <a href="CppOperatorNotEqual.htm">!=</a> m_model-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Different number of <a href="CppTime.htm">time</a>steps");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetNoiseParametersDialog()-&gt;GetWhiteNoiseSystemType()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Different white noise system type");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetFilterDialog()-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a> m_model-&gt;Create<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetType())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Different <a href="CppKalmanFilter.htm">Kalman Filter</a> types");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::ToStr(GetFilterDialog()-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::ToStr(m_model-&gt;Create<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetType()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::LoadFromDokuWiki(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()));<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> in(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdGetline.htm">std::getline</a>(in,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;text <a href="CppOperatorPlusAssign.htm">+=</a> s <a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_model-&gt;FromDokuWiki(text);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(m_model-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetExamplesDialog()-&gt;SetShowNoExample();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::on_box_n_<a href="CppTime.htm">time</a>steps_valueChanged(<b><a href="CppInt.htm">int</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;m_model-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(arg1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Don't check here: <b><a href="CppThis.htm">this</a></b> value might be set in a sequence of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> SetNumberOf<a href="CppTime.htm">Time</a>steps <a href="CppOperatorMinus.htm">-</a> Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type <a href="CppOperatorMinus.htm">-</a> SetWhiteNoiseSystemType<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Everywhere in between <b><a href="CppThis.htm">this</a></b> sequence, <b><a href="CppThis.htm">this</a></b> dialog is in an invalid state<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::on_button_add_state_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the state names<br/>
&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> abstract_model<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_model-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abstract_model);<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>NamesModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppState.htm">State</a>NamesModel*&gt;(abstract_model);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> model-&gt;GetRawData();<br/>
&nbsp;&nbsp;v.push_back("?");<br/>
&nbsp;&nbsp;model-&gt;SetRawData(v); <a href="CppComment.htm">//</a>Set the data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;GetRawData() <a href="CppOperatorEqual.htm">==</a> v);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::on_button_remove_state_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the state names<br/>
&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> abstract_model<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_model-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abstract_model);<br/>
&nbsp;&nbsp;<a href="CppState.htm">State</a>NamesModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppState.htm">State</a>NamesModel*&gt;(abstract_model);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> model-&gt;GetRawData();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;v.pop_back();<br/>
&nbsp;&nbsp;model-&gt;SetRawData(v); <a href="CppComment.htm">//</a>Set the data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;GetRawData() <a href="CppOperatorEqual.htm">==</a> v);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::on_button_load_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_save-&gt;currentIndex() <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQMessageBox.htm">QMessageBox</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.setText("Loading from HTML not implemented");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.exec();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filter;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (ui-&gt;box_save-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>DokuWiki<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter <a href="CppOperatorAssign.htm">=</a> "*.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>HTML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter <a href="CppOperatorAssign.htm">=</a> "*.htm";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> filename <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getOpenFileName(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Please select a file to load the parameters from",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename.isEmpty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (ui-&gt;box_save-&gt;currentIndex())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>DokuWiki<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;LoadFromDokuWiki(filename.toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>HTML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Not implemented");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::SaveToDokuWiki(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_model-&gt;ToDokuWiki();<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> text;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filter;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (ui-&gt;box_save-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>DokuWiki<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter <a href="CppOperatorAssign.htm">=</a> "*.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>HTML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter <a href="CppOperatorAssign.htm">=</a> "*.htm";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> filename <a href="CppOperatorAssign.htm">=</a> <a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Please select a file to save the parameters to",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filter.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!filename.isEmpty())<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (ui-&gt;box_save-&gt;currentIndex())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppComment.htm">//</a>DokuWiki<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SaveToDokuWiki(filename.toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppComment.htm">//</a>HTML<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_model-&gt;ToHtml();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.toStdString().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::SetExample(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example * <b><a href="CppConst.htm">const</a></b> example_raw)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example_raw);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; example(example_raw);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model);<br/>
<br/>
&nbsp;&nbsp;m_model-&gt;SetExample(example);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt; experiment <a href="CppOperatorAssign.htm">=</a> m_model-&gt;CreateExperiment();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;Get<a href="CppState.htm">State</a>Names() <a href="CppOperatorEqual.htm">==</a> example-&gt;Get<a href="CppState.htm">State</a>Names());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetType());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; p_experiment <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p_experiment);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; p_example<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p_example);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual( p_experiment-&gt;GetControl(), p_example-&gt;GetControl() ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::Is<a href="CppAbout.htm">About</a>Equal(*p_experiment,*p_example));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type new_type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_filter_dialog-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type() <a href="CppOperatorNotEqual.htm">!=</a> new_type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_filter_dialog-&gt;Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(new_type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_filter_dialog-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type() <a href="CppOperatorEqual.htm">==</a> new_type);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_filter_dialog-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Type() <a href="CppOperatorEqual.htm">==</a> new_type);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;Create<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> new_type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Don't check here: <b><a href="CppThis.htm">this</a></b> value might be set in a sequence of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> SetNumberOf<a href="CppTime.htm">Time</a>steps <a href="CppOperatorMinus.htm">-</a> Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type <a href="CppOperatorMinus.htm">-</a> SetWhiteNoiseSystemType<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Everywhere in between <b><a href="CppThis.htm">this</a></b> sequence, <b><a href="CppThis.htm">this</a></b> dialog is in an invalid state<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::SetNumberOf<a href="CppTime.htm">Time</a>steps(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>steps)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a>steps &gt; 0);<br/>
&nbsp;&nbsp;ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;setValue(<a href="CppTime.htm">time</a>steps);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetNumberOf<a href="CppTime.htm">Time</a>steps() <a href="CppOperatorEqual.htm">==</a> <a href="CppTime.htm">time</a>steps);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps() <a href="CppOperatorEqual.htm">==</a> <a href="CppTime.htm">time</a>steps);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Don't check here: <b><a href="CppThis.htm">this</a></b> value might be set in a sequence of<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> SetNumberOf<a href="CppTime.htm">Time</a>steps <a href="CppOperatorMinus.htm">-</a> Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type <a href="CppOperatorMinus.htm">-</a> SetWhiteNoiseSystemType<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Everywhere in between <b><a href="CppThis.htm">this</a></b> sequence, <b><a href="CppThis.htm">this</a></b> dialog is in an invalid state<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(IsValid());<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::Test()")<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog d(model);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog&gt; d(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog(model)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test DokuWiki conversion <b><a href="CppFor.htm">for</a></b> all <a href="CppKalmanFilter.htm">Kalman filter</a> types with empty parameters")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type&gt; kalman_filter_types <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Types::GetAllTypes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_kalman_filter_types <a href="CppOperatorAssign.htm">=</a> kalman_filter_types.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_kalman_filter_types; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type kalman_filter_type <a href="CppOperatorAssign.htm">=</a> kalman_filter_types[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (kalman_filter_type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Fixed lag smoother not supported yet");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(kalman_filter_type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> model-&gt;ToDokuWiki();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> model-&gt;ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorNotEqual.htm">!=</a> model-&gt;ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;FromDokuWiki(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> model-&gt;ToDokuWiki());<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;WhiteNoiseSystemType&gt; white_noise_system_types <a href="CppOperatorAssign.htm">=</a> WhiteNoiseSystemTypes::GetAllTypes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_white_noise_system_types <a href="CppOperatorAssign.htm">=</a> white_noise_system_types.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_white_noise_system_types; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType white_noise_system_type <a href="CppOperatorAssign.htm">=</a> white_noise_system_types[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(kalman_filter_type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;GetNoiseParametersDialog()-&gt;SetWhiteNoiseSystemType(white_noise_system_type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> model-&gt;ToDokuWiki();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> model-&gt;ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorNotEqual.htm">!=</a> model-&gt;ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;FromDokuWiki(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> model-&gt;ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test backwards compatibility in reading/writing DokuWiki")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> file(":/files/0.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(file.size() &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_filename <a href="CppOperatorAssign.htm">=</a> "tmp_0.txt";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.copy(temp_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(temp_filename.c_str()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;LoadFromDokuWiki(temp_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test read/write of examples");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt; &gt; examples<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example::CreateExamples();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cnt <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt;&amp; example: examples)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetExample(example);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;SaveToDokuWiki(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(cnt) <a href="CppOperatorPlus.htm">+</a> ".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>cnt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> model-&gt;ToDokuWiki();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(999999999);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorNotEqual.htm">!=</a> model-&gt;ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;FromDokuWiki(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorNotEqual.htm">!=</a> model-&gt;ToDokuWiki())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(model-&gt;ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> model-&gt;ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test all white noise system types")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> d-&gt;m_noise_parameters_dialog-&gt;GetUi()-&gt;box_white_noise_system_type-&gt;count();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(WhiteNoiseSystemType::n_types));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;m_noise_parameters_dialog-&gt;GetUi()-&gt;box_white_noise_system_type-&gt;setCurrentIndex(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystemParameters());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog::Test()")<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterexperimentmodel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterexperimentmodel.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTEREXPERIMENTMODEL_H<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTEREXPERIMENTMODEL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;QAbstractTableModel&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQObject.htm">QObject</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>type.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>example.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<a href="CppComment.htm">///</a>Contains all parameters and QAbstractTableModels <b><a href="CppFor.htm">for</a></b> these<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel : <b><a href="CppPublic.htm">public</a></b> <a href="CppQObject.htm">QObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel(<a href="CppQObject.htm">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the optimal estimated Kalman gain<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CalculateOptimalEstimatedKalmanGain();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt; CreateExperiment() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; Create<a href="CppKalmanFilter.htm">KalmanFilter</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppKalmanFilter.htm">Kalman filter</a> its parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; Create<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a white noise system<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt; CreateWhiteNoiseSystem() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a white noise system parameter set<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt; CreateWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the model <b><a href="CppFor.htm">for</a></b> a parameter<br/>
&nbsp;&nbsp;QAbstractTableModel * Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QAbstractTableModel * Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read the data from DokuWiki markup language<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> FromDokuWiki(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read the data from HTML<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Not (yet?) implemented<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> FromHtml(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the context<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetContext() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_context; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the number of <a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOf<a href="CppTime.htm">Time</a>steps() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_number_of_<a href="CppTime.htm">time</a>steps; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the context<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetContext(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; context);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set an example parameter set<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetExample(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt;&amp; example);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the type of <a href="CppKalmanFilter.htm">Kalman filter</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the estimated lag of a (possibly lagged) white noise system<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetLagEstimated(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the lag (of a lagged white noise system) in number of <a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetLagReal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the number of <a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetNumberOf<a href="CppTime.htm">Time</a>steps(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the type of white noise system<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWhiteNoiseSystemType(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the data to DokuWiki markup language<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToDokuWiki() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> the data to HTML<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToHtml() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the context changes<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>)&gt; m_signal_context_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the <a href="CppKalmanFilter.htm">Kalman filter</a> type changes<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<a href="CppKalmanFilter.htm">KalmanFilter</a>Type)&gt; m_signal_kalman_filter_type_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the white noise system type changes<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppInt.htm">int</a></b>)&gt; m_signal_number_of_<a href="CppTime.htm">time</a>steps_changed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the white noise system type changes<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(WhiteNoiseSystemType)&gt; m_signal_white_noise_system_type_changed;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the state names are changed, let all other models have their headers updated<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppState.htm">State</a>NamesChanged();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The HTML description of the context of <b><a href="CppThis.htm">this</a></b> experiment<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_context;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppKalmanFilter.htm">Kalman filter</a> type<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type m_kalman_filter_type;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The lag estimated to be in a white noise system<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_lag_estimated;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real lag (in a lagged white noise system)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_lag_real;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The map with all QAbstractTableModels<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; m_models;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of <a href="CppTime.htm">time</a>steps desired<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_number_of_<a href="CppTime.htm">time</a>steps;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppVersion.htm">version</a> number<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0: <a href="CppVersion.htm">version</a> before <b><a href="CppThis.htm">this</a></b> numbering existed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/1: since 2013-06-28<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2: since 2013-07-02<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_<a href="CppVersion.htm">version</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current <a href="CppVersion.htm">version</a> number, the <a href="CppVersion.htm">version</a> of the output <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> now produces<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_<a href="CppVersion.htm">version</a>_current;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The white noise system type<br/>
&nbsp;&nbsp;WhiteNoiseSystemType m_white_noise_system_type;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the map<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; CreateMap();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create fixed-lag smoother <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; CreateFixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create standard <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; CreateStandard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create standard white noise system parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;StandardWhiteNoiseSystemParameters&gt; CreateStandardWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create gaps-filled white noise system parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt; CreateGapsFilledWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create lagged white noise system parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt; CreateLaggedWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create steady-state <a href="CppKalmanFilter.htm">Kalman filter</a> parameters<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; CreateSteady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a model suiting a parameter<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> QAbstractTableModel * CreateModel(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsValid() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the text holds an HTML context, set <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> to hold the same value<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ReadContext(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the string holds a <a href="CppKalmanFilter.htm">KalmanFilter</a>Type, set <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> to hold the same value<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Read<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Search a string <b><a href="CppFor.htm">for</a></b> a substring, check the end of the line <b><a href="CppFor.htm">for</a></b> an <b><a href="CppInt.htm">int</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Read(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; line,<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; sub, <b><a href="CppInt.htm">int</a></b>&amp; value_to_change);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Search a text <b><a href="CppFor.htm">for</a></b> a name (which marks the start of a table), write the rest of the table to the model<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Read(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; text,<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name, QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the string holds a WhiteNoiseSystemType, set <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> to hold the same value<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ReadWhiteNoiseSystemType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSeperateString.htm">SeperateString</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&amp; rhs);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTEREXPERIMENTMODEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtkalmanfilterexperimentmodel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtkalmanfilterexperimentmodel.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QAbstractTableModel&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQMessageBox.htm">QMessageBox</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "fixedlagsmoother<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "gapsfilledwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>factory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>parametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>types.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>model.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtype.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtypes.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppConvert.htm">Convert</a>ToUblas<a href="CppMatrix.htm">Matrix</a><a href="CppDouble.htm">Double</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w(v.size1(),v.size2());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> v.size1();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> v.size2();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; v.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; v.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; w.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; w.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(v(row,col)); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBoostBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;) { <a href="CppAssert.htm">assert</a>(!"Should not get here"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w(row,col) <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(v(row,col));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppConvert.htm">Convert</a>ToUblasVectorInt(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w(v.size1());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> v.size1();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size2() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; v.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; v.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v(row,col)); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBoostBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;) { <a href="CppAssert.htm">assert</a>(!"Should not get here"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w(row) <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v(row,col));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppConvert.htm">Convert</a>ToUblasVector<a href="CppDouble.htm">Double</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w(v.size1());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> v.size1();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size2() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; v.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; v.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(v(row,col)); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBoostBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;) { <a href="CppAssert.htm">assert</a>(!"Should not get here"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w(row) <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(v(row,col));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppConvert.htm">Convert</a>ToVectorString(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w(v.size1());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> v.size1();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size2() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; v.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; v.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; w.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[row] <a href="CppOperatorAssign.htm">=</a> v(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::m_<a href="CppVersion.htm">version</a>_current <a href="CppOperatorAssign.htm">=</a> 2;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel(<a href="CppQObject.htm">QObject</a> *parent)<br/>
 : <a href="CppQObject.htm">QObject</a>(parent),<br/>
&nbsp;&nbsp; m_signal_context_changed{},<br/>
&nbsp;&nbsp; m_signal_kalman_filter_type_changed{},<br/>
&nbsp;&nbsp; m_signal_number_of_<a href="CppTime.htm">time</a>steps_changed{},<br/>
&nbsp;&nbsp; m_signal_white_noise_system_type_changed{},<br/>
&nbsp;&nbsp; m_context{},<br/>
&nbsp;&nbsp; m_kalman_filter_type(<a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard),<br/>
&nbsp;&nbsp; m_lag_estimated(0),<br/>
&nbsp;&nbsp; m_lag_real(0),<br/>
&nbsp;&nbsp; m_models(CreateMap()),<br/>
&nbsp;&nbsp; m_number_of_<a href="CppTime.htm">time</a>steps(0),<br/>
&nbsp;&nbsp; m_<a href="CppVersion.htm">version</a>(m_<a href="CppVersion.htm">version</a>_current),<br/>
&nbsp;&nbsp; m_white_noise_system_type(WhiteNoiseSystemType::standard)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names)-&gt;rowCount();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> n_rows <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : n_rows;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Create<a href="CppKalmanFilter.htm">KalmanFilter</a>() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can create an empty <a href="CppKalmanFilter.htm">Kalman filter</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CreateWhiteNoiseSystem() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can create an empty white noise system");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CreateExperiment() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can create an empty experiment");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let a state name change result in all models changing their headers<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> m <a href="CppOperatorAssign.htm">=</a> Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m,<a href="CppSignalMacro.htm">SIGNAL</a>(dataChanged(<a href="CppQModelIndex.htm">QModelIndex</a>,<a href="CppQModelIndex.htm">QModelIndex</a>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(On<a href="CppState.htm">State</a>NamesChanged()));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; m;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::GetAll();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> CreateModel(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(type,model));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CalculateOptimalEstimatedKalmanGain()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> initial_covariance_estimate <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> InitialCovarianceEstimateModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> estimated_measurement_noise <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> EstimatedMeasurementNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> observation <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ObservationModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> state_transition <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>TransitionModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters::CalculateOptimalKalmanGain(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;EstimatedOptimalKalmanGainModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(m);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateExperiment() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt; experiment;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps_desired <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_number_of_<a href="CppTime.htm">time</a>steps;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps_desired &gt; 0); <a href="CppComment.htm">//</a>Can be zero<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> InputModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input)<br/>
&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; kalman_filter <a href="CppOperatorAssign.htm">=</a> Create<a href="CppKalmanFilter.htm">KalmanFilter</a>();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!kalman_filter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!experiment);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> experiment;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter-&gt;GetParameters());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(input.size() <a href="CppOperatorEqual.htm">==</a> kalman_filter-&gt;GetParameters()-&gt;GetInitial<a href="CppState.htm">State</a>Estimate().size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>NamesModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names)<br/>
&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(input.size() <a href="CppOperatorEqual.htm">==</a> state_names.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt; white_noise_system <a href="CppOperatorAssign.htm">=</a> CreateWhiteNoiseSystem();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!white_noise_system)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> experiment;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorEqual.htm">==</a> white_noise_system-&gt;PeekAtReal<a href="CppState.htm">State</a>().size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter-&gt;GetParameters()-&gt;GetControl(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system-&gt;GetParameters()-&gt;GetControl())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Parameters obtained from <a href="CppKalmanFilter.htm">Kalman filter</a> and white noise system must match");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter-&gt;GetParameters()-&gt;Get<a href="CppState.htm">State</a>Transition(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system-&gt;GetParameters()-&gt;Get<a href="CppState.htm">State</a>Transition())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Parameters obtained from <a href="CppKalmanFilter.htm">Kalman filter</a> and white noise system must match");<br/>
<br/>
&nbsp;&nbsp;experiment.reset(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppTime.htm">time</a>steps_desired,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_context)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> experiment;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateFixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; standard_parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> CreateStandard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> estimated_lag <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_lag_estimated;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard_parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;estimated_lag<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Create<a href="CppKalmanFilter.htm">KalmanFilter</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; parameters <a href="CppOperatorAssign.htm">=</a> Create<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>&gt; kalman_filter <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Factory::Create(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kalman_filter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> kalman_filter-&gt;GetType());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> kalman_filter;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Create<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; parameters;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_kalman_filter_type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters <a href="CppOperatorAssign.htm">=</a> CreateStandard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters <a href="CppOperatorAssign.htm">=</a> CreateSteady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::fixed_lag_smoother:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters <a href="CppOperatorAssign.htm">=</a> CreateFixedLagSmoother<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented <a href="CppKalmanFilter.htm">Kalman filter</a> type");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> m_kalman_filter_type);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> parameters;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateStandard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> control <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ControlModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> estimated_measurement_noise <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> EstimatedMeasurementNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> estimated_process_noise_covariance <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> EstimatedProcessNoiseCovarianceModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> initial_covariance_estimate <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> InitialCovarianceEstimateModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> initial_state_estimate <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Initial<a href="CppState.htm">State</a>EstimateModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ObservationModel*&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation)));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> observation <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ObservationModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> state_transition <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>TransitionModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> initial_state_estimate.size();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppComment.htm">//</a>Inevitable <b><a href="CppFor.htm">for</a></b> <a href="CppStdSize_t.htm">std::size_t</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> control.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> control.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> observation.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> observation.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> state_transition.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> state_transition.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> initial_state_estimate.size());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateSteady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> control <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ControlModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> estimated_optimal_kalman_gain <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> EstimatedOptimalKalmanGainModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> initial_state_estimate <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Initial<a href="CppState.htm">State</a>EstimateModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> observation <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ObservationModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> state_transition <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>TransitionModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;estimated_optimal_kalman_gain,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateLaggedWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> control <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ControlModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> initial_state_real <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Initial<a href="CppState.htm">State</a>RealModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> real_measurement_noise <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> RealMeasurementNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> real_process_noise <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> RealProcessNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> state_transition <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>TransitionModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> LaggedWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state_real,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_lag_real,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::lagged);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
QAbstractTableModel * <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateModel(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> ControlModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> EstimatedMeasurementNoiseModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_optimal_kalman_gain:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> EstimatedOptimalKalmanGainModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> EstimatedProcessNoiseCovarianceModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> InitialCovarianceEstimateModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> Initial<a href="CppState.htm">State</a>EstimateModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> Initial<a href="CppState.htm">State</a>RealModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MeasurementFrequencyModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> MeasurementFrequencyModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>model-&gt;SetRawData( <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 1 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(model-&gt;GetRawData().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(model-&gt;GetRawData()(0) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Measured frequencies go from 1 to infinity, where 1 is the <b><a href="CppDefault.htm">default</a></b> value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetRange(1,<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::max(),1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> model;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> RealMeasurementNoiseModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> RealProcessNoiseModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> InputModel("t");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> ObservationModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>NamesModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppState.htm">State</a>TransitionModel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog::ToModel");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog::ToModel");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateGapsFilledWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> control <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ControlModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Initial<a href="CppState.htm">State</a>RealModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real)));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> initial_state_real <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Initial<a href="CppState.htm">State</a>RealModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> MeasurementFrequencyModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency)));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> measurement_frequency <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> MeasurementFrequencyModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> real_measurement_noise <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> RealMeasurementNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> real_process_noise <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> RealProcessNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> state_transition <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>TransitionModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> GapsFilledWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state_real,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measurement_frequency,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::gaps_filled);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::StandardWhiteNoiseSystemParameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateStandardWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> control <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> ControlModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Initial<a href="CppState.htm">State</a>RealModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real)));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> initial_state_real <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> Initial<a href="CppState.htm">State</a>RealModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> real_measurement_noise <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> RealMeasurementNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> real_process_noise <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> RealProcessNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> state_transition <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppState.htm">State</a>TransitionModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;StandardWhiteNoiseSystemParameters&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StandardWhiteNoiseSystemParameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial_state_real,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::standard);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystem&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateWhiteNoiseSystem() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt; parameters<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> CreateWhiteNoiseSystemParameters();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;m_white_noise_system_type <a href="CppOperatorEqual.htm">==</a> parameters-&gt;GetType());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystem&gt; my_system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> WhiteNoiseSystemFactory::Create(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_system);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_system-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> parameters-&gt;GetType());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> my_system;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemParameters&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::CreateWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;WhiteNoiseSystemParameters&gt; parameters;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_white_noise_system_type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::gaps_filled:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters <a href="CppOperatorAssign.htm">=</a> CreateGapsFilledWhiteNoiseSystemParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::lagged:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters <a href="CppOperatorAssign.htm">=</a> CreateLaggedWhiteNoiseSystemParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters <a href="CppOperatorAssign.htm">=</a> CreateStandardWhiteNoiseSystemParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented white noise system type");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> m_white_noise_system_type);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> parameters;<br/>
}<br/>
<br/>
QAbstractTableModel * <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Find(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calls the <b><a href="CppConst.htm">const</a></b> <a href="CppVersion.htm">version</a> of Find<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>To avoid duplication in <b><a href="CppConst.htm">const</a></b> and non-<a href="CppConstMemberFunction.htm">const member function</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> * <a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C<a href="CppOperatorIncrement.htm">++</a> coding standards: 101 rules, guidelines,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; and best practices. 2005. ISBN: 0-32-111358-6. Chapter 94: 'Avoid casting away <b><a href="CppConst.htm">const</a></b>', item '<a href="CppException.htm">Exception</a>s'<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;QAbstractTableModel *&gt;(<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&amp;&gt;(*<b><a href="CppThis.htm">this</a></b>).Find(type));<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> QAbstractTableModel * <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Find(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_models.find(type) <a href="CppOperatorNotEqual.htm">!=</a> m_models.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> (*m_models.find(type)).second;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> model;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::FromDokuWiki(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; lines <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(text,'\n');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!lines.empty());<br/>
<br/>
&nbsp;&nbsp;m_<a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Only <a href="CppVersion.htm">version</a> 0 does not change the <a href="CppVersion.htm">version</a> number<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_lines <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(lines.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> line=0; line<a href="CppOperatorNotEqual.htm">!=</a>n_lines; <a href="CppOperatorIncrement.htm">++</a>line)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; line_str <a href="CppOperatorAssign.htm">=</a> lines[line];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Have to <b><a href="CppDo.htm">do</a></b> manually as <a href="CppBoostRegex.htm">Boost.Regex</a> its boost::regex_replace<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>does not <a href="CppLink.htm">link</a> under GCC 4.4.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Read<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(line_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Read(line_str,"Lag estimated",m_lag_estimated);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Read(line_str,"Lag real",m_lag_real);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Read(line_str,"Number of <a href="CppTime.htm">time</a>steps",m_number_of_<a href="CppTime.htm">time</a>steps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Read(line_str,"<a href="CppVersion.htm">Version</a>",m_<a href="CppVersion.htm">version</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ReadWhiteNoiseSystemType(line_str);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;ReadContext(lines);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Go through all m_models<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt;::const_iterator Const<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Const<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> m_models.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (Const<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m_models.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; p <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type <a href="CppOperatorAssign.htm">=</a> p.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> p.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppVersion.htm">version</a> 0 did not support measurement_frequency<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppVersion.htm">version</a> <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToName(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read(lines,name,model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppVersion.htm">version</a> <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names)-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>conversion from '<a href="CppStd.htm">std</a>::_Rb_tree_const_iterator&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType, QAbstractTableModel*&gt; &gt;'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>to non-scalar type '<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::FromDokuWiki(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)::<a href="CppIterator.htm">Iterator</a>' requested<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> iter <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_models.find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter <a href="CppOperatorNotEqual.htm">!=</a> m_models.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QAbstractItemModel * <b><a href="CppConst.htm">const</a></b> abstract_model <a href="CppOperatorAssign.htm">=</a> iter-&gt;second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abstract_model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>UblasVectorIntModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>UblasVectorIntModel *&gt;(abstract_model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetRange(1,<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::max(),1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetRawData( <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>Int( <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n_rows,1) ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppVersion.htm">version</a> <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppVersion.htm">version</a> 1 did not save/load a context from file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetContext("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> 2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppVersion.htm">version</a> works OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> new_str <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;ToDokuWiki();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel dummy_model;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dummy_model.FromDokuWiki(new_str);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(new_str <a href="CppOperatorEqual.htm">==</a> dummy_model.ToDokuWiki());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppVersion.htm">version</a> <a href="CppOperatorEqual.htm">==</a> m_<a href="CppVersion.htm">version</a>_current);<br/>
<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::IsValid() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_lag_estimated &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Estimated lag smaller than zero");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_lag_real &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Real lag smaller than zero");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_number_of_<a href="CppTime.htm">time</a>steps &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Number of <a href="CppTime.htm">time</a>steps smaller than zero");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_models.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("No tables in m_models");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppVersion.htm">version</a> <a href="CppOperatorNotEqual.htm">!=</a> m_<a href="CppVersion.htm">version</a>_current)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_<a href="CppVersion.htm">version</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_<a href="CppVersion.htm">version</a>_current);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Model not updated to latest <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> m_models.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m_models.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; p <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> p.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (table <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Un<a href="CppInitialize.htm">initialize</a>d QAbstractTableModel");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type <a href="CppOperatorAssign.htm">=</a> p.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (type <a href="CppOperatorEqual.htm">==</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Use of n_parameters");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows_expected <a href="CppOperatorAssign.htm">=</a> Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names)-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> n_rows_expected <a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: (<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::Is<a href="CppMatrix.htm">Matrix</a>(type) ? n_rows_expected : 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows_found <a href="CppOperatorAssign.htm">=</a> Find(type)-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols_found <a href="CppOperatorAssign.htm">=</a> Find(type)-&gt;columnCount();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_rows_expected <a href="CppOperatorNotEqual.htm">!=</a> n_rows_found)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n_rows_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n_rows_found);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Number of rows unexpected");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_cols_expected <a href="CppOperatorNotEqual.htm">!=</a> n_cols_found)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n_rows_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n_rows_found);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n_cols_expected);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(n_cols_found);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Number of columns unexpected");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::On<a href="CppState.htm">State</a>NamesChanged()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppState.htm">State</a>NamesModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names)<br/>
&nbsp;&nbsp;)-&gt;GetRawData();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write to all headers<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> m_models.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> m_models.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; p <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type <a href="CppOperatorAssign.htm">=</a> p.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> abstract_model <a href="CppOperatorAssign.htm">=</a> p.second;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a> * <b><a href="CppConst.htm">const</a></b> svs_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a> *&gt;(abstract_model))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToSymbol(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svs_model-&gt;SetHeaderData(title,state_names);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a> * <b><a href="CppConst.htm">const</a></b> svf_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a> *&gt;(abstract_model))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToSymbol(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svf_model-&gt;SetHeaderData(title,state_names);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> * <b><a href="CppConst.htm">const</a></b> umd_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> *&gt;(abstract_model))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;umd_model-&gt;SetHeaderData(state_names,state_names);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> * <b><a href="CppConst.htm">const</a></b> uvd_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> *&gt;(abstract_model))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToSymbol(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uvd_model-&gt;SetHeaderData(title,state_names);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>UblasVectorIntModel * <b><a href="CppConst.htm">const</a></b> uvi_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>UblasVectorIntModel *&gt;(abstract_model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(uvi_model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> title <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToSymbol(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uvi_model-&gt;SetHeaderData(title,state_names);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::ReadContext(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> begin <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(v.begin(),v.end(),"&lt;html&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (begin <a href="CppOperatorEqual.htm">==</a> v.end()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> end <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(v.begin(),v.end(),"&lt;/html&gt;");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(end <a href="CppOperatorNotEqual.htm">!=</a> v.end());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> new_context;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> line <a href="CppOperatorAssign.htm">=</a> begin;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppOperatorIncrement.htm">++</a>line; line<a href="CppOperatorNotEqual.htm">!=</a>end; <a href="CppOperatorIncrement.htm">++</a>line) <a href="CppComment.htm">//</a>Skip first HTML tag<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_context <a href="CppOperatorPlusAssign.htm">+=</a> (*line) <a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetContext(new_context.substr(0,new_context.size() <a href="CppOperatorMinus.htm">-</a> 1)); <a href="CppComment.htm">//</a>Strip \n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(m_context);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Read<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.find("<a href="CppKalmanFilter.htm">Kalman filter</a> type") <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Types::GetAllTypes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.find(<a href="CppKalmanFilter.htm">KalmanFilter</a>Types::ToStr(type)) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_kalman_filter_type <a href="CppOperatorEqual.htm">==</a> type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Read(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; text,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!text.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find begin<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> header <a href="CppOperatorAssign.htm">=</a> "^ " <a href="CppOperatorPlus.htm">+</a> name;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> begin_tmp <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (text[i].find(header) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos) { begin_tmp <a href="CppOperatorAssign.htm">=</a> i; <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(begin_tmp <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(begin_tmp &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(text.size()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> begin <a href="CppOperatorAssign.htm">=</a> begin_tmp;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate number of columns<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount.htm">std::count</a>(text[begin].begin(),text[begin].end(),'^') <a href="CppOperatorMinus.htm">-</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_cols <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_cols &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find end<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> end_tmp <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=begin; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::trim_copy(text[i]).empty()) { end_tmp <a href="CppOperatorAssign.htm">=</a> i; <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(end_tmp <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(end_tmp &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(text.size()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> end <a href="CppOperatorAssign.htm">=</a> end_tmp;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate number of rows<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> end <a href="CppOperatorMinus.htm">-</a> begin <a href="CppOperatorMinus.htm">-</a> 1; <a href="CppComment.htm">//</a>-1 <b><a href="CppFor.htm">for</a></b> header<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_rows <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_rows &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> BELIEF_RESIZE_MUST_BE_DONE_HERE_785897597850978665798458907<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> BELIEF_RESIZE_MUST_BE_DONE_HERE_785897597850978665798458907<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize model<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rows<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (model-&gt;rowCount() &lt; n_rows)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_to_add <a href="CppOperatorAssign.htm">=</a> n_rows <a href="CppOperatorMinus.htm">-</a> model-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;insertRows(0,n_to_add);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (model-&gt;rowCount() &gt; n_rows)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_to_remove <a href="CppOperatorAssign.htm">=</a> model-&gt;rowCount() <a href="CppOperatorMinus.htm">-</a> n_rows;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;removeRows(0,n_to_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> n_rows);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Columns<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (model-&gt;columnCount() &lt; n_cols)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_to_add <a href="CppOperatorAssign.htm">=</a> n_cols <a href="CppOperatorMinus.htm">-</a> model-&gt;columnCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;insertColumns(0,n_to_add);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (model-&gt;columnCount() &gt; n_cols)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_to_remove <a href="CppOperatorAssign.htm">=</a> model-&gt;columnCount() <a href="CppOperatorMinus.htm">-</a> n_cols;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;removeColumns(0,n_to_remove);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> n_cols);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read data as <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v(n_rows,n_cols,"");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> line <a href="CppOperatorAssign.htm">=</a> begin <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorPlus.htm">+</a> row;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(line &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; cols <a href="CppOperatorAssign.htm">=</a> <a href="CppSeperateString.htm">SeperateString</a>(text[line],'|');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(cols.size()) <a href="CppOperatorEqual.htm">==</a> n_cols <a href="CppOperatorPlus.htm">+</a> 2); <a href="CppComment.htm">//</a> HEADER | value | value | space<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; model-&gt;rowCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col_index <a href="CppOperatorAssign.htm">=</a> col <a href="CppOperatorPlus.htm">+</a> 1; <a href="CppComment.htm">//</a>Skip header<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col_index &lt; <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(cols.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; model-&gt;rowCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; model-&gt;columnCount());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Need to strip whitespace<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> data_str <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::trim_copy(cols[col_index]).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row,col) <a href="CppOperatorAssign.htm">=</a> data_str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> BELIEF_SET_DATA_PER_CELL_7826437863497863497586395786<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fill model with data<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> data <a href="CppOperatorAssign.htm">=</a> v(row,col).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQModelIndex.htm">QModelIndex</a> index <a href="CppOperatorAssign.htm">=</a> model-&gt;index(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index.isValid());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;setData(index,data);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a> * <b><a href="CppConst.htm">const</a></b> svs_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a> *&gt;(model))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToVectorString(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;svs_model-&gt;SetRawData(w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a> * <b><a href="CppConst.htm">const</a></b> svf_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a> *&gt;(model))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToVectorString(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;svf_model-&gt;SetRawData(w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> * <b><a href="CppConst.htm">const</a></b> umd_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> *&gt;(model))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToUblas<a href="CppMatrix.htm">Matrix</a><a href="CppDouble.htm">Double</a>(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;umd_model-&gt;SetRawData(w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> * <b><a href="CppConst.htm">const</a></b> uvd_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> *&gt;(model))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToUblasVector<a href="CppDouble.htm">Double</a>(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;uvd_model-&gt;SetRawData(w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>UblasVectorIntModel * <b><a href="CppConst.htm">const</a></b> uvi_model <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppQt.htm">Qt</a>UblasVectorIntModel *&gt;(model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(uvi_model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToUblasVectorInt(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;uvi_model-&gt;SetRawData(w);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Read(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; line,<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; sub, <b><a href="CppInt.htm">int</a></b>&amp; value_to_change)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line.find(sub) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line.substr(line.size() <a href="CppOperatorMinus.htm">-</a> 5,5) <a href="CppOperatorEqual.htm">==</a> "&lt;/li&gt;")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read(line.substr(0,line.size() <a href="CppOperatorMinus.htm">-</a> 5),sub,value_to_change);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> n_digits <a href="CppOperatorAssign.htm">=</a> 1; ; <a href="CppOperatorIncrement.htm">++</a>n_digits)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line.substr(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line.size() <a href="CppOperatorMinus.htm">-</a> n_digits,n_digits<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value_to_change <a href="CppOperatorAssign.htm">=</a> value;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBoostBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::ReadWhiteNoiseSystemType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.find("White noise system type") <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;WhiteNoiseSystemType&gt; v <a href="CppOperatorAssign.htm">=</a> WhiteNoiseSystemTypes::GetAllTypes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType type: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.find(WhiteNoiseSystemTypes::ToStr(type)) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetWhiteNoiseSystemType(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_white_noise_system_type <a href="CppOperatorEqual.htm">==</a> type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppBoostSplit.htm">boost::algorithm::split</a>(v,input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBind2nd.htm">std::bind2nd</a>(<a href="CppStdEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;(),seperator),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::token_compress_on);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::SetContext(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; context)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_context <a href="CppOperatorNotEqual.htm">!=</a> context)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_context <a href="CppOperatorAssign.htm">=</a> context;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_context_changed(m_context);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_context <a href="CppOperatorEqual.htm">==</a> context);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::SetExample(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Example&gt;&amp; example)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the state names first, as it resizes the tables<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppState.htm">State</a>NamesModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_names)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;Get<a href="CppState.htm">State</a>Names());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetContext(example-&gt;GetContext());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetContext() <a href="CppOperatorEqual.htm">==</a> example-&gt;GetContext());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetNumberOf<a href="CppTime.htm">Time</a>steps(example-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps() <a href="CppOperatorEqual.htm">==</a> example-&gt;GetNumberOf<a href="CppTime.htm">Time</a>steps());<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;InputModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::input)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;GetInputs());<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetType());<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;ControlModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)<br/>
&nbsp;&nbsp;));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;ControlModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::control)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetControl());<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;EstimatedMeasurementNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_measurement_noise)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetEstimatedMeasurementNoise());<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;EstimatedProcessNoiseCovarianceModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::estimated_process_noise_covariance)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetEstimatedProcessNoiseCovariance());<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;InitialCovarianceEstimateModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_covariance_estimate)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetInitialCovarianceEstimate());<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Initial<a href="CppState.htm">State</a>EstimateModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_estimate)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetInitial<a href="CppState.htm">State</a>Estimate());<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;ObservationModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation)));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;ObservationModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetObservation());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;ObservationModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::observation))-&gt;GetRawData(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetObservation()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<a href="CppState.htm">State</a>TransitionModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::state_transition)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;Get<a href="CppState.htm">State</a>Transition());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(example-&gt;GetWhiteNoiseSystemParameters());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetWhiteNoiseSystemType(example-&gt;GetWhiteNoiseSystemParameters()-&gt;GetType());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;GetWhiteNoiseSystemParameters()-&gt;GetControl(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;GetControl()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "This is the purpose of <b><a href="CppUsing.htm">using</a></b> model/view: these must be the same");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Initial<a href="CppState.htm">State</a>RealModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::initial_state_real)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;GetWhiteNoiseSystemParameters()-&gt;GetInitial<a href="CppState.htm">State</a>());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;RealMeasurementNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_measurement_noise)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;GetWhiteNoiseSystemParameters()-&gt;GetMeasurementNoise());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;RealProcessNoiseModel*&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::real_process_noise)<br/>
&nbsp;&nbsp;)-&gt;SetRawData(example-&gt;GetWhiteNoiseSystemParameters()-&gt;GetProcessNoise());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;GetWhiteNoiseSystemParameters()-&gt;Get<a href="CppState.htm">State</a>Transition(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;example-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters()-&gt;Get<a href="CppState.htm">State</a>Transition()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "This is the purpose of <b><a href="CppUsing.htm">using</a></b> model/view: these must be the same");<br/>
<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Set<a href="CppKalmanFilter.htm">KalmanFilter</a>Type(<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_kalman_filter_type <a href="CppOperatorNotEqual.htm">!=</a> type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_filter_type <a href="CppOperatorAssign.htm">=</a> type;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_kalman_filter_type_changed(m_kalman_filter_type);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::SetLagReal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag)<br/>
{<br/>
&nbsp;&nbsp;m_lag_real <a href="CppOperatorAssign.htm">=</a> lag;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::SetNumberOf<a href="CppTime.htm">Time</a>steps(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorNotEqual.htm">!=</a> n)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_number_of_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_number_of_<a href="CppTime.htm">time</a>steps_changed(m_number_of_<a href="CppTime.htm">time</a>steps);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::SetWhiteNoiseSystemType(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_white_noise_system_type <a href="CppOperatorNotEqual.htm">!=</a> type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_white_noise_system_type <a href="CppOperatorAssign.htm">=</a> type;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_white_noise_system_type_changed(m_white_noise_system_type);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test some <a href="CppRegex.htm">regex</a>es<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* <a href="CppKalmanFilter.htm">Kalman filter</a> type: discrete\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* Lag estimated: 0\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* Lag real: 0\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* Number of <a href="CppTime.htm">time</a>steps: 1500\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"* White noise system type: standard\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Control ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 0 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Estimated measurement error covariance ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 0.10000000000000001 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Estimated optimal Kalman gain ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 0 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Estimated process noise covariance ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 0.0001 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Initial covariance estimate ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 1 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Initial state estimate ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 3 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Real initial state ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 1.25 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Real measurement noise ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 0.10000000000000001 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Real process noise ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 1.0000000000000001e-005 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Input ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 0.0 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ Observation ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 1 |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ <a href="CppState.htm">State</a> names ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | V |\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ <a href="CppState.htm">State</a> transition ^^\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"^ V | 1 |\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; m(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;FromDokuWiki(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> m-&gt;ToDokuWiki();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; n(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n-&gt;FromDokuWiki(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*m <a href="CppOperatorEqual.htm">==</a> *n);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::ToDokuWiki() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppVersion.htm">version</a> <a href="CppOperatorNotEqual.htm">!=</a> m_<a href="CppVersion.htm">version</a>_current)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_<a href="CppVersion.htm">version</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_<a href="CppVersion.htm">version</a>_current);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppVersion.htm">version</a> <a href="CppOperatorEqual.htm">==</a> m_<a href="CppVersion.htm">version</a>_current);<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;* <a href="CppKalmanFilter.htm">Kalman filter</a> type: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Types::ToStr(m_kalman_filter_type) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;* Lag estimated: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_lag_estimated) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;* Lag real: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_lag_real) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;* Number of <a href="CppTime.htm">time</a>steps: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_number_of_<a href="CppTime.htm">time</a>steps) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;* <a href="CppVersion.htm">Version</a>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_<a href="CppVersion.htm">version</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;* White noise system type: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> WhiteNoiseSystemTypes::ToStr(m_white_noise_system_type) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;html&gt;\n"&nbsp;&nbsp; <a href="CppComment.htm">//</a>HTML opening tag must have its own line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetContext() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/html&gt;\n" <a href="CppComment.htm">//</a>HTML closing tag must have its own line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " \n";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Go through all m_models<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> m_models.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m_models.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; p <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type <a href="CppOperatorAssign.htm">=</a> p.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> p.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToName(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> model-&gt;columnCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> model-&gt;rowCount();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_cols <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_rows <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdString.htm">std::string</a>(0,'^') <a href="CppOperatorEqual.htm">==</a> "");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "^ " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdString.htm">std::string</a>(n_cols,'^') <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "^ \n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "^ " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> model-&gt;headerData(row,<a href="CppQt.htm">Qt</a>::Vertical).toString().toStdString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " | ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> index <a href="CppOperatorAssign.htm">=</a> model-&gt;index(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> q <a href="CppOperatorAssign.htm">=</a> model-&gt;data(index).toString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> q.toStdString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " | ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " \n"; <a href="CppComment.htm">//</a>Empty line after every table, space is really needed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel::ToHtml() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a><br/>
<br/>
&nbsp;&nbsp;"&lt;!DOCTYPE html PUBLIC \"-<a href="CppComment.htm">//</a>W3C<a href="CppComment.htm">//</a>DTD XHTML 1.0 Strict<a href="CppComment.htm">//</a>EN\""<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;"<br/>
&nbsp;&nbsp;"&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"&gt;"<br/>
&nbsp;&nbsp;"&lt;head&gt;"<br/>
&nbsp;&nbsp;"&lt;meta http-equiv=\"Content-Type\" content=\"text/html;<b><a href="CppChar.htm">char</a></b>set=utf-8\"/&gt;"<br/>
&nbsp;&nbsp;"&lt;title&gt;<a href="ToolKalmanFilterer.htm">KalmanFilterer</a> parameters&lt;/title&gt;"<br/>
&nbsp;&nbsp;"&lt;meta name=\"description\" content=\"<a href="ToolKalmanFilterer.htm">KalmanFilterer</a> parameters\"/&gt;"<br/>
&nbsp;&nbsp;"&lt;meta name=\"keywords\" content=\"<a href="ToolKalmanFilterer.htm">KalmanFilterer</a> parameters\"/&gt;"<br/>
&nbsp;&nbsp;"&lt;<a href="CppLink.htm">link</a> rel=\"stylesheet\" href=\"Richelbilderbeek.css\" type=\"text/css\"/&gt;"<br/>
&nbsp;&nbsp;"&lt;/head&gt;"<br/>
&nbsp;&nbsp;"&lt;!<a href="CppOperatorDecrement.htm">--</a> End of head, start of body <a href="CppOperatorDecrement.htm">--</a>&gt;"<br/>
&nbsp;&nbsp;"&lt;body&gt;";<br/>
<br/>
<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;h1&gt;<a href="ToolKalmanFilterer.htm">KalmanFilterer</a> parameters&lt;/h1&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;p&gt;&amp;nbsp&lt;/p&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;ul&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&lt;li&gt;<a href="CppKalmanFilter.htm">Kalman filter</a> type: " <a href="CppOperatorPlus.htm">+</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>Types::ToStr(m_kalman_filter_type) <a href="CppOperatorPlus.htm">+</a> "&lt;/li&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&lt;li&gt;Lag estimated: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_lag_estimated) <a href="CppOperatorPlus.htm">+</a> "&lt;/li&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&lt;li&gt;Lag real: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_lag_real) <a href="CppOperatorPlus.htm">+</a> "&lt;/li&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&lt;li&gt;Number of <a href="CppTime.htm">time</a>steps: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_number_of_<a href="CppTime.htm">time</a>steps) <a href="CppOperatorPlus.htm">+</a> "&lt;/li&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&lt;li&gt;<a href="CppVersion.htm">Version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_<a href="CppVersion.htm">version</a>) <a href="CppOperatorPlus.htm">+</a> "&lt;/li&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&nbsp;&nbsp;&lt;li&gt;White noise system type: " <a href="CppOperatorPlus.htm">+</a> WhiteNoiseSystemTypes::ToStr(m_white_noise_system_type) <a href="CppOperatorPlus.htm">+</a> "&lt;/li&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;/ul&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;p&gt;&amp;nbsp&lt;/p&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;!<a href="CppOperatorDecrement.htm">--</a> &lt;context&gt; <a href="CppOperatorDecrement.htm">--</a>&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>m_context;<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;!<a href="CppOperatorDecrement.htm">--</a> &lt;/context&gt; <a href="CppOperatorDecrement.htm">--</a>&gt;";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Go through all m_models<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdMap.htm">std::map</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt;::const_iterator <a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> m_models.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> m_models.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType,QAbstractTableModel *&gt; p <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType type <a href="CppOperatorAssign.htm">=</a> p.first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QAbstractTableModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> p.second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::n_parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::ToName(type);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;h2&gt;" <a href="CppOperatorPlus.htm">+</a> name <a href="CppOperatorPlus.htm">+</a> "&lt;/h2S&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;table summary=\"" <a href="CppOperatorPlus.htm">+</a> name <a href="CppOperatorPlus.htm">+</a> "\" border=\"1\"&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> model-&gt;columnCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> model-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a>"&lt;tr&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a>"&lt;td&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> index <a href="CppOperatorAssign.htm">=</a> model-&gt;index(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> q <a href="CppOperatorAssign.htm">=</a> model-&gt;data(index).toString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> q.toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a>"&lt;/td&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a>"&lt;/tr&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> "&lt;/table&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;/body&gt;";<br/>
&nbsp;&nbsp;s<a href="CppOperatorPlusAssign.htm">+=</a>"&lt;/html&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.ToDokuWiki() <a href="CppOperatorEqual.htm">==</a> rhs.ToDokuWiki();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CreateStyleSheet()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> style_sheet<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MainDialog"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"{"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 #bbb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentDialog"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"{"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 #fbb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Dialog"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"{"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 #bfb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"{"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 #bbf, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExamplesDialog"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"{"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 #bbb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> style_sheet;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;START_<a href="CppTRACE.htm">TRACE</a>();<br/>
&nbsp;&nbsp;a.setStyleSheet(CreateStyleSheet().c_str());<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>MenuDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSTANDARDKALMANFILTERERALGORITHMDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTSTANDARDKALMANFILTERERALGORITHMDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::standard; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Display the calculation of an experiment at a certain <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowCalculation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> t, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> t);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectMatrices() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectVectors() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetControl(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIdentity<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInput(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMeasurementNoiseEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetObservation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetProcessNoiseEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Names(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; names);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Transition(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInnovation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInnovationCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPredictedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPreviousCovarianceEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetStandardCalculationElements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation_elements);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetUpdatedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetUpdated<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSTANDARDKALMANFILTERERALGORITHMDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qtstandard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppInclude.htm">#include</a> "standard<a href="CppKalmanFilter.htm">kalmanfilter</a>parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtstandard<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setStyleSheet(<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_1 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fbb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_2 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #ffb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_3 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bfb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_4 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bff, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_5 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bbf, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_6 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fbf, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_7 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fff, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::~<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::CollectMatrices() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_control_1);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_covariance_predicted_2);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_covariance_predicted_4);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_covariance_predicted_5);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_covariance_predicted_7);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_estimated_measurement_noise);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_estimated_process_noise);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_identity_<a href="CppMatrix.htm">matrix</a>);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_innovation_covariance_4);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_innovation_covariance_5_inverted);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_kalman_gain_5);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_kalman_gain_6);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_kalman_gain_7);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_new_covariance);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_3);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_4);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_4_transposed);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_5_transposed);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_7);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_previous_covariance_estimate);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition_1);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition_1_2);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition_2_transposed);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::CollectVectors() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_innovation_3);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_innovation_6);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_input);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_measurement);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_new_state_estimate);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_previous_state_estimate);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_predicted_1);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_predicted_3);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_predicted_6);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetStandardCalculationElements(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation_elements)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation_elements);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetInnovation(calculation_elements-&gt;GetInnovation());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetInnovationCovariance(calculation_elements-&gt;GetInnovationCovariance());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetKalmanGain(calculation_elements-&gt;GetKalmanGain());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetMeasurement(calculation_elements-&gt;GetMeasurement());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPredictedCovariance(calculation_elements-&gt;Get<a href="CppPredicate.htm">Predicate</a>dCovariance());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPredicted<a href="CppState.htm">State</a>(calculation_elements-&gt;GetPredicted<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPreviousCovarianceEstimate(calculation_elements-&gt;GetPreviousCovarianceEstimate());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPrevious<a href="CppState.htm">State</a>Estimate(calculation_elements-&gt;GetPrevious<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetUpdatedCovariance(calculation_elements-&gt;GetUpdatedCovariance());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetUpdated<a href="CppState.htm">State</a>(calculation_elements-&gt;GetUpdated<a href="CppState.htm">State</a>());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetControl(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_control_1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetIdentity<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostUblas.htm">boost::numeric::ublas</a>::identity_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sz),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_identity_<a href="CppMatrix.htm">matrix</a>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetInnovation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_innovation_3);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_innovation_6);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetInnovationCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_innovation_covariance_4);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Inverse(m),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_innovation_covariance_5_inverted);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetInput(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_input);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_kalman_gain_5);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_kalman_gain_6);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_kalman_gain_7);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_measurement);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetMeasurementNoiseEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_estimated_measurement_noise);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetObservation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation_3);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation_4);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(m),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_observation_4_transposed);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(m),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_observation_5_transposed);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation_7);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetPredictedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_covariance_predicted_2);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_covariance_predicted_4);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_covariance_predicted_5);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_covariance_predicted_7);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_state_predicted_1);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_state_predicted_3);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_state_predicted_6);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetPreviousCovarianceEstimate(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_previous_covariance_estimate);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetPrevious<a href="CppState.htm">State</a>Estimate(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_previous_state_estimate);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetProcessNoiseEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_estimated_process_noise);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppState.htm">State</a>Names(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; names)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Matrices<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setColumnCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vectors<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectVectors();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove top text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(" ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(0,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppState.htm">State</a>Transition(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition_1);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition_1_2);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostUblas.htm">boost::numeric::ublas</a>::trans(m),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_state_transition_2_transposed);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "<a href="CppTime.htm">Time</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i);<br/>
&nbsp;&nbsp;ui-&gt;label_<a href="CppTime.htm">time</a>-&gt;setText(s.c_str());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::ShowCalculation(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetCalculationElements().size()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; calculation_elements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;(experiment-&gt;GetCalculationElements()[i]));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation_elements);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetStandardCalculationElements(calculation_elements);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetControl(parameters-&gt;GetControl());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetIdentity<a href="CppMatrix.htm">Matrix</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;Get<a href="CppState.htm">State</a>Names().size()));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetInput(experiment-&gt;GetInputs().at(i));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetMeasurementNoiseEstimate(parameters-&gt;GetEstimatedMeasurementNoise());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetObservation(parameters-&gt;GetObservation());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetProcessNoiseEstimate(parameters-&gt;GetEstimatedProcessNoiseCovariance());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Names(experiment-&gt;Get<a href="CppState.htm">State</a>Names());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Transition(parameters-&gt;Get<a href="CppState.htm">State</a>Transition());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetUpdatedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_new_covariance);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Standard<a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetUpdated<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_new_state_estimate);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSTEADYSTATEKALMANFILTERCALCULATIONDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTSTEADYSTATEKALMANFILTERCALCULATIONDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experiment.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "steadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> type as an <b><a href="CppEnum.htm">enum</a></b><br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Type GetType() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Type::steady_state; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Display the calculation of an experiment at a certain <a href="CppTime.htm">time</a>step<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowCalculation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> t, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> t);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSteady<a href="CppState.htm">State</a>CalculationElements(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation_elements);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetControl(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetEstimatedOptimalKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInput(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetObservation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Names(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; names);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Transition(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectMatrices() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectVectors() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSTEADYSTATEKALMANFILTERCALCULATIONDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qtsteadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationelements.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtsteadystate<a href="CppKalmanFilter.htm">kalmanfilter</a>calculationdialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setStyleSheet(<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_1 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fbb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_2 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #ffb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_3 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bfb, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_4 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bff, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_5 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bbf, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_6 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fbf, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_7 { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fff, stop: 1 #fff);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::~<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::CollectMatrices() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_control);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_gain_1);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_gain_2);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_model);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::CollectVectors() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_input);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_measurement);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_previous_state_estimate);<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_predicted);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetSteady<a href="CppState.htm">State</a>CalculationElements(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;&amp; calculation_elements)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation_elements);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetMeasurement(calculation_elements-&gt;GetMeasurement());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPredicted<a href="CppState.htm">State</a>(calculation_elements-&gt;GetUpdated<a href="CppState.htm">State</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetPrevious<a href="CppState.htm">State</a>Estimate(calculation_elements-&gt;GetPrevious<a href="CppState.htm">State</a>());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetControl(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_control);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetInput(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_input);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetEstimatedOptimalKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_gain_1);<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_gain_2);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_measurement);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetObservation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation_model);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_state_predicted);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::SetPrevious<a href="CppState.htm">State</a>Estimate(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::UblasVector<a href="CppDouble.htm">Double</a>ToTable(m,ui-&gt;table_previous_state_estimate);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppState.htm">State</a>Names(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; names)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Matrices<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setColumnCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vectors<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectVectors();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove top text<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(" ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(0,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppState.htm">State</a>Transition(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "<a href="CppTime.htm">Time</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i);<br/>
&nbsp;&nbsp;ui-&gt;label_<a href="CppTime.htm">time</a>-&gt;setText(s.c_str());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationDialog::ShowCalculation(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Experiment&gt;&amp; experiment)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()-&gt;GetType());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(experiment-&gt;GetCalculationElements().size()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt; calculation_elements(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>CalculationElements&gt;(experiment-&gt;GetCalculationElements()[i]));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(calculation_elements);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetSteady<a href="CppState.htm">State</a>CalculationElements(calculation_elements);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt; parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a>&lt;<b><a href="CppConst.htm">const</a></b> Steady<a href="CppState.htm">State</a><a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&gt;(experiment-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>()-&gt;GetParameters()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetControl(parameters-&gt;GetControl());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetInput(experiment-&gt;GetInputs().at(i));<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetObservation(parameters-&gt;GetObservation());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetEstimatedOptimalKalmanGain(parameters-&gt;GetEstimatedOptimalKalmanGain());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Names(experiment-&gt;Get<a href="CppState.htm">State</a>Names());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Transition(parameters-&gt;Get<a href="CppState.htm">State</a>Transition());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTWHITENOISESYSTEMPARAMETERSDIALOG<br/>
<a href="CppDefine.htm">#define</a> QTWHITENOISESYSTEMPARAMETERSDIALOG<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTableWidget.htm">QTableWidget</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>NEVER FORGET: Do never use <a href="CppForwardDeclaration.htm">forward declaration</a>s in <a href="CppHeaderFile.htm">header file</a>s parsed by MOC<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentmodel.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparametertype.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemtype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> kalman {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read the lag (in <a href="CppTime.htm">time</a>steps) from the dialog<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetLag() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the GUI<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog * GetUi() { <b><a href="CppReturn.htm">return</a></b> ui; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsValid() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the white noise system type<br/>
&nbsp;&nbsp;WhiteNoiseSystemType GetWhiteNoiseSystemType() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the white noise system type<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWhiteNoiseSystemType(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType type);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The model<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; m_model;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parameter type and its corresponding dialog<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;WhiteNoiseSystemParameterType,<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog *&gt; m_parameters;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find a WhiteNoiseSystemParameterType its corresponding table<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog * Find(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog * Find(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_white_noise_system_type_currentIndexChanged(<b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_lag_valueChanged(<b><a href="CppInt.htm">int</a></b> arg1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> kalman<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTWHITENOISESYSTEMPARAMETERSDIALOG<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qtwhitenoisesystemparametersdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppKalmanFilter.htm">kalmanfilter</a>experimentparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "laggedwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="ToolKalmanFilterer.htm">kalmanfilterer</a>parameterdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtMatrix.htm">qtmatrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppUblas.htm">ublas</a>vectorintmodel.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystem.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemfactory.h"<br/>
<a href="CppInclude.htm">#include</a> "standardwhitenoisesystemparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtwhitenoisesystemparametersdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameter.h"<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparametertype.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_model{model},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{}<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;WhiteNoiseSystemParameterType&gt; v <a href="CppOperatorAssign.htm">=</a> WhiteNoiseSystemParameter::GetAll();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type <a href="CppOperatorNotEqual.htm">!=</a> WhiteNoiseSystemParameterType::n_parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog * <b><a href="CppConst.htm">const</a></b> dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameter::ToName(type),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WhiteNoiseSystemParameter::ToDescription(type),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_model-&gt;Find( <a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter::<a href="CppConvert.htm">Convert</a>To<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameter(v[i]) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_parameters.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(type,dialog));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> to dialog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;layout());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;layout()-&gt;addWidget(dialog);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(WhiteNoiseSystemParameterType::n_parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All parameters must be in");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Fill the combo box with the types of white noise systems<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_white_noise_system_type-&gt;count() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_white_noise_system_type-&gt;addItem("Standard white noise system");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_white_noise_system_type-&gt;addItem("Lagged white noise system");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_white_noise_system_type-&gt;addItem("Gaps-filled white noise system");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_white_noise_system_type-&gt;count() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(WhiteNoiseSystemType::n_types));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFocusPolicy(<a href="CppQt.htm">Qt</a>::NoFocus);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetWhiteNoiseSystemType(m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetWhiteNoiseSystemType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;CreateWhiteNoiseSystem() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Obtain an empty white noise system (all <a href="CppComponent.htm">component</a>s have size zero)");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::~<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog * <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::Find(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calls the <b><a href="CppConst.htm">const</a></b> <a href="CppVersion.htm">version</a> of Find<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>To avoid duplication in <b><a href="CppConst.htm">const</a></b> and non-<a href="CppConstMemberFunction.htm">const member function</a>s<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> * <a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C<a href="CppOperatorIncrement.htm">++</a> coding standards: 101 rules, guidelines,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp; and best practices. 2005. ISBN: 0-32-111358-6. Chapter 94: 'Avoid casting away <b><a href="CppConst.htm">const</a></b>', item '<a href="CppException.htm">Exception</a>s'<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog *&gt;(<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog&amp;&gt;(*<b><a href="CppThis.htm">this</a></b>).Find(type));<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog * <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::Find(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameterType type) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetWhiteNoiseSystemType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters.find(type) <a href="CppOperatorNotEqual.htm">!=</a> m_parameters.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="ToolKalmanFilterer.htm">KalmanFilterer</a>ParameterDialog * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> (*m_parameters.find(type)).second;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> table;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::GetLag() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_lag-&gt;value() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_lag-&gt;value();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::kalman::WhiteNoiseSystemType <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::GetWhiteNoiseSystemType() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (ui-&gt;box_white_noise_system_type-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::standard;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::lagged;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> WhiteNoiseSystemType::gaps_filled;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppOperatorMinus.htm">-</a>1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::GetWhiteNoiseSystemType: box_white_noise_system_type must be <a href="CppInitialize.htm">initialize</a>d");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented index of box_white_noise_system_type");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<a href="Cpp__func__.htm">__func__</a>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::on_box_white_noise_system_type_currentIndexChanged(<b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Notify the model<br/>
&nbsp;&nbsp;m_model-&gt;SetWhiteNoiseSystemType(GetWhiteNoiseSystemType());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetWhiteNoiseSystemType());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (GetWhiteNoiseSystemType())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::gaps_filled:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_lag-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_lag-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters.size() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemParameter::GetAll().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_parameters must be <a href="CppInitialize.htm">initialize</a>d");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(WhiteNoiseSystemParameterType::measurement_frequency)-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::lagged:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_lag-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_lag-&gt;setVisible(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters.size() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemParameter::GetAll().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_parameters must be <a href="CppInitialize.htm">initialize</a>d");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(WhiteNoiseSystemParameterType::measurement_frequency)-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_lag-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;label_lag-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters.size() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemParameter::GetAll().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_parameters must be <a href="CppInitialize.htm">initialize</a>d");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Find(WhiteNoiseSystemParameterType::measurement_frequency)-&gt;setVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Unimplemented WhiteNoiseSystemType");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetWhiteNoiseSystemType());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::on_box_lag_valueChanged(<b><a href="CppInt.htm">int</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;m_model-&gt;SetLagReal(arg1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetWhiteNoiseSystemType());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::SetWhiteNoiseSystemType(<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::gaps_filled:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_white_noise_system_type-&gt;setCurrentIndex(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::lagged:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_white_noise_system_type-&gt;setCurrentIndex(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::standard:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_white_noise_system_type-&gt;setCurrentIndex(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> WhiteNoiseSystemType::n_types:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::SetWhiteNoiseSystemType: use of n_types");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::SetWhiteNoiseSystemType: use of n_types");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;GetWhiteNoiseSystemType() <a href="CppOperatorEqual.htm">==</a> type);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> type);<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::Test");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel&gt; model(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentModel);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog d(model);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_white_noise_system_type-&gt;setCurrentIndex(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetWhiteNoiseSystemType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::standard);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::standard);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!d.Find(WhiteNoiseSystemParameterType::measurement_frequency)-&gt;isVisible());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystemParameters());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystem());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_white_noise_system_type-&gt;setCurrentIndex(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetWhiteNoiseSystemType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::lagged);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::lagged);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!d.Find(WhiteNoiseSystemParameterType::measurement_frequency)-&gt;isVisible());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystemParameters());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystem());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_white_noise_system_type-&gt;setCurrentIndex(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(d.Find(WhiteNoiseSystemParameterType::measurement_frequency)-&gt;isVisible());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetWhiteNoiseSystemType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::gaps_filled);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;Find(<a href="CppKalmanFilter.htm">KalmanFilter</a>ExperimentParameterType::measurement_frequency));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystem());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystemParameters());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model-&gt;CreateWhiteNoiseSystemParameters()-&gt;GetType() <a href="CppOperatorEqual.htm">==</a> WhiteNoiseSystemType::gaps_filled);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::kalman::<a href="CppQt.htm">Qt</a>WhiteNoiseSystemParametersDialog::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/ToolKalmanFiltererQt4LubuntuToWindows.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/ToolKalmanFiltererQt4LubuntuToWindows.sh" border = "1"><tr><td><code>
#!/bin/bash<br/>
myfile="i686-pc-mingw32-qmake"<br/>
mytarget="ToolKalmanFiltererDesktop"<br/>
myprofile=$mytarget.pro<br/>
myexe=$mytarget.exe<br/>
<br/>
if [ ! -e $myprofile ]<br/>
then<br/>
&nbsp;&nbsp;echo $mytarget": FAIL (Qt Creator project "$myprofile" not found)"<br/>
&nbsp;&nbsp;exit<br/>
fi<br/>
<br/>
$myfile $myprofile<br/>
<br/>
if [ ! -e Makefile ]<br/>
then<br/>
&nbsp;&nbsp;echo $mytarget": FAIL (makefile not found)"<br/>
&nbsp;&nbsp;exit<br/>
fi<br/>
<br/>
make<br/>
<br/>
if [ -e ./release/$myexe ]<br/>
then<br/>
&nbsp;&nbsp;echo $mytarget": SUCCESS"<br/>
else<br/>
&nbsp;&nbsp;echo $mytarget": FAIL (executable not found)"<br/>
fi<br/>
<br/>
<br/>
#Cleaning up<br/>
rm -r release<br/>
rm -r debug<br/>
rm Makefile<br/>
rm Makefile.*<br/>
rm ui_*<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/ToolKalmanFiltererQt5LubuntuToWindows.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/ToolKalmanFiltererQt5LubuntuToWindows.sh" border = "1"><tr><td><code>
#!/bin/bash<br/>
myfile="../../Libraries/mxe/usr/i686-pc-mingw32/qt5/bin/qmake"<br/>
mytarget="ToolKalmanFiltererDesktop"<br/>
myprofile=$mytarget.pro<br/>
myexe=$mytarget.exe<br/>
<br/>
if [ ! -e $myprofile ]<br/>
then<br/>
&nbsp;&nbsp;echo $mytarget": FAIL (Qt Creator project "$myprofile" not found)"<br/>
&nbsp;&nbsp;exit<br/>
fi<br/>
<br/>
$myfile $myprofile<br/>
<br/>
if [ ! -e Makefile ]<br/>
then<br/>
&nbsp;&nbsp;echo $mytarget": FAIL (makefile not found)"<br/>
&nbsp;&nbsp;exit<br/>
fi<br/>
<br/>
make<br/>
<br/>
if [ -e ./release/$myexe ]<br/>
then<br/>
&nbsp;&nbsp;echo $mytarget": SUCCESS"<br/>
&nbsp;&nbsp;cp ./release/$myexe ./$myexe<br/>
else<br/>
&nbsp;&nbsp;echo $mytarget": FAIL (executable not found)"<br/>
fi<br/>
<br/>
<br/>
#Cleaning up<br/>
rm *.o<br/>
rm object_script.*<br/>
rm -r release<br/>
rm -r debug<br/>
rm Makefile<br/>
rm Makefile.*<br/>
rm ui_*<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/crosscompile.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/crosscompile.sh" border = "1"><tr><td><code>
#!/bin/bash<br/>
myqmake="../../Libraries/mxe/usr/i686-pc-mingw32/qt5/bin/qmake"<br/>
 <br/>
#Cleaning up<br/>
rm *.pro.user<br/>
rm Makefile<br/>
rm Makefile.*<br/>
rm -r release<br/>
rm -r debug<br/>
rm ui_*.h<br/>
rm qrc_*.cpp<br/>
rm moc_*.cpp<br/>
rm object_script*.*<br/>
 <br/>
for myprofile in `ls | egrep ".pro\&gt;"`<br/>
do<br/>
&nbsp;&nbsp;mytarget=`echo $myprofile | sed "s/\.pro//"`<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;$myqmake $myprofile<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;if [ ! -e Makefile ]<br/>
&nbsp;&nbsp;then<br/>
&nbsp;&nbsp;&nbsp;&nbsp;echo "FAIL: $myqmake $myprofile"<br/>
&nbsp;&nbsp;fi<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;make<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;if [ -e ./release/$mytarget".exe" ]<br/>
&nbsp;&nbsp;then<br/>
&nbsp;&nbsp;&nbsp;&nbsp;echo $mytarget": SUCCESS"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cp ./release/$mytarget".exe" ~/bin/<br/>
&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;echo $mytarget": FAIL"<br/>
&nbsp;&nbsp;fi<br/>
&nbsp;&nbsp; <br/>
&nbsp;&nbsp;#Cleaning up<br/>
&nbsp;&nbsp;rm Makefile<br/>
&nbsp;&nbsp;rm Makefile.*<br/>
&nbsp;&nbsp;rm -r release<br/>
&nbsp;&nbsp;rm -r debug<br/>
&nbsp;&nbsp;rm ui_*.h<br/>
&nbsp;&nbsp;rm qrc_*.cpp<br/>
&nbsp;&nbsp;rm moc_*.cpp<br/>
&nbsp;&nbsp;rm object_script*.*<br/>
 <br/>
done #next .pro file<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolKalmanFilterer/zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolKalmanFilterer/zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
# Created from file '../../Tools/ToolKalmanFilterer/ToolKalmanFiltererDesktop.pro'<br/>
<br/>
echo "Creating of all folders"<br/>
<br/>
mkdir Projects<br/>
mkdir Projects/Tools<br/>
mkdir Projects/Classes<br/>
mkdir Projects/Libraries<br/>
mkdir Projects/Classes/CppAbout<br/>
mkdir Projects/Classes/CppTrace<br/>
mkdir Projects/Classes/CppMatrix<br/>
mkdir Projects/Classes/CppQtModel<br/>
mkdir Projects/Classes/CppQtMatrix<br/>
mkdir Projects/Libraries/qwt-6.0.1<br/>
mkdir Projects/Libraries/boost_1_53_0<br/>
mkdir Projects/Libraries/fparser4.5.1<br/>
mkdir Projects/Classes/CppKalmanFilter<br/>
mkdir Projects/Libraries/qwt-6.0.1/src<br/>
mkdir Projects/Classes/CppQtAboutDialog<br/>
mkdir Projects/Tools/ToolKalmanFilterer<br/>
mkdir Projects/Libraries/boost_1_53_0/libs<br/>
mkdir Projects/Libraries/qwt-6.0.1/include<br/>
mkdir Projects/Classes/CppQtHideAndShowDialog<br/>
mkdir Projects/Libraries/fparser4.5.1/extrasrc<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/regex<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/system<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/date_time<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/regex/src<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/filesystem<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/system/src<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/date_time/src<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/filesystem/src<br/>
mkdir Projects/Libraries/boost_1_53_0/libs/date_time/src/gregorian<br/>
<br/>
echo "Copying files"<br/>
<br/>
cp ../../Classes/CppAbout/about.h Projects/Classes/CppAbout/about.h<br/>
cp ../../Classes/CppTrace/trace.h Projects/Classes/CppTrace/trace.h<br/>
cp ../../Classes/CppAbout/about.cpp Projects/Classes/CppAbout/about.cpp<br/>
cp ../../Classes/CppMatrix/matrix.h Projects/Classes/CppMatrix/matrix.h<br/>
cp ../../Classes/CppAbout/Licence.txt Projects/Classes/CppAbout/Licence.txt<br/>
cp ../../Classes/CppMatrix/matrix.cpp Projects/Classes/CppMatrix/matrix.cpp<br/>
cp ../../Classes/CppTrace/Licence.txt Projects/Classes/CppTrace/Licence.txt<br/>
cp ../../Classes/CppMatrix/Licence.txt Projects/Classes/CppMatrix/Licence.txt<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt.h Projects/Libraries/qwt-6.0.1/src/qwt.h<br/>
cp ../../Classes/CppQtMatrix/qtmatrix.h Projects/Classes/CppQtMatrix/qtmatrix.h<br/>
cp ../../Tools/ToolKalmanFilterer/0.txt Projects/Tools/ToolKalmanFilterer/0.txt<br/>
cp ../../Tools/ToolKalmanFilterer/R.png Projects/Tools/ToolKalmanFilterer/R.png<br/>
cp ../../Classes/CppQtMatrix/Licence.txt Projects/Classes/CppQtMatrix/Licence.txt<br/>
cp ../../Tools/ToolKalmanFilterer/zip.sh Projects/Tools/ToolKalmanFilterer/zip.sh<br/>
cp ../../Classes/CppQtMatrix/qtmatrix.cpp Projects/Classes/CppQtMatrix/qtmatrix.cpp<br/>
cp ../../Libraries/fparser4.5.1/fparser.cc Projects/Libraries/fparser4.5.1/fparser.cc<br/>
cp ../../Libraries/fparser4.5.1/fparser.hh Projects/Libraries/fparser4.5.1/fparser.hh<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt.h Projects/Libraries/qwt-6.0.1/include/qwt.h<br/>
cp ../../Libraries/fparser4.5.1/fpconfig.hh Projects/Libraries/fparser4.5.1/fpconfig.hh<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_dial.h Projects/Libraries/qwt-6.0.1/src/qwt_dial.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_knob.h Projects/Libraries/qwt-6.0.1/src/qwt_knob.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_math.h Projects/Libraries/qwt-6.0.1/src/qwt_math.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot.h Projects/Libraries/qwt-6.0.1/src/qwt_plot.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_text.h Projects/Libraries/qwt-6.0.1/src/qwt_text.h<br/>
cp ../../Classes/CppKalmanFilter/Licence.txt Projects/Classes/CppKalmanFilter/Licence.txt<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_wheel.h Projects/Libraries/qwt-6.0.1/src/qwt_wheel.h<br/>
cp ../../Tools/ToolKalmanFilterer/PicRed.png Projects/Tools/ToolKalmanFilterer/PicRed.png<br/>
cp ../../Tools/ToolKalmanFilterer/qtmain.cpp Projects/Tools/ToolKalmanFilterer/qtmain.cpp<br/>
cp ../../Classes/CppQtAboutDialog/Licence.txt Projects/Classes/CppQtAboutDialog/Licence.txt<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_compat.h Projects/Libraries/qwt-6.0.1/src/qwt_compat.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_dial.cpp Projects/Libraries/qwt-6.0.1/src/qwt_dial.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_global.h Projects/Libraries/qwt-6.0.1/src/qwt_global.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_knob.cpp Projects/Libraries/qwt-6.0.1/src/qwt_knob.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_legend.h Projects/Libraries/qwt-6.0.1/src/qwt_legend.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_math.cpp Projects/Libraries/qwt-6.0.1/src/qwt_math.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_panner.h Projects/Libraries/qwt-6.0.1/src/qwt_panner.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_picker.h Projects/Libraries/qwt-6.0.1/src/qwt_picker.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_slider.h Projects/Libraries/qwt-6.0.1/src/qwt_slider.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_spline.h Projects/Libraries/qwt-6.0.1/src/qwt_spline.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_symbol.h Projects/Libraries/qwt-6.0.1/src/qwt_symbol.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_text.cpp Projects/Libraries/qwt-6.0.1/src/qwt_text.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_thermo.h Projects/Libraries/qwt-6.0.1/src/qwt_thermo.h<br/>
cp ../../Tools/ToolKalmanFilterer/Licence.txt Projects/Tools/ToolKalmanFilterer/Licence.txt<br/>
cp ../../Libraries/fparser4.5.1/fpoptimizer.cc Projects/Libraries/fparser4.5.1/fpoptimizer.cc<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_clipper.h Projects/Libraries/qwt-6.0.1/src/qwt_clipper.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_compass.h Projects/Libraries/qwt-6.0.1/src/qwt_compass.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_counter.h Projects/Libraries/qwt-6.0.1/src/qwt_counter.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_painter.h Projects/Libraries/qwt-6.0.1/src/qwt_painter.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_wheel.cpp Projects/Libraries/qwt-6.0.1/src/qwt_wheel.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/PicBlack.png Projects/Tools/ToolKalmanFilterer/PicBlack.png<br/>
cp ../../Tools/ToolKalmanFilterer/PicGreen.png Projects/Tools/ToolKalmanFilterer/PicGreen.png<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilter.h Projects/Classes/CppKalmanFilter/kalmanfilter.h<br/>
cp ../../Libraries/fparser4.5.1/fparser_mpfr.hh Projects/Libraries/fparser4.5.1/fparser_mpfr.hh<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_dial.h Projects/Libraries/qwt-6.0.1/include/qwt_dial.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_knob.h Projects/Libraries/qwt-6.0.1/include/qwt_knob.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_math.h Projects/Libraries/qwt-6.0.1/include/qwt_math.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot.h Projects/Libraries/qwt-6.0.1/include/qwt_plot.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_text.h Projects/Libraries/qwt-6.0.1/include/qwt_text.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_interval.h Projects/Libraries/qwt-6.0.1/src/qwt_interval.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_legend.cpp Projects/Libraries/qwt-6.0.1/src/qwt_legend.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_panner.cpp Projects/Libraries/qwt-6.0.1/src/qwt_panner.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_picker.cpp Projects/Libraries/qwt-6.0.1/src/qwt_picker.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_point_3d.h Projects/Libraries/qwt-6.0.1/src/qwt_point_3d.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_slider.cpp Projects/Libraries/qwt-6.0.1/src/qwt_slider.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_spline.cpp Projects/Libraries/qwt-6.0.1/src/qwt_spline.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_symbol.cpp Projects/Libraries/qwt-6.0.1/src/qwt_symbol.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_thermo.cpp Projects/Libraries/qwt-6.0.1/src/qwt_thermo.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/PicOrange.png Projects/Tools/ToolKalmanFilterer/PicOrange.png<br/>
cp ../../Tools/ToolKalmanFilterer/PicYellow.png Projects/Tools/ToolKalmanFilterer/PicYellow.png<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_wheel.h Projects/Libraries/qwt-6.0.1/include/qwt_wheel.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_clipper.cpp Projects/Libraries/qwt-6.0.1/src/qwt_clipper.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_color_map.h Projects/Libraries/qwt-6.0.1/src/qwt_color_map.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_compass.cpp Projects/Libraries/qwt-6.0.1/src/qwt_compass.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_counter.cpp Projects/Libraries/qwt-6.0.1/src/qwt_counter.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_magnifier.h Projects/Libraries/qwt-6.0.1/src/qwt_magnifier.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_painter.cpp Projects/Libraries/qwt-6.0.1/src/qwt_painter.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_dict.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_dict.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_grid.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_grid.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_item.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_item.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_div.h Projects/Libraries/qwt-6.0.1/src/qwt_scale_div.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_map.h Projects/Libraries/qwt-6.0.1/src/qwt_scale_map.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilter.cpp Projects/Classes/CppKalmanFilter/kalmanfilter.cpp<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.h Projects/Classes/CppQtAboutDialog/qtaboutdialog.h<br/>
cp ../../Classes/CppQtModel/modelfunctionparser.h Projects/Classes/CppQtModel/modelfunctionparser.h<br/>
cp ../../Libraries/fparser4.5.1/extrasrc/fpaux.hh Projects/Libraries/fparser4.5.1/extrasrc/fpaux.hh<br/>
cp ../../Libraries/fparser4.5.1/fparser_gmpint.hh Projects/Libraries/fparser4.5.1/fparser_gmpint.hh<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_compat.h Projects/Libraries/qwt-6.0.1/include/qwt_compat.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_global.h Projects/Libraries/qwt-6.0.1/include/qwt_global.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_legend.h Projects/Libraries/qwt-6.0.1/include/qwt_legend.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_panner.h Projects/Libraries/qwt-6.0.1/include/qwt_panner.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_picker.h Projects/Libraries/qwt-6.0.1/include/qwt_picker.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_slider.h Projects/Libraries/qwt-6.0.1/include/qwt_slider.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_spline.h Projects/Libraries/qwt-6.0.1/include/qwt_spline.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_symbol.h Projects/Libraries/qwt-6.0.1/include/qwt_symbol.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_thermo.h Projects/Libraries/qwt-6.0.1/include/qwt_thermo.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_interval.cpp Projects/Libraries/qwt-6.0.1/src/qwt_interval.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_curve.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_curve.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_xml.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_xml.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_point_3d.cpp Projects/Libraries/qwt-6.0.1/src/qwt_point_3d.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_draw.h Projects/Libraries/qwt-6.0.1/src/qwt_scale_draw.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_text_label.h Projects/Libraries/qwt-6.0.1/src/qwt_text_label.h<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.ui Projects/Classes/CppQtAboutDialog/qtaboutdialog.ui<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_clipper.h Projects/Libraries/qwt-6.0.1/include/qwt_clipper.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_compass.h Projects/Libraries/qwt-6.0.1/include/qwt_compass.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_counter.h Projects/Libraries/qwt-6.0.1/include/qwt_counter.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_painter.h Projects/Libraries/qwt-6.0.1/include/qwt_painter.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_color_map.cpp Projects/Libraries/qwt-6.0.1/src/qwt_color_map.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_dial_needle.h Projects/Libraries/qwt-6.0.1/src/qwt_dial_needle.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_legend_item.h Projects/Libraries/qwt-6.0.1/src/qwt_legend_item.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_magnifier.cpp Projects/Libraries/qwt-6.0.1/src/qwt_magnifier.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_axis.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_axis.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_canvas.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_canvas.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_dict.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_dict.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_grid.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_grid.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_item.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_item.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_layout.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_layout.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_marker.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_marker.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_panner.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_panner.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_picker.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_picker.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_zoomer.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_zoomer.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_point_polar.h Projects/Libraries/qwt-6.0.1/src/qwt_point_polar.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_raster_data.h Projects/Libraries/qwt-6.0.1/src/qwt_raster_data.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_div.cpp Projects/Libraries/qwt-6.0.1/src/qwt_scale_div.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_map.cpp Projects/Libraries/qwt-6.0.1/src/qwt_scale_map.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_series_data.h Projects/Libraries/qwt-6.0.1/src/qwt_series_data.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_text_engine.h Projects/Libraries/qwt-6.0.1/src/qwt_text_engine.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfiltertype.h Projects/Classes/CppKalmanFilter/kalmanfiltertype.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystem.h Projects/Classes/CppKalmanFilter/whitenoisesystem.h<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.cpp Projects/Classes/CppQtAboutDialog/qtaboutdialog.cpp<br/>
cp ../../Classes/CppQtHideAndShowDialog/Licence.txt Projects/Classes/CppQtHideAndShowDialog/Licence.txt<br/>
cp ../../Classes/CppQtModel/modelfunctionparser.cpp Projects/Classes/CppQtModel/modelfunctionparser.cpp<br/>
cp ../../Classes/CppQtModel/qtublasvectorintmodel.h Projects/Classes/CppQtModel/qtublasvectorintmodel.h<br/>
cp ../../Libraries/fparser4.5.1/extrasrc/fptypes.hh Projects/Libraries/fparser4.5.1/extrasrc/fptypes.hh<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_interval.h Projects/Libraries/qwt-6.0.1/include/qwt_interval.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_point_3d.h Projects/Libraries/qwt-6.0.1/include/qwt_point_3d.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_analog_clock.h Projects/Libraries/qwt-6.0.1/src/qwt_analog_clock.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_arrow_button.h Projects/Libraries/qwt-6.0.1/src/qwt_arrow_button.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_compass_rose.h Projects/Libraries/qwt-6.0.1/src/qwt_compass_rose.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_curve_fitter.h Projects/Libraries/qwt-6.0.1/src/qwt_curve_fitter.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_double_range.h Projects/Libraries/qwt-6.0.1/src/qwt_double_range.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_curve.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_curve.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_draw.cpp Projects/Libraries/qwt-6.0.1/src/qwt_scale_draw.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_engine.h Projects/Libraries/qwt-6.0.1/src/qwt_scale_engine.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_widget.h Projects/Libraries/qwt-6.0.1/src/qwt_scale_widget.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_system_clock.h Projects/Libraries/qwt-6.0.1/src/qwt_system_clock.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_text_label.cpp Projects/Libraries/qwt-6.0.1/src/qwt_text_label.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfiltertypes.h Projects/Classes/CppKalmanFilter/kalmanfiltertypes.h<br/>
cp ../../Classes/CppQtModel/qtstdvectorstringmodel.h Projects/Classes/CppQtModel/qtstdvectorstringmodel.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_color_map.h Projects/Libraries/qwt-6.0.1/include/qwt_color_map.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_magnifier.h Projects/Libraries/qwt-6.0.1/include/qwt_magnifier.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_dict.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_dict.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_grid.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_grid.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_item.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_item.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_scale_div.h Projects/Libraries/qwt-6.0.1/include/qwt_scale_div.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_scale_map.h Projects/Libraries/qwt-6.0.1/include/qwt_scale_map.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_column_symbol.h Projects/Libraries/qwt-6.0.1/src/qwt_column_symbol.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_dial_needle.cpp Projects/Libraries/qwt-6.0.1/src/qwt_dial_needle.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_event_pattern.h Projects/Libraries/qwt-6.0.1/src/qwt_event_pattern.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_legend_item.cpp Projects/Libraries/qwt-6.0.1/src/qwt_legend_item.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_canvas.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_canvas.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_layout.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_layout.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_marker.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_marker.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_panner.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_panner.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_picker.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_picker.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_renderer.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_renderer.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_rescaler.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_rescaler.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_zoomer.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_zoomer.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_point_polar.cpp Projects/Libraries/qwt-6.0.1/src/qwt_point_polar.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_raster_data.cpp Projects/Libraries/qwt-6.0.1/src/qwt_raster_data.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_series_data.cpp Projects/Libraries/qwt-6.0.1/src/qwt_series_data.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_text_engine.cpp Projects/Libraries/qwt-6.0.1/src/qwt_text_engine.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/PicTransparent.png Projects/Tools/ToolKalmanFilterer/PicTransparent.png<br/>
cp ../../Classes/CppKalmanFilter/kalmanfiltertype.cpp Projects/Classes/CppKalmanFilter/kalmanfiltertype.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystem.cpp Projects/Classes/CppKalmanFilter/whitenoisesystem.cpp<br/>
cp ../../Classes/CppQtModel/qtublasvectorintmodel.cpp Projects/Classes/CppQtModel/qtublasvectorintmodel.cpp<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_curve.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_curve.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_scale_draw.h Projects/Libraries/qwt-6.0.1/include/qwt_scale_draw.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_text_label.h Projects/Libraries/qwt-6.0.1/include/qwt_text_label.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_abstract_scale.h Projects/Libraries/qwt-6.0.1/src/qwt_abstract_scale.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_analog_clock.cpp Projects/Libraries/qwt-6.0.1/src/qwt_analog_clock.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_arrow_button.cpp Projects/Libraries/qwt-6.0.1/src/qwt_arrow_button.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_compass_rose.cpp Projects/Libraries/qwt-6.0.1/src/qwt_compass_rose.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_curve_fitter.cpp Projects/Libraries/qwt-6.0.1/src/qwt_curve_fitter.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_double_range.cpp Projects/Libraries/qwt-6.0.1/src/qwt_double_range.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_dyngrid_layout.h Projects/Libraries/qwt-6.0.1/src/qwt_dyngrid_layout.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_picker_machine.h Projects/Libraries/qwt-6.0.1/src/qwt_picker_machine.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_histogram.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_histogram.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_magnifier.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_magnifier.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_scaleitem.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_scaleitem.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_engine.cpp Projects/Libraries/qwt-6.0.1/src/qwt_scale_engine.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_scale_widget.cpp Projects/Libraries/qwt-6.0.1/src/qwt_scale_widget.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_system_clock.cpp Projects/Libraries/qwt-6.0.1/src/qwt_system_clock.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterexample.h Projects/Classes/CppKalmanFilter/kalmanfilterexample.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterfactory.h Projects/Classes/CppKalmanFilter/kalmanfilterfactory.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfiltertypes.cpp Projects/Classes/CppKalmanFilter/kalmanfiltertypes.cpp<br/>
cp ../../Classes/CppQtModel/qtstdvectorfunctionmodel.h Projects/Classes/CppQtModel/qtstdvectorfunctionmodel.h<br/>
cp ../../Classes/CppQtModel/qtstdvectorstringmodel.cpp Projects/Classes/CppQtModel/qtstdvectorstringmodel.cpp<br/>
cp ../../Classes/CppQtModel/qtublasmatrixdoublemodel.h Projects/Classes/CppQtModel/qtublasmatrixdoublemodel.h<br/>
cp ../../Classes/CppQtModel/qtublasvectordoublemodel.h Projects/Classes/CppQtModel/qtublasvectordoublemodel.h<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/icu.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/icu.cpp<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_dial_needle.h Projects/Libraries/qwt-6.0.1/include/qwt_dial_needle.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_legend_item.h Projects/Libraries/qwt-6.0.1/include/qwt_legend_item.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_canvas.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_canvas.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_layout.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_layout.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_marker.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_marker.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_panner.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_panner.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_picker.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_picker.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_zoomer.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_zoomer.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_point_polar.h Projects/Libraries/qwt-6.0.1/include/qwt_point_polar.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_raster_data.h Projects/Libraries/qwt-6.0.1/include/qwt_raster_data.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_series_data.h Projects/Libraries/qwt-6.0.1/include/qwt_series_data.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_text_engine.h Projects/Libraries/qwt-6.0.1/include/qwt_text_engine.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_abstract_slider.h Projects/Libraries/qwt-6.0.1/src/qwt_abstract_slider.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_column_symbol.cpp Projects/Libraries/qwt-6.0.1/src/qwt_column_symbol.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_event_pattern.cpp Projects/Libraries/qwt-6.0.1/src/qwt_event_pattern.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_interval_symbol.h Projects/Libraries/qwt-6.0.1/src/qwt_interval_symbol.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_rasteritem.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_rasteritem.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_renderer.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_renderer.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_rescaler.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_rescaler.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_seriesitem.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_seriesitem.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_sampling_thread.h Projects/Libraries/qwt-6.0.1/src/qwt_sampling_thread.h<br/>
cp ../../Classes/CppKalmanFilter/standardkalmanfilter.h Projects/Classes/CppKalmanFilter/standardkalmanfilter.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemtype.h Projects/Classes/CppKalmanFilter/whitenoisesystemtype.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_analog_clock.h Projects/Libraries/qwt-6.0.1/include/qwt_analog_clock.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_arrow_button.h Projects/Libraries/qwt-6.0.1/include/qwt_arrow_button.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_compass_rose.h Projects/Libraries/qwt-6.0.1/include/qwt_compass_rose.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_curve_fitter.h Projects/Libraries/qwt-6.0.1/include/qwt_curve_fitter.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_double_range.h Projects/Libraries/qwt-6.0.1/include/qwt_double_range.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_scale_engine.h Projects/Libraries/qwt-6.0.1/include/qwt_scale_engine.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_scale_widget.h Projects/Libraries/qwt-6.0.1/include/qwt_scale_widget.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_system_clock.h Projects/Libraries/qwt-6.0.1/include/qwt_system_clock.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_abstract_scale.cpp Projects/Libraries/qwt-6.0.1/src/qwt_abstract_scale.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_dyngrid_layout.cpp Projects/Libraries/qwt-6.0.1/src/qwt_dyngrid_layout.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_null_paintdevice.h Projects/Libraries/qwt-6.0.1/src/qwt_null_paintdevice.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_picker_machine.cpp Projects/Libraries/qwt-6.0.1/src/qwt_picker_machine.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_histogram.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_histogram.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_magnifier.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_magnifier.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_scaleitem.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_scaleitem.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_round_scale_draw.h Projects/Libraries/qwt-6.0.1/src/qwt_round_scale_draw.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterexample.cpp Projects/Classes/CppKalmanFilter/kalmanfilterexample.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterfactory.cpp Projects/Classes/CppKalmanFilter/kalmanfilterfactory.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterparameter.h Projects/Classes/CppKalmanFilter/kalmanfilterparameter.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemtypes.h Projects/Classes/CppKalmanFilter/whitenoisesystemtypes.h<br/>
cp ../../Classes/CppQtModel/qtstdvectorfunctionmodel.cpp Projects/Classes/CppQtModel/qtstdvectorfunctionmodel.cpp<br/>
cp ../../Classes/CppQtModel/qtublasmatrixdoublemodel.cpp Projects/Classes/CppQtModel/qtublasmatrixdoublemodel.cpp<br/>
cp ../../Classes/CppQtModel/qtublasvectordoublemodel.cpp Projects/Classes/CppQtModel/qtublasvectordoublemodel.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/regex.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/regex.cpp<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_column_symbol.h Projects/Libraries/qwt-6.0.1/include/qwt_column_symbol.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_event_pattern.h Projects/Libraries/qwt-6.0.1/include/qwt_event_pattern.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_renderer.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_renderer.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_rescaler.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_rescaler.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_abstract_slider.cpp Projects/Libraries/qwt-6.0.1/src/qwt_abstract_slider.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_interval_symbol.cpp Projects/Libraries/qwt-6.0.1/src/qwt_interval_symbol.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_rasteritem.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_rasteritem.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_seriesitem.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_seriesitem.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_spectrocurve.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_spectrocurve.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_sampling_thread.cpp Projects/Libraries/qwt-6.0.1/src/qwt_sampling_thread.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/ToolKalmanFilterer.qrc Projects/Tools/ToolKalmanFilterer/ToolKalmanFilterer.qrc<br/>
cp ../../Tools/ToolKalmanFilterer/qtcopyalltablewidget.h Projects/Tools/ToolKalmanFilterer/qtcopyalltablewidget.h<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterdialog.h Projects/Tools/ToolKalmanFilterer/qtkalmanfilterdialog.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterexperiment.h Projects/Classes/CppKalmanFilter/kalmanfilterexperiment.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterparameters.h Projects/Classes/CppKalmanFilter/kalmanfilterparameters.h<br/>
cp ../../Classes/CppKalmanFilter/laggedwhitenoisesystem.h Projects/Classes/CppKalmanFilter/laggedwhitenoisesystem.h<br/>
cp ../../Classes/CppKalmanFilter/standardkalmanfilter.cpp Projects/Classes/CppKalmanFilter/standardkalmanfilter.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemtype.cpp Projects/Classes/CppKalmanFilter/whitenoisesystemtype.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/cregex.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/cregex.cpp<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_abstract_scale.h Projects/Libraries/qwt-6.0.1/include/qwt_abstract_scale.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_dyngrid_layout.h Projects/Libraries/qwt-6.0.1/include/qwt_dyngrid_layout.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_picker_machine.h Projects/Libraries/qwt-6.0.1/include/qwt_picker_machine.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_histogram.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_histogram.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_magnifier.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_magnifier.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_scaleitem.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_scaleitem.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_legend_itemmanager.h Projects/Libraries/qwt-6.0.1/src/qwt_legend_itemmanager.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_matrix_raster_data.h Projects/Libraries/qwt-6.0.1/src/qwt_matrix_raster_data.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_null_paintdevice.cpp Projects/Libraries/qwt-6.0.1/src/qwt_null_paintdevice.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_directpainter.h Projects/Libraries/qwt-6.0.1/src/qwt_plot_directpainter.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_round_scale_draw.cpp Projects/Libraries/qwt-6.0.1/src/qwt_round_scale_draw.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterdialog.ui Projects/Tools/ToolKalmanFilterer/qtkalmanfilterdialog.ui<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterermodel.h Projects/Tools/ToolKalmanFilterer/qtkalmanfilterermodel.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterparameter.cpp Projects/Classes/CppKalmanFilter/kalmanfilterparameter.cpp<br/>
cp ../../Classes/CppKalmanFilter/steadystatekalmanfilter.h Projects/Classes/CppKalmanFilter/steadystatekalmanfilter.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemfactory.h Projects/Classes/CppKalmanFilter/whitenoisesystemfactory.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemtypes.cpp Projects/Classes/CppKalmanFilter/whitenoisesystemtypes.cpp<br/>
cp ../../Libraries/fparser4.5.1/extrasrc/fp_opcode_add.inc Projects/Libraries/fparser4.5.1/extrasrc/fp_opcode_add.inc<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_abstract_slider.h Projects/Libraries/qwt-6.0.1/include/qwt_abstract_slider.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_interval_symbol.h Projects/Libraries/qwt-6.0.1/include/qwt_interval_symbol.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_rasteritem.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_rasteritem.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_seriesitem.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_seriesitem.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_sampling_thread.h Projects/Libraries/qwt-6.0.1/include/qwt_sampling_thread.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_abstract_scale_draw.h Projects/Libraries/qwt-6.0.1/src/qwt_abstract_scale_draw.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_spectrocurve.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_spectrocurve.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/crosscompiletowindows.sh Projects/Tools/ToolKalmanFilterer/crosscompiletowindows.sh<br/>
cp ../../Tools/ToolKalmanFilterer/qtcopyalltablewidget.cpp Projects/Tools/ToolKalmanFilterer/qtcopyalltablewidget.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterdialog.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfilterdialog.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterexperiment.cpp Projects/Classes/CppKalmanFilter/kalmanfilterexperiment.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterparameters.cpp Projects/Classes/CppKalmanFilter/kalmanfilterparameters.cpp<br/>
cp ../../Classes/CppKalmanFilter/laggedwhitenoisesystem.cpp Projects/Classes/CppKalmanFilter/laggedwhitenoisesystem.cpp<br/>
cp ../../Classes/CppKalmanFilter/standardwhitenoisesystem.h Projects/Classes/CppKalmanFilter/standardwhitenoisesystem.h<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/fileiter.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/fileiter.cpp<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_null_paintdevice.h Projects/Libraries/qwt-6.0.1/include/qwt_null_paintdevice.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_round_scale_draw.h Projects/Libraries/qwt-6.0.1/include/qwt_round_scale_draw.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_matrix_raster_data.cpp Projects/Libraries/qwt-6.0.1/src/qwt_matrix_raster_data.cpp<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_plot_directpainter.cpp Projects/Libraries/qwt-6.0.1/src/qwt_plot_directpainter.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterermodel.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfilterermodel.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterparametertype.h Projects/Classes/CppKalmanFilter/kalmanfilterparametertype.h<br/>
cp ../../Classes/CppKalmanFilter/steadystatekalmanfilter.cpp Projects/Classes/CppKalmanFilter/steadystatekalmanfilter.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemfactory.cpp Projects/Classes/CppKalmanFilter/whitenoisesystemfactory.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemparameter.h Projects/Classes/CppKalmanFilter/whitenoisesystemparameter.h<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/path.cpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/path.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/instances.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/instances.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/internals.hpp Projects/Libraries/boost_1_53_0/libs/regex/src/internals.hpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/posix_api.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/posix_api.cpp<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_spectrocurve.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_spectrocurve.h<br/>
cp ../../Libraries/qwt-6.0.1/src/qwt_abstract_scale_draw.cpp Projects/Libraries/qwt-6.0.1/src/qwt_abstract_scale_draw.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/kalmanfilterermenudialog.h Projects/Tools/ToolKalmanFilterer/kalmanfilterermenudialog.h<br/>
cp ../../Classes/CppKalmanFilter/gapsfilledwhitenoisesystem.h Projects/Classes/CppKalmanFilter/gapsfilledwhitenoisesystem.h<br/>
cp ../../Classes/CppKalmanFilter/standardwhitenoisesystem.cpp Projects/Classes/CppKalmanFilter/standardwhitenoisesystem.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemparameters.h Projects/Classes/CppKalmanFilter/whitenoisesystemparameters.h<br/>
cp ../../Classes/CppQtHideAndShowDialog/qthideandshowdialog.h Projects/Classes/CppQtHideAndShowDialog/qthideandshowdialog.h<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/winstances.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/winstances.cpp<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_legend_itemmanager.h Projects/Libraries/qwt-6.0.1/include/qwt_legend_itemmanager.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_mathml_text_engine.h Projects/Libraries/qwt-6.0.1/include/qwt_mathml_text_engine.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_matrix_raster_data.h Projects/Libraries/qwt-6.0.1/include/qwt_matrix_raster_data.h<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_plot_directpainter.h Projects/Libraries/qwt-6.0.1/include/qwt_plot_directpainter.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterparametertype.cpp Projects/Classes/CppKalmanFilter/kalmanfilterparametertype.cpp<br/>
cp ../../Classes/CppKalmanFilter/standardkalmanfilterfactory.h Projects/Classes/CppKalmanFilter/standardkalmanfilterfactory.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemparameter.cpp Projects/Classes/CppKalmanFilter/whitenoisesystemparameter.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/regex_debug.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/regex_debug.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/usinstances.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/usinstances.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/system/src/error_code.cpp Projects/Libraries/boost_1_53_0/libs/system/src/error_code.cpp<br/>
cp ../../Libraries/qwt-6.0.1/include/qwt_abstract_scale_draw.h Projects/Libraries/qwt-6.0.1/include/qwt_abstract_scale_draw.h<br/>
cp ../../Tools/ToolKalmanFilterer/kalmanfilterermenudialog.cpp Projects/Tools/ToolKalmanFilterer/kalmanfilterermenudialog.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterermaindialog.h Projects/Tools/ToolKalmanFilterer/qtkalmanfilterermaindialog.h<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterermenudialog.h Projects/Tools/ToolKalmanFilterer/qtkalmanfilterermenudialog.h<br/>
cp ../../Classes/CppKalmanFilter/fixedlagsmootherkalmanfilter.h Projects/Classes/CppKalmanFilter/fixedlagsmootherkalmanfilter.h<br/>
cp ../../Classes/CppKalmanFilter/gapsfilledwhitenoisesystem.cpp Projects/Classes/CppKalmanFilter/gapsfilledwhitenoisesystem.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemparameters.cpp Projects/Classes/CppKalmanFilter/whitenoisesystemparameters.cpp<br/>
cp ../../Classes/CppQtHideAndShowDialog/qthideandshowdialog.cpp Projects/Classes/CppQtHideAndShowDialog/qthideandshowdialog.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/static_mutex.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/static_mutex.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/ToolKalmanFiltererDesktop.pro Projects/Tools/ToolKalmanFilterer/ToolKalmanFiltererDesktop.pro<br/>
cp ../../Tools/ToolKalmanFilterer/ToolKalmanFiltererWelcome.png Projects/Tools/ToolKalmanFilterer/ToolKalmanFiltererWelcome.png<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterermaindialog.ui Projects/Tools/ToolKalmanFilterer/qtkalmanfilterermaindialog.ui<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterermenudialog.ui Projects/Tools/ToolKalmanFilterer/qtkalmanfilterermenudialog.ui<br/>
cp ../../Classes/CppKalmanFilter/laggedwhitenoisesystemfactory.h Projects/Classes/CppKalmanFilter/laggedwhitenoisesystemfactory.h<br/>
cp ../../Classes/CppKalmanFilter/standardkalmanfilterfactory.cpp Projects/Classes/CppKalmanFilter/standardkalmanfilterfactory.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemparametertype.h Projects/Classes/CppKalmanFilter/whitenoisesystemparametertype.h<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterermaindialog.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfilterermaindialog.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterermenudialog.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfilterermenudialog.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterexamplesdialog.h Projects/Tools/ToolKalmanFilterer/qtkalmanfilterexamplesdialog.h<br/>
cp ../../Classes/CppKalmanFilter/fixedlagsmootherkalmanfilter.cpp Projects/Classes/CppKalmanFilter/fixedlagsmootherkalmanfilter.cpp<br/>
cp ../../Classes/CppKalmanFilter/standardkalmanfilterparameters.h Projects/Classes/CppKalmanFilter/standardkalmanfilterparameters.h<br/>
cp ../../Classes/CppKalmanFilter/steadystatekalmanfilterfactory.h Projects/Classes/CppKalmanFilter/steadystatekalmanfilterfactory.h<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/c_regex_traits.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/c_regex_traits.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/wide_posix_api.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/wide_posix_api.cpp<br/>
cp ../../Libraries/fparser4.5.1/extrasrc/fp_identifier_parser.inc Projects/Libraries/fparser4.5.1/extrasrc/fp_identifier_parser.inc<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterexamplesdialog.ui Projects/Tools/ToolKalmanFilterer/qtkalmanfilterexamplesdialog.ui<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterexperimentmodel.h Projects/Tools/ToolKalmanFilterer/qtkalmanfilterexperimentmodel.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfiltercalculationelements.h Projects/Classes/CppKalmanFilter/kalmanfiltercalculationelements.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterexperimentparameter.h Projects/Classes/CppKalmanFilter/kalmanfilterexperimentparameter.h<br/>
cp ../../Classes/CppKalmanFilter/laggedwhitenoisesystemfactory.cpp Projects/Classes/CppKalmanFilter/laggedwhitenoisesystemfactory.cpp<br/>
cp ../../Classes/CppKalmanFilter/standardwhitenoisesystemfactory.h Projects/Classes/CppKalmanFilter/standardwhitenoisesystemfactory.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemparametertype.cpp Projects/Classes/CppKalmanFilter/whitenoisesystemparametertype.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/operations.cpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/operations.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/wc_regex_traits.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/wc_regex_traits.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterexamplesdialog.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfilterexamplesdialog.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterexperimentdialog.h Projects/Tools/ToolKalmanFilterer/qtkalmanfilterexperimentdialog.h<br/>
cp ../../Classes/CppKalmanFilter/laggedwhitenoisesystemparameters.h Projects/Classes/CppKalmanFilter/laggedwhitenoisesystemparameters.h<br/>
cp ../../Classes/CppKalmanFilter/standardkalmanfilterparameters.cpp Projects/Classes/CppKalmanFilter/standardkalmanfilterparameters.cpp<br/>
cp ../../Classes/CppKalmanFilter/steadystatekalmanfilterfactory.cpp Projects/Classes/CppKalmanFilter/steadystatekalmanfilterfactory.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/path_traits.cpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/path_traits.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/portability.cpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/portability.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/unique_path.cpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/unique_path.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/cpp_regex_traits.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/cpp_regex_traits.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/regex_raw_buffer.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/regex_raw_buffer.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/w32_regex_traits.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/w32_regex_traits.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfiltercalculationdialog.h Projects/Tools/ToolKalmanFilterer/qtkalmanfiltercalculationdialog.h<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfiltererparameterdialog.h Projects/Tools/ToolKalmanFilterer/qtkalmanfiltererparameterdialog.h<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterexperimentdialog.ui Projects/Tools/ToolKalmanFilterer/qtkalmanfilterexperimentdialog.ui<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterexperimentmodel.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfilterexperimentmodel.cpp<br/>
cp ../../Classes/CppKalmanFilter/gapsfilledwhitenoisesystemfactory.h Projects/Classes/CppKalmanFilter/gapsfilledwhitenoisesystemfactory.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfiltercalculationelements.cpp Projects/Classes/CppKalmanFilter/kalmanfiltercalculationelements.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterexperimentparameter.cpp Projects/Classes/CppKalmanFilter/kalmanfilterexperimentparameter.cpp<br/>
cp ../../Classes/CppKalmanFilter/standardwhitenoisesystemfactory.cpp Projects/Classes/CppKalmanFilter/standardwhitenoisesystemfactory.cpp<br/>
cp ../../Classes/CppKalmanFilter/steadystatekalmanfilterparameters.h Projects/Classes/CppKalmanFilter/steadystatekalmanfilterparameters.h<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfiltercalculationdialog.ui Projects/Tools/ToolKalmanFilterer/qtkalmanfiltercalculationdialog.ui<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfiltererparameterdialog.ui Projects/Tools/ToolKalmanFilterer/qtkalmanfiltererparameterdialog.ui<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfilterexperimentdialog.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfilterexperimentdialog.cpp<br/>
cp ../../Classes/CppKalmanFilter/laggedwhitenoisesystemparameters.cpp Projects/Classes/CppKalmanFilter/laggedwhitenoisesystemparameters.cpp<br/>
cp ../../Classes/CppKalmanFilter/standardwhitenoisesystemparameters.h Projects/Classes/CppKalmanFilter/standardwhitenoisesystemparameters.h<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfiltercalculationdialog.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfiltercalculationdialog.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtkalmanfiltererparameterdialog.cpp Projects/Tools/ToolKalmanFilterer/qtkalmanfiltererparameterdialog.cpp<br/>
cp ../../Classes/CppKalmanFilter/fixedlagsmootherkalmanfilterfactory.h Projects/Classes/CppKalmanFilter/fixedlagsmootherkalmanfilterfactory.h<br/>
cp ../../Classes/CppKalmanFilter/gapsfilledwhitenoisesystemfactory.cpp Projects/Classes/CppKalmanFilter/gapsfilledwhitenoisesystemfactory.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterexperimentparametertype.h Projects/Classes/CppKalmanFilter/kalmanfilterexperimentparametertype.h<br/>
cp ../../Classes/CppKalmanFilter/steadystatekalmanfilterparameters.cpp Projects/Classes/CppKalmanFilter/steadystatekalmanfilterparameters.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.h Projects/Tools/ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.h<br/>
cp ../../Classes/CppKalmanFilter/gapsfilledwhitenoisesystemparameters.h Projects/Classes/CppKalmanFilter/gapsfilledwhitenoisesystemparameters.h<br/>
cp ../../Classes/CppKalmanFilter/standardwhitenoisesystemparameters.cpp Projects/Classes/CppKalmanFilter/standardwhitenoisesystemparameters.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.ui Projects/Tools/ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.ui<br/>
cp ../../Classes/CppKalmanFilter/fixedlagsmootherkalmanfilterfactory.cpp Projects/Classes/CppKalmanFilter/fixedlagsmootherkalmanfilterfactory.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterexperimentparametertype.cpp Projects/Classes/CppKalmanFilter/kalmanfilterexperimentparametertype.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/regex/src/regex_traits_defaults.cpp Projects/Libraries/boost_1_53_0/libs/regex/src/regex_traits_defaults.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.cpp Projects/Tools/ToolKalmanFilterer/qtwhitenoisesystemparametersdialog.cpp<br/>
cp ../../Classes/CppKalmanFilter/fixedlagsmootherkalmanfilterparameters.h Projects/Classes/CppKalmanFilter/fixedlagsmootherkalmanfilterparameters.h<br/>
cp ../../Classes/CppKalmanFilter/gapsfilledwhitenoisesystemparameters.cpp Projects/Classes/CppKalmanFilter/gapsfilledwhitenoisesystemparameters.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfiltercalculationelementsfactory.h Projects/Classes/CppKalmanFilter/kalmanfiltercalculationelementsfactory.h<br/>
cp ../../Classes/CppKalmanFilter/standardkalmanfiltercalculationelements.h Projects/Classes/CppKalmanFilter/standardkalmanfiltercalculationelements.h<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/utf8_codecvt_facet.cpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/utf8_codecvt_facet.cpp<br/>
cp ../../Classes/CppKalmanFilter/fixedlagsmootherkalmanfilterparameters.cpp Projects/Classes/CppKalmanFilter/fixedlagsmootherkalmanfilterparameters.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfiltercalculationelementsfactory.cpp Projects/Classes/CppKalmanFilter/kalmanfiltercalculationelementsfactory.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/date_time/src/gregorian/greg_month.cpp Projects/Libraries/boost_1_53_0/libs/date_time/src/gregorian/greg_month.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/date_time/src/gregorian/greg_names.hpp Projects/Libraries/boost_1_53_0/libs/date_time/src/gregorian/greg_names.hpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.h Projects/Tools/ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.h<br/>
cp ../../Classes/CppKalmanFilter/standardkalmanfiltercalculationelements.cpp Projects/Classes/CppKalmanFilter/standardkalmanfiltercalculationelements.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/windows_file_codecvt.cpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/windows_file_codecvt.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/windows_file_codecvt.hpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/windows_file_codecvt.hpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.ui Projects/Tools/ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.ui<br/>
cp ../../Classes/CppKalmanFilter/steadystatekalmanfiltercalculationelements.h Projects/Classes/CppKalmanFilter/steadystatekalmanfiltercalculationelements.h<br/>
cp ../../Libraries/boost_1_53_0/libs/date_time/src/gregorian/greg_weekday.cpp Projects/Libraries/boost_1_53_0/libs/date_time/src/gregorian/greg_weekday.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/system/src/local_free_on_destruction.hpp Projects/Libraries/boost_1_53_0/libs/system/src/local_free_on_destruction.hpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.cpp Projects/Tools/ToolKalmanFilterer/qtstandardkalmanfiltercalculationdialog.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/filesystem/src/codecvt_error_category.cpp Projects/Libraries/boost_1_53_0/libs/filesystem/src/codecvt_error_category.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.h Projects/Tools/ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.h<br/>
cp ../../Classes/CppKalmanFilter/steadystatekalmanfiltercalculationelements.cpp Projects/Classes/CppKalmanFilter/steadystatekalmanfiltercalculationelements.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.ui Projects/Tools/ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.ui<br/>
cp ../../Libraries/boost_1_53_0/libs/date_time/src/gregorian/date_generators.cpp Projects/Libraries/boost_1_53_0/libs/date_time/src/gregorian/date_generators.cpp<br/>
cp ../../Libraries/boost_1_53_0/libs/date_time/src/gregorian/gregorian_types.cpp Projects/Libraries/boost_1_53_0/libs/date_time/src/gregorian/gregorian_types.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.cpp Projects/Tools/ToolKalmanFilterer/qtsteadystatekalmanfiltercalculationdialog.cpp<br/>
cp ../../Classes/CppKalmanFilter/fixedlagsmootherkalmanfiltercalculationelements.h Projects/Classes/CppKalmanFilter/fixedlagsmootherkalmanfiltercalculationelements.h<br/>
cp ../../Tools/ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.h Projects/Tools/ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.h<br/>
cp ../../Classes/CppKalmanFilter/fixedlagsmootherkalmanfiltercalculationelements.cpp Projects/Classes/CppKalmanFilter/fixedlagsmootherkalmanfiltercalculationelements.cpp<br/>
cp ../../Tools/ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.ui Projects/Tools/ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.ui<br/>
cp ../../Tools/ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.cpp Projects/Tools/ToolKalmanFilterer/qtfixedlagsmootherkalmanfiltercalculationdialog.cpp<br/>
<br/>
FILENAME="../../Tools/ToolKalmanFiltererSource"<br/>
ZIP_FILENAME=$FILENAME".zip"<br/>
<br/>
echo "Compressing files"<br/>
<br/>
zip -r $FILENAME Projects<br/>
<br/>
echo "Cleaning up"<br/>
<br/>
echo "Emptying subfolders"<br/>
<br/>
rm Projects/Libraries/boost_1_53_0/libs/date_time/src/gregorian/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/filesystem/src/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/date_time/src/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/system/src/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/filesystem/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/regex/src/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/date_time/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/system/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/regex/*.*<br/>
rm Projects/Libraries/fparser4.5.1/extrasrc/*.*<br/>
rm Projects/Classes/CppQtHideAndShowDialog/*.*<br/>
rm Projects/Libraries/qwt-6.0.1/include/*.*<br/>
rm Projects/Libraries/boost_1_53_0/libs/*.*<br/>
rm Projects/Tools/ToolKalmanFilterer/*.*<br/>
rm Projects/Classes/CppQtAboutDialog/*.*<br/>
rm Projects/Libraries/qwt-6.0.1/src/*.*<br/>
rm Projects/Classes/CppKalmanFilter/*.*<br/>
rm Projects/Libraries/fparser4.5.1/*.*<br/>
rm Projects/Libraries/boost_1_53_0/*.*<br/>
rm Projects/Libraries/qwt-6.0.1/*.*<br/>
rm Projects/Classes/CppQtMatrix/*.*<br/>
rm Projects/Classes/CppQtModel/*.*<br/>
rm Projects/Classes/CppMatrix/*.*<br/>
rm Projects/Classes/CppTrace/*.*<br/>
rm Projects/Classes/CppAbout/*.*<br/>
rm Projects/Libraries/*.*<br/>
rm Projects/Classes/*.*<br/>
rm Projects/Tools/*.*<br/>
rm Projects/*.*<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/date_time/src/gregorian<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/filesystem/src<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/date_time/src<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/system/src<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/filesystem<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/regex/src<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/date_time<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/system<br/>
rmdir Projects/Libraries/boost_1_53_0/libs/regex<br/>
rmdir Projects/Libraries/fparser4.5.1/extrasrc<br/>
rmdir Projects/Classes/CppQtHideAndShowDialog<br/>
rmdir Projects/Libraries/qwt-6.0.1/include<br/>
rmdir Projects/Libraries/boost_1_53_0/libs<br/>
rmdir Projects/Tools/ToolKalmanFilterer<br/>
rmdir Projects/Classes/CppQtAboutDialog<br/>
rmdir Projects/Libraries/qwt-6.0.1/src<br/>
rmdir Projects/Classes/CppKalmanFilter<br/>
rmdir Projects/Libraries/fparser4.5.1<br/>
rmdir Projects/Libraries/boost_1_53_0<br/>
rmdir Projects/Libraries/qwt-6.0.1<br/>
rmdir Projects/Classes/CppQtMatrix<br/>
rmdir Projects/Classes/CppQtModel<br/>
rmdir Projects/Classes/CppMatrix<br/>
rmdir Projects/Classes/CppTrace<br/>
rmdir Projects/Classes/CppAbout<br/>
rmdir Projects/Libraries<br/>
rmdir Projects/Classes<br/>
rmdir Projects/Tools<br/>
rmdir Projects<br/>
<br/>
echo "Done"<br/>
<br/>
# QtCreatorProFileZipScript, version 1.0<br/>
# Copyright (C) 2013 Richel Bilderbeek<br/>
# Programmed on the 19th of May 2013<br/>
# by Richel Bilderbeek<br/>
# <br/>
# QtCreatorProFileZipScript can be downloaded from http://www.richelbilderbeek.nl/CppQtCreatorProFileZipScript.htm<br/>
# Licenced under GPL 3.0<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
