<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>class</title>
  <meta name="description" content="C++ class"/>
  <meta name="keywords" content="C++ class code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppClass.htm">class</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppClass.htm">class</a> is a <a href="CppKeyword.htm">keyword</a> to start a <a href="CppClass.htm">class</a> <a href="CppDeclaration.htm">declaration</a>. 
  A <a href="CppClass.htm">class</a> is a user-defined <a href="CppDataType.htm">data type</a> for a concept
  There are multiple <a href="CppAccessLevel.htm">class access levels</a>.
  There are multiple <a href="CppClassType.htm">class types</a>.
  There are multiple <a href="CppClassExample.htm">class examples</a>.
</p>
<p>&nbsp;</p>
<p>
  'A <a href="CppClass.htm">class</a> is a user-defined <a href="CppDataType.htm">data type</a> which 
  consists of data elements and <a href="CppFunction.htm">functions</a> which operate on that data. 
  In C++, this may be <a href="CppDeclaration.htm">declared</a> as a 
  <a href="CppClass.htm">class</a>; it may also be 
  <a href="CppDeclaration.htm">declared</a> as a <a href="CppStruct.htm">struct</a> or a 
  <a href="CppUnion.htm">union</a>. Data defined in a <a href="CppClass.htm">class</a> is called 
  <a href="CppMemberData.htm">member data</a> and <a href="CppFunction.htm">functions</a> 
  <a href="CppDefinition.htm">defined</a> in a <a href="CppClass.htm">class</a> are called 
  <a href="CppMemberFunction.htm">member functions</a>.' [2]
</p>
<p>&nbsp;</p>
<p>Class elements are:</p>
<ul>
  <li><a href="CppConstructor.htm">constructor</a></li>
  <li><a href="CppCopyAssignmentOperator.htm">copy assignment operator</a></li>
  <li><a href="CppDestructor.htm">destructor</a></li>
  <li><a href="CppMember.htm">members</a></li>
  <li><a href="CppHelperFunction.htm">helper functions</a></li>
</ul>
<p>&nbsp;</p>
<p>The <a href="CppClass.htm">class</a> <a href="CppKeyword.htm">keyword</a> also be used to create a <a href="CppTemplateFunction.htm">template function</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> 
  Example <a href="CppClass.htm">class</a>
</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppClass.htm">class</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>: <b><a href="CppInt.htm">int</a></b> mValue;<br/>
};<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;MyClass m;<br/>
&nbsp;&nbsp;m.mValue <a href="CppOperatorAssign.htm">=</a> 10;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp98.png" alt="C++98"/><img src="PicCpp11.png" alt="C++11"/> 
  <a href="CppClass.htm">Class</a> elements
</h2>
<p>&nbsp;</p>
<p>A <a href="CppClass.htm">class</a> can have many types of <a href="CppMember.htm">members</a>:</p>
<ul>
  <li><a href="CppMemberFunction.htm">member functions</a> or member <a href="CppFunction.htm">functions</a>, of which the <a href="CppBigFour.htm">Big Four</a> are especially important</li>
  <li><a href="CppDataMember.htm">data members</a> or member <a href="CppVariable.htm">variables</a></li>
  <li>member constants</li>
  <li>member types</li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppPublic.htm">public</a></b> by <b><a href="CppDefault.htm">default</a></b><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x) { m_x <a href="CppOperatorAssign.htm">=</a> x; } <a href="CppComment.htm">//</a>A <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A <a href="CppDataMember.htm">data member</a><br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>All <a href="CppClass.htm">classes</a> have a four special methods called the 
<a href="CppBigFour.htm">Big Four</a>: <a href="CppDefaultConstructor.htm">default constructor</a>, 
<a href="CppDestructor.htm">destructor</a>, <a href="CppCopyConstructor.htm">copy constructor</a> 
and <a href="CppCopyAssignmentOperator.htm">copy assignment operator</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> NoClass {}; <a href="CppComment.htm">//</a>Do all <b><a href="CppClass.htm">classes</a></b> really have a <a href="CppConstructor.htm">constructor</a>, <a href="CppDestructor.htm">destructor</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>copy <a href="CppConstructor.htm">constructor</a> and copy-assignment <b><a href="CppOperator.htm">operator</a></b>?<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This class called NoClass is silently converted by your <a href="CppCompiler.htm">compiler</a> to the following (from [1]):</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> NoClass<br/>
{<br/>
&nbsp;&nbsp;NoClass()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Default <a href="CppConstructor.htm">constructor</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>something<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;NoClass(<b><a href="CppConst.htm">const</a></b> NoClass&amp; rhs)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>copy <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>something<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;~NoClass()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Default <a href="CppDestructor.htm">destructor</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>something<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;NoClass&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> NoClass&amp; rhs) <a href="CppComment.htm">//</a>copy-assignment <b><a href="CppOperator.htm">operator</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>something<br/>
&nbsp;&nbsp;}<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Know what functions C++ silently writes and calls [1]
  </li>
  <li>
    Forgetting the semicolon at the end of a <a href="CppClass.htm">class</a> 
    <a href="CppDefinition.htm">definition</a> is a 
    <a href="CppSyntaxError.htm">syntax error</a> [3]
  </li>
  <li>Use UpperCamelCase for class names [4] </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 5: 'Know what functions C++ silently writes and calls'</li>
  <li><!--  2 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. 4.3.5: 'A class is a user-defined data type which consists of data elements and functions which operate on that data. In C++, this may be declared as a class; it may also be declared as a struct or a union. Data defined in a class is called member data and functions defined in a class are called member functions.'</li>
  <li><!--  3 -->Paul Deitel, Harvey Deitel. C++11 for programmers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 3.1, Common Programming Error 3.1. page 39: 'Forgetting the semicolon at the end of a class definition is a syntax error.'</li>
  <li><!--  4 -->Trevor Misfeldt, Gregory Bumgardner, Andrew Gray. The elements of C++ style. 2004. ISBN: 978-0-521-89308-4. Chapter 4.2, page 18: 'Use UpperCamelCase for classes, constants, structures, enumerations, and typedefs'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>