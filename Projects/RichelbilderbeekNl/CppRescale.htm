<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Rescale</title>
  <meta name="description" content="C++ Rescale"/>
  <meta name="keywords" content="C++ Rescale code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppRescale.htm">Rescale</a></h1>
<p>&nbsp;</p>
<p><a href="CppRescale.htm">Rescale</a> is a <a href="CppMath.htm">math</a> <a href="CppCodeSnippets.htm">code snippet</a> to rescale a 
<a href="CppDouble.htm">double</a>, 1D <a href="CppVector.htm">std::vector</a> or 2D <a href="CppVector.htm">std::vector</a> from a 
certain range to a new range.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Rescale on a <a href="CppDouble.htm">double</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Rescale on a double" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppRescale.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Rescale(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> oldMin,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> oldMax,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Min,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Max)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(value <a href="CppOperatorGreaterEqual.htm">&gt;=</a> oldMin);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(value <a href="CppOperatorLessEqual.htm">&lt;=</a> oldMax);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> oldDistance <a href="CppOperatorAssign.htm">=</a> oldMax <a href="CppOperatorMinus.htm">-</a> oldMin;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>At which relative distance is value on oldMin to oldMax ?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> (value <a href="CppOperatorMinus.htm">-</a> oldMin) <a href="CppOperatorDivide.htm">/</a> oldDistance;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(distance <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(distance <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Distance <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b>Max <a href="CppOperatorMinus.htm">-</a> <b><a href="CppNew.htm">new</a></b>Min;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Value <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b>Min <a href="CppOperatorPlus.htm">+</a> (distance * <b><a href="CppNew.htm">new</a></b>Distance);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppNew.htm">new</a></b>Value <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <b><a href="CppNew.htm">new</a></b>Min);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppNew.htm">new</a></b>Value <a href="CppOperatorLessEqual.htm">&lt;=</a> <b><a href="CppNew.htm">new</a></b>Max);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b>Value;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Rescale on a 1D <a href="CppVector.htm">std::vector</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Rescale on a 1D std::vector" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppRescale.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Rescale(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Min,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Max)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> oldMin <a href="CppOperatorAssign.htm">=</a> *<a href="CppMin_element.htm">std::min_element</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> oldMax <a href="CppOperatorAssign.htm">=</a> *<a href="CppMax_element.htm">std::max_element</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::<a href="CppIterator.htm">iterator</a> Iter;<br/>
&nbsp;&nbsp;Iter i <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Iter j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> Rescale(*i,oldMin,oldMax,<b><a href="CppNew.htm">new</a></b>Min,<b><a href="CppNew.htm">new</a></b>Max);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Rescale on a 2D <a href="CppVector.htm">std::vector</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Rescale on a 2D std::vector" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppRescale.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; Rescale(<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Min,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Max)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> oldMin <a href="CppOperatorAssign.htm">=</a> <a href="CppMinElement.htm">MinElement</a>(v);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> oldMax <a href="CppOperatorAssign.htm">=</a> <a href="CppMaxElement.htm">MaxElement</a>(v);<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;::<a href="CppIterator.htm">iterator</a> RowIter;<br/>
&nbsp;&nbsp;RowIter y <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> RowIter maxy <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; y<a href="CppOperatorNotEqual.htm">!=</a>maxy; <a href="CppOperatorPlus.htm">+</a>+y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::<a href="CppIterator.htm">iterator</a> ColIter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ColIter x <a href="CppOperatorAssign.htm">=</a> y-&gt;begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ColIter maxx <a href="CppOperatorAssign.htm">=</a> y-&gt;end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; x<a href="CppOperatorNotEqual.htm">!=</a>maxx; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*x <a href="CppOperatorAssign.htm">=</a> Rescale(*x,oldMin,oldMax,<b><a href="CppNew.htm">new</a></b>Min,<b><a href="CppNew.htm">new</a></b>Max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
