<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #1: a foolproof function</title>
  <meta name="description" content="C++ Answer of exercise #1: a foolproof function"/>
  <meta name="keywords" content="C++ Answer of exercise #1: a foolproof function code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseFoolproofFunctionAnswer.htm">Answer of exercise #1: a foolproof function</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseFoolproofFunction.htm">exercise #1: a foolproof function</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>1) prevent that Thing is modified</h2>
<p>&nbsp;</p>
<p>We do not want to modify a Thing. The <a href="CppCompiler.htm">compiler</a>, however, does not know this. The
<a href="CppCompiler.htm">compiler</a> thinks we do want to modify a Thing, because the 
<a href="CppPointer.htm">pointer</a> to Thing is not <a href="CppConst.htm">const</a>. This makes it possible to write to 
a Thing, as shown in the code below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Thing { <b><a href="CppInt.htm">int</a></b> mX; };<br/>
<br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(Thing * thing)<br/>
{<br/>
&nbsp;&nbsp;thing-&gt;mX <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Write to Thing! Must be noticed by the <a href="CppCompiler.htm">compiler</a><br/>
<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>To solve this problem, make Thing <a href="CppConst.htm">const</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Thing { <b><a href="CppInt.htm">int</a></b> mX; };<br/>
<br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>thing-&gt;mX <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Cannot modify a <b><a href="CppConst.htm">const</a></b> object<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Use <a href="CppConst.htm">const</a> whenever possible [1-4].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>2) prevent that Thing cannot be read</h2>
<p>&nbsp;</p>
<p>Before being read, <a href="CppPointer.htm">pointers</a> must always point to a valid object. Nothing prevents us
from making the <a href="CppPointer.htm">pointer</a>-to-Thing point to zero:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Thing { <b><a href="CppInt.htm">int</a></b> mX; };<br/>
 <br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * thing)<br/>
{<br/>
&nbsp;&nbsp;thing <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot read from <a href="CppPointer.htm">pointer</a> to Thing anymore<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>To solve this problem, make the <a href="CppPointer.htm">pointer</a> itself <a href="CppConst.htm">const</a> as well. 
This brings you to the following code:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Thing { <b><a href="CppInt.htm">int</a></b> mX; };<br/>
<br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>thing <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Cannot modify a <b><a href="CppConst.htm">const</a></b> object<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Again, use <a href="CppConst.htm">const</a> whenever possible [1-4].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>3) prevent that Thing is modified in some other way than #1</h2>
<p>&nbsp;</p>
<p>Be aware that you can <a href="CppDeletePointerToConst.htm">delete a pointer-to-const</a>. 
Deleting a Thing, however, is disastrous:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Thing { <b><a href="CppInt.htm">int</a></b> mX; };<br/>
 <br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> thing;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>But there is no Thing anymore!<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>To solve this problem, we must modify Thing itself.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Thing<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mX;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Thing() {}<br/>
};<br/>
 <br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> thing; <a href="CppComment.htm">//</a><a href="CppDestructor.htm">Destructor</a> <b><a href="CppFor.htm">for</a></b> 'Thing' is not accessible<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Now, <a href="CppExerciseFoolproofFunction.htm">exercise #1: a foolproof function</a>
has succeeded. If you knew all three steps, you get an A. Congratulations!</p> 
<p>&nbsp;</p>
<p>But...</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>3.1) A new problem</h2>
<p>&nbsp;</p>
<p>A new problem has arisen: we cannot <a href="CppConstructor.htm">construct</a> a Thing, as it cannot be 
<a href="CppDelete.htm">deleted</a> when going out of <a href="CppScope.htm">scope</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Thing<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mX;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Thing() {}<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> thing; <a href="CppComment.htm">//</a><a href="CppDestructor.htm">Destructor</a> <b><a href="CppFor.htm">for</a></b> 'Thing' is not accessible<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;Thing t; <a href="CppComment.htm">//</a><a href="CppDestructor.htm">Destructor</a> <b><a href="CppFor.htm">for</a></b> 'Thing' is not accessible<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Try to solve this problem yourself. Make it work. But keep ReadThing foolproof.</p>
<p>&nbsp;</p>
<p>Got it?</p>
<p>&nbsp;</p>
<p>Already?</p>
<p>&nbsp;</p>
<p>Are you sure?</p>
<p>&nbsp;</p>
<p>Okay, I'll show the solutions.</p>
<p>&nbsp;</p>
<p>The way to solve this problem is to use the <a href="CppFriend.htm">friend</a> <a href="CppKeyword.htm">keyword</a>. 
I show three possible <a href="CppFriend.htm">friends</a>:</p>
<ol>
  <li>the <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a></li>
  <li>a <a href="CppSmartPointer.htm">smart pointer</a></li>
  <li><a href="CppChecked_delete.htm">boost::checked_delete</a></li>
</ol>
<p>&nbsp;</p>
<p>'What, use <a href="CppFriend.htm">friend</a>?', I hear you mutter, 'You should never use 
<a href="CppFriend.htm">friend</a>!', as well as
'<a href="CppFriend.htm">friend</a> reduces <a href="CppEncapsulation.htm">encapsulation</a>!'. 
If you just muttered these words, feel free to <a href="Contact.htm">contact me</a> with a 
<a href="CppReferences.htm">reference</a> to the <a href="CppBooks.htm">book</a> in which you read this. 
I could not find it anywhere in my literature collection.</p>
<p>&nbsp;</p>
<p>And also, if you muttered this, read the following three options below to see that
there is more <a href="CppEncapsulation.htm">encapsulation</a>, instead of less:
Thing cannot be <a href="CppDestructor.htm">destroyed</a> by
anything, except its <em>only, single</em> <a href="CppFriend.htm">friend</a>. 
This makes Thing more <a href="CppEncapsulation.htm">encapsulated</a> than by making
everything able to <a href="CppDestructor.htm">destroy</a> it. 
Read it again: making Thing <a href="CppDestructor.htm">destructable</a> by
its <em>only, single</em> <a href="CppFriend.htm">friend</a> only, makes Thing more 
<a href="CppEncapsulation.htm">encapsulated</a> by making everything able
to <a href="CppDestructor.htm">destroy</a> it.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>3.1.1) <a href="CppFriend.htm">Befriending</a> the <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a></h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Thing<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mX;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Thing() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>();<br/>
};<br/>
 <br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> thing; <a href="CppComment.htm">//</a><a href="CppDestructor.htm">Destructor</a> <b><a href="CppFor.htm">for</a></b> 'Thing' is not accessible<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;Thing t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p><a href="CppFriend.htm">Befriending</a> the <a href="CppMain.htm">main</a> <a href="CppFunction.htm">function</a>
has its restrictions: a Thing cannot be a <a href="CppClass.htm">class</a> member. For this simple piece of code, however,
it is a valid solution.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>3.1.2) <a href="CppFriend.htm">Befriending</a> a <a href="CppSmartPointer.htm">smart pointer</a></h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Thing<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mX;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Thing() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Thing&gt;;<br/>
};<br/>
 <br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> thing; <a href="CppComment.htm">//</a><a href="CppDestructor.htm">Destructor</a> <b><a href="CppFor.htm">for</a></b> 'Thing' is not accessible<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Thing&gt; t(<b><a href="CppNew.htm">new</a></b> Thing);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>A <a href="CppAuto_ptr.htm">std::auto_ptr</a> calls the <a href="CppDestructor.htm">destructor</a> of Thing when it
goes out of <a href="CppScope.htm">scope</a>. So, when making a <a href="CppAuto_ptr.htm">std::auto_ptr</a>
a friend of Thing, you can create <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;Thing&gt;.</p>
<p>&nbsp;</p>
<p>A drawback of this solution is that a <a href="CppAuto_ptr.htm">std::auto_ptr</a> does not have a checked
delete (for example <a href="CppChecked_delete.htm">boost::checked_delete</a>).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>3.1.3) <a href="CppFriend.htm">Befriending</a> <a href="CppChecked_delete.htm">boost::checked_delete</a></h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/shared_ptr.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Thing<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mX;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~Thing() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Thing *);<br/>
};<br/>
 <br/>
<a href="CppComment.htm">//</a>Thing must be passed by normal (that is, non-smart) <a href="CppPointer.htm">pointer</a><br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> thing; <a href="CppComment.htm">//</a><a href="CppDestructor.htm">Destructor</a> <b><a href="CppFor.htm">for</a></b> 'Thing' is not accessible<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Thing&gt; t(<b><a href="CppNew.htm">new</a></b> Thing);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>My personal favorite solution. But also this solution has a drawback, as one can
now write the following in ReadThing:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppChecked_delete.htm">boost::checked_delete</a>(thing);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>But there is no Thing anymore!<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>But the <a href="CppExercise.htm">exercise</a> was to make ReadThing foolproof, not evil-genius-proof.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>4) Document the internal assumptions of the function</h2>
<p>&nbsp;</p>
<p>The ReadThing <a href="CppFunction.htm">function</a> has one assumption: 
the <a href="CppPointer.htm">pointer</a> must point to a valid Thing.
Use <a href="CppAssert.htm">assert</a> to document internal assumptions [5-9].</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> ReadThing(<b><a href="CppConst.htm">const</a></b> Thing * <b><a href="CppConst.htm">const</a></b> thing)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(thing);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read Thing<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Again, use <a href="CppAssert.htm">assert</a> to document internal assumptions [5-9].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 7.9.3: 'Use const extensively and consistently'</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN: 0-321-33487-6. Item 3: 'Use const whenever possible'</li>
  <li><a href="CppJarrodHollingworth.htm">Jarrod Hollingworth</a>, <a href="CppBobSwart.htm">Bob Swart</a>, <a href="CppMarkCashman.htm">Mark Cashman</a>, <a href="CppPaulGustavson.htm">Paul Gustavson</a>. Sams C++ Builder 6 Developer's Guide. ISBN: 0-672-32480-6. Chapter 3: 'Understand and use const in your code'</li>
  <li><a href="CppJesseLiberty.htm">Jesse Liberty</a>. Sams teach yourself C++ in 24 hours. ISBN: 0-672-32224-2. Hour 8, chapter 'Const member functions': 'Use const whenever possible.'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 68: 'Assert liberally to document internal assumptions and invariants'.</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Advice 24.5.18: 'Explicitly express preconditions,postconditions, and other assertions as assertions'.</li>
  <li>Steve McConnell. Code Complete (2nd edition). 2004. ISBN: -735619670. Chapter 8.2 'Assertions', paragraph 'Guidelines for using asserts': 'Use assertions to document and verify preconditions and postconditions'.</li>
  <li>Steve McConnell. Code Complete (2nd edition). 2004. ISBN: -735619670. Chapter 8.2 'Assertions', paragraph 'Guidelines for using asserts': 'Use assertions for conditions that should never occur'.</li>
  <li><a href="CppJesseLiberty.htm">Jesse Liberty</a>. Sams teach yourself C++ in 24 hours. ISBN: 0-672-32224-2. Hour 24, chapter 'assert()': 'Use assert freely'.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
