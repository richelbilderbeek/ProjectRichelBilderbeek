<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Exception</title>
  <meta name="description" content="C++ Exception"/>
  <meta name="keywords" content="C++ Exception"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppException.htm">exception</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppException.htm">Exceptions</a> are a mechanism for error handling.
  The <a href="CppStl.htm">STL</a> <a href="CppClass.htm">class</a> for an <a href="CppException.htm">exceptions</a> is 
  called <a href="CppStdException.htm">std::exception</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Use <a href="CppException.htm">exceptions</a> for error handling, instead of using return error codes [2,11]
  </li>
  <li>
    <a href="CppThrow.htm">Throw</a> an <a href="CppException.htm">exception</a> to indicate that you cannot perform an assigned task [1]
  </li>
  <li>
    Use purpose-designed user-defined types as exceptions (not built-in types) [3]
  </li>
  <li>
    Always <a href="CppCatch.htm">catch</a> <a href="CppStdException.htm">exception</a>&amp; and ... [12]
  </li>
  <li>
    Don't try to <a href="CppCatch.htm">catch</a> every <a href="CppException.htm">exception</a> in every <a href="CppFunction.htm">function</a> [4]
  </li>
  <li>
    Release locally owned resources before <a href="CppThrow.htm">throwing</a> an <a href="CppException.htm">exception</a> [5]
  </li>
  <li>
    Don't use <a href="CppException.htm">exceptions</a> where more local control structures will suffice [6]
  </li>
  <li>
    Not every program needs to be exception-safe [7]
  </li>
  <li>
    Don't use <a href="CppException.htm">exception</a> specification [8]
  </li>
  <li>
    The <a href="CppStl.htm">STL</a> <a href="CppExceptionHierarchy.htm">exception hierarchy</a> can be (but does not have to be) used for a user's own <a href="CppException.htm">exceptions</a> [13]
  </li>
  <li>
    Don't assume that every <a href="CppException.htm">exception</a> is derived from class <a href="CppStdException.htm">std::exception</a> [9]
  </li>
  <li>
    Have <a href="CppMain.htm">main</a> <a href="CppCatch.htm">catch</a> and report every <a href="CppException.htm">exception</a> [10]
  </li>
  <li>
    If you can't use <a href="CppException.htm">exceptions</a>, consider <a href="CppSystem_errorH.htm">system_error</a> [14]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">Reference</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 386: '[2] Throw an exception to indicate that you cannot perform an assigned task'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 386: '[3] Use exceptions for error handling'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 386: '[4] Use purpose-designed user-defined types as exceptions (not built-in types)'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[8] Don't try to catch every exception in every function'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[12] Release locally owned resources before throwing an exception'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[14] Don't use exceptions where more local control structures will suffice'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[17] Not every program needs to be exception-safe'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[24] Don't use exception specification'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[26] Don't assume that every exception is derived from class exception'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[27] Have main() catch and report every exception'</li>
  <li><!-- 11 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 30.5. Advice. page 883: '[9] Prefer exception-based error handling over return-code-based error handling'</li>
  <li><!-- 12 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 30.5. Advice. page 883: '[10] Always catch exception&amp; (for standard-library and language support exceptions) and ... (for unexpected exceptions)'</li>
  <li><!-- 13 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 30.5. Advice. page 883: '[11] The standard-library exception hierarchy can be (but does not have to be) used for a user's own exceptions'</li>
  <li><!-- 14 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 30.5. Advice. page 884: '[15] If you can't use exceptions, consider &lt;system_error&gt;'</li>

</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
