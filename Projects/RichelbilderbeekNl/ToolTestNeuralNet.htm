<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TestNeuralNet</title>
  <meta name="description" content="C++ TestNeuralNet"/>
  <meta name="keywords" content="C++ TestNeuralNet "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolTestNeuralNet.htm">TestNeuralNet</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.636 at Sun Apr 27 13:06:29 2014
 -->
<p><a href="ToolTestNeuralNet.htm">TestNeuralNet</a> is a <a href="Tools.htm">tool</a> to test the 
<a href="CppNeuralNet.htm">NeuralNet</a> <a href="CppClass.htm">class</a>.</p>
<p>&nbsp;</p>
<p><a href="ToolTestNeuralNet.htm">TestNeuralNet</a> is programmed in <a href="Cpp.htm">C++</a> 
using the <a href="CppIde.htm">IDE</a> <a href="CppQtCreator.htm">Qt Creator</a>. 
It uses the  <a href="CppBoost.htm">Boost</a>, <a href="CppQt.htm">Qt</a>, <a href="CppShark.htm">Shark</a>
and <a href="CppStl.htm">STL</a> <a href="CppLibrary.htm">libraries</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ToolTestNeuralNet_0_1.png">View a screenshot of 'TestNeuralNet' (version 0.1)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicConsole.png" alt="Console"/> <a href="ToolTestNeuralNetConsoleExe.zip">Download the 'TestNeuralNet' Windows executable (latest version)(zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicDesktop.png" alt="Desktop"/> <a href="ToolTestNeuralNetDesktopExe.zip">Download the 'TestNeuralNet' Windows executable (latest version)(zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/><img src="PicWeb.png" alt="Web"/> <a href="ToolTestNeuralNetWebsiteExe.zip">Download the 'TestNeuralNet' Windows executable (latest version)(zip)</a></li>
  <li><a href="ToolTestNeuralNetSource_0_1.zip">Download the 'TestNeuralNet' source code (version 0.1)(zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.2.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolTestNeuralNet/ToolTestNeuralNet.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTestNeuralNet/ToolTestNeuralNet.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(debug, debug|release) {<br/>
&nbsp;&nbsp;message(Building debug version)<br/>
<br/>
} else {<br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG<br/>
&nbsp;&nbsp;message(Building release version)<br/>
}<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += -L/usr/local/lib -lshark<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;neuralnet.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog<a href="CppAbout.htm">about</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= dialog<a href="CppMain.htm">main</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;neuralnet.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog<a href="CppAbout.htm">about</a>.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a>&nbsp;&nbsp;&nbsp;&nbsp;+= dialog<a href="CppMain.htm">main</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dialog<a href="CppAbout.htm">about</a>.ui<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="ToolTestNeuralNet.htm">ToolTestNeuralNet</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTestNeuralNet/dialogabout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTestNeuralNet/dialogabout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTestNeuralNet.htm">TestNeuralNet</a>, <a href="Tools.htm">tool</a> to test the <a href="CppNeuralNet.htm">NeuralNet</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestNeuralNet.htm">ToolTestNeuralNet</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> DIALOGABOUT_H<br/>
<a href="CppDefine.htm">#define</a> DIALOGABOUT_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Dialog<a href="CppAbout.htm">About</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> Dialog<a href="CppAbout.htm">About</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Dialog<a href="CppAbout.htm">About</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~Dialog<a href="CppAbout.htm">About</a>();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> changeEvent(<a href="CppQEvent.htm">QEvent</a> *e);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::Dialog<a href="CppAbout.htm">About</a> *ui;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppGetBoostVersion.htm">GetBoostVersion</a> <a href="CppReturn.htm">returns</a> the <a href="CppVersion.htm">version</a> of the current <a href="CppBoost.htm">Boost</a> <a href="CppLibrary.htm">library</a>.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetBoostVersion.htm">GetBoostVersion</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetBoostVersion.htm">GetBoostVersion</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> DIALOGABOUT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTestNeuralNet/dialogabout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTestNeuralNet/dialogabout.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTestNeuralNet.htm">TestNeuralNet</a>, <a href="Tools.htm">tool</a> to test the <a href="CppNeuralNet.htm">NeuralNet</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestNeuralNet.htm">ToolTestNeuralNet</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppVersion.htm">version</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "dialog<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "dialogmain.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_dialog<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "neuralnet.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Dialog<a href="CppAbout.htm">About</a>::Dialog<a href="CppAbout.htm">About</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::Dialog<a href="CppAbout.htm">About</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_about_qt,<a href="CppSignalMacro.htm">SIGNAL</a>(clicked()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qApp,<a href="CppSLOT.htm">SLOT</a>(<a href="CppAbout.htm">about</a><a href="CppQt.htm">Qt</a>()));<br/>
<br/>
&nbsp;&nbsp;ui-&gt;label_title-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>("<a href="ToolTestNeuralNet.htm">TestNeuralNet</a> <a href="CppVersion.htm">version</a> ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQString.htm">QString</a>(DialogMain::Get<a href="CppVersion.htm">Version</a>().c_str()));<br/>
<br/>
<br/>
&nbsp;&nbsp;ui-&gt;label_<a href="CppBoost.htm">boost</a>_<a href="CppVersion.htm">version</a>-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>("<a href="CppBoost.htm">Boost</a> <a href="CppVersion.htm">version</a>: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQString.htm">QString</a>(<a href="CppGetBoostVersion.htm">GetBoostVersion</a>().c_str()));<br/>
<br/>
&nbsp;&nbsp;ui-&gt;label_neuralnet_<a href="CppVersion.htm">version</a>-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQString.htm">QString</a>("<a href="CppNeuralNet.htm">NeuralNet</a> <a href="CppVersion.htm">version</a>: ")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppQString.htm">QString</a>(<a href="CppNeuralNet.htm">NeuralNet</a>::Get<a href="CppVersion.htm">Version</a>().c_str()));<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Dialog<a href="CppAbout.htm">About</a>::~Dialog<a href="CppAbout.htm">About</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Dialog<a href="CppAbout.htm">About</a>::changeEvent(<a href="CppQEvent.htm">QEvent</a> *e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::changeEvent(e);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (e-&gt;type()) {<br/>
&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQEvent.htm">QEvent</a>::LanguageChange:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;retranslateUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppGetBoostVersion.htm">GetBoostVersion</a> <a href="CppReturn.htm">returns</a> the <a href="CppVersion.htm">version</a> of the current <a href="CppBoost.htm">Boost</a> <a href="CppLibrary.htm">library</a>.<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetBoostVersion.htm">GetBoostVersion</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppGetBoostVersion.htm">GetBoostVersion</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> BOOST_LIB_VERSION;<br/>
&nbsp;&nbsp;<a href="CppStdReplace.htm">std::replace</a>(s.begin(),s.end(),'_','.');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTestNeuralNet/dialogmain.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTestNeuralNet/dialogmain.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTestNeuralNet.htm">TestNeuralNet</a>, <a href="Tools.htm">tool</a> to test the <a href="CppNeuralNet.htm">NeuralNet</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestNeuralNet.htm">ToolTestNeuralNet</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> DIALOGMAIN_H<br/>
<a href="CppDefine.htm">#define</a> DIALOGMAIN_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> DialogMain;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> DialogMain : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> DialogMain(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~DialogMain();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() { <b><a href="CppReturn.htm">return</a></b> "0.1"; }<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> changeEvent(<a href="CppQEvent.htm">QEvent</a> *e);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::DialogMain *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on<a href="CppAbout.htm">About</a>();<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> DIALOGMAIN_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTestNeuralNet/dialogmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTestNeuralNet/dialogmain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTestNeuralNet.htm">TestNeuralNet</a>, <a href="Tools.htm">tool</a> to test the <a href="CppNeuralNet.htm">NeuralNet</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestNeuralNet.htm">ToolTestNeuralNet</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "dialog<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "dialogmain.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_dialogmain.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
DialogMain::DialogMain(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::DialogMain)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_about,<a href="CppSignalMacro.htm">SIGNAL</a>(clicked()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on<a href="CppAbout.htm">About</a>()));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
DialogMain::~DialogMain()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DialogMain::changeEvent(<a href="CppQEvent.htm">QEvent</a> *e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>::changeEvent(e);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (e-&gt;type()) {<br/>
&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQEvent.htm">QEvent</a>::LanguageChange:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;retranslateUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DialogMain::on<a href="CppAbout.htm">About</a>()<br/>
{<br/>
&nbsp;&nbsp;Dialog<a href="CppAbout.htm">About</a> d;<br/>
&nbsp;&nbsp;d.exec();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTestNeuralNet/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTestNeuralNet/main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="ToolTestNeuralNet.htm">TestNeuralNet</a>, <a href="Tools.htm">tool</a> to test the <a href="CppNeuralNet.htm">NeuralNet</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolTestNeuralNet.htm">ToolTestNeuralNet</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "dialogmain.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;DialogMain w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTestNeuralNet/neuralnet.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTestNeuralNet/neuralnet.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppNeuralNet.htm">NeuralNet</a>, a three-layered percep<a href="GameTronCollection.htm">tron</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppNeuralNet.htm">NeuralNet</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> NEURALNET_H<br/>
<a href="CppDefine.htm">#define</a> NEURALNET_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArray.htm">Array</a>/<a href="CppArray.htm">Array</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ReClaM/FFNet.h&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppNeuralNet.htm">NeuralNet</a> is a derived <b><a href="CppClass.htm">class</a></b> of FFNet<br/>
<a href="CppComment.htm">///</a>to gain access to some <b><a href="CppProtected.htm">protected</a></b> <a href="CppMemberFunction.htm">member function</a>s of FFNet<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppNeuralNet.htm">NeuralNet</a> : <b><a href="CppPublic.htm">public</a></b> FFNet<br/>
{<br/>
&nbsp;&nbsp;<a href="CppNeuralNet.htm">NeuralNet</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_hidden_neurons,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_outputs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppCopyConstructor.htm">Copy constructor</a><br/>
&nbsp;&nbsp;<a href="CppNeuralNet.htm">NeuralNet</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; n);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assignment <b><a href="CppOperator.htm">operator</a></b><br/>
&nbsp;&nbsp;<a href="CppNeuralNet.htm">NeuralNet</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; n);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Propagate creates the output of a neural network <b><a href="CppFor.htm">for</a></b> certain inputs<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Propagate(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &amp;inputs) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; GetConnections() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfInputs() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfHiddenNeurons() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfNeurons() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfOutputs() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read the output value from <a href="CppAny.htm">any</a> neuron<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetOutputValue(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetWeights() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Mutate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() { <b><a href="CppReturn.htm">return</a></b> "1.0"; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Wrapper <a href="CppMemberFunction.htm">member function</a> due to clumsy createConnection<a href="CppMatrix.htm">Matrix</a> behavior<br/>
&nbsp;&nbsp;<a href="CppArray.htm">Array</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; CreateConnection<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_hidden_neurons,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_outputs) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_number_of_inputs;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_number_of_hidden_neurons;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_number_of_outputs;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Activate uses <b><a href="CppDefault.htm">default</a></b> FFNet::activate <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use Propagate instead<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Activate(<b><a href="CppConst.htm">const</a></b> <a href="CppArray.htm">Array</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &amp;inputs) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use Propagate instead<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Propagate<a href="CppArray.htm">Array</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppArray.htm">Array</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &amp;inputs) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read the output from the output layer from <b><a href="CppThis.htm">this</a></b> neural network<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use Propagate instead<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetOutputLayerOutputValues() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Swap(<a href="CppNeuralNet.htm">NeuralNet</a>&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; rhs);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; rhs);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppGetRandomUniform.htm">GetRandomUniform</a> draws a <a href="CppRandomNumber.htm">random number</a> in range [0,1&gt;<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetRandomUniform.htm">GetRandomUniform</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; <a href="CppConvert.htm">Convert</a>ToVector(<b><a href="CppConst.htm">const</a></b> <a href="CppArray.htm">Array</a>&lt;T&gt; a)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;(a.begin(),a.end());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<a href="CppArray.htm">Array</a>&lt;T&gt; <a href="CppConvert.htm">Convert</a>To<a href="CppArray.htm">Array</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppArray.htm">Array</a>&lt;T&gt; a;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; v_copy(v); <a href="CppComment.htm">//</a>This is terrible!<br/>
&nbsp;&nbsp;a.append_elems(v_copy);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> NEURALNET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTestNeuralNet/neuralnet.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTestNeuralNet/neuralnet.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppNeuralNet.htm">NeuralNet</a>, a three-layered percep<a href="GameTronCollection.htm">tron</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppNeuralNet.htm">NeuralNet</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBOOST_FOREACH.htm">foreach</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;ReClaM/createConnection<a href="CppMatrix.htm">Matrix</a>.h&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "neuralnet.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppNeuralNet.htm">NeuralNet</a>::<a href="CppNeuralNet.htm">NeuralNet</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_inputs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_hidden_neurons,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_outputs)<br/>
&nbsp;&nbsp;: FFNet(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_inputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_outputs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateConnection<a href="CppMatrix.htm">Matrix</a>(n_inputs,n_hidden_neurons,n_outputs)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_number_of_inputs(n_inputs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_number_of_hidden_neurons(n_hidden_neurons),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_number_of_outputs(n_outputs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;numberOfNeurons)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> m_number_of_inputs<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> m_number_of_hidden_neurons<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> m_number_of_outputs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume no neurons are lost in translation");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;numberOfNeurons)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetNumberOfNeurons()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume GetNumberOfNeurons() works fine");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Calls FFNet's <a href="CppCopyConstructor.htm">copy constructor</a><br/>
<a href="CppNeuralNet.htm">NeuralNet</a>::<a href="CppNeuralNet.htm">NeuralNet</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; n)<br/>
&nbsp;&nbsp;: FFNet(n),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_number_of_inputs(n.m_number_of_inputs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_number_of_hidden_neurons(n.m_number_of_hidden_neurons),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_number_of_outputs(n.m_number_of_outputs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot <a href="CppAssert.htm">assert</a> <b><a href="CppThis.htm">this</a></b> internally, because it causes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>an infinite <a href="CppFunction.htm">function</a> call stack<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(n <a href="CppOperatorEqual.htm">==</a> *<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assignment <b><a href="CppOperator.htm">operator</a></b><br/>
<a href="CppNeuralNet.htm">NeuralNet</a>&amp; <a href="CppNeuralNet.htm">NeuralNet</a>::<b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; other)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppNeuralNet.htm">NeuralNet</a> temp(other);<br/>
&nbsp;&nbsp;Swap(temp);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>::Swap(<a href="CppNeuralNet.htm">NeuralNet</a>&amp; other)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_number_of_inputs,other.m_number_of_inputs);<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_number_of_hidden_neurons,other.m_number_of_hidden_neurons);<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_number_of_outputs,other.m_number_of_outputs);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pray <b><a href="CppThis.htm">this</a></b> works<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(connection<a href="CppMatrix.htm">Matrix</a>,other.connection<a href="CppMatrix.htm">Matrix</a>);<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(weight<a href="CppMatrix.htm">Matrix</a>,other.weight<a href="CppMatrix.htm">Matrix</a>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppArray.htm">Array</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppNeuralNet.htm">NeuralNet</a>::CreateConnection<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_inputs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_hidden,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_outputs) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppArray.htm">Array</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m;<br/>
&nbsp;&nbsp;createConnection<a href="CppMatrix.htm">Matrix</a>(m,n_inputs, n_hidden, n_outputs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Activate uses <b><a href="CppDefault.htm">default</a></b> FFNet::activate <a href="CppMemberFunction.htm">member function</a><br/>
<a href="CppComment.htm">///</a>FFNet::activate is not a <b><a href="CppConst.htm">const</a></b> <a href="CppMemberFunction.htm">member function</a><br/>
<a href="CppComment.htm">///</a>The code below proofs that the FFNet is not<br/>
<a href="CppComment.htm">///</a>changed, so <b><a href="CppThis.htm">this</a></b> <a href="CppMemberFunction.htm">member function</a> could have been a <b><a href="CppConst.htm">const</a></b>-<a href="CppMemberFunction.htm">member function</a>.<br/>
<a href="CppComment.htm">///</a>Prefer to use the <b><a href="CppConst.htm">const</a></b>-correct Propagate <a href="CppMemberFunction.htm">member function</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>::Activate(<b><a href="CppConst.htm">const</a></b> <a href="CppArray.htm">Array</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &amp;inputs) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>I promise not to change <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;<a href="CppNeuralNet.htm">NeuralNet</a> * <b><a href="CppConst.htm">const</a></b> n <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<a href="CppNeuralNet.htm">NeuralNet</a>*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> CHECK_ARCHITECTURE_762347632476<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;CHECK_ARCHITECTURE_762347632476<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a> before(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;n-&gt;activate(inputs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;CHECK_ARCHITECTURE_762347632476<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a> after(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(before <a href="CppOperatorEqual.htm">==</a> after<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Proof that neural net does not change");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppNeuralNet.htm">NeuralNet</a>::GetConnections() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> CHECK_ARCHITECTURE_165254<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;CHECK_ARCHITECTURE_165254<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the original connection <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppArray.htm">Array</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; a_copy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;connection<a href="CppMatrix.htm">Matrix</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>I promise not to change <b><a href="CppThis.htm">this</a></b> <a href="CppNeuralNet.htm">NeuralNet</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppNeuralNet.htm">NeuralNet</a> * n <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<a href="CppNeuralNet.htm">NeuralNet</a>*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppArray.htm">Array</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; a <a href="CppOperatorAssign.htm">=</a> n-&gt;getConnections();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a_copy);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToVector(<b><a href="CppThis.htm">this</a></b>-&gt;connection<a href="CppMatrix.htm">Matrix</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>::GetNumberOfInputs() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_number_of_inputs;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>::GetNumberOfHiddenNeurons() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_number_of_hidden_neurons;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>::GetNumberOfNeurons() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;numberOfNeurons);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>::GetNumberOfOutputs() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_number_of_outputs;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppNeuralNet.htm">NeuralNet</a>::GetWeights() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>ToVector(<b><a href="CppThis.htm">this</a></b>-&gt;weight<a href="CppMatrix.htm">Matrix</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>::GetOutputValue(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index &lt; <b><a href="CppThis.htm">this</a></b>-&gt;GetNumberOfNeurons());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>I promise not to change <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;<a href="CppNeuralNet.htm">NeuralNet</a> * <b><a href="CppConst.htm">const</a></b> n <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<a href="CppNeuralNet.htm">NeuralNet</a>*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> output <a href="CppOperatorAssign.htm">=</a> n-&gt;outputValue(index);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> output;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppNeuralNet.htm">NeuralNet</a>::GetOutputLayerOutputValues() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> GetNumberOfInputs() <a href="CppOperatorPlus.htm">+</a> GetNumberOfHiddenNeurons();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> m_number_of_inputs <a href="CppOperatorPlus.htm">+</a> m_number_of_hidden_neurons);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetNumberOfNeurons();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i<a href="CppOperatorLessEqual.htm">&lt;=</a>j);<br/>
<br/>
&nbsp;&nbsp;v.reserve(j-i);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetOutputValue(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(x);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetNumberOfOutputs());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Due to funny <a href="CppArray.htm">Array</a> behavior, it is needed<br/>
<a href="CppComment.htm">///</a>to implement Mutate a bit clumsily<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>::Mutate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppArray.htm">Array</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; weights <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;getWeights();<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppDouble.htm">double</a></b>&amp; x,weights)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x<a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppGetRandomUniform.htm">GetRandomUniform</a>() * (2.0 * m)) <a href="CppOperatorMinus.htm">-</a> m;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;weight<a href="CppMatrix.htm">Matrix</a> <a href="CppOperatorAssign.htm">=</a> weights;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Propagate creates the output of a neural network <b><a href="CppFor.htm">for</a></b> certain inputs<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppNeuralNet.htm">NeuralNet</a>::Propagate<a href="CppArray.htm">Array</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppArray.htm">Array</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &amp;inputs) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>I promise not to change <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;<a href="CppNeuralNet.htm">NeuralNet</a> * <b><a href="CppConst.htm">const</a></b> n <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<a href="CppNeuralNet.htm">NeuralNet</a>*&gt;(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Activate the neural network<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Activate(inputs);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the output layer's output<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> n-&gt;GetOutputLayerOutputValues();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetNumberOfOutputs());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppNeuralNet.htm">NeuralNet</a>::Propagate(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &amp;inputs) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppArray.htm">Array</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; a <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a>To<a href="CppArray.htm">Array</a>(inputs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;Propagate<a href="CppArray.htm">Array</a>(a);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Cannot call <a href="CppMemberFunction.htm">member function</a>s, because it causes<br/>
<a href="CppComment.htm">//</a>an infinite <a href="CppFunction.htm">function</a> call stack:<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppNeuralNet.htm">NeuralNet</a>&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; lhs.m_number_of_inputs <a href="CppOperatorEqual.htm">==</a> rhs.m_number_of_inputs<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_number_of_hidden_neurons <a href="CppOperatorEqual.htm">==</a> rhs.m_number_of_hidden_neurons<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_number_of_outputs <a href="CppOperatorEqual.htm">==</a> rhs.m_number_of_outputs<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.connection<a href="CppMatrix.htm">Matrix</a> <a href="CppOperatorEqual.htm">==</a> rhs.connection<a href="CppMatrix.htm">Matrix</a><br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.weight<a href="CppMatrix.htm">Matrix</a> <a href="CppOperatorEqual.htm">==</a> rhs.weight<a href="CppMatrix.htm">Matrix</a>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetRandomUniform.htm">GetRandomUniform</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>())/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
