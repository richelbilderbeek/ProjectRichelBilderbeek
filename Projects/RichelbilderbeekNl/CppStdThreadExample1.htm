<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::thread example 1: two counting threads</title>
  <meta name="description" content="C++ std::thread example 1: two counting threads"/>
  <meta name="keywords" content="C++ std::thread example 1: two counting threads code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <img src="PicCpp11.png" alt="C++11"/> <a href="CppThreadExample1.htm">std::thread example 1: two counting threads</a></h1>
<p>&nbsp;</p>
<p>This <a href="CppThread.htm">std::thread</a> examples shows the code and screen output of two threads counting down. Below it, the code
is discussed in more detail.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppThreadExample1.zip">Download the Qt Creator project 'CppThreadExample1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThread.htm">thread</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DoCountDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "#" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> id <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (10-i) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> t1(DoCountDown,1);<br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> t2(DoCountDown,2);<br/>
&nbsp;&nbsp;t1.join();<br/>
&nbsp;&nbsp;t2.join();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
##12: : 10<br/>
10#<br/>
#1: 29<br/>
: #9<br/>
#12: : 8<br/>
#8<br/>
2: #7<br/>
#12: : 7<br/>
#61<br/>
: #6<br/>
#21: : 5<br/>
5#1<br/>
: #4<br/>
#2: 14<br/>
: #3<br/>
#21: : 2<br/>
3#<br/>
1#: 2: 21<br/>
<br/>
#2: 1<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note the following about the code:</p>
<ul>
  <li>
    Calling <a href="CppThread.htm">std::thread</a>::join denotes 'wait for the <a href="CppThread.htm">std::thread</a> to terminate' [1]
  </li>
  <li>
    It is important that we wait for the <a href="CppThread.htm">std::thread</a> to terminate, because 
    'when a <a href="CppThread.htm">std::thread</a> goes out of <a href="CppScope.htm">scope</a> the program is 
    <a href="CppTerminate.htm">std::terminate</a>()d unless its task has completed' [1]
  </li>
  <li>
    Both <a href="CppThread.htm">std::threads</a> do not wait for the other to finish writing to <a href="CppCout.htm">std::cout</a>. Note that
    writing to <a href="CppClog.htm">std::clog</a> makes the output less messier:
    <p>&nbsp;</p>
    <!-- start of code -->
    <table border = "1"><tr><td><code>
    ##12: : 10<br/>
    #2: 10<br/>
    #9<br/>
    1: 9<br/>
    #1: 8<br/>
    #2#1: 8<br/>
    #2: 7<br/>
    #2: 6<br/>
    #2: : 5<br/>
    #2: 4<br/>
    #27<br/>
    #1: 6<br/>
    #1: 5<br/>
    #1: 4<br/>
    #1: 3<br/>
    #1: 2<br/>
    #1: 1<br/>
    : 3<br/>
    #2: 2<br/>
    #2: 1<br/>
    </code></td></tr></table>
    <!-- end of the code -->
    <p>&nbsp;</p>
  </li>
</ul>
<p>&nbsp;</p>
<p>This example is checked for errors in <a href="CppHelgrindExample1.htm">helgrind example 1: two counting threads</a>, where
<a href="CppHelgrind.htm">helgrind</a> is shown to detect race conditions.</p>
<p>&nbsp;</p>
<p>The next example, <a href="CppThreadExample2.htm">std::thread example 2: two counting threads using std::mutex</a> demonstrates how to 
use <a href="CppMutex.htm">std::mutexes</a> to share <a href="CppCout.htm">std::cout</a> nicely.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://www2.research.att.com/~bs/C++0xFAQ.html">Bjarne Stroustrup's C++0x page</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

