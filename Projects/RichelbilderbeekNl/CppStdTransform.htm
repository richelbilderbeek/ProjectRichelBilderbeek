<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::transform</title>
  <meta name="description" content="C++ std::transform"/>
  <meta name="keywords" content="C++ std::transform code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTransform.htm">std::transform</a></h1>
<p>&nbsp;</p>
<p><a href="CppTransform.htm">std::transform</a> is an <a href="CppAlgorithm.htm">algorithm</a> to perform a modifying 
<a href="CppFunction.htm">function</a> on the elements of a sequence (on a <a href="CppVector.htm">std::vector</a>, for example). Use 
<a href="CppFor_each.htm">std::for_each</a> to perform non-modifying <a href="CppFunction.htm">functions</a> on the elements of a sequence.</p>
<p>&nbsp;</p>
<p>Prefer <a href="CppAlgorithm.htm">algorithms</a> over hand-written loops [0][1][2]. View 
<a href="CppExerciseNoForLoops.htm"> Exercise #9: No for-loops</a> to learn how to remove hand-written loops  .</p>
<p>&nbsp;</p>
<p><a href="CppTransform.htm">std::transform</a> does not use a <a href="CppPredicate.htm">predicate</a>. 
Use <a href="CppTransform_if.htm">Transform_if</a>
if a <a href="CppPredicate.htm">predicate</a> is needed.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>The code below shows a simple way to multiply all elements in a <a
href="CppVector.htm">std::vector</a> by a certain value:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMultiply.htm">Multiply</a>(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
 {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i]<a href="CppOperatorMultiplyAssign.htm">*=</a>x;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p><a href="CppTransform.htm">std::transform</a> can be used to replace the <a href="CppFor.htm">for</a>-loop in the example below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMultiply.htm">Multiply</a>(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppMultiplies.htm">std::multiplies</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(),x));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppTransform.htm">std::transform</a> function <a href="CppDefinition.htm">definition</a></h2>
<p>&nbsp;</p>
<p>Simplified from the <a href="CppStl.htm">STL</a> that ships with <a href="CppBuilder.htm">C++ Builder</a> 6.0:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppTemplate.htm">template</a></b> <br/>
&nbsp;&nbsp;&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> InputIter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> OutputIter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> UnaryOperation<br/>
&nbsp;&nbsp;&gt;<br/>
&nbsp;&nbsp;OutputIter transform(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InputIter first,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InputIter last,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OutputIter result,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;UnaryOperation opr<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; first <a href="CppOperatorNotEqual.htm">!=</a> last; <a href="CppOperatorPlus.htm">+</a>+first, <a href="CppOperatorPlus.htm">+</a>+result)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*result <a href="CppOperatorAssign.htm">=</a> opr(*first);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> <br/>
&nbsp;&nbsp;&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> InputIter1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> InputIter2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> OutputIter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> BinaryOperation<br/>
&nbsp;&nbsp;&gt;<br/>
&nbsp;&nbsp;OutputIter transform(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InputIter1 first1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InputIter1 last1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InputIter2 first2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OutputIter result,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BinaryOperation binary_op<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; first1 <a href="CppOperatorNotEqual.htm">!=</a> last1; <a href="CppOperatorPlus.htm">+</a>+first1, <a href="CppOperatorPlus.htm">+</a>+first2, <a href="CppOperatorPlus.htm">+</a>+result)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*result <a href="CppOperatorAssign.htm">=</a> binary_op(*first1, *first2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p><a href="CppTransform.htm">std::transform</a> does not use a <a
href="CppPredicate.htm">predicate</a>. Use <a href="CppTransform_if.htm">Transform_if</a>
if a <a href="CppPredicate.htm">predicate</a> is needed.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ul>
  <li> 
    [0] <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd
    edition). ISBN: 0-201-88954-4. Chapter 18.12.1 : 'Prefer algorithms over loops'</li>
  <li> 
    [1] <a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding
    standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6.
    Chapter 84: 'Prefer algorithm calls to handwritten loops.'
  </li>
  <li> 
    [2] <a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding
    standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6.
    Chapter 88: 'Prefer function objects over functions as algorithm and comparer arguments.'
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
