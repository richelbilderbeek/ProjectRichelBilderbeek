<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtModel</title>
  <meta name="description" content="C++ QtModel"/>
  <meta name="keywords" content="C++ QtModel "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtModel.htm">QtModel</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Sun Aug 17 15:22:54 2014
 -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppQtModel.htm">QtModel</a> are some <a href="CppQt.htm">Qt</a>
model <a href="CppClass.htm">classes</a>.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/CppQtModel.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/CppQtModel.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/modelfunctionparser.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtStdVectorFunctionModel.htm">qtstdvectorfunctionmodel</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtStdVectorStringModel.htm">qtstdvectorstringmodel</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtUblasMatrixDoubleModel.htm">qtublasmatrixdoublemodel</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtUblasVectorDoubleModel.htm">qtublasvectordoublemodel</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/qtublasvectorintmodel.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/modelfunctionparser.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtStdVectorFunctionModel.htm">qtstdvectorfunctionmodel</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtStdVectorStringModel.htm">qtstdvectorstringmodel</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtUblasMatrixDoubleModel.htm">qtublasmatrixdoublemodel</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/<a href="CppQtUblasVectorDoubleModel.htm">qtublasvectordoublemodel</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtModel.htm">CppQtModel</a>/qtublasvectorintmodel.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/modelfunctionparser.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/modelfunctionparser.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MODELFUNCTIONPARSER_H<br/>
<a href="CppDefine.htm">#define</a> MODELFUNCTIONPARSER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppFunctionParser.htm">FunctionParser</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Uses Warp's <a href="CppFunctionParser.htm">function parser</a> and adds a random <a href="CppFunction.htm">function</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Model<a href="CppFunctionParser.htm">FunctionParser</a><br/>
{<br/>
&nbsp;&nbsp;Model<a href="CppFunctionParser.htm">FunctionParser</a>(<b><a href="CppConst.htm">const</a></b> Model<a href="CppFunctionParser.htm">FunctionParser</a>&amp;e) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Model<a href="CppFunctionParser.htm">FunctionParser</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Model<a href="CppFunctionParser.htm">FunctionParser</a>&amp;e) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/my_function <a href="CppOperatorAssign.htm">=</a> 'x * x * sin(x) * rand(x)'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/variable_name <a href="CppOperatorAssign.htm">=</a> 'x'<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Model<a href="CppFunctionParser.htm">FunctionParser</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; my_function, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; variable_name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the y <b><a href="CppFor.htm">for</a></b> 'y <a href="CppOperatorAssign.htm">=</a> f(x)'<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> Evaluate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppFunctionParser.htm">FunctionParser</a>&gt; m_parser;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> MyRand(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> * <b><a href="CppConst.htm">const</a></b> max) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MODELFUNCTIONPARSER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/modelfunctionparser.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/modelfunctionparser.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "model<a href="CppFunction.htm">function</a>parser.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>Warp's <a href="CppFunctionParser.htm">function parser</a><br/>
<a href="CppInclude.htm">#include</a> "fparser.hh"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_random.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Model<a href="CppFunctionParser.htm">FunctionParser</a>::Model<a href="CppFunctionParser.htm">FunctionParser</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; my_function,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; variable_name)<br/>
&nbsp;&nbsp;: m_parser{<b><a href="CppNew.htm">new</a></b> <a href="CppFunctionParser.htm">FunctionParser</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parser);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;m_parser-&gt;<a href="CppAdd.htm">Add</a>Constant("pi",pi);<br/>
&nbsp;&nbsp;m_parser-&gt;<a href="CppAdd.htm">Add</a>Constant("tau",2.0*pi);<br/>
&nbsp;&nbsp;m_parser-&gt;<a href="CppAdd.htm">Add</a><a href="CppFunction.htm">Function</a>("rand",MyRand,1);<br/>
&nbsp;&nbsp;m_parser-&gt;Parse(my_function,variable_name);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_parser-&gt;GetParseErrorType()<a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFunctionParser.htm">FunctionParser</a>::FP_NO_ERROR)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "Input<a href="CppFunctionParser.htm">FunctionParser</a> cannot parse '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> my_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "' with variable '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> variable_name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(error.c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Model<a href="CppFunctionParser.htm">FunctionParser</a>::Evaluate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xs[1] <a href="CppOperatorAssign.htm">=</a> { x };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> m_parser-&gt;Eval(xs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> y;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::Model<a href="CppFunctionParser.htm">FunctionParser</a>::MyRand(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> * <b><a href="CppConst.htm">const</a></b> max) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (*max) * Random().GetFraction();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtstdvectorfunctionmodel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtstdvectorfunctionmodel.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTSTDVECTORFUNCTIONMODEL_H<br/>
<a href="CppDefine.htm">#define</a> QTSTDVECTORFUNCTIONMODEL_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QAbstractTableModel&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>: <b><a href="CppPublic.htm">public</a></b> QAbstractTableModel<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The variable is the variable used in a <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Examples:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> in the equation 'y <a href="CppOperatorAssign.htm">=</a> 3 * x', the variable used is 'x'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> in the equation 'u <a href="CppOperatorAssign.htm">=</a> cos(t)', the variable used is 't'<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; variable,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Working with the raw data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; GetRawData() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_data; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Working with the raw data<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; data);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the header text<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHeaderData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; header_text);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The raw data<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_data;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The horizontal header text (<b><a href="CppFor.htm">for</a></b> the only one column)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_header_horizontal_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The vertical header text<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_header_vertical_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The variable is the variable used in a <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Examples:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> in the equation 'y <a href="CppOperatorAssign.htm">=</a> 3 * x', the variable used is 'x'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a> in the equation 'u <a href="CppOperatorAssign.htm">=</a> cos(t)', the variable used is 't'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_variable;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;QVariant data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/These flags are needed to allow editing<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemFlags flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;QVariant headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Needed <b><a href="CppFor.htm">for</a></b> editable data<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::EditRole);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSTDVECTORFUNCTIONMODEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtstdvectorfunctionmodel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtstdvectorfunctionmodel.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorFunctionModel.htm">qtstdvectorfunctionmodel</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "model<a href="CppFunction.htm">function</a>parser.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; variable,<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a> *parent) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: QAbstractTableModel(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_variable{variable}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!variable.empty());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rowCount() &gt; 0 ? 1 : 0;<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a>&nbsp;&nbsp;role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index.isValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <b><a href="CppThis.htm">this</a></b>-&gt;rowCount());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>(m_data[row].c_str());<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>::ItemFlags <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.2";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-15: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-28: <a href="CppVersion.htm">version</a> 1.1: allow columnCount to be zero, <b><a href="CppIf.htm">if</a></b> rowCount is zero",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-05: <a href="CppVersion.htm">version</a> 1.2: <a href="CppSignal.htm">signal</a> layoutChanged <a href="CppEmit.htm">emitted</a> correctly"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_horizontal_text.c_str() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No idea why <b><a href="CppThis.htm">this</a></b> happens<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_vertical_text[section].c_str() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginInsertRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size() <a href="CppOperatorPlus.htm">+</a> count;<br/>
&nbsp;&nbsp;m_data.resize(new_size);<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endInsertRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginRemoveRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size() <a href="CppOperatorMinus.htm">-</a> count;<br/>
&nbsp;&nbsp;m_data.resize(new_size);<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endRemoveRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a> role <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> it is a valid <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> my_function <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Model<a href="CppFunctionParser.htm">FunctionParser</a> f(my_function,m_variable);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdRuntime_error.htm">std::runtime_error</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store the correctly formed <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;m_data[row] <a href="CppOperatorAssign.htm">=</a> my_function;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(index,index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::SetHeaderData(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; horizontal_header_text, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; vertical_header_text)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> horizontal_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> horizontal_header_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Horizontal,0,1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_vertical_text <a href="CppOperatorNotEqual.htm">!=</a> vertical_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text <a href="CppOperatorAssign.htm">=</a> vertical_header_text;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Vertical,0,new_size);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a>role<a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_vertical_text[section] <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text[section] <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorFunctionModel.htm">QtStdVectorFunctionModel</a>::SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; data)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_data <a href="CppOperatorNotEqual.htm">!=</a> data)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> data;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> top_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> bottom_right <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(m_data.size() <a href="CppOperatorMinus.htm">-</a> 1, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(top_left,bottom_right);<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtstdvectorstringmodel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtstdvectorstringmodel.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTSTDVECTORSTRINGMODEL_H<br/>
<a href="CppDefine.htm">#define</a> QTSTDVECTORSTRINGMODEL_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QAbstractTableModel&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>: <b><a href="CppPublic.htm">public</a></b> QAbstractTableModel<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>(<a href="CppQObject.htm">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Reading the raw data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; GetRawData() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_data; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Writing the raw data<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; data);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the header text<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHeaderData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; header_text);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The raw data<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_data;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The horizontal header text (<b><a href="CppFor.htm">for</a></b> the only one column)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_header_horizontal_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The vertical header text<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_header_vertical_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;QVariant data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/These flags are needed to allow editing<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemFlags flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;QVariant headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Needed <b><a href="CppFor.htm">for</a></b> editable data<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::EditRole);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSTDVECTORSTRINGMODEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtstdvectorstringmodel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtstdvectorstringmodel.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtStdVectorStringModel.htm">qtstdvectorstringmodel</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>(<a href="CppQObject.htm">QObject</a> *parent) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: QAbstractTableModel(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rowCount() &gt; 0 ? 1 : 0;<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a>&nbsp;&nbsp;role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index.isValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <b><a href="CppThis.htm">this</a></b>-&gt;rowCount());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>(m_data[row].c_str());<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>::ItemFlags <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.2";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-15: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-28: <a href="CppVersion.htm">version</a> 1.1: allow columnCount to be zero, <b><a href="CppIf.htm">if</a></b> rowCount is zero",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-05: <a href="CppVersion.htm">version</a> 1.2: <a href="CppSignal.htm">signal</a> layoutChanged <a href="CppEmit.htm">emitted</a> correctly"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_horizontal_text.c_str() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No idea why <b><a href="CppThis.htm">this</a></b> happens<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_vertical_text[section].c_str() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginInsertRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size() <a href="CppOperatorPlus.htm">+</a> count;<br/>
&nbsp;&nbsp;m_data.resize(new_size);<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endInsertRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginRemoveRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size() <a href="CppOperatorMinus.htm">-</a> count;<br/>
&nbsp;&nbsp;m_data.resize(new_size);<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endRemoveRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a> role <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;m_data[row] <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(index,index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::SetHeaderData(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; horizontal_header_text, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; vertical_header_text)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> horizontal_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> horizontal_header_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Horizontal,0,1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_vertical_text <a href="CppOperatorNotEqual.htm">!=</a> vertical_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text <a href="CppOperatorAssign.htm">=</a> vertical_header_text;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Vertical,0,new_size);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a>role<a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_vertical_text[section] <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text[section] <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtStdVectorStringModel.htm">QtStdVectorStringModel</a>::SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; data)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_data <a href="CppOperatorNotEqual.htm">!=</a> data)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> data;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> top_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> bottom_right <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(m_data.size() <a href="CppOperatorMinus.htm">-</a> 1, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(top_left,bottom_right);<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtublasmatrixdoublemodel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtublasmatrixdoublemodel.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTMATRIXDOUBLEMODEL_H<br/>
<a href="CppDefine.htm">#define</a> QTMATRIXDOUBLEMODEL_H<br/>
<br/>
<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QAbstractTableModel&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a> : <b><a href="CppPublic.htm">public</a></b> QAbstractTableModel<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>(<a href="CppQObject.htm">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the raw data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetRawData() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;<b><a href="CppNoexcept.htm">noexcept</a></b>{ <b><a href="CppReturn.htm">return</a></b> m_data; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write the raw data<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; data);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the header text<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHeaderData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; horizontal_header_text, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; vertical_header_text);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The raw data<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_data;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The horizontal header text<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_header_horizontal_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The vertical header text<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_header_vertical_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be defined from ABC<br/>
&nbsp;&nbsp;QVariant data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/These flags are needed to allow editing<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemFlags flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;QVariant headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> insertColumns(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> removeColumns(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Needed <b><a href="CppFor.htm">for</a></b> editable data<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::EditRole);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role);<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMATRIXDOUBLEMODEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtublasmatrixdoublemodel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtublasmatrixdoublemodel.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtUblasMatrixDoubleModel.htm">qtublasmatrixdoublemodel</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>(<a href="CppQObject.htm">QObject</a> *parent) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: QAbstractTableModel(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text{}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_data.size2();<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index.isValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size2()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> RETURN_DOUBLE_723465978463059835<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_data(row,col);<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> to string, otherwise the number digits behind the comma<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be set to 2, e.g. 0.01<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_data(row,col));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>(s.c_str());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>::ItemFlags <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.3";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-15: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-21: <a href="CppVersion.htm">version</a> 1.1: added columns and rows are <a href="CppInitialize.htm">initialize</a>d with zeroes",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-23: <a href="CppVersion.htm">version</a> 1.2: allow an infine amount of digits behind the comma",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-05: <a href="CppVersion.htm">version</a> 1.3: <a href="CppSignal.htm">signal</a> layoutChanged <a href="CppEmit.htm">emitted</a> correctly"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No idea why <b><a href="CppThis.htm">this</a></b> happens<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_horizontal_text.size())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_horizontal_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_horizontal_text[section].c_str() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No idea why <b><a href="CppThis.htm">this</a></b> happens<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_vertical_text[section].c_str() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::insertColumns(<b><a href="CppInt.htm">int</a></b> col, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginInsertColumns(parent,col,col+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size2() <a href="CppOperatorEqual.htm">==</a> m_header_horizontal_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size2() <a href="CppOperatorPlus.htm">+</a> count;<br/>
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_data <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_data.size1(),new_size);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size1());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size2());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> n_rows; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> n_cols; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(new_data.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(new_data.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_data(y,x) <a href="CppOperatorAssign.htm">=</a> m_data(y,x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> new_data;<br/>
<br/>
&nbsp;&nbsp;m_header_horizontal_text.resize(new_size,"");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size2() <a href="CppOperatorEqual.htm">==</a> m_header_horizontal_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endInsertColumns();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginInsertRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size1() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size1() <a href="CppOperatorPlus.htm">+</a> count;<br/>
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_data <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(new_size,m_data.size2());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size1());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size2());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0; y <a href="CppOperatorNotEqual.htm">!=</a> n_rows; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0; x <a href="CppOperatorNotEqual.htm">!=</a> n_cols; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(new_data.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(new_data.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_data(y,x) <a href="CppOperatorAssign.htm">=</a> m_data(y,x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> new_data;<br/>
<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size1() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endInsertRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::removeColumns(<b><a href="CppInt.htm">int</a></b> col, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginRemoveColumns(parent,col,col+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size2() <a href="CppOperatorEqual.htm">==</a> m_header_horizontal_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size2() <a href="CppOperatorMinus.htm">-</a> count;<br/>
&nbsp;&nbsp;m_data.resize(m_data.size1(),new_size);<br/>
&nbsp;&nbsp;m_header_horizontal_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size2() <a href="CppOperatorEqual.htm">==</a> m_header_horizontal_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endRemoveColumns();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginRemoveRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size1() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size1() <a href="CppOperatorMinus.htm">-</a> count;<br/>
&nbsp;&nbsp;m_data.resize(new_size,m_data.size2());<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size1() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endRemoveRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_data.size1();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a> role <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size2()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> s <a href="CppOperatorAssign.htm">=</a> value.toString();<br/>
&nbsp;&nbsp;m_data(row,col) <a href="CppOperatorAssign.htm">=</a> s.to<a href="CppDouble.htm">Double</a>();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(index,index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::SetHeaderData(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; horizontal_header_text,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; vertical_header_text)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> horizontal_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(horizontal_header_text.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;columnCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertColumns(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeColumns(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> horizontal_header_text;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(horizontal_header_text.size()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If you forget <b><a href="CppThis.htm">this</a></b> line, the view displays a different number of rows than m_data has<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Horizontal,0,new_size);<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_vertical_text <a href="CppOperatorNotEqual.htm">!=</a> vertical_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text <a href="CppOperatorAssign.htm">=</a> vertical_header_text;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If you forget <b><a href="CppThis.htm">this</a></b> line, the view displays a different number of rows than m_data has<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Vertical,0,new_size);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size2()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_horizontal_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a>role<a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_horizontal_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_horizontal_text[section] <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text[section] <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_vertical_text[section] <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text[section] <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasMatrixDoubleModel.htm">QtUblasMatrixDoubleModel</a>::SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; data)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(m_data,data))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> row count<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_row_count <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_row_count <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_row_count &lt; new_row_count)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_row_count,new_row_count <a href="CppOperatorMinus.htm">-</a> cur_row_count,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_row_count &gt; new_row_count)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_row_count,cur_row_count <a href="CppOperatorMinus.htm">-</a> new_row_count,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> column count<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_col_count <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_col_count <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;columnCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_col_count &lt; new_col_count)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertColumns(cur_col_count,new_col_count <a href="CppOperatorMinus.htm">-</a> cur_col_count,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_col_count &gt; new_col_count)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeColumns(cur_col_count,cur_col_count <a href="CppOperatorMinus.htm">-</a> new_col_count,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size1() <a href="CppOperatorEqual.htm">==</a> data.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size2() <a href="CppOperatorEqual.htm">==</a> data.size2());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> data;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(m_data,data));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size1())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size2())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If you forget <b><a href="CppThis.htm">this</a></b> line, the view displays a different number of rows than m_data has<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> top_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> bottom_right <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(m_data.size1() <a href="CppOperatorMinus.htm">-</a> 1, m_data.size2() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(top_left,bottom_right);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check MatricesAreEqual<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size1() <a href="CppOperatorEqual.htm">==</a> data.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size2() <a href="CppOperatorEqual.htm">==</a> data.size2());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> m_data.size1();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> m_data.size2();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row <a href="CppOperatorAssign.htm">=</a> 0; row <a href="CppOperatorNotEqual.htm">!=</a> n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col <a href="CppOperatorAssign.htm">=</a> 0; col <a href="CppOperatorNotEqual.htm">!=</a> n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data(row,col) <a href="CppOperatorEqual.htm">==</a> data(row,col));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size2()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_horizontal_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size1()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(m_data,data));<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtublasvectordoublemodel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtublasvectordoublemodel.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTUBLASVECTORDOUBLEMODEL_H<br/>
<a href="CppDefine.htm">#define</a> QTUBLASVECTORDOUBLEMODEL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QAbstractTableModel&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>: <b><a href="CppPublic.htm">public</a></b> QAbstractTableModel<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>(<a href="CppQObject.htm">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Working with the raw data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetRawData() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>{ <b><a href="CppReturn.htm">return</a></b> m_data; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the header text<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHeaderData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; header_text);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Working with the raw data<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; data);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The raw data<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_data;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The horizontal header text (<b><a href="CppFor.htm">for</a></b> the only one column)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_header_horizontal_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The vertical header text<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_header_vertical_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;QVariant data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/These flags are needed to allow editing<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemFlags flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;QVariant headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> insertColumns(<b><a href="CppInt.htm">int</a></b> column, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Needed <b><a href="CppFor.htm">for</a></b> editable data<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::EditRole);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTUBLASVECTORDOUBLEMODEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtublasvectordoublemodel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtublasvectordoublemodel.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtUblasVectorDoubleModel.htm">qtublasvectordoublemodel</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>(<a href="CppQObject.htm">QObject</a> *parent) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: QAbstractTableModel(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rowCount() &gt; 0 ? 1 : 0;<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index.isValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <b><a href="CppThis.htm">this</a></b>-&gt;rowCount());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> RETURN_DOUBLE_723465978463059835<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_data(row);<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> to string, otherwise the number digits behind the comma<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be set to 2, e.g. 0.01<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_data(row));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>(s.c_str());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>::ItemFlags <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.5";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-15: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-21: <a href="CppVersion.htm">version</a> 1.1: added rows are <a href="CppInitialize.htm">initialize</a>d with zeroes",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-23: <a href="CppVersion.htm">version</a> 1.2: allow an infine amount of digits behind the comma",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-05-28: <a href="CppVersion.htm">version</a> 1.3: allow columnCount to be zero, <b><a href="CppIf.htm">if</a></b> rowCount is zero",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-27: <a href="CppVersion.htm">version</a> 1.4: added self-test",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-05: <a href="CppVersion.htm">version</a> 1.5: <a href="CppSignal.htm">signal</a> layoutChanged <a href="CppEmit.htm">emitted</a> correctly"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_horizontal_text.c_str() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No idea why <b><a href="CppThis.htm">this</a></b> happens<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_vertical_text[section].c_str() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginInsertRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size() <a href="CppOperatorPlus.htm">+</a> count;<br/>
<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_data <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(new_size);<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(m_data.begin(),m_data.end(),new_data.begin());<br/>
&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> new_data;<br/>
<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endInsertRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginRemoveRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size() <a href="CppOperatorMinus.htm">-</a> count;<br/>
&nbsp;&nbsp;m_data.resize(new_size);<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endRemoveRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size());<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a> role <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;m_data(row) <a href="CppOperatorAssign.htm">=</a> value.to<a href="CppDouble.htm">Double</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(index,index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a>role<a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_vertical_text[section] <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text[section] <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::SetHeaderData(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; horizontal_header_text, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; vertical_header_text)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> horizontal_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> horizontal_header_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Horizontal,0,1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_vertical_text <a href="CppOperatorNotEqual.htm">!=</a> vertical_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text <a href="CppOperatorAssign.htm">=</a> vertical_header_text;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Vertical,0,new_size);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; data)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppMatrix.htm">Matrix</a>::Vectors<a href="CppDouble.htm">Double</a>AreEqual(m_data,data))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> data;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If you forget <b><a href="CppThis.htm">this</a></b> line, the view displays a different number of rows than m_data has<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppEmit.htm">emit</a></b> dataChanged(<a href="CppQModelIndex.htm">QModelIndex</a>(),<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> top_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> bottom_right <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(m_data.size() <a href="CppOperatorMinus.htm">-</a> 1, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(top_left,bottom_right);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtUblasVectorDoubleModel.htm">QtUblasVectorDoubleModel</a> model;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model.rowCount()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model.columnCount() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model.insertRow(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model.rowCount()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model.columnCount() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;model.removeRow(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model.rowCount()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(model.columnCount() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtublasvectorintmodel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtublasvectorintmodel.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTUBLASVECTORINTMODEL_H<br/>
<a href="CppDefine.htm">#define</a> QTUBLASVECTORINTMODEL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QAbstractTableModel&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>UblasVectorIntModel: <b><a href="CppPublic.htm">public</a></b> QAbstractTableModel<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppQt.htm">Qt</a>UblasVectorIntModel<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with range<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> from <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::min()<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> to&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::max()<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>UblasVectorIntModel(<a href="CppQObject.htm">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Working with the raw data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; GetRawData() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;<b><a href="CppNoexcept.htm">noexcept</a></b>{ <b><a href="CppReturn.htm">return</a></b> m_data; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the range the values must remain in<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The range includes from, excludes to<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRange(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> default_value);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Working with the raw data<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; data);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the header text<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHeaderData(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; header_text);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The raw data<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_data;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The horizontal header text (<b><a href="CppFor.htm">for</a></b> the only one column)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_header_horizontal_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The vertical header text<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_header_vertical_text;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The value set <b><a href="CppFor.htm">for</a></b> <b><a href="CppDefault.htm">default</a></b><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_range_default;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The maximum value all values must have<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_range_max;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The minimum value all values must have<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_range_min;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;QVariant data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/These flags are needed to allow editing<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemFlags flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;QVariant headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> the <b><a href="CppClass.htm">class</a></b> is in a valid state<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsValid() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be defined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent <a href="CppOperatorAssign.htm">=</a> <a href="CppQModelIndex.htm">QModelIndex</a>()) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Needed <b><a href="CppFor.htm">for</a></b> editable data<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>::EditRole);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Redefined from ABC<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> role);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTUBLASVECTORINTMODEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtModel/qtublasvectorintmodel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtModel/qtublasvectorintmodel.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQt.htm">Qt</a>Model, my <b><a href="CppClass.htm">classes</a></b> derived from QAbstractTableModel<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtModel.htm">CppQtModel</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppUblas.htm">ublas</a>vectorintmodel.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::<a href="CppQt.htm">Qt</a>UblasVectorIntModel(<a href="CppQObject.htm">QObject</a> *parent) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: QAbstractTableModel(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_range_default{0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_range_max{<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::max()},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_range_min{<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::min()}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_range_min &lt; m_range_max);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::columnCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rowCount() &gt; 0 ? 1 : 0;<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::data(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index.isValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <b><a href="CppThis.htm">this</a></b>-&gt;rowCount());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_data(row) &lt; m_range_min <a href="CppOperatorLogicalOr.htm">||</a> m_data(row) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_range_max)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data(row) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_range_min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "One of the purposes of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> it to ensure <b><a href="CppThis.htm">this</a></b>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data(row)&nbsp;&nbsp;&lt; m_range_max <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "One of the purposes of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> it to ensure <b><a href="CppThis.htm">this</a></b>");<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> to string, otherwise the number digits behind the comma<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be set to 2, e.g. 0.01<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_data(row));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>(s.c_str());<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>::ItemFlags <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::flags(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEditable<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDragEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsDropEnabled<br/>
&nbsp;&nbsp;| <a href="CppQt.htm">Qt</a>::ItemIsEnabled;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.2";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-27: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-27: <a href="CppVersion.htm">version</a> 1.1: added setting a range",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-05: <a href="CppVersion.htm">version</a> 1.2: <a href="CppSignal.htm">signal</a> layoutChanged <a href="CppEmit.htm">emitted</a> correctly"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
QVariant <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::headerData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppInt.htm">int</a></b> role) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Removing <b><a href="CppThis.htm">this</a></b> line will cause checkboxes to appear<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::EditRole <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> role <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppQt.htm">Qt</a>::DisplayRole) <b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_horizontal_text.c_str() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No idea why <b><a href="CppThis.htm">this</a></b> happens<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> QVariant();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>( m_header_vertical_text[section].c_str() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::IsValid() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_range_min <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_range_max)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("m_range_min bigger or equal than m_range_max");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_data.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> m_data[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; m_range_min)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("x below minimum value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_range_max)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("x above maximum value");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::insertRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginInsertRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size() <a href="CppOperatorPlus.htm">+</a> count;<br/>
<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; new_data(new_size,m_range_default);<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(m_data.begin(),m_data.end(),new_data.begin());<br/>
&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> new_data;<br/>
<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endInsertRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::removeRows(<b><a href="CppInt.htm">int</a></b> row, <b><a href="CppInt.htm">int</a></b> count, <b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;parent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called before the real operation<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;beginRemoveRows(parent,row,row+count-1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real operation: resize the m_data<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> m_data.size() <a href="CppOperatorMinus.htm">-</a> count;<br/>
&nbsp;&nbsp;m_data.resize(new_size);<br/>
&nbsp;&nbsp;m_header_vertical_text.resize(new_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must be called in the end<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;endRemoveRows();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>It worked!<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::rowCount(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_data.size() <a href="CppOperatorEqual.htm">==</a> m_header_vertical_text.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size());<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::setData(<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> &amp;index, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a> role <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> row <a href="CppOperatorAssign.htm">=</a> index.row();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> col <a href="CppOperatorAssign.htm">=</a> index.column();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> can_<a href="CppConvert.htm">convert</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> new_value <a href="CppOperatorAssign.htm">=</a> value.toInt(&amp;can_<a href="CppConvert.htm">convert</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!can_<a href="CppConvert.htm">convert</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Might be a <b><a href="CppDouble.htm">double</a></b>, round it to the closest <a href="CppInt.htm">integer</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;new_value <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(value.toFloat(&amp;can_<a href="CppConvert.htm">convert</a>) <a href="CppOperatorPlus.htm">+</a> 0.5);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_range_min &lt; m_range_max);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (can_<a href="CppConvert.htm">convert</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> new_value <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_range_min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> new_value &lt; m_range_max)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data(row) <a href="CppOperatorAssign.htm">=</a> new_value;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(index,index);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::setHeaderData(<b><a href="CppInt.htm">int</a></b> section, <a href="CppQt.htm">Qt</a>::Orientation orientation, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value, <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a>role<a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Horizontal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(orientation <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(section &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_header_vertical_text[section] <a href="CppOperatorNotEqual.htm">!=</a> value.toString().toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text[section] <a href="CppOperatorAssign.htm">=</a> value.toString().toStdString();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This line below is needed to let multiple views synchronize<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(orientation,section,section);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Editing succeeded!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::SetHeaderData(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; horizontal_header_text, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; vertical_header_text)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_horizontal_text <a href="CppOperatorNotEqual.htm">!=</a> horizontal_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_horizontal_text <a href="CppOperatorAssign.htm">=</a> horizontal_header_text;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Horizontal,0,1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_header_vertical_text <a href="CppOperatorNotEqual.htm">!=</a> vertical_header_text)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutAboutToBeChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header_vertical_text <a href="CppOperatorAssign.htm">=</a> vertical_header_text;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vertical_header_text.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> headerDataChanged(<a href="CppQt.htm">Qt</a>::Vertical,0,new_size);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::SetRange(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> from, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> default_value)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from &lt; to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(default_value &lt; to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(default_value <a href="CppOperatorGreaterEqual.htm">&gt;=</a> from);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_range_min <a href="CppOperatorAssign.htm">=</a> from;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_range_max <a href="CppOperatorAssign.htm">=</a> to;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_range_default <a href="CppOperatorAssign.htm">=</a> default_value;<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_data.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> m_data[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_range_min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; m_range_max<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Before changing the range, the data in <a href="CppQt.htm">Qt</a>UblasVectorIntModel must be"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " put in both the old and <b><a href="CppNew.htm">new</a></b> range"); <a href="CppComment.htm">//</a>Better a clear clumsy <a href="CppInterface.htm">interface</a> over a vague one<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::SetRawData(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; data)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> all data is in range<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> data.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> data[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_range_min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; m_range_max<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Supplied data to <a href="CppQt.htm">Qt</a>UblasVectorIntModel must be in range");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppMatrix.htm">Matrix</a>::VectorsIntAreEqual(m_data,data))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;rowCount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cur_size &lt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;insertRows(cur_size,new_size <a href="CppOperatorMinus.htm">-</a> cur_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (cur_size &gt; new_size)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;removeRows(cur_size,cur_size <a href="CppOperatorMinus.htm">-</a> new_size,<a href="CppQModelIndex.htm">QModelIndex</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the data before emitting <b><a href="CppQtSignals.htm">signals</a></b>, as the response to that <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>will be dependent on that data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data <a href="CppOperatorAssign.htm">=</a> data;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "So <b><a href="CppEmit.htm">emit</a></b> layoutChange can work on the newest layout");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> layoutChanged();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> top_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQModelIndex.htm">QModelIndex</a> bottom_right <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;index(m_data.size() <a href="CppOperatorMinus.htm">-</a> 1, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> dataChanged(top_left,bottom_right);<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_data.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_header_vertical_text.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;columnCount() <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppThis.htm">this</a></b>-&gt;rowCount() <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;IsValid());<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>UblasVectorIntModel::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>UblasVectorIntModel d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.SetRawData( <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 1,2,3 } ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.SetRange(1,4,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.data(d.index(0,0)).toInt() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.setData(d.index(0,0),"0"); <a href="CppComment.htm">//</a>Should not change the data<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.data(d.index(0,0)).toInt() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
