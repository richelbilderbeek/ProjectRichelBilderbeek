<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TestFloatVersusDouble</title>
  <meta name="description" content="C++ TestFloatVersusDouble"/>
  <meta name="keywords" content="C++ TestFloatVersusDouble benchmark test float versus double speed code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTestFloatVersusDouble.htm">TestFloatVersusDouble</a></h1>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>A simple <a href="CppBenchmark.htm">benchmark</a> to test how much faster or slower the use of <a href="CppFloat.htm">float</a> 
is compared to the use of <a href="CppDouble.htm">doubles</a>.</p>
<p>&nbsp;</p>
<p>Prefer a <a href="CppDouble.htm">double</a> over a <a href="CppFloat.htm">float</a> [1].</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppTestFloatVersusDouble_3_0.zip">Download the Qt Creator project 'CppTestFloatVersusDouble' (version 3.0)(zip)</a></li>
  <li><a href="CppTestFloatVersusDouble_2_0.zip">Download the Qt Creator project 'CppTestFloatVersusDouble' (version 2.0)(zip)</a></li>
  <li><a href="CppTestFloatVersusDouble.txt">Download the code of 'CppTestFloatVersusDouble' (version 1.0)(zip)</a></li>
  <li><a href="CppTestFloatVersusDoubleExe_3_0.zip">Download a Windows executable of 'CppTestFloatVersusDouble' (version 3.0)(zip)</a></li>
  <li><a href="CppTestFloatVersusDoubleExe_2_0.zip">Download a Windows executable of 'CppTestFloatVersusDouble' (version 2.0)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppTestFloatVersusDouble.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
TEMPLATE = app<br/>
CONFIG += console<br/>
CONFIG -= qt<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp11.htm">c++11</a><br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppTime.htm">time</a>r.hpp&gt;<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppDouble.htm">double</a></b> Test(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nRepeat,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; b,<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTimer.htm">boost::timer</a> t;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nRepeat; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorPlus.htm">+</a>+x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[x] <a href="CppOperatorAssign.htm">=</a> a[x] * b[x];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t.elapsed();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Benchmark to compare the speed of <b><a href="CppFloat.htm">float</a></b> versus <b><a href="CppDouble.htm">double</a></b><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppTestFloatVersus<a href="CppDouble.htm">Double</a>.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_repeat <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; vd1(size);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; vd2(size);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; vd3(size);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppFloat.htm">float</a></b>&gt; vf1(size);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppFloat.htm">float</a></b>&gt; vf2(size);<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppFloat.htm">float</a></b>&gt; vf3(size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initialize the <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; with random <b><a href="CppDouble.htm">double</a></b>s<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vd1[i] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRand.htm">std::rand</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(3 <a href="CppOperatorPlus.htm">+</a> (<a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 100));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vd2[i] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRand.htm">std::rand</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(3 <a href="CppOperatorPlus.htm">+</a> (<a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 100));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy the <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; to <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppFloat.htm">float</a></b>&gt;,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>so that the values are the same<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vf1[i] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppFloat.htm">float</a></b>&gt;(vd1[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vf2[i] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppFloat.htm">float</a></b>&gt;(vd2[i]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some tallies<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_float_faster <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_<b><a href="CppDouble.htm">double</a></b>_faster <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_draw <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum_<a href="CppTime.htm">time</a>_float <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sum_<a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b> <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppTime.htm">time</a>_float <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b> <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((<a href="CppRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Floats first<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_float&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Test(n_repeat,size,vf1,vf2,vf3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b> <a href="CppOperatorAssign.htm">=</a> Test(n_repeat,size,vd1,vd2,vd3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDouble.htm">Double</a>s first<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b> <a href="CppOperatorAssign.htm">=</a> Test(n_repeat,size,vd1,vd2,vd3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_float&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Test(n_repeat,size,vf1,vf2,vf3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.htm">std::swap</a>(vf1,vf3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.htm">std::swap</a>(vd1,vd3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum_<a href="CppTime.htm">time</a>_float&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>_float;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sum_<a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b> <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b> &lt; <a href="CppTime.htm">time</a>_float)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+n_<b><a href="CppDouble.htm">double</a></b>_faster;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a>_float &lt; <a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+n_float_faster;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+n_draw;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum <a href="CppOperatorAssign.htm">=</a> n_<b><a href="CppDouble.htm">double</a></b>_faster <a href="CppOperatorPlus.htm">+</a> n_float_faster <a href="CppOperatorPlus.htm">+</a> n_draw;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sum <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 10000) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sum <a href="CppOperatorModulus.htm">%</a> 100 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Draw " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_draw <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppTime.htm">time</a>s. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Float&nbsp;&nbsp;has been faster " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_float_faster <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppTime.htm">time</a>s. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Sum <a href="CppTime.htm">time</a>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sum_<a href="CppTime.htm">time</a>_float<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppDouble.htm">Double</a> has been faster " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_<b><a href="CppDouble.htm">double</a></b>_faster <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppTime.htm">time</a>s. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Sum <a href="CppTime.htm">time</a>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sum_<a href="CppTime.htm">time</a>_<b><a href="CppDouble.htm">double</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Results</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Version 1.0</h3>
<p>&nbsp;</p>
<p>On a Windows XP (built in around 2005) computer, using version 1.0:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Draw 0 times.<br/>
Float  has been faster 465 times. Sum time: 385.621<br/>
Double has been faster 106 times. Sum time: 439.11<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Version 2.0</h3>
<p>&nbsp;</p>
<p>On a laptop (built in around 2011) with <a href="CppLubuntu.htm">Lubuntu</a> using version 2.0:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Draw 0 times.<br/>
Float  has been faster 8702 times. Sum time: 102.81<br/>
Double has been faster 1198 times. Sum time: 101.54<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>On the same laptop (built in around 2011) with <a href="CppLubuntu.htm">Lubuntu</a> using <a href="CppWine.htm">Wine</a> using version 2.0:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Draw 0 times.<br/>
Float  has been faster 7406 times. Sum time: 86.62<br/>
Double has been faster 994 times. Sum time: 86.45<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This result has been taken from <a href="CppTestFloatVersusDouble_2_0.png">this screenshot</a> (notice that I used the top-left one, as the program was
running four times).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Version 3.0</h3>
<p>&nbsp;</p>
<p>On a laptop (built in around 2011)(same as used in the version 2.0 test) with <a href="CppLubuntu.htm">Lubuntu</a> using version 3.0:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Draw 3 times.<br/>
Float  has been faster 570 times. Sum time: 217.33<br/>
Double has been faster 627 times. Sum time: 210.45<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>On the same laptop (built in around 2011) with <a href="CppLubuntu.htm">Lubuntu</a> using <a href="CppWine.htm">Wine</a> using version 3.0:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Draw 7 times.<br/> 
Float  has been faster 247 times. Sum time: 142.88<br/>
Double has been faster 546 times. Sum time: 120.65<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This result has been taken from <a href="CppTestFloatVersusDouble_3_0.png">this screenshot</a> (notice that I used the top-left one, as the program was
running four times).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Item 4.10.15: 'Prefer a double over a float or a long double.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

