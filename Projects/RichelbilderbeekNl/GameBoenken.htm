<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GameBoenken</title>
  <meta name="description" content="C++ GameBoenken"/>
  <meta name="keywords" content="C++ GameBoenken "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="GameBoenken.htm">GameBoenken</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.694 at Fri Jan  2 09:58:40 2015
 -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="GameBoenken.htm">Boenken</a> is <a href="Games.htm">game</a> that is a crossing-over between soccer and billiards and can be played with twenty players. The <a href="Games.htm">game</a>'s name is Dutch, translating it to English would yield something like 'Bonking' (but if I would call the <a href="Games.htm">game</a> like that, my website would attract other people). 'Boenk' is the phonetic word of the sound two colliding Dutch snooker balls make.</p>
<p>&nbsp;</p>
<p><a href="GameBoenken.htm">Boenken</a> can be played with twenty players at the same time (on the same single keyboard). Who said that video <a href="Games.htm">games</a> could not be cosy?</p>
<p>&nbsp;</p>
<p>Before version 3.0, <a href="GameBoenken.htm">Boenken</a> was called <a href="GameBoenkenVcl.htm">BoenkenVcl</a> and was programmed in <a href="Cpp.htm">C++</a> using the IDE 
<p><a href="CppBuilder.htm">C++ Builder</a> 6.0, with use of the <a href="CppVcl.htm">VCL</a> and <a href="CppBoost.htm">Boost</a> <a href="CppLibrary.htm">libraries</a>.
<p>&nbsp;</p>
<p>The <a href="Games.htm">game</a> relies heavily on the function <a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="GameBoenken_4_1.png">View a screenshot of 'Boenken' (version 4.1)(png)</a></li>
  <li><img src="PicQt.png" alt="Qt"/><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="GameBoenkenMenu_4_1.png">View a screenshot of the 'Boenken' menu screen (version 4.1)(png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="GameBoenkenExe_4_1.zip">Download a Windows executable of 'Boenken' (version 4.1)(zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/><img src="PicUbuntu.png" alt="Ubuntu"/> <a href="GameBoenken_3_1.png">View a screenshot of 'Boenken' (version 3.1)(png)</a></li>
  <li><img src="PicQt.png" alt="Qt"/><img src="PicUbuntu.png" alt="Ubuntu"/> <a href="GameBoenkenMenu_3_1.png">View a screenshot of the 'Boenken' menu screen (version 3.1)(png)</a></li>
  <li><img src="PicQt.png" alt="Qt"/><img src="PicUbuntu.png" alt="Ubuntu"/> <a href="GameBoenken_3_0.png">View a screenshot of 'Boenken' (version 3.0)(png)</a></li>
  <li>Older: <a href="GameBoenkenVcl.htm">BoenkenVcl</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.10 (utopic)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./GameBoenken/GameBoenkenConsole.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/GameBoenkenConsole.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppApfloat.htm">Apfloat</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppContainer.htm">CppContainer</a>/<a href="CppContainer.htm">CppContainer</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppGeometry.htm">CppGeometry</a>/<a href="CppGeometry.htm">CppGeometry</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/<a href="CppPlane.htm">CppPlane</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRibiRegex.htm">CppRibiRegex</a>/<a href="CppRibiRegex.htm">CppRibiRegex</a>.pri)<br/>
<br/>
include(../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/<a href="GameBoenken.htm">GameBoenken</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./GameBoenken/GameBoenkenDesktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/GameBoenkenDesktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppApfloat.htm">Apfloat</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralDesktop.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppContainer.htm">CppContainer</a>/<a href="CppContainer.htm">CppContainer</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppGeometry.htm">CppGeometry</a>/<a href="CppGeometry.htm">CppGeometry</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppPlane.htm">CppPlane</a>/<a href="CppPlane.htm">CppPlane</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppRibiRegex.htm">CppRibiRegex</a>/<a href="CppRibiRegex.htm">CppRibiRegex</a>.pri)<br/>
<br/>
include(<a href="GameBoenken.htm">GameBoenken</a>Desktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/GameBoenkenConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/GameBoenkenConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/<a href="GameBoenken.htm">boenken</a>menudialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/<a href="GameBoenken.htm">boenken</a>arenasettings.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/<a href="GameBoenken.htm">boenken</a>controls.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/<a href="GameBoenken.htm">boenken</a>menudialog.h<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/<a href="GameBoenken.htm">GameBoenken</a>.qrc<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/GameBoenkenDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/GameBoenkenDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/<a href="GameBoenken.htm">GameBoenken</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>arenadialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>controlsdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>game.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a><a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>menudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>playersdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>presskeydialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>sprite.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>spriteball.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>spritemoving.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>spritenonmoving.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>spriteplayer.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>traindialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>arenadialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>controlsdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>game.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a><a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>menudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>playersdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>presskeydialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>sprite.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>spriteball.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>spritemoving.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>spritenonmoving.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>spriteplayer.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>traindialog.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>arenadialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>controlsdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a><a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>menudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>playersdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>presskeydialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Games.htm">Games</a>/<a href="GameBoenken.htm">GameBoenken</a>/qt<a href="GameBoenken.htm">boenken</a>traindialog.ui<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/boenkenarenasettings.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/boenkenarenasettings.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENARENASETTINGS_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENARENASETTINGS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUtilityH.htm">utility</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> Formation<br/>
{<br/>
&nbsp;&nbsp;straight_line,<br/>
&nbsp;&nbsp;circle_inward,<br/>
&nbsp;&nbsp;circle_outward<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>ArenaSettings holds the parameters set in DialogArena<br/>
<b><a href="CppStruct.htm">struct</a></b> ArenaSettings<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; screen_size;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> width() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> screen_size.first; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> height() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> screen_size.second; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_balls;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_obstacles;<br/>
&nbsp;&nbsp;Formation formation;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> friction;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BOENKENARENASETTINGS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/boenkencontrols.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/boenkencontrols.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENCONTROLS_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENCONTROLS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Controls contains the control keys<br/>
<a href="CppComment.htm">///</a>and the players' names<br/>
<a href="CppComment.htm">///</a>Controls is created by DialogControls<br/>
<b><a href="CppStruct.htm">struct</a></b> Controls<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_keys_accel;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_keys_turn;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_names;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BOENKENCONTROLS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/boenkenmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/boenkenmenudialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "menudialog.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MenuDialog <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> ::<a href="CppRibi.htm">ribi</a>::MenuDialog<br/>
{<br/>
&nbsp;&nbsp;MenuDialog();<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;Help GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BOENKENMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/boenkenmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/boenkenmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>menudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "plane.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRichelBilderbeekProgram.htm">richelbilderbeekprogram</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog::MenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog::ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileTitle() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " cannot be run in console mode\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog::GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="GameBoenken.htm">Boenken</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"a multiplayer soccer/billiards game",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 17th of November 2012",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2007-2014",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppContainer.htm">Container</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppContainer.htm">Container</a>().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppFileIo.htm">FileIo</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Geometry <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Geometry().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Plane <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Plane::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Test<a href="CppTime.htm">Time</a>r <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Test<a href="CppTime.htm">Time</a>r::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Help <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog::GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Help(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileTitle(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileDescription(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog::GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Program<a href="GameBoenken.htm">Boenken</a><br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "4.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2000-xx-xx: <a href="CppVersion.htm">version</a> 0.0: wrote QBASIC <a href="CppVersion.htm">version</a> of <a href="GameBoenken.htm">Boenken</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2007-10-18: <a href="CppVersion.htm">version</a> 1.0: port from QBASIC to <a href="CppBuilder.htm">C++ Builder</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2007-12-30: <a href="CppVersion.htm">version</a> 2.0: added old-school-graphics mode, two-button control and option to set the friction of the players",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-08-14: <a href="CppVersion.htm">version</a> 3.0: initial port to cross-platform, <b><a href="CppUsing.htm">using</a></b> <a href="CppQtCreator.htm">Qt Creator</a>. <a href="CppAdd.htm">Add</a>ed doxygen support",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-08-15: <a href="CppVersion.htm">version</a> 3.1: created basic menu <a href="CppFunction.htm">function</a>ality, improved doxygen <a href="CppDocumentation.htm">documentation</a>,&nbsp;&nbsp;improved code (seperated GUI from game rules, all sprites can be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a> only)",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-03-07: <a href="CppVersion.htm">version</a> 4.0: conformized naming and architecture <b><a href="CppFor.htm">for</a></b> <a href="ProjectRichelBilderbeek.htm">ProjectRichelBilderbeek</a>"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-11-17: <a href="CppVersion.htm">version</a> 4.1: added a fancy color gradient to the <a href="CppMain.htm">main</a> menu"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppContainer.htm">Container</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Geometry();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>menudialog.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> * <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; args { <a href="CppRibi.htm">ribi</a>::MenuDialog::<a href="CppConvert.htm">Convert</a>Arguments(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>) };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::MenuDialog().Execute(args);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenarenadialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenarenadialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTBOENKENARENADIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTBOENKENARENADIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>arenasettings.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Dialog to setup up the arena<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; GetScreenSize() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNballs() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNobstacles() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a>::Formation GetFormation() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetFriction() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings GetSettings() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog *ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTBOENKENARENADIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenarenadialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenarenadialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>arenadialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameBoenken.htm">boenken</a>arenadialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog(<a href="CppQWidget.htm">QWidget</a> *parent) <b><a href="CppNoexcept.htm">noexcept</a></b> :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_done,&amp;<a href="CppQPushButton.htm">QPushButton</a>::clicked,<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::close);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>The purpose of <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog is to create<br/>
<a href="CppComment.htm">///</a>an ArenaSettings<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::ArenaSettings <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetSettings() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a>::ArenaSettings s;<br/>
&nbsp;&nbsp;s.formation <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetFormation();<br/>
&nbsp;&nbsp;s.friction <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetFriction();<br/>
&nbsp;&nbsp;s.n_balls <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetNballs();<br/>
&nbsp;&nbsp;s.n_obstacles <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetNobstacles();<br/>
&nbsp;&nbsp;s.screen_size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetScreenSize();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetScreenSize() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Makes the code shorter and copy-pastable<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QComboBox * <b><a href="CppConst.htm">const</a></b> b <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_screen_size;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;count()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(b-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Full screen");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>8, because of the <a href="CppApplication.htm">application</a> fame<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;width()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> 8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>50, because of the app's title bar and those <a href="CppUbuntu.htm">Ubuntu</a> panels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;height() <a href="CppOperatorMinus.htm">-</a> 96;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(width,height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "640x400");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(640,400);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetScreenSize");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetNballs() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Makes the code shorter and copy-pastable<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QComboBox * <b><a href="CppConst.htm">const</a></b> b <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_nballs;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;count()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(b-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "One");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Two");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetNballs");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetNobstacles() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Makes the code shorter and copy-pastable<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QComboBox * <b><a href="CppConst.htm">const</a></b> b <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_obstacles;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;count()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(b-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "None");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Two");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetNobstacles");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Formation <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetFormation() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Makes the code shorter and copy-pastable<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QComboBox * <b><a href="CppConst.htm">const</a></b> b <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_formation;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;count()<a href="CppOperatorEqual.htm">==</a>3);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(b-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Line");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="GameBoenken.htm">Boenken</a>::straight_line;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Circle, inward");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="GameBoenken.htm">Boenken</a>::circle_inward;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Circle, outward");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="GameBoenken.htm">Boenken</a>::circle_outward;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetFormation");<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetFriction() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QComboBox * <b><a href="CppConst.htm">const</a></b> b <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_friction;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;count()<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(b-&gt;currentIndex())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "None");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Low");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0.999;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog::GetFriction");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkencontrolsdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkencontrolsdialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTBOENKENCONTROLSDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTBOENKENCONTROLSDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>controls.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>This dialog connects player names to their controls<br/>
<a href="CppComment.htm">///</a>(but it does not connect sprites to their controllers,<br/>
<a href="CppComment.htm">///</a><b><a href="CppThis.htm">this</a></b> is what DialogPlayers is <b><a href="CppFor.htm">for</a></b>)<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a>::Controls GetControls() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_keys_accel;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_keys_turn;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onAccelerate1() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onAccelerate2() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onTurn1() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onTurn2() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> showKeys() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; getKeysAccel() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; getKeysTurn() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; getNames() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTBOENKENCONTROLSDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkencontrolsdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkencontrolsdialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>controlsdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>presskeydialog.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameBoenken.htm">boenken</a>controlsdialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_keys_accel{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_keys_turn{}<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_done,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQPushButton.htm">QPushButton</a>::clicked,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::close<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_keys_accel.push_back(<a href="CppQt.htm">Qt</a>::Key_W);<br/>
&nbsp;&nbsp;m_keys_accel.push_back(<a href="CppQt.htm">Qt</a>::Key_Up);<br/>
&nbsp;&nbsp;m_keys_turn.push_back(<a href="CppQt.htm">Qt</a>::Key_D);<br/>
&nbsp;&nbsp;m_keys_turn.push_back(<a href="CppQt.htm">Qt</a>::Key_Right);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_accelerate_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQPushButton.htm">QPushButton</a>::clicked,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::onAccelerate1<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_accelerate_2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQPushButton.htm">QPushButton</a>::clicked,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::onAccelerate2<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_turn_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQPushButton.htm">QPushButton</a>::clicked,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::onTurn1<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_turn_2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQPushButton.htm">QPushButton</a>::clicked,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::onTurn2<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;showKeys();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::showKeys() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;ui-&gt;button_accelerate_1-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_keys_accel[0]).c_str() );<br/>
&nbsp;&nbsp;ui-&gt;button_accelerate_2-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_keys_accel[1]).c_str() );<br/>
&nbsp;&nbsp;ui-&gt;button_turn_1-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_keys_turn[0]).c_str() );<br/>
&nbsp;&nbsp;ui-&gt;button_turn_2-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(m_keys_turn[1]).c_str() );<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::onAccelerate1() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog d;<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> d.GetKey();<br/>
&nbsp;&nbsp;m_keys_accel[0] <a href="CppOperatorAssign.htm">=</a> key;<br/>
&nbsp;&nbsp;showKeys();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::onAccelerate2() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog d;<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> d.GetKey();<br/>
&nbsp;&nbsp;m_keys_accel[1] <a href="CppOperatorAssign.htm">=</a> key;<br/>
&nbsp;&nbsp;showKeys();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::onTurn1() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog d;<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> d.GetKey();<br/>
&nbsp;&nbsp;m_keys_turn[0] <a href="CppOperatorAssign.htm">=</a> key;<br/>
&nbsp;&nbsp;showKeys();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::onTurn2() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog d;<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> d.GetKey();<br/>
&nbsp;&nbsp;m_keys_turn[1] <a href="CppOperatorAssign.htm">=</a> key;<br/>
&nbsp;&nbsp;showKeys();<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::getKeysAccel() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_keys_accel;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::getKeysTurn() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_keys_turn;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::getNames() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;edit_name1-&gt;text().toStdString());<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;edit_name2-&gt;text().toStdString());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Controls <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog::GetControls() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a>::Controls c;<br/>
&nbsp;&nbsp;c.m_keys_accel <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;getKeysAccel();<br/>
&nbsp;&nbsp;c.m_keys_turn <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;getKeysTurn();<br/>
&nbsp;&nbsp;c.m_names <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;getNames();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> c;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkengame.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkengame.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENGAME_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENGAME_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>arenasettings.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>controls.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>sprite.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQPainter.htm">QPainter</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Sprite;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpriteBall;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpriteMoving;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpriteNonMoving;<br/>
<b><a href="CppStruct.htm">struct</a></b> SpritePlayer;<br/>
<br/>
<a href="CppComment.htm">///</a><a href="GameBoenken.htm">Boenken</a> contains the game.<br/>
<a href="CppComment.htm">///</a><a href="GameBoenken.htm">Boenken</a> can be displayed by DialogMain<br/>
<b><a href="CppStruct.htm">struct</a></b> Game<br/>
{<br/>
&nbsp;&nbsp;Game(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ArenaSettings&amp; arena_settings,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Controls&amp; controls,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&nbsp;&nbsp; &gt; &gt; players,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&nbsp;&nbsp;&nbsp;&nbsp; &gt; &gt; balls,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteNonMoving&gt; &gt; obstacles);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> drawPlayers(<a href="CppQPainter.htm">QPainter</a>&amp; painter) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getWidth()&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> getHeight() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; GetScore() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> pressKey(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> resize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> tick();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/'Real' sprites<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&nbsp;&nbsp; &gt; &gt; m_players;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&nbsp;&nbsp;&nbsp;&nbsp; &gt; &gt; m_balls;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteNonMoving&gt; &gt; m_obstacles;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Sprite copies <b><a href="CppFor.htm">for</a></b> group-specific routines<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;SpriteMoving*&gt; m_moving_sprites;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Sprite&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&gt; m_sprites;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ArenaSettings m_arena_settings;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Controls m_controls;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Collect all moving sprites<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;SpriteMoving*&gt; CollectMovingSprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&gt; &gt; players,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&nbsp;&nbsp;&gt; &gt; balls);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Sprite*&gt; CollectSprites(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&nbsp;&nbsp; &gt; &gt; players,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&nbsp;&nbsp;&nbsp;&nbsp; &gt; &gt; balls,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteNonMoving&gt; &gt; obstacles);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BOENKENGAME_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkengame.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkengame.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>game.h"<br/>
<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>arenasettings.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>sprite.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spriteball.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritemoving.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritenonmoving.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spriteplayer.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::Game(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ArenaSettings&amp; arena_settings,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Controls&amp; controls,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&nbsp;&nbsp; &gt; &gt; players,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&nbsp;&nbsp;&nbsp;&nbsp; &gt; &gt; balls,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteNonMoving&gt; &gt; obstacles)<br/>
&nbsp;&nbsp;: m_players(players),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_balls(balls),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_obstacles(obstacles),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_moving_sprites(CollectMovingSprites(players,balls)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites(CollectSprites(players,balls,obstacles)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arena_settings(arena_settings),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_controls(controls)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Reset the score to 0-0<br/>
&nbsp;&nbsp;SpriteBall::ResetScore();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the friction<br/>
&nbsp;&nbsp;SpriteMoving::SetFriction(m_arena_settings.friction);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the arena size <b><a href="CppFor.htm">for</a></b> the Sprites<br/>
&nbsp;&nbsp;Sprite::setArenaSize(<b><a href="CppThis.htm">this</a></b>-&gt;getWidth(),<b><a href="CppThis.htm">this</a></b>-&gt;getHeight());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Keep the right goal posts at the right side<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assume <b><a href="CppThis.htm">this</a></b> is done!<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_obstacles.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be at least four goal posts");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_obstacles[2]-&gt;setX(width <a href="CppOperatorMinus.htm">-</a> m_obstacles[2]-&gt;m_size);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_obstacles[3]-&gt;setX(width <a href="CppOperatorMinus.htm">-</a> m_obstacles[3]-&gt;m_size);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the goal area<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_obstacles.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be at least four goal posts");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> goal_y_top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_obstacles[0]-&gt;getY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> goal_y_bottom <a href="CppOperatorAssign.htm">=</a> m_obstacles[1]-&gt;getY();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(goal_y_top <a href="CppOperatorLessEqual.htm">&lt;=</a> goal_y_bottom);<br/>
&nbsp;&nbsp;SpriteBall::SetGoalPoles(goal_y_top,goal_y_bottom);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving*&gt; <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::CollectMovingSprites(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&gt; &gt; players,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&nbsp;&nbsp;&gt; &gt; balls)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;SpriteMoving*&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&gt; i: players)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpriteMoving * <b><a href="CppConst.htm">const</a></b> s <a href="CppOperatorAssign.htm">=</a> i.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&gt; i: balls)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpriteMoving * <b><a href="CppConst.htm">const</a></b> s <a href="CppOperatorAssign.htm">=</a> i.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite*&gt; <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::CollectSprites(<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&nbsp;&nbsp; &gt; &gt; players,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&nbsp;&nbsp;&nbsp;&nbsp; &gt; &gt; balls,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteNonMoving&gt; &gt; obstacles)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Sprite*&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&gt; i: players)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Sprite * <b><a href="CppConst.htm">const</a></b> s <a href="CppOperatorAssign.htm">=</a> i.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&gt; i: balls)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Sprite * <b><a href="CppConst.htm">const</a></b> s <a href="CppOperatorAssign.htm">=</a> i.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteNonMoving&gt; i: obstacles)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Sprite * <b><a href="CppConst.htm">const</a></b> s <a href="CppOperatorAssign.htm">=</a> i.get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::drawPlayers(<a href="CppQPainter.htm">QPainter</a>&amp; painter) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> Sprite * <b><a href="CppConst.htm">const</a></b> s: m_sprites)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s-&gt;Draw(painter);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::getHeight() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_arena_settings.height();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::GetScore() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> SpriteBall::GetScore();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::getWidth() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_arena_settings.width();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::pressKey(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_players <a href="CppOperatorAssign.htm">=</a> m_controls.m_names.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_players; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (key <a href="CppOperatorEqual.htm">==</a> m_controls.m_keys_accel[i]) m_players[i]-&gt;Accelerate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (key <a href="CppOperatorEqual.htm">==</a> m_controls.m_keys_turn[i] ) m_players[i]-&gt;TurnRight();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (key)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/F1 is the <a href="CppDebug.htm">debugging</a> key<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/F2 is the <a href="CppDebug.htm">debugging</a> key, after which there is a quit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Player coordinats:\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&gt;&amp; s,m_players)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.get() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s-&gt;getX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s-&gt;getY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Ball coordinats:\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&gt;&amp; s,m_balls)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.get() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s-&gt;getX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s-&gt;getY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Moving sprite coordinats (must match above):\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(SpriteMoving * s,m_moving_sprites)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s-&gt;getX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s-&gt;getY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (key <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_F2) <a href="CppStdExit.htm">std::exit</a>(1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpritePlayer&gt; p(<b><a href="CppNew.htm">new</a></b> SpritePlayer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,0.0,0.0,8,0,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteBall&gt; p(<b><a href="CppNew.htm">new</a></b> SpriteBall(0.0,0.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteNonMoving&gt; p(<b><a href="CppNew.htm">new</a></b> SpriteNonMoving(0.0,0.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ArenaSettings arena_settings;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Controls controls;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Moves all sprites<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Game::tick()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Move all moving sprites<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(SpriteMoving* <b><a href="CppConst.htm">const</a></b> s: m_moving_sprites)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s-&gt;Move();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check all moving sprite collisions with moving sprites<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(SpriteMoving* <b><a href="CppConst.htm">const</a></b> s1: m_moving_sprites)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(SpriteMoving* <b><a href="CppConst.htm">const</a></b> s2: m_moving_sprites)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s1 <a href="CppOperatorLessEqual.htm">&lt;=</a> s2) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpritePlayer::Collision(s1,s2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check all moving sprite collisions with non-moving sprites<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;SpriteNonMoving&gt;&amp; s1: m_obstacles)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(SpriteMoving* <b><a href="CppConst.htm">const</a></b> s2: m_moving_sprites)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpriteNonMoving::Collision(s1.get(),s2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenmaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenmaindialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTBOENKENMAINDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTBOENKENMAINDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> { <b><a href="CppStruct.htm">struct</a></b> Game; }<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::Game&gt; CreateNo<a href="GameBoenken.htm">Boenken</a>();<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog displays <a href="GameBoenken.htm">Boenken</a> and handles user events<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::Game&gt; <a href="GameBoenken.htm">boenken</a> <a href="CppOperatorAssign.htm">=</a> CreateNo<a href="GameBoenken.htm">Boenken</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_training <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a>*);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a>*);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>UI<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Graphics<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQPixmap.htm">QPixmap</a>&gt; m_background;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Other <a href="CppQt.htm">Qt</a>hings<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppMain.htm">main</a> game <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQTimer.htm">QTimer</a>&gt; m_<a href="CppTime.htm">time</a>r;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppTime.htm">time</a>r that does the countdown<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQTimer.htm">QTimer</a>&gt; m_<a href="CppTime.htm">time</a>r_countdown;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Other member variables<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::Game&gt; m_<a href="GameBoenken.htm">boenken</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> m_is_training;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppPaint.htm">Paint</a> paints a Pixmap to a single color fast,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/from http://www.richelbilderbeek.nl/Cpp<a href="CppPaint.htm">Paint</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppPaint.htm">Paint</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a>&amp; pixmap,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> a <a href="CppOperatorAssign.htm">=</a> 255);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on<a href="CppTime.htm">Time</a>r();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onCountdown<a href="CppTime.htm">Time</a>r();<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTBOENKENMAINDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenmaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenmaindialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>maindialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>game.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameBoenken.htm">boenken</a>maindialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>All parameters are fed into the contructor<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog(<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent,<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::Game&gt; <a href="GameBoenken.htm">boenken</a>,<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> is_training)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_background(<b><a href="CppNew.htm">new</a></b> <a href="CppQPixmap.htm">QPixmap</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r(<b><a href="CppNew.htm">new</a></b> <a href="CppQTimer.htm">QTimer</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r_countdown(<b><a href="CppNew.htm">new</a></b> <a href="CppQTimer.htm">QTimer</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="GameBoenken.htm">boenken</a>(<a href="GameBoenken.htm">boenken</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_is_training(is_training)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set GUI size to <a href="GameBoenken.htm">Boenken</a> size<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,m_<a href="GameBoenken.htm">boenken</a>-&gt;getWidth(),m_<a href="GameBoenken.htm">boenken</a>-&gt;getHeight());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Size the black background<br/>
&nbsp;&nbsp;m_background.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppQPixmap.htm">QPixmap</a>(m_<a href="GameBoenken.htm">boenken</a>-&gt;getWidth(),m_<a href="GameBoenken.htm">boenken</a>-&gt;getHeight()));<br/>
&nbsp;&nbsp;<a href="CppPaint.htm">Paint</a>(*m_background,1,1,1); <a href="CppComment.htm">//</a>Black<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Put the dialog in the screen center<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Disallow resize from now on<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFixedWidth(m_<a href="GameBoenken.htm">boenken</a>-&gt;getWidth());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFixedHeight(m_<a href="GameBoenken.htm">boenken</a>-&gt;getHeight());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Start the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r.get(),&amp;<a href="CppQTimer.htm">QTimer</a>::<a href="CppTime.htm">time</a>out,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::on<a href="CppTime.htm">Time</a>r<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r_countdown.get(),&amp;<a href="CppQTimer.htm">QTimer</a>::<a href="CppTime.htm">time</a>out,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::onCountdown<a href="CppTime.htm">Time</a>r<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_is_training)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r_countdown-&gt;start(1000);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;stop();<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r_countdown-&gt;stop();<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a>*)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw background on painter<br/>
&nbsp;&nbsp;painter.drawPixmap(rect(),*m_background);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw all sprites on painter<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the pen to white and 3 pixels wide<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> pen <a href="CppOperatorAssign.htm">=</a> painter.pen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setWidth(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen.setColor(<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.setPen(pen);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Call <a href="GameBoenken.htm">Boenken</a> to draw the sprites<br/>
&nbsp;&nbsp;m_<a href="GameBoenken.htm">boenken</a>-&gt;drawPlayers(painter);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw score on painter<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFont.htm">QFont</a> font <a href="CppOperatorAssign.htm">=</a> painter.font();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;font.setFamily("Courier");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.setFont(font);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; scores <a href="CppOperatorAssign.htm">=</a> m_<a href="GameBoenken.htm">boenken</a>-&gt;GetScore();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> score_left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppQString.htm">QString</a>(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(scores.first).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> score_right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(scores.second).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawText(120,0,80,20,0,score_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter.drawText(440,0,80,20,0,score_right);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Handles key presses.<br/>
<a href="CppComment.htm">///</a>These are ignored when the computer is training<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_is_training) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume that a key is pressed<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>(which according to the <a href="CppQt.htm">Qt</a> doc is always <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e-&gt;type() <a href="CppOperatorEqual.htm">==</a> <a href="CppQEvent.htm">QEvent</a>::KeyPress);<br/>
&nbsp;&nbsp;m_<a href="GameBoenken.htm">boenken</a>-&gt;pressKey(e-&gt;key());<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>This <a href="CppMemberFunction.htm">member function</a> gives the game 1000 msecs <a href="CppTime.htm">time</a><br/>
<a href="CppComment.htm">///</a>to <b><a href="CppDo.htm">do</a></b> those magical start-up things...<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::onCountdown<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_is_training);<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r_countdown-&gt;stop();<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;start(20);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>The <a href="CppMain.htm">main</a> <a href="CppMemberFunction.htm">member function</a> when not training:<br/>
<a href="CppComment.htm">///</a>every 50msec the Sprites<br/>
<a href="CppComment.htm">///</a>move and are drawn to the screen<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::on<a href="CppTime.htm">Time</a>r()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_is_training);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="GameBoenken.htm">Boenken</a> moves all sprites<br/>
&nbsp;&nbsp;m_<a href="GameBoenken.htm">boenken</a>-&gt;tick();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Repaint the screen<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;repaint();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::<a href="CppPaint.htm">Paint</a>(<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a>&amp; pixmap,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> a)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> pixmap.width();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> pixmap.height();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorEqual.htm">==</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> a; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> r; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> g; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> b; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenmenudialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTBOENKENMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTBOENKENMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> ArenaSettings;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> SpriteBall;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> SpriteNonMoving;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> SpritePlayer;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Gathers all options to start a game<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog&gt; m_controls;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog&gt; m_players;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog&gt; m_arena;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&gt; &gt; CreatePlayers(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings&amp; a);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteBall&gt; &gt; CreateBalls(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings&amp; a);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; &gt; CreateObstacles(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings&amp; a);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onControlsClick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onPlayersClick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onArenaClick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onStartClick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onTrainClick();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on<a href="CppAbout.htm">About</a>Click();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTBOENKENMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>menudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppTime.htm">time</a>r.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>arenasettings.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="GameBoenken.htm">boenken</a>menudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>arenadialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>controlsdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>game.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>playersdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spriteball.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritemoving.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritenonmoving.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spriteplayer.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameBoenken.htm">boenken</a>menudialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_controls(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ControlsDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_players( <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arena(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>ArenaDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_set_controls,&amp;QAbstractButton::clicked,<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onControlsClick);<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_set_players ,&amp;QAbstractButton::clicked,<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onPlayersClick );<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_set_arena&nbsp;&nbsp; ,&amp;QAbstractButton::clicked,<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onArenaClick&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_start&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&amp;QAbstractButton::clicked,<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onStartClick&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_train&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&amp;QAbstractButton::clicked,<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onTrainClick&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_about&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&amp;QAbstractButton::clicked,<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::on<a href="CppAbout.htm">About</a>Click&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;button_quit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&amp;QAbstractButton::clicked,<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::close&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::CreatePlayers(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings&amp; a)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create two<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&gt; &gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_players <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 32;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mid_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(a.screen_size.first) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mid_y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(a.screen_size.second) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a.formation<a href="CppOperatorEqual.htm">==</a><a href="GameBoenken.htm">Boenken</a>::straight_line)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_left&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (1 * (a.width() <a href="CppOperatorDivide.htm">/</a> 4) ) <a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_right <a href="CppOperatorAssign.htm">=</a> (3 * (a.width() <a href="CppOperatorDivide.htm">/</a> 4) ) <a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> players_height <a href="CppOperatorAssign.htm">=</a> size * (n_players <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (a.height()) <a href="CppOperatorDivide.htm">/</a> 2 <a href="CppOperatorMinus.htm">-</a> (players_height <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_players; <a href="CppOperatorIncrement.htm">++</a>i,y<a href="CppOperatorPlusAssign.htm">+=</a>(size/2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 2 ? x_right : x_left);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> face_angle <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 2 ? 1.5 * pi : 0.5 * pi);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 2 ?&nbsp;&nbsp; 0 : 255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 2 ?&nbsp;&nbsp; 0 :&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 2 ? 255 :&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpritePlayer(x,y,face_angle,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.formation<a href="CppOperatorEqual.htm">==</a><a href="GameBoenken.htm">Boenken</a>::circle_inward <a href="CppOperatorLogicalOr.htm">||</a> a.formation<a href="CppOperatorEqual.htm">==</a><a href="GameBoenken.htm">Boenken</a>::circle_outward);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray_x <a href="CppOperatorAssign.htm">=</a> mid_x <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray_y <a href="CppOperatorAssign.htm">=</a> mid_y <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_angle <a href="CppOperatorAssign.htm">=</a> (2.0 * pi) <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_players);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> 1.5 * pi;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_players; <a href="CppOperatorIncrement.htm">++</a>i,angle<a href="CppOperatorPlusAssign.htm">+=</a>d_angle)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mid_x <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(angle) * ray_x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> (<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(size) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mid_y <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(angle) * ray_y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(size) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 2 ?&nbsp;&nbsp; 0 : 255);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 2 ?&nbsp;&nbsp; 0 :&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 2 ? 255 :&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> face_angle <a href="CppOperatorAssign.htm">=</a> angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (a.formation<a href="CppOperatorEqual.htm">==</a><a href="GameBoenken.htm">Boenken</a>::circle_inward ? pi : 0.0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&gt; p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpritePlayer(x,y,face_angle,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::CreateBalls(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings&amp; a)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 32;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A ball is always green<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g <a href="CppOperatorAssign.htm">=</a> 255;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 0;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteBall&gt; &gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (a.n_balls)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> a.screen_size.first <a href="CppOperatorDivide.htm">/</a> 2 <a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> a.screen_size.second <a href="CppOperatorDivide.htm">/</a> 2 <a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteBall&gt; s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteBall(x,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (a.screen_size.first <a href="CppOperatorDivide.htm">/</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> x1 <a href="CppOperatorPlus.htm">+</a> size <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (a.screen_size.second <a href="CppOperatorDivide.htm">/</a> 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteBall&gt; s1(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteBall(x1,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteBall&gt; s2(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteBall(x2,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Always creates the four goalposts<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::CreateObstacles(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings&amp; a)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 32;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A obstacle is always grey<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r <a href="CppOperatorAssign.htm">=</a> 255;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g <a href="CppOperatorAssign.htm">=</a> 255;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b <a href="CppOperatorAssign.htm">=</a> 255;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; &gt; v;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Top-left goalpost<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> a.screen_size.second <a href="CppOperatorDivide.htm">/</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving(x,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bottom-left goalpost<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 3 * a.screen_size.second <a href="CppOperatorDivide.htm">/</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving(x,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Top-left goalpost<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> a.screen_size.first <a href="CppOperatorMinus.htm">-</a> size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> a.screen_size.second <a href="CppOperatorDivide.htm">/</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving(x,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bottom-left goalpost<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> a.screen_size.first <a href="CppOperatorMinus.htm">-</a> size;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 3 * a.screen_size.second <a href="CppOperatorDivide.htm">/</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving(x,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a.n_obstacles <a href="CppOperatorEqual.htm">==</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Left obstacle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> ( (1 * a.width() ) <a href="CppOperatorDivide.htm">/</a> 8) <a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> ( (1 * a.height()) <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving(x,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Right obstacle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> ( (7 * a.width() ) <a href="CppOperatorDivide.htm">/</a> 8) <a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> ( (1 * a.height()) <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> (size <a href="CppOperatorDivide.htm">/</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving(x,y,size,r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onControlsClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(m_controls.get());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onPlayersClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(m_players.get());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onArenaClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(m_arena.get());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onStartClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings a <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_arena-&gt;GetSettings();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::Controls c <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_controls-&gt;GetControls();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&nbsp;&nbsp; &gt; &gt; players&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> CreatePlayers(a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteBall&nbsp;&nbsp;&nbsp;&nbsp; &gt; &gt; balls&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> CreateBalls(a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; &gt; obstacles <a href="CppOperatorAssign.htm">=</a> CreateObstacles(a);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::Game&gt; b(<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::Game(a,c,players,balls,obstacles));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog d(0,b);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::onTrainClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::ArenaSettings a <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_arena-&gt;GetSettings();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="GameBoenken.htm">Boenken</a>::Controls c <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_controls-&gt;GetControls();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&nbsp;&nbsp; &gt; &gt; players&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> CreatePlayers(a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteBall&nbsp;&nbsp;&nbsp;&nbsp; &gt; &gt; balls&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> CreateBalls(a);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; &gt; obstacles <a href="CppOperatorAssign.htm">=</a> CreateObstacles(a);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::Game&gt; b(<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::Game(a,c,players,balls,obstacles));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog d(0,b);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.show();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&gt;&amp; p: players)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;Accelerate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;TurnRight();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;tick();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.repaint();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::on<a href="CppAbout.htm">About</a>Click()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a <a href="CppOperatorAssign.htm">=</a> <a href="GameBoenken.htm">Boenken</a>::MenuDialog().GetAbout();<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppQtAboutDialog.htm">QtAboutDialog</a> d(a);<br/>
&nbsp;&nbsp;d.setStyleSheet(<b><a href="CppThis.htm">this</a></b>-&gt;styleSheet());<br/>
&nbsp;&nbsp;d.setWindowIcon(<b><a href="CppThis.htm">this</a></b>-&gt;windowIcon());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a>::MenuDialog();<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a>::ArenaSettings a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.formation <a href="CppOperatorAssign.htm">=</a> <a href="GameBoenken.htm">Boenken</a>::circle_inward;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.friction <a href="CppOperatorAssign.htm">=</a> 0.999;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.n_balls <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.n_obstacles <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a.screen_size <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_pair.htm">std::make_pair</a>(320,200);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="GameBoenken.htm">Boenken</a>::Controls c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpritePlayer&nbsp;&nbsp; &gt; &gt; players&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> CreatePlayers(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteBall&nbsp;&nbsp;&nbsp;&nbsp; &gt; &gt; balls&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> CreateBalls(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving&gt; &gt; obstacles <a href="CppOperatorAssign.htm">=</a> CreateObstacles(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="GameBoenken.htm">Boenken</a>::Game&gt; b(<b><a href="CppNew.htm">new</a></b> <a href="GameBoenken.htm">Boenken</a>::Game(a,c,players,balls,obstacles));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MainDialog d(0,b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenplayersdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenplayersdialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTBOENKENPLAYERSDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTBOENKENPLAYERSDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Dialog to connect sprites to their controllers\n<br/>
<a href="CppComment.htm">///</a>A controller can be\n<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> a human\n<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> a computer\n<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog *ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTBOENKENPLAYERSDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenplayersdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenplayersdialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>playersdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameBoenken.htm">boenken</a>playersdialog.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;button_done,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppQPushButton.htm">QPushButton</a>::clicked,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog::close<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog::~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PlayersDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenpresskeydialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenpresskeydialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTBOENKENPRESSKEYDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTBOENKENPRESSKEYDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog asks the user to press<br/>
<a href="CppComment.htm">///</a><a href="CppAny.htm">any</a> key. The key pressed can be requested<br/>
<a href="CppComment.htm">///</a>later, by DialogControls.<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetKey() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_key; }<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * e);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog *ui;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_key;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTBOENKENPRESSKEYDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenpresskeydialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenpresskeydialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>presskeydialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameBoenken.htm">boenken</a>presskeydialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog),<br/>
&nbsp;&nbsp;m_key(0)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog::~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>PressKeyDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>According to the <a href="CppQt.htm">Qt</a> doc, the <a href="CppAssert.htm">assert</a> below is always <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e-&gt;type() <a href="CppOperatorEqual.htm">==</a> <a href="CppQEvent.htm">QEvent</a>::KeyPress);<br/>
&nbsp;&nbsp;m_key <a href="CppOperatorAssign.htm">=</a> e-&gt;key();<br/>
&nbsp;&nbsp;close();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkensprite.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkensprite.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENSPRITE_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENSPRITE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Sprite is the ABC of <a href="CppAny.htm">any</a>thing that must be drawn on screen<br/>
<b><a href="CppStruct.htm">struct</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Sprite(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
&nbsp;&nbsp;Sprite(<b><a href="CppConst.htm">const</a></b> Sprite&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Sprite&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Sprite&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Sprite() <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDefault.htm">default</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The size (width<a href="CppOperatorEqual.htm">==</a>height) in pixels<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_size;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The globe part of the Sprite<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a> m_pixmap;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> getX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetX(); }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> getY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetY(); }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_x; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_y; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The x,y,w,h of the sprite<br/>
&nbsp;&nbsp;<a href="CppQRect.htm">QRect</a> rect() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a>&amp; pixmap() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Every sprite must be drawn to the screen<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Draw(<a href="CppQPainter.htm">QPainter</a>&amp; painter) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Sets the arena size,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/that is Sprite::m_maxx and Sprite::m_maxy.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SpriteBall::SetGoalPoles defines the vertical<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/range of the goal posts<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Every sprite must be within the arena<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> setArenaSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetX(x); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetY(y); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_x&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> x; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_y&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> y; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_x;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_y;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> m_maxx;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> m_maxy;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draws a globe with a nice 3D effect\n<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppDrawGlobe.htm">DrawGlobe</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppQPixmap.htm">QPixmap</a> <a href="CppDrawGlobe.htm">DrawGlobe</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the angle in radians between two deltas<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/12 o'clock is 0.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 3 o'clock is 0.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 6 o'clock is 1.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 9 o'clock is 1.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetAngle.htm">GetAngle</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a> calculates the impulses after a<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/collision.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angleCollision,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; angle1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; speed1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; angle2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; speed2) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SPRITE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkensprite.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkensprite.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>sprite.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQBitmap.htm">QBitmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQImage.htm">QImage</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>The maximum x coordinat a Sprite can have<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::m_maxx <a href="CppOperatorAssign.htm">=</a> 320;<br/>
<br/>
<a href="CppComment.htm">///</a>The maximum y coordinat a Sprite can have<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::m_maxy <a href="CppOperatorAssign.htm">=</a> 200;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::Sprite(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
&nbsp;&nbsp;: m_size(size),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pixmap(<a href="CppDrawGlobe.htm">DrawGlobe</a>(size,size,r,g,b)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(x),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y(y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppQRect.htm">QRect</a> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::rect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQRect.htm">QRect</a>(m_x,m_y,m_size,m_size);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppQPixmap.htm">QPixmap</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::pixmap() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_pixmap;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::Draw(<a href="CppQPainter.htm">QPainter</a>&amp; painter) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;painter.drawPixmap(<b><a href="CppThis.htm">this</a></b>-&gt;rect(),<b><a href="CppThis.htm">this</a></b>-&gt;pixmap());<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-xx-xx: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-30: added testing, fixed <a href="CppBug.htm">bug</a> in <a href="CppGetAngle.htm">GetAngle</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::setArenaSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height)<br/>
{<br/>
&nbsp;&nbsp;m_maxx <a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;m_maxy <a href="CppOperatorAssign.htm">=</a> height;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppGetAngle.htm">GetAngle</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.htm">GetAngle</a>(0.0,-1.0); <a href="CppComment.htm">//</a>North<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.0 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.htm">GetAngle</a>(1.0,-1.0); <a href="CppComment.htm">//</a>North-East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.25 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.htm">GetAngle</a>(1.0,0.0); <a href="CppComment.htm">//</a>East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.5 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.htm">GetAngle</a>(1.0,1.0); <a href="CppComment.htm">//</a>South-East<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 0.75 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.htm">GetAngle</a>(0.0,1.0); <a href="CppComment.htm">//</a>South<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.0 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.htm">GetAngle</a>(-1.0,1.0); <a href="CppComment.htm">//</a>South-West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.25 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.htm">GetAngle</a>(-1.0,0.0); <a href="CppComment.htm">//</a>West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.5 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppGetAngle.htm">GetAngle</a>(-1.0,-1.0); <a href="CppComment.htm">//</a>North-West<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> expected <a href="CppOperatorAssign.htm">=</a> 1.75 * pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(angle-expected) &lt; 0.01);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDrawGlobe.htm">DrawGlobe</a>.htm<br/>
<a href="CppQPixmap.htm">QPixmap</a> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::<a href="CppDrawGlobe.htm">DrawGlobe</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a> pixmap(width,height);<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> image <a href="CppOperatorAssign.htm">=</a> pixmap.toImage();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(width <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image.bytesPerLine() <a href="CppOperatorDivide.htm">/</a> width <a href="CppOperatorEqual.htm">==</a> 4<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there are 4 bytes per pixel");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(r);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b_max <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(b);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midX <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midY <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(height) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_dist <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(midX,midY);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image.scanLine(y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((x_d <a href="CppOperatorMinus.htm">-</a> midX) * (x_d <a href="CppOperatorMinus.htm">-</a> midX))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ((y_d <a href="CppOperatorMinus.htm">-</a> midY) * (y_d <a href="CppOperatorMinus.htm">-</a> midY)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist <a href="CppOperatorLessEqual.htm">&lt;=</a> max_dist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rel_dist <a href="CppOperatorAssign.htm">=</a> dist <a href="CppOperatorDivide.htm">/</a> max_dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r_here <a href="CppOperatorAssign.htm">=</a> rel_dist * r_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> g_here <a href="CppOperatorAssign.htm">=</a> rel_dist * g_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> b_here <a href="CppOperatorAssign.htm">=</a> rel_dist * b_max;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( r_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( g_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( b_here &lt; 256);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 255; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> r_here; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> g_here; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> b_here; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+3] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Alpha value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+2] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Red<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+1] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Green<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line[x*4+0] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Blue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pixmap <a href="CppOperatorAssign.htm">=</a> pixmap.fromImage(image);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> transparency<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQBitmap.htm">QBitmap</a> mask <a href="CppOperatorAssign.htm">=</a> pixmap.createMaskFromColor(<a href="CppQColor.htm">QColor</a>(0,0,0,0).rgb());<br/>
&nbsp;&nbsp;pixmap.setMask(mask);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pixmap;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::<a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Geometry().<a href="CppGetAngle.htm">GetAngle</a>ClockScreen(dx,dy);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::Sprite::<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angleCollision,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; angle1,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; speed1,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; angle2,<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b>&amp; speed2) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi{<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;()};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 (assumes both players have equal mass!)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A{speed1};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 (assumes both players have equal mass!)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> E{speed2};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angles between the two globes<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c{angleCollision};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angle between c and the impulse direction of player 1<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a{c <a href="CppOperatorMinus.htm">-</a> angle1};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angle between c and the impulse direction of player 2<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b{c <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorMinus.htm">-</a> angle2};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seperate the impulses to their impulses paralel and othoganal the angle of collision<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 parallel to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B{A * <a href="CppStdCos.htm">std::cos</a>(a)};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 1 orthogonal to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C{A * <a href="CppStdSin.htm">std::sin</a>(a)};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 parallel to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> F{E * <a href="CppStdCos.htm">std::cos</a>(b)};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The length of the impulse of player 2 orthogonal to the collision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> G{E * <a href="CppStdSin.htm">std::sin</a>(b)};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seperate the impulses in X and Y directions<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> BdX{B *&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (0.0 * pi))};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> BdY{B * <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (0.0 * pi))};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> CdX{C *&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (1.5 * pi))};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> CdY{C * <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (1.5 * pi))};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> FdX{F *&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (1.0 * pi))};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> FdY{F * <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (1.0 * pi))};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GdX{G *&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(c <a href="CppOperatorPlus.htm">+</a> (0.5 * pi))};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GdY{G * <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(c <a href="CppOperatorPlus.htm">+</a> (0.5 * pi))};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulses<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 1 in the X direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> DdX{CdX <a href="CppOperatorPlus.htm">+</a> FdX};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 1 in the Y direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> DdY{CdY <a href="CppOperatorPlus.htm">+</a> FdY};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 2 in the X direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> HdX{BdX <a href="CppOperatorPlus.htm">+</a> GdX};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting impulse of player 2 in the Y direction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> HdY{BdY <a href="CppOperatorPlus.htm">+</a> GdY};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write the <b><a href="CppFinal.htm">final</a></b> results<br/>
&nbsp;&nbsp;angle1 <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(DdX, DdY);<br/>
&nbsp;&nbsp;angle2 <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(HdX, HdY);<br/>
&nbsp;&nbsp;speed1 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>( (DdX * DdX) <a href="CppOperatorPlus.htm">+</a> (DdY * DdY) ); <a href="CppComment.htm">//</a>Pythagoras<br/>
&nbsp;&nbsp;speed2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>( (HdX * HdX) <a href="CppOperatorPlus.htm">+</a> (HdY * HdY) ); <a href="CppComment.htm">//</a>Pythagoras<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenspriteball.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenspriteball.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENSPRITEBALL_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENSPRITEBALL_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritemoving.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>SpriteBall is green per <b><a href="CppDefault.htm">default</a></b><br/>
<a href="CppComment.htm">///</a>and keeps track of the score<br/>
<a href="CppComment.htm">///</a>and can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
<b><a href="CppStruct.htm">struct</a></b> SpriteBall <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> SpriteMoving<br/>
{<br/>
&nbsp;&nbsp;SpriteBall(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 32,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g <a href="CppOperatorAssign.htm">=</a> 255,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 0);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> SetGoalPoles(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> goal_y_top,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> goal_y_bottom);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; GetScore() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> ResetScore() <b><a href="CppNoexcept.htm">noexcept</a></b> { m_score_left <a href="CppOperatorAssign.htm">=</a> 0; m_score_right <a href="CppOperatorAssign.htm">=</a> 0; }<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> CountBalls() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> sm_n_balls; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Ensure SpriteBall can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
&nbsp;&nbsp;~SpriteBall() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(SpriteBall* x);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> m_goal_y_top;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> m_goal_y_bottom;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> m_score_left;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> m_score_right;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The number of balls, <b><a href="CppFor.htm">for</a></b> <a href="CppDebug.htm">debugging</a> purposes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> sm_n_balls;<br/>
<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BOENKENSPRITEBALL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenspriteball.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenspriteball.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spriteball.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>The y-coordinat of the top goal post<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::m_goal_y_top <a href="CppOperatorAssign.htm">=</a> 100.0;<br/>
<br/>
<a href="CppComment.htm">///</a>The y-coordinat of the bottom goal post<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::m_goal_y_bottom <a href="CppOperatorAssign.htm">=</a> 300.0;<br/>
<br/>
<a href="CppComment.htm">///</a>The current score <b><a href="CppFor.htm">for</a></b> the left team<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::m_score_left <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<a href="CppComment.htm">///</a>The current score <b><a href="CppFor.htm">for</a></b> the right team<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::m_score_right <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<a href="CppComment.htm">//</a>The number of balls, <b><a href="CppFor.htm">for</a></b> <a href="CppDebug.htm">debugging</a> purposes<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::sm_n_balls <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::SpriteBall(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
: SpriteMoving(x,y,size,r,g,b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>sm_n_balls;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "A ball is created at ("<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;getX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ","<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;getY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::~SpriteBall() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>sm_n_balls;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sm_n_balls <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::SetGoalPoles(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> goal_y_top,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> goal_y_bottom)<br/>
{<br/>
&nbsp;&nbsp;m_goal_y_top&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> goal_y_top;<br/>
&nbsp;&nbsp;m_goal_y_bottom <a href="CppOperatorAssign.htm">=</a> goal_y_bottom;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_goal_y_top &lt; m_goal_y_bottom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume the top pole is on top");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::Move() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_maxx <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_size;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_maxy <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_size;<br/>
&nbsp;&nbsp;m_x <a href="CppOperatorPlusAssign.htm">+=</a> m_dx;<br/>
&nbsp;&nbsp;m_y <a href="CppOperatorPlusAssign.htm">+=</a> m_dy;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Move moving sprite into the arena at all costs<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_x &lt;&nbsp;&nbsp;0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_y&nbsp;&nbsp;&gt; m_goal_y_top <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_y &lt; m_goal_y_bottom)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>GOAL!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_score_right;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Ball at ("<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " hit the left goal, defined in height range &lt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_goal_y_top <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_goal_y_bottom <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dx <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFabs.htm">std::fabs</a>(m_dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Ball moved to the right to (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_x &gt; maxx)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_y&nbsp;&nbsp;&gt; m_goal_y_top <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_y &lt; m_goal_y_bottom)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GOAL!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_score_left;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Ball at ("<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " hit the right goal, defined in height range &lt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_goal_y_top <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_goal_y_bottom <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_x <a href="CppOperatorAssign.htm">=</a> maxx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_dx <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdFabs.htm">std::fabs</a>(m_dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Ball moved to the left to (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_y &lt;&nbsp;&nbsp;0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dy <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFabs.htm">std::fabs</a>(m_dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Ball moved downwards to (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_y &gt; maxy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_y&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> maxy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdFabs.htm">std::fabs</a>(m_dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Ball moved upwards to (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_dx <a href="CppOperatorMultiplyAssign.htm">*=</a> m_friction;<br/>
&nbsp;&nbsp;m_dy <a href="CppOperatorMultiplyAssign.htm">*=</a> m_friction;<br/>
}<br/>
<br/>
<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteBall::GetScore() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(m_score_left,m_score_right);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenspritemoving.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenspritemoving.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENSPRITEMOVING_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENSPRITEMOVING_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>sprite.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>SpriteMoving is an <a href="CppAbstractBaseClass.htm">abstract base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> SpriteMoving: <b><a href="CppPublic.htm">public</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;SpriteMoving(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~SpriteMoving();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalcImpulseAngle() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalcImpulseSpeed() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Draw(<a href="CppQPainter.htm">QPainter</a>&amp; painter) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetDeltaX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dx; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetDeltaY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dy; }<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Move() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy) { m_dx <a href="CppOperatorPlusAssign.htm">+=</a> dx; m_dy <a href="CppOperatorPlusAssign.htm">+=</a> dy; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetDeltaX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_dx <a href="CppOperatorAssign.htm">=</a> dx; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetDeltaY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_dy <a href="CppOperatorAssign.htm">=</a> dy; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSpeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy) { m_dx <a href="CppOperatorAssign.htm">=</a> dx; m_dy <a href="CppOperatorAssign.htm">=</a> dy; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> SetFriction(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> friction);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Collision(SpriteMoving * <b><a href="CppConst.htm">const</a></b> p1, SpriteMoving * <b><a href="CppConst.htm">const</a></b> p2);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppDebug.htm">Debugging</a> purposes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> CountMovingSprites() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> sm_n_moving_sprites; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_dx;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_dy;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> m_friction;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> sm_n_moving_sprites;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BOENKENSPRITEMOVING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenspritemoving.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenspritemoving.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritemoving.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::sm_n_moving_sprites <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<a href="CppComment.htm">///</a>The fraction of impulse that is conserved \n<br/>
<a href="CppComment.htm">///</a>1.0: no friction<br/>
<a href="CppComment.htm">///</a>0.9: some friction<br/>
<a href="CppComment.htm">///</a>0.1: much friction<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::m_friction <a href="CppOperatorAssign.htm">=</a> 0.995;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::SpriteMoving(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
&nbsp;&nbsp;: Sprite(x,y,size,r,g,b),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dx{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dy{0.0}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>sm_n_moving_sprites;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::~SpriteMoving()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>sm_n_moving_sprites;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::CalcImpulseAngle() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetAngle.htm">GetAngle</a>(m_dx,m_dy);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::CalcImpulseSpeed() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdSqrt.htm">std::sqrt</a>( (m_dx * m_dx) <a href="CppOperatorPlus.htm">+</a> (m_dy * m_dy) );<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::SetFriction(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> friction)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(friction&nbsp;&nbsp;&gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(friction <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;m_friction <a href="CppOperatorAssign.htm">=</a> friction;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::Collision(SpriteMoving * <b><a href="CppConst.htm">const</a></b> p1, SpriteMoving * <b><a href="CppConst.htm">const</a></b> p2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1<a href="CppOperatorNotEqual.htm">!=</a>p2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1 &gt; p2);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> p2-&gt;getX() <a href="CppOperatorMinus.htm">-</a> p1-&gt;getX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> p2-&gt;getY() <a href="CppOperatorMinus.htm">-</a> p1-&gt;getY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dy * dy) <a href="CppOperatorPlus.htm">+</a> (dx * dx));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collision_distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(p1-&gt;m_size <a href="CppOperatorPlus.htm">+</a> p2-&gt;m_size) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collision_distance)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A collision!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the relative angle between the players<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dx,dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the players' current impulses<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p1_a <a href="CppOperatorAssign.htm">=</a> p1-&gt;CalcImpulseAngle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p1_s <a href="CppOperatorAssign.htm">=</a> p1-&gt;CalcImpulseSpeed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p2_a <a href="CppOperatorAssign.htm">=</a> p2-&gt;CalcImpulseAngle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p2_s <a href="CppOperatorAssign.htm">=</a> p2-&gt;CalcImpulseSpeed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the <b><a href="CppNew.htm">new</a></b> impulses<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(a, p1_a,p1_s,p2_a,p2_s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the players' <b><a href="CppNew.htm">new</a></b> impulses<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx1 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(p1_a) * p1_s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy1 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(p1_a) * p1_s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx2 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(p2_a) * p2_s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(p2_a) * p2_s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p1-&gt;SetSpeed(dx1,dy1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p2-&gt;SetSpeed(dx2,dy2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "New impulses: (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> dx1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> dy1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> dx2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> dy2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let them move away from each perpendicalar to the collision axis<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> go_away_distance <a href="CppOperatorAssign.htm">=</a> collision_distance <a href="CppOperatorMinus.htm">-</a> distance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(go_away_distance &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> go_away_dx1 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(a <a href="CppOperatorPlus.htm">+</a> pi) * (go_away_distance <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> go_away_dy1 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(a <a href="CppOperatorPlus.htm">+</a> pi) * (go_away_distance <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> go_away_dx2 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(a <a href="CppOperatorPlus.htm">+</a> 0.0) * (go_away_distance <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> go_away_dy2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(a <a href="CppOperatorPlus.htm">+</a> 0.0) * (go_away_distance <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1-&gt;Move(go_away_dx1,go_away_dy1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2-&gt;Move(go_away_dx2,go_away_dy2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the players move again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p1-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p2-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_dx <a href="CppOperatorAssign.htm">=</a> p2-&gt;getX() <a href="CppOperatorMinus.htm">-</a> p1-&gt;getX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_dy <a href="CppOperatorAssign.htm">=</a> p2-&gt;getY() <a href="CppOperatorMinus.htm">-</a> p1-&gt;getY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((new_dy * new_dy) <a href="CppOperatorPlus.htm">+</a> (new_dx * new_dx));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (new_distance &lt; distance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Players should in general move away after a collision\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(new_distance &gt; distance <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Players should move away after a collision");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteMoving::Draw(<a href="CppQPainter.htm">QPainter</a>&amp; painter) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the globe<br/>
&nbsp;&nbsp;Sprite::Draw(painter);<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> DRAW_MOVING_SPRITE_IMPULSES<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Determine the player center<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> half_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_size) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_mid <a href="CppOperatorAssign.htm">=</a> m_x <a href="CppOperatorPlus.htm">+</a> half_size;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_mid <a href="CppOperatorAssign.htm">=</a> m_y <a href="CppOperatorPlus.htm">+</a> half_size;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the moving sprite's impulse<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x3 <a href="CppOperatorAssign.htm">=</a> x_mid <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(CalcImpulseAngle()) * CalcImpulseSpeed() * 10.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y3 <a href="CppOperatorAssign.htm">=</a> y_mid <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(CalcImpulseAngle()) * CalcImpulseSpeed() * 10.0);<br/>
&nbsp;&nbsp;painter.drawLine(x_mid,y_mid,x3,y3);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenspritenonmoving.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenspritenonmoving.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENSPRITENONMOVING_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENSPRITENONMOVING_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>sprite.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SpriteMoving;<br/>
<br/>
<a href="CppComment.htm">///</a>SpriteNonMoving are obstacles.<br/>
<a href="CppComment.htm">///</a>Obstacles are grey per <b><a href="CppDefault.htm">default</a></b><br/>
<a href="CppComment.htm">///</a>and can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
<b><a href="CppStruct.htm">struct</a></b> SpriteNonMoving <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> Sprite<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> SpriteNonMoving(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 32,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r <a href="CppOperatorAssign.htm">=</a> 255,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g <a href="CppOperatorAssign.htm">=</a> 255,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b <a href="CppOperatorAssign.htm">=</a> 255<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) { m_x <a href="CppOperatorAssign.htm">=</a> x; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) { m_y <a href="CppOperatorAssign.htm">=</a> y; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A non-moving sprite, like an object, will not change<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Collision(<b><a href="CppConst.htm">const</a></b> SpriteNonMoving * <b><a href="CppConst.htm">const</a></b> p1, SpriteMoving * <b><a href="CppConst.htm">const</a></b> p2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BOENKENSPRITENONMOVING_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenspritenonmoving.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenspritenonmoving.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritenonmoving.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritemoving.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spriteplayer.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving::SpriteNonMoving(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
&nbsp;&nbsp;: Sprite(x,y,size,r,g,b)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;SpriteNonMoving::Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving::Collision(<b><a href="CppConst.htm">const</a></b> SpriteNonMoving * <b><a href="CppConst.htm">const</a></b> p1, SpriteMoving * <b><a href="CppConst.htm">const</a></b> p2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> p2-&gt;getX() <a href="CppOperatorMinus.htm">-</a> p1-&gt;getX();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> p2-&gt;getY() <a href="CppOperatorMinus.htm">-</a> p1-&gt;getY();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((dy * dy) <a href="CppOperatorPlus.htm">+</a> (dx * dx));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> collision_distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(p1-&gt;m_size <a href="CppOperatorPlus.htm">+</a> p2-&gt;m_size) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distance &lt; collision_distance)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A collision!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the relative angle between the players<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppGetAngle.htm">GetAngle</a>(dx,dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the moving sprite's current impulse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p2_a <a href="CppOperatorAssign.htm">=</a> p2-&gt;CalcImpulseAngle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p2_s <a href="CppOperatorAssign.htm">=</a> p2-&gt;CalcImpulseSpeed();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obstacles have opposite impulse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p1_a <a href="CppOperatorAssign.htm">=</a> p2_a <a href="CppOperatorPlus.htm">+</a> pi;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p1_s <a href="CppOperatorAssign.htm">=</a> p1_s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the <b><a href="CppNew.htm">new</a></b> impulses<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDoPerfectElasticCollision.htm">DoPerfectElasticCollision</a>(a, p1_a,p1_s,p2_a,p2_s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the player's <b><a href="CppNew.htm">new</a></b> impulse<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx2 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(p2_a) * p2_s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(p2_a) * p2_s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p2-&gt;SetSpeed(dx2,dy2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the player move away from each perpendicalar to the collision axis<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> go_away_distance <a href="CppOperatorAssign.htm">=</a> collision_distance <a href="CppOperatorMinus.htm">-</a> distance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(go_away_distance &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> go_away_dx2 <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdSin.htm">std::sin</a>(a <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;0.0) * (go_away_distance <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> go_away_dy2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(a <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;0.0) * (go_away_distance <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2-&gt;Move(go_away_dx2,go_away_dy2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the player move again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p2-&gt;Move();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_dx <a href="CppOperatorAssign.htm">=</a> p2-&gt;getX() <a href="CppOperatorMinus.htm">-</a> p1-&gt;getX();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_dy <a href="CppOperatorAssign.htm">=</a> p2-&gt;getY() <a href="CppOperatorMinus.htm">-</a> p1-&gt;getY();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_distance <a href="CppOperatorAssign.htm">=</a> <a href="CppStdSqrt.htm">std::sqrt</a>((new_dy * new_dy) <a href="CppOperatorPlus.htm">+</a> (new_dx * new_dx));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (new_distance &lt; distance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Players should in general move away after a collision\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(new_distance &gt; distance <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Players should move away after a collision");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpriteNonMoving::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> obstacle <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::make_unique&lt;SpriteNonMoving&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0, <a href="CppComment.htm">//</a>x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0, <a href="CppComment.htm">//</a>y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp; <a href="CppComment.htm">//</a>size<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> player <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::make_unique&lt;SpritePlayer&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0, <a href="CppComment.htm">//</a>x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;32.0, <a href="CppComment.htm">//</a>y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0, <a href="CppComment.htm">//</a>angle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;32,&nbsp;&nbsp;<a href="CppComment.htm">//</a>size<br/>
&nbsp;&nbsp;&nbsp;&nbsp;255, <a href="CppComment.htm">//</a>r<br/>
&nbsp;&nbsp;&nbsp;&nbsp;255, <a href="CppComment.htm">//</a>g<br/>
&nbsp;&nbsp;&nbsp;&nbsp;255&nbsp;&nbsp;<a href="CppComment.htm">//</a>b<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Player below obstacle, moves up<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;player-&gt;SetX(0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;player-&gt;SetY(32.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;player-&gt;SetSpeed(0.0,-4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpriteNonMoving::Collision(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obstacle.get(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player.get()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(player-&gt;GetDeltaY() <a href="CppOperatorMinus.htm">-</a> 4.0) &lt; 0.001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Refactor");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenspriteplayer.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenspriteplayer.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> BOENKENSPRITEPLAYER_H<br/>
<a href="CppDefine.htm">#define</a> BOENKENSPRITEPLAYER_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spritemoving.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>SpritePlayer is a MovingSprite that can respond to input<br/>
<a href="CppComment.htm">///</a>and can only be deleted by <a href="CppBoostChecked_delete.htm">boost::checked_delete</a><br/>
<b><a href="CppStruct.htm">struct</a></b> SpritePlayer <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> SpriteMoving<br/>
{<br/>
&nbsp;&nbsp;SpritePlayer(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Accelerate() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Draw(<a href="CppQPainter.htm">QPainter</a>&amp; painter) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppGetAngle.htm">GetAngle</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_angle; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move() <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TurnRight() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The SpritePlayer's ID<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_id;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_angle;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_acceleration;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_turnspeed;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> ms_n_players;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="GameBoenken.htm">Boenken</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BOENKENSPRITEPLAYER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkenspriteplayer.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkenspriteplayer.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>spriteplayer.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>The acceleration (i.e. change of impulse)<br/>
<a href="CppComment.htm">///</a><b><a href="CppIf.htm">if</a></b> a player presses accelerate<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::m_acceleration <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
<br/>
<a href="CppComment.htm">///</a>The speed of turning around<br/>
<a href="CppComment.htm">///</a><b><a href="CppIf.htm">if</a></b> a player presses turn<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::m_turnspeed<br/>
&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;() <a href="CppOperatorDivide.htm">/</a> 10.0;<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>The number of SpritePlayers.<br/>
<a href="CppComment.htm">///</a><b><a href="CppFor.htm">for</a></b> <a href="CppDebug.htm">debugging</a> purposes<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::ms_n_players <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::SpritePlayer(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> r,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> g,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> b)<br/>
&nbsp;&nbsp;: SpriteMoving(x,y,size,r,g,b),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_id(ms_n_players),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_angle(angle)<br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>ms_n_players;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "The " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ms_n_players<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "th player is created at ("<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;getX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ","<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppThis.htm">this</a></b>-&gt;getY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::~SpritePlayer() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "The " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ms_n_players<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "th player is destroyed\n";<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>ms_n_players;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ms_n_players <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::Move() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Move the sprite<br/>
&nbsp;&nbsp;m_x <a href="CppOperatorPlusAssign.htm">+=</a> m_dx;<br/>
&nbsp;&nbsp;m_y <a href="CppOperatorPlusAssign.htm">+=</a> m_dy;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the sprites maximal coordinats<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_maxx <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_size;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_maxy <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_size;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxx &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxy &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Move moving sprite into the arena<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_x &lt;&nbsp;&nbsp;0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;0.0; m_dx <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdFabs.htm">std::fabs</a>(m_dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Player #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_id <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " moved to right to ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_y &lt;&nbsp;&nbsp;0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;0.0; m_dy <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<a href="CppStdFabs.htm">std::fabs</a>(m_dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Player #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_id <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " moved downwards to ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_x &gt; maxx)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x <a href="CppOperatorAssign.htm">=</a> maxx; m_dx <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdFabs.htm">std::fabs</a>(m_dx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Player #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_id <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " moved to left to ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_y &gt; maxy)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_y <a href="CppOperatorAssign.htm">=</a> maxy; m_dy <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a><a href="CppStdFabs.htm">std::fabs</a>(m_dy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Player #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_id <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " moved upwards to ("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Decrease the speed due to friction<br/>
&nbsp;&nbsp;m_dx <a href="CppOperatorMultiplyAssign.htm">*=</a> m_friction;<br/>
&nbsp;&nbsp;m_dy <a href="CppOperatorMultiplyAssign.htm">*=</a> m_friction;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::Accelerate() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_dx <a href="CppOperatorPlusAssign.htm">+=</a> (<a href="CppStdSin.htm">std::sin</a>(m_angle) * m_acceleration);<br/>
&nbsp;&nbsp;m_dy <a href="CppOperatorMinusAssign.htm">-=</a> (<a href="CppStdCos.htm">std::cos</a>(m_angle) * m_acceleration);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::TurnRight() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_angle<a href="CppOperatorPlusAssign.htm">+=</a>m_turnspeed;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="GameBoenken.htm">Boenken</a>::SpritePlayer::Draw(<a href="CppQPainter.htm">QPainter</a>&amp; painter) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the globe and possibly impulse<br/>
&nbsp;&nbsp;SpriteMoving::Draw(painter);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Determine the player center<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> half_size <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_size) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_mid <a href="CppOperatorAssign.htm">=</a> m_x <a href="CppOperatorPlus.htm">+</a> half_size;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y_mid <a href="CppOperatorAssign.htm">=</a> m_y <a href="CppOperatorPlus.htm">+</a> half_size;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the line the player looks at<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> x_mid <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(m_angle) * half_size);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> y_mid <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(m_angle) * half_size);<br/>
&nbsp;&nbsp;painter.drawLine(x_mid,y_mid,x2,y2);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkentraindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkentraindialog.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTBOENKENTRAINDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTBOENKENTRAINDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog *ui;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTBOENKENTRAINDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtboenkentraindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtboenkentraindialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>traindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qt<a href="GameBoenken.htm">boenken</a>traindialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog::~<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>TrainDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="GameBoenken.htm">Boenken</a>. A multiplayer soccer/billiards game.<br/>
Copyright (C) 2007-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="GameBoenken.htm">GameBoenken</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="GameBoenken.htm">boenken</a>menudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<br/>
&nbsp;&nbsp;a.setStyleSheet(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppQDialog.htm">QDialog</a> { "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 #FF9090, stop: 1 #9090FF);"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"}"<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a><a href="GameBoenken.htm">Boenken</a>MenuDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/crosscompiletowindows.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/crosscompiletowindows.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#From http://richelbilderbeek.nl/CppQtCrosscompileToWindowsExample15.htm<br/>
<br/>
echo "Cross compiling to Windows: developer version"<br/>
<br/>
echo "1/2: Creating Windows makefile"<br/>
i686-pc-mingw32-qmake GameBoenken.pro<br/>
<br/>
echo "2/2: making makefile"<br/>
<br/>
make<br/>
<br/>
echo "Done"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameBoenken/zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameBoenken/zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
<br/>
echo "Removing user information"<br/>
rm *.user<br/>
<br/>
echo "Removing possible temp file"<br/>
rm copy.txt<br/>
rm tmp.txt<br/>
<br/>
<br/>
echo "Creating of all main folders"<br/>
<br/>
mkdir temp_zip<br/>
mkdir temp_zip/Classes<br/>
mkdir temp_zip/Games<br/>
<br/>
echo "Creating of all subfolders"<br/>
<br/>
mkdir temp_zip/Classes/CppAbout<br/>
mkdir temp_zip/Classes/CppQtAboutDialog<br/>
mkdir temp_zip/Games/GameBoenken<br/>
<br/>
echo "Copying files"<br/>
<br/>
cp ../../Classes/CppAbout/Licence.txt temp_zip/Classes/CppAbout/Licence.txt<br/>
cp ../../Classes/CppAbout/about.cpp temp_zip/Classes/CppAbout/about.cpp<br/>
cp ../../Classes/CppAbout/about.h temp_zip/Classes/CppAbout/about.h<br/>
cp ../../Classes/CppQtAboutDialog/Licence.txt temp_zip/Classes/CppQtAboutDialog/Licence.txt<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.cpp temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.cpp<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.h temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.h<br/>
cp ../../Classes/CppQtAboutDialog/qtaboutdialog.ui temp_zip/Classes/CppQtAboutDialog/qtaboutdialog.ui<br/>
cp ../../Games/GameBoenken/Computer.png temp_zip/Games/GameBoenken/Computer.png<br/>
cp ../../Games/GameBoenken/GameBoenken.pro temp_zip/Games/GameBoenken/GameBoenken.pro<br/>
cp ../../Games/GameBoenken/GameBoenken.qrc temp_zip/Games/GameBoenken/GameBoenken.qrc<br/>
cp ../../Games/GameBoenken/Green.png temp_zip/Games/GameBoenken/Green.png<br/>
cp ../../Games/GameBoenken/Grey.png temp_zip/Games/GameBoenken/Grey.png<br/>
cp ../../Games/GameBoenken/Human.png temp_zip/Games/GameBoenken/Human.png<br/>
cp ../../Games/GameBoenken/Licence.txt temp_zip/Games/GameBoenken/Licence.txt<br/>
cp ../../Games/GameBoenken/PlayerBlue.png temp_zip/Games/GameBoenken/PlayerBlue.png<br/>
cp ../../Games/GameBoenken/PlayerRed.png temp_zip/Games/GameBoenken/PlayerRed.png<br/>
cp ../../Games/GameBoenken/R.png temp_zip/Games/GameBoenken/R.png<br/>
cp ../../Games/GameBoenken/boenkenarenasettings.h temp_zip/Games/GameBoenken/boenkenarenasettings.h<br/>
cp ../../Games/GameBoenken/boenkencontrols.h temp_zip/Games/GameBoenken/boenkencontrols.h<br/>
cp ../../Games/GameBoenken/boenkengame.cpp temp_zip/Games/GameBoenken/boenkengame.cpp<br/>
cp ../../Games/GameBoenken/boenkengame.h temp_zip/Games/GameBoenken/boenkengame.h<br/>
cp ../../Games/GameBoenken/boenkenmenudialog.cpp temp_zip/Games/GameBoenken/boenkenmenudialog.cpp<br/>
cp ../../Games/GameBoenken/boenkenmenudialog.h temp_zip/Games/GameBoenken/boenkenmenudialog.h<br/>
cp ../../Games/GameBoenken/boenkensprite.cpp temp_zip/Games/GameBoenken/boenkensprite.cpp<br/>
cp ../../Games/GameBoenken/boenkensprite.h temp_zip/Games/GameBoenken/boenkensprite.h<br/>
cp ../../Games/GameBoenken/boenkenspriteball.cpp temp_zip/Games/GameBoenken/boenkenspriteball.cpp<br/>
cp ../../Games/GameBoenken/boenkenspriteball.h temp_zip/Games/GameBoenken/boenkenspriteball.h<br/>
cp ../../Games/GameBoenken/boenkenspritemoving.cpp temp_zip/Games/GameBoenken/boenkenspritemoving.cpp<br/>
cp ../../Games/GameBoenken/boenkenspritemoving.h temp_zip/Games/GameBoenken/boenkenspritemoving.h<br/>
cp ../../Games/GameBoenken/boenkenspritenonmoving.cpp temp_zip/Games/GameBoenken/boenkenspritenonmoving.cpp<br/>
cp ../../Games/GameBoenken/boenkenspritenonmoving.h temp_zip/Games/GameBoenken/boenkenspritenonmoving.h<br/>
cp ../../Games/GameBoenken/boenkenspriteplayer.cpp temp_zip/Games/GameBoenken/boenkenspriteplayer.cpp<br/>
cp ../../Games/GameBoenken/boenkenspriteplayer.h temp_zip/Games/GameBoenken/boenkenspriteplayer.h<br/>
cp ../../Games/GameBoenken/crosscompiletowindows.sh temp_zip/Games/GameBoenken/crosscompiletowindows.sh<br/>
cp ../../Games/GameBoenken/doxygen.txt temp_zip/Games/GameBoenken/doxygen.txt<br/>
cp ../../Games/GameBoenken/qtboenkenarenadialog.cpp temp_zip/Games/GameBoenken/qtboenkenarenadialog.cpp<br/>
cp ../../Games/GameBoenken/qtboenkenarenadialog.h temp_zip/Games/GameBoenken/qtboenkenarenadialog.h<br/>
cp ../../Games/GameBoenken/qtboenkenarenadialog.ui temp_zip/Games/GameBoenken/qtboenkenarenadialog.ui<br/>
cp ../../Games/GameBoenken/qtboenkencontrolsdialog.cpp temp_zip/Games/GameBoenken/qtboenkencontrolsdialog.cpp<br/>
cp ../../Games/GameBoenken/qtboenkencontrolsdialog.h temp_zip/Games/GameBoenken/qtboenkencontrolsdialog.h<br/>
cp ../../Games/GameBoenken/qtboenkencontrolsdialog.ui temp_zip/Games/GameBoenken/qtboenkencontrolsdialog.ui<br/>
cp ../../Games/GameBoenken/qtboenkenmaindialog.cpp temp_zip/Games/GameBoenken/qtboenkenmaindialog.cpp<br/>
cp ../../Games/GameBoenken/qtboenkenmaindialog.h temp_zip/Games/GameBoenken/qtboenkenmaindialog.h<br/>
cp ../../Games/GameBoenken/qtboenkenmaindialog.ui temp_zip/Games/GameBoenken/qtboenkenmaindialog.ui<br/>
cp ../../Games/GameBoenken/qtboenkenmenudialog.cpp temp_zip/Games/GameBoenken/qtboenkenmenudialog.cpp<br/>
cp ../../Games/GameBoenken/qtboenkenmenudialog.h temp_zip/Games/GameBoenken/qtboenkenmenudialog.h<br/>
cp ../../Games/GameBoenken/qtboenkenmenudialog.ui temp_zip/Games/GameBoenken/qtboenkenmenudialog.ui<br/>
cp ../../Games/GameBoenken/qtboenkenplayersdialog.cpp temp_zip/Games/GameBoenken/qtboenkenplayersdialog.cpp<br/>
cp ../../Games/GameBoenken/qtboenkenplayersdialog.h temp_zip/Games/GameBoenken/qtboenkenplayersdialog.h<br/>
cp ../../Games/GameBoenken/qtboenkenplayersdialog.ui temp_zip/Games/GameBoenken/qtboenkenplayersdialog.ui<br/>
cp ../../Games/GameBoenken/qtboenkenpresskeydialog.cpp temp_zip/Games/GameBoenken/qtboenkenpresskeydialog.cpp<br/>
cp ../../Games/GameBoenken/qtboenkenpresskeydialog.h temp_zip/Games/GameBoenken/qtboenkenpresskeydialog.h<br/>
cp ../../Games/GameBoenken/qtboenkenpresskeydialog.ui temp_zip/Games/GameBoenken/qtboenkenpresskeydialog.ui<br/>
cp ../../Games/GameBoenken/qtboenkentraindialog.cpp temp_zip/Games/GameBoenken/qtboenkentraindialog.cpp<br/>
cp ../../Games/GameBoenken/qtboenkentraindialog.h temp_zip/Games/GameBoenken/qtboenkentraindialog.h<br/>
cp ../../Games/GameBoenken/qtboenkentraindialog.ui temp_zip/Games/GameBoenken/qtboenkentraindialog.ui<br/>
cp ../../Games/GameBoenken/qtmain.cpp temp_zip/Games/GameBoenken/qtmain.cpp<br/>
<br/>
FILENAME="GameBoenkenSource"<br/>
ZIP_FILENAME=$FILENAME".zip"<br/>
<br/>
echo "Compressing files"<br/>
<br/>
cd temp_zip<br/>
zip -r $FILENAME Classes<br/>
zip -r $FILENAME Games<br/>
cd ..<br/>
cp "temp_zip/"$ZIP_FILENAME $ZIP_FILENAME<br/>
<br/>
echo "Cleaning up"<br/>
<br/>
echo "Emptying subfolders"<br/>
<br/>
rm temp_zip/Classes/CppAbout/*.*<br/>
rm temp_zip/Classes/CppQtAboutDialog/*.*<br/>
rm temp_zip/Games/GameBoenken/*.*<br/>
<br/>
echo "Removing subfolders"<br/>
<br/>
rmdir temp_zip/Classes/CppAbout<br/>
rmdir temp_zip/Classes/CppQtAboutDialog<br/>
rmdir temp_zip/Games/GameBoenken<br/>
<br/>
echo "Removing main folders"<br/>
<br/>
rmdir temp_zip/Classes<br/>
rmdir temp_zip/Games<br/>
<br/>
echo "Removing temporary folder"<br/>
<br/>
rm temp_zip/*.*<br/>
rmdir temp_zip<br/>
<br/>
echo "Done"<br/>
<br/>
# CreateQtProjectZipFile, version 1.3<br/>
# Copyright (C) 2012 Richel Bilderbeek<br/>
# Programmed on the 10th of June 2012<br/>
# by Richel Bilderbeek<br/>
# <br/>
# CreateQtProjectZipFile can be downloaded from http://www.richelbilderbeek.nl/ToolCreateQtProjectZipFile.htm<br/>
# Licenced under GPL 3.0<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
