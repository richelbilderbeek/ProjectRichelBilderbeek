<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Abstract class</title>
  <meta name="description" content="C++ Abstract class"/>
  <meta name="keywords" content="C++ Abstract class code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppAbstractClass.htm">Abstract class</a></h1>
<p>&nbsp;</p>
<p>
  An <a href="CppAbstractClass.htm">abstract class</a> is a
  <a href="CppClassType.htm">type of class</a> that can not be 
  <a href="CppInstance.htm">instanciated</a> itself: only its 
  <a href="CppDerivedClass.htm">derivatived classes</a> can.
</p>
<p>&nbsp;</p>
<p>
  An <a href="CppAbstractBaseClass.htm">Abstract base class</a> is an <a href="CppAbstractClass.htm">abstract class</a>
  that is also a <a href="CppBaseClass.htm">base class</a>.
</p>
<p>&nbsp;</p>
<p>
  An <a href="CppAbstractClass.htm">Abstract</a> can be recognized by a 
  <a href="CppMemberFunction.htm">member function</a> starting with the <a href="CppKeyword.htm">keyword</a>
  <a href="CppVirtual.htm">virtual</a> and ending with <b>=0;</b>. And because all <a href="CppBaseClass.htm">base classes</a>
  must have a <a href="CppVirtual.htm">virtual</a> <a href="CppDestructor.htm">destructor</a>,
  an <a href="CppAbstractClass.htm">abstract class</a> must also have one.
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> ABC<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~ABC() {} <a href="CppComment.htm">//</a>Empty <b><a href="CppVirtual.htm">virtual</a></b> <a href="CppDestructor.htm">destructor</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> whatMakesMeAbstract() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Many <a href="CppDesignPattern.htm">Design Patterns</a> rely on <a
href="CppAbstractClass.htm">abstract classes</a>, for example the <a href="CppDesignPatternStrategy.htm">Strategy</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Use <a href="CppAbstractClass.htm">abstract classes</a> to focus design on the provision of clean <a href="CppInterface.htm">interfaces</a> [1]
  </li>
  <li>
    An <a href="CppAbstractClass.htm">abstract class</a> should have a <a href="CppVirtual.htm">virtual</a> <a href="CppDestructor.htm">destructor</a> [2,3] to ensure proper cleanup [6]
  </li>
  <li>
    An <a href="CppAbstractClass.htm">abstract class</a> typically doesn't need a <a href="CppConstructor.htm">constructor</a> [4]
  </li>
  <li>
    Avoid <a href="CppMemberVariable.htm">member variables</a> in <a href="AbstractClass.htm">abstract classes</a> [5]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">Reference</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 20.7. Advice. page 611: '[3] Use abstract classes to focus design on the provision of clean interfaces'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[4] If a class has a virtual function, it needs a virtual destructor'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 20.7. Advice. page 611: '[8] A class with a virtual function should have a virtual destructor'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 20.7. Advice. page 611: '[9] An abstract class typically doesn't need a constructor'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 21.4. Advice. page 640: '[2] Avoid data members in base classes intended as interfaces'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 21.4. Advice. page 640: '[4] Give an abstract class a virtual destructor to ensure proper cleanup'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
