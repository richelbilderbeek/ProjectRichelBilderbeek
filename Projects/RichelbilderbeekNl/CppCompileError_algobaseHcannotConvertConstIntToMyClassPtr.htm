<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>compile error: _algobase.h: Cannot convert 'const int' to 'MyClass *'</title>
  <meta name="description" content="C++ compile error: _algobase.h: Cannot convert 'const int' to 'MyClass *'"/>
  <meta name="keywords" content="C++ compile error: _algobase.h: Cannot convert 'const int' to 'MyClass *'"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCompileError_algobaseHcannotConvertConstIntToMyClassPtr.htm">_algobase.h: Cannot convert 'const int' to 'MyClass *'</a></h1>
<p>&nbsp;</p>
<p><a href="CppCompileError.htm">Compile error</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Full error message</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
[C++ Error] _algobase.h(341): E2034 Cannot convert 'const int' to 'MyClass *'<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Cause</h2>
<p>&nbsp;</p>
<p>The following code caused this <a href="CppCompileError.htm">compile error</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass {};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 10; <a href="CppComment.htm">//</a>Or other positive <b><a href="CppInt.htm">int</a></b><br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;MyClass*&gt; v(size,0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p><a href="CppIde.htm">IDE</a>: <a href="CppBuilder.htm">C++ Builder</a> 6.0</p>
<p><a href="CppCompiler.htm">Compiler</a>: Borland BCC32.EXE version 6.0.10.157</p>
<p>Project type: Console</p>
<p>&nbsp;</p>
<p>The zero denotes that the MyClass <a href="CppPointer.htm">pointer</a> is uninitialized. The <a href="CppCompiler.htm">compiler</a>, however, believes this zero denotes an <a href="CppInt.htm">integer</a> value.</p>
<p>&nbsp;</p>
<p>The code where the <a href="CppCompiler.htm">compiler</a> takes you, in _algobase.h:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> _OutputIter, <b><a href="CppClass.htm">class</a></b> _Size, <b><a href="CppClass.htm">class</a></b> _Tp&gt;<br/>
_STLP_INLINE_LOOP<br/>
_OutputIter fill_n(_OutputIter __first, _Size __n, <b><a href="CppConst.htm">const</a></b> _Tp&amp; __value) {<br/>
&nbsp;&nbsp;_STLP_FIX_LITERAL_BUG(__first)<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; __n &gt; 0; <a href="CppOperatorDecrement.htm">--</a>__n, <a href="CppOperatorIncrement.htm">++</a>__first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*__first <a href="CppOperatorAssign.htm">=</a> __value; <a href="CppComment.htm">//</a>THIS LINE<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> __first;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Solution</h2>
<p>&nbsp;</p>
<p>There are two options:</p>
<ol>
  <li>Change the first <a href="CppArgument.htm">argument</a>'s <a href="CppDataType.htm">data type</a> to <a href="CppUnsigned.htm">unsigned</a> <a href="CppInt.htm">int</a></li>
  <li><a href="CppCast.htm">Cast</a> the null in the second <a href="CppArgument.htm">argument</a> explicitly to a MyClass*</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Change the first <a href="CppArgument.htm">argument</a>'s <a href="CppDataType.htm">data type</a> to <a href="CppUnsigned.htm">unsigned</a> <a href="CppInt.htm">int</a></h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass {};<br/>
&nbsp;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 10; <a href="CppComment.htm">//</a>Or other value<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;MyClass*&gt; v(size,0);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>I would bet that the first <a href="CppArgument.htm">argument</a>'s <a href="CppDataType.htm">data type</a> might also be <a href="CppSize_t.htm">std::size_t</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><a href="CppCast.htm">Cast</a> the null in the second <a href="CppArgument.htm">argument</a> explicitly to a MyClass*</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass {};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 10; <a href="CppComment.htm">//</a>Or other positive <b><a href="CppInt.htm">int</a></b><br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;MyClass*&gt; v(size, <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;MyClass*&gt;(0));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
