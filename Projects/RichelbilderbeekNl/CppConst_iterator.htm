<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>const_iterator</title>
  <meta name="description" content="C++ const_iterator"/>
  <meta name="keywords" content="C++ const_iterator const iterator"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppConst_iterator.htm">const_iterator</a></h1>
<p>&nbsp;</p>
<p><a href="CppConst_iterator.htm">const_iterator</a> is a common <a href="CppTypedef.htm">typedef</a> in 
<a href="CppContainer.htm">containers</a> for an <a href="CppIterator.htm">iterator</a>-type that can only read the element it is located at.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="files4nzAL.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(10,0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator i <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Closer inspection (of <a href="CppVectorH.htm">vector.h</a> for example) yields the following typedefs:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileNC1tUi.cpp" border = "1"><tr><td><code>
<b><a href="CppTypedef.htm">typedef</a></b> _TYPENAME __value_alloc_type::const_<a href="CppPointer.htm">pointer</a> const_iterator;<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppConst.htm">const</a></b> T* const_<a href="CppPointer.htm">pointer</a>;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This concludes that the following two <a href="CppDataType.htm">data types</a> are equivalent:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileRNjI64.cpp" border = "1"><tr><td><code>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator DataTypeOne;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> * DataTypeOne;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
