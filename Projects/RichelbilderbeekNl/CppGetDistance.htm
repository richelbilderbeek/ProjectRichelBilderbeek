<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetDistance</title>
  <meta name="description" content="C++ GetDistance"/>
  <meta name="keywords" content="C++ STL GetDistance get distance pythagoras math code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetDistance.htm">GetDistance</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppGetDistance.htm">GetDistance</a> is a <a href="CppGeometry.htm">geometry</a> 
  <a href="CppCodeSnippets.htm">code snippet</a> to calculate the distance between 
  two coordinats from their horizontal and vertical distances, using Pythagoras.
</p>
<p>&nbsp;</p>
<p>
  <a href="CppGetDistance.htm">GetDistance</a> is maintained in the <a href="CppGeometry.htm">CppGeometry</a> 
  <a href="CppClass.htm">class</a>, see <a href="CppGeometry.htm">CppGeometry</a>
  for the heavily tested, debugged and used version.
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the Pythagorian distance from two delta's<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppSqrt.htm">std::sqrt</a>( (delta_x * delta_x) <a href="CppOperatorPlus.htm">+</a> (delta_y * delta_y) );<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the Pythagorian distance from two coordinats<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetDistance.htm">GetDistance</a>(x1-x2,y1-y2);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Below is a complete project for testing <a href="CppGetDistance.htm">GetDistance</a>, additionally using the Boost.Geometry library.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Testing code</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppGetDistance.zip">Download the Qt Creator project 'GetDistance' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppGetDistance.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
TEMPLATE = app<br/>
CONFIG += console<br/>
CONFIG -= qt<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a><br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the Pythagorian distance from two delta's<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppSqrt.htm">std::sqrt</a>( (delta_x * delta_x) <a href="CppOperatorPlus.htm">+</a> (delta_y * delta_y) );<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the Pythagorian distance from two coordinats<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetDistance.htm">GetDistance</a>(x1-x2,y1-y2);<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppComment.htm">///</a>Obtain the Pythagorian distance from two delta's<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; p1(0.0,0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; p2(delta_x,delta_y);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::distance(p1,p2);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the Pythagorian distance from two coordinats<br/>
<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetDistance.htm">GetDistance</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; p1(x1,y1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; p2(x2,y2);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::distance(p1,p2);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a> is a <a href="CppPredicate.htm">predicate</a> to test two <b><a href="CppDouble.htm">double</a></b>s <b><a href="CppFor.htm">for</a></b> equality<br/>
<a href="CppComment.htm">///</a>with a certain tolerance. A tolerance of 0.0 denotes that<br/>
<a href="CppComment.htm">///</a>an exact match is requested. Note that the value of 0.0 cannot<br/>
<a href="CppComment.htm">///</a>be compared fuzzily.<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppBinary_function.htm">std::binary_function</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppBool.htm">bool</a></b>&gt;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_tolerance(tolerance)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tolerance <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> lhs, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rhs) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> <a href="CppAbs.htm">std::abs</a>(m_tolerance * lhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rhs &gt; lhs <a href="CppOperatorMinus.htm">-</a> d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs &lt; lhs <a href="CppOperatorPlus.htm">+</a> d;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_tolerance;<br/>
};<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppTupleH.htm">tuple</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delta's<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(3.0, 4.0),5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(5.0,12.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(8.0,15.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(7.0,24.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(9.0,40.0),41.0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(3.0, 4.0),5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(5.0,12.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(8.0,15.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(7.0,24.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(9.0,40.0),41.0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Compared to origin<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(3.0, 4.0,0.0,0.0), 5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(5.0,12.0,0.0,0.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(8.0,15.0,0.0,0.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(7.0,24.0,0.0,0.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(9.0,40.0,0.0,0.0),41.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(0.0,0.0,3.0, 4.0), 5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(0.0,0.0,5.0,12.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(0.0,0.0,8.0,15.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(0.0,0.0,7.0,24.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(0.0,0.0,9.0,40.0),41.0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(3.0, 4.0,0.0,0.0), 5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(5.0,12.0,0.0,0.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(8.0,15.0,0.0,0.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(7.0,24.0,0.0,0.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(9.0,40.0,0.0,0.0),41.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(0.0,0.0,3.0, 4.0), 5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(0.0,0.0,5.0,12.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(0.0,0.0,8.0,15.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(0.0,0.0,7.0,24.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(0.0,0.0,9.0,40.0),41.0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Translated by (+1.0,+1.0)<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 4.0, 5.0, 1.0, 1.0), 5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 6.0,13.0, 1.0, 1.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 9.0,16.0, 1.0, 1.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 8.0,25.0, 1.0, 1.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>(10.0,41.0, 1.0, 1.0),41.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 1.0, 1.0, 4.0, 5.0), 5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 1.0, 1.0, 6.0,13.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 1.0, 1.0, 9.0,16.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 1.0, 1.0, 8.0,25.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a>( 1.0, 1.0,10.0,41.0),41.0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 4.0, 5.0, 1.0, 1.0), 5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 6.0,13.0, 1.0, 1.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 9.0,16.0, 1.0, 1.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 8.0,25.0, 1.0, 1.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(10.0,41.0, 1.0, 1.0),41.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 1.0, 1.0, 4.0, 5.0), 5.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 1.0, 1.0, 6.0,13.0),13.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 1.0, 1.0, 9.0,16.0),17.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 1.0, 1.0, 8.0,25.0),25.0));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>( 1.0, 1.0,10.0,41.0),41.0));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppTuple.htm">std::tuple</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::<a href="CppMake.htm">make</a>_<a href="CppTuple.htm">tuple</a>(3.0, 4.0, 5.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::<a href="CppMake.htm">make</a>_<a href="CppTuple.htm">tuple</a>(5.0,12.0,13.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::<a href="CppMake.htm">make</a>_<a href="CppTuple.htm">tuple</a>(8.0,15.0,17.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::<a href="CppMake.htm">make</a>_<a href="CppTuple.htm">tuple</a>(7.0,24.0,25.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::<a href="CppMake.htm">make</a>_<a href="CppTuple.htm">tuple</a>(9.0,40.0,41.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppTuple.htm">std::tuple</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt;&amp; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetDistance.htm">GetDistance</a>(<a href="CppGet.htm">std::get</a>&lt;0&gt;(t),<a href="CppGet.htm">std::get</a>&lt;1&gt;(t)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGet.htm">std::get</a>&lt;2&gt;(t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(<a href="CppGet.htm">std::get</a>&lt;0&gt;(t),<a href="CppGet.htm">std::get</a>&lt;1&gt;(t)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGet.htm">std::get</a>&lt;2&gt;(t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppTuple.htm">std::tuple</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; w;<br/>
&nbsp;&nbsp;<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppTuple.htm">std::tuple</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt;&amp; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> a random translation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> t_x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRand.htm">std::rand</a>()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> t_y <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRand.htm">std::rand</a>()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStd.htm">std</a>::<a href="CppMake.htm">make</a>_<a href="CppTuple.htm">tuple</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t_y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGet.htm">std::get</a>&lt;0&gt;(t) <a href="CppOperatorPlus.htm">+</a> t_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGet.htm">std::get</a>&lt;1&gt;(t) <a href="CppOperatorPlus.htm">+</a> t_y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGet.htm">std::get</a>&lt;2&gt;(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppTuple.htm">std::tuple</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt;&amp; t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetDistance.htm">GetDistance</a>(<a href="CppGet.htm">std::get</a>&lt;0&gt;(t),<a href="CppGet.htm">std::get</a>&lt;1&gt;(t),<a href="CppGet.htm">std::get</a>&lt;2&gt;(t),<a href="CppGet.htm">std::get</a>&lt;3&gt;(t)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGet.htm">std::get</a>&lt;4&gt;(t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>()(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGetDistance.htm">GetDistance</a><a href="CppBoost.htm">Boost</a>(<a href="CppGet.htm">std::get</a>&lt;0&gt;(t),<a href="CppGet.htm">std::get</a>&lt;1&gt;(t),<a href="CppGet.htm">std::get</a>&lt;2&gt;(t),<a href="CppGet.htm">std::get</a>&lt;3&gt;(t)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppGet.htm">std::get</a>&lt;4&gt;(t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

