<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtPathArrowItem</title>
  <meta name="description" content="C++ QtPathArrowItem"/>
  <meta name="keywords" content="C++ QtPathArrowItem "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtPathArrowItem.htm">QtPathArrowItem</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.694 at Fri Jan  2 09:57:25 2015
 -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppQtPathArrowItem.htm">QtPathArrowItem</a> is a <a href="CppQt.htm">Qt</a> 
<a href="CppQGraphicsItem.htm">QGraphicsItem</a> <a href="CppClass.htm">class</a> that displays an arrow that can have a multiple straight-line body.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPathArrowItem/CppQtPathArrowItem.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPathArrowItem/CppQtPathArrowItem.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a>/<a href="CppQtPathArrowItem.htm">qtpatharrowitem</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a>/<a href="CppQtPathArrowItem.htm">qtpatharrowitem</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPathArrowItem/qtpatharrowitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPathArrowItem/qtpatharrowitem.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>, an arrow <a href="CppQGraphicsItem.htm">QGraphicsItem</a> with one or more mid<a href="CppPointer.htm">point</a>s<br/>
Copyright (C) 2012-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTPATHARROWITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTPATHARROWITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsLineItem.htm">QGraphicsLineItem</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPen.htm">QPen</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>An arrow item that has one or more mid<a href="CppPointer.htm">point</a>s<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtPathArrowItem.htm">QtPathArrowItem</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppQtPathArrowItem.htm">QtPathArrowItem</a> This;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; tail_pos,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQPointF.htm">QPointF</a>&gt;&amp; mid_pos,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; head_pos,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is there an arrow at the 'to' <a href="CppPointer.htm">point</a> (x2,y2)?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasHead() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_head; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is there an arrow at the 'from' <a href="CppPointer.htm">point</a> (x1,y1)?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasTail() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_tail; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to key presses<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the path the arrow has to take<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetArrowPath(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; tail_pos,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQPointF.htm">QPointF</a>&gt;&amp; mid_pos,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; head_pos<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the pen used to show focus<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFocusPen(<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; pen) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_focus_pen <a href="CppOperatorAssign.htm">=</a> pen; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the regular pen used to draw the arrow<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPen(<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; pen) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_pen <a href="CppOperatorAssign.htm">=</a> pen; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> the arrow has a <a href="CppPointer.htm">point</a> at the head<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHasHead(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_head) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_head <a href="CppOperatorAssign.htm">=</a> has_head; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> the arrow has a <a href="CppPointer.htm">point</a> at the tail<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHasTail(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_tail) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_tail <a href="CppOperatorAssign.htm">=</a> has_tail; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppSignal.htm">Signal</a> to request a scene update, because <b><a href="CppThis.htm">this</a></b> item has moved/changed<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> (This*)&gt; m_signal_item_requests_scene_update;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQRect.htm">QRect</a>F boundingRect() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> hoverEnterEvent(<a href="CppQGraphicsSceneHoverEvent.htm">QGraphicsSceneHoverEvent</a> *);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> mouseMoveEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a> *painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *, <a href="CppQWidget.htm">QWidget</a> *);<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a> <a href="CppShape.htm">shape</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The extra width given to the line <b><a href="CppFor.htm">for</a></b> easier clicking<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_click_easy_width;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The arrow used <b><a href="CppFor.htm">for</a></b> indicating focus<br/>
&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> m_focus_pen;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show arrow at head<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_head;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The position of the head<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> m_head_pos;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The positions between tail (lower indices) and tail (higher indices)<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQPointF.htm">QPointF</a>&gt; m_mid_pos;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The regular pen<br/>
&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> m_pen;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show arrow at tail<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_tail;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The position of the head<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> m_tail_pos;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the angle in radians between two deltas<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/12 o'clock is 0.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 3 o'clock is 0.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 6 o'clock is 1.0 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 9 o'clock is 1.5 * pi<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From www.richelbilderbeek.nl/Cpp<a href="CppGetAngle.htm">GetAngle</a>.htm<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetAngle.htm">GetAngle</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy);<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPATHARROWITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtPathArrowItem/qtpatharrowitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtPathArrowItem/qtpatharrowitem.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>, an arrow <a href="CppQGraphicsItem.htm">QGraphicsItem</a> with one or more mid<a href="CppPointer.htm">point</a>s<br/>
Copyright (C) 2012-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtPathArrowItem.htm">CppQtPathArrowItem</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtPathArrowItem.htm">qtpatharrowitem</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQCursor.htm">QCursor</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsScene.htm">QGraphicsScene</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::m_click_easy_width <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; tail_pos,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQPointF.htm">QPointF</a>&gt;&amp; mid_pos,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; head_pos,<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQGraphicsItem.htm">QGraphicsItem</a>(parent),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>New since <a href="CppQt.htm">Qt</a>5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_requests_scene_update{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_focus_pen(<a href="CppQPen.htm">QPen</a>(<a href="CppQt.htm">Qt</a>::DashLine)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_head(head),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_head_pos(head_pos),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mid_pos(mid_pos),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tail(tail),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tail_pos(tail_pos)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_mid_pos.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be at least one midpos");<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsFocusable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow mouse tracking<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setAcceptHoverEvents(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<br/>
<a href="CppQRect.htm">QRect</a>F <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::boundingRect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppShape.htm">shape</a>().boundingRect();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2012-12-01: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::hoverEnterEvent(<a href="CppQGraphicsSceneHoverEvent.htm">QGraphicsSceneHoverEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setCursor(<a href="CppQCursor.htm">QCursor</a>(<a href="CppQt.htm">Qt</a>::<a href="CppPoint.htm">Point</a>ingHandCursor));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_T:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Minus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_tail <a href="CppOperatorAssign.htm">=</a> !m_tail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_H:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Plus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_head <a href="CppOperatorAssign.htm">=</a> !m_head;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::keyPressEvent(event);<br/>
&nbsp;&nbsp;m_signal_item_requests_scene_update(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::mouseMoveEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a>*)<br/>
{<br/>
&nbsp;&nbsp;m_signal_item_requests_scene_update(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQGraphicsLineItem.htm">QGraphicsLineItem</a>::mouseMoveEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ShiftModifier)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((event-&gt;pos() <a href="CppOperatorMinus.htm">-</a> m_tail_pos).manhattanLength() &lt; 10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_tail <a href="CppOperatorAssign.htm">=</a> !m_tail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((event-&gt;pos() <a href="CppOperatorMinus.htm">-</a> m_head_pos).manhattanLength() &lt; 10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_head <a href="CppOperatorAssign.htm">=</a> !m_head;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::mousePressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::paint(<a href="CppQPainter.htm">QPainter</a> *painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *, <a href="CppQWidget.htm">QWidget</a> *)<br/>
{<br/>
&nbsp;&nbsp;painter-&gt;setRenderH<b><a href="CppInt.htm">int</a></b>(<a href="CppQPainter.htm">QPainter</a>::Antialiasing);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;isSelected() <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;hasFocus())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;setPen(m_focus_pen);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;setPen(m_pen);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the lines<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawLine(m_tail_pos,m_mid_pos[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> max <a href="CppOperatorAssign.htm">=</a> m_mid_pos.size() <a href="CppOperatorMinus.htm">-</a> 1; <a href="CppComment.htm">//</a>-1, because the line goes to the next index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a> max; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawLine(m_mid_pos[i],m_mid_pos[i+1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawLine(m_mid_pos[ m_mid_pos.size() <a href="CppOperatorMinus.htm">-</a> 1 ],m_head_pos);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sz <a href="CppOperatorAssign.htm">=</a> 10.0; <a href="CppComment.htm">//</a>pixels<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_tail)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi{<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx{m_mid_pos[0].x() <a href="CppOperatorMinus.htm">-</a> m_tail_pos.x()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy{m_mid_pos[0].y() <a href="CppOperatorMinus.htm">-</a> m_tail_pos.y()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle{Geometry().<a href="CppGetAngle.htm">GetAngle</a>ClockScreen(dx,dy)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dy <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0) angle <a href="CppOperatorAssign.htm">=</a> (1.0 * pi) <a href="CppOperatorPlus.htm">+</a> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> m_tail_pos(m_tail_x,m_tail_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p1{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_tail_pos <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdSin.htm">std::sin</a>(angle <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorPlus.htm">+</a> (pi * 0.1)) * sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(angle <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorPlus.htm">+</a> (pi * 0.1)) * sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p2{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_tail_pos <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdSin.htm">std::sin</a>(angle <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorMinus.htm">-</a> (pi * 0.1)) * sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(angle <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorMinus.htm">-</a> (pi * 0.1)) * sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawPolygon(QPolygonF() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_tail_pos <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_head)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> m_head_pos.x() <a href="CppOperatorMinus.htm">-</a> m_mid_pos[m_mid_pos.size() <a href="CppOperatorMinus.htm">-</a> 1].x();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> m_head_pos.y() <a href="CppOperatorMinus.htm">-</a> m_mid_pos[m_mid_pos.size() <a href="CppOperatorMinus.htm">-</a> 1].y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle{Geometry().<a href="CppGetAngle.htm">GetAngle</a>ClockScreen(dx,dy)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dy <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0) angle <a href="CppOperatorAssign.htm">=</a> (1.0 * pi) <a href="CppOperatorPlus.htm">+</a> angle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_head_pos <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdSin.htm">std::sin</a>(angle <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;0.0 <a href="CppOperatorPlus.htm">+</a> (pi * 0.1)) * sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(angle <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;0.0 <a href="CppOperatorPlus.htm">+</a> (pi * 0.1)) * sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_head_pos <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdSin.htm">std::sin</a>(angle <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;0.0 <a href="CppOperatorMinus.htm">-</a> (pi * 0.1)) * sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a><a href="CppStdCos.htm">std::cos</a>(angle <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;0.0 <a href="CppOperatorMinus.htm">-</a> (pi * 0.1)) * sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawPolygon(QPolygonF() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_head_pos <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::SetArrowPath(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; tail_pos,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppQPointF.htm">QPointF</a>&gt;&amp; mid_pos,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; head_pos)<br/>
{<br/>
&nbsp;&nbsp;m_tail_pos <a href="CppOperatorAssign.htm">=</a> tail_pos;<br/>
&nbsp;&nbsp;m_mid_pos <a href="CppOperatorAssign.htm">=</a> mid_pos;<br/>
&nbsp;&nbsp;m_head_pos <a href="CppOperatorAssign.htm">=</a> head_pos;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_mid_pos.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be at least one midpos");<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
}<br/>
<br/>
<a href="CppQPainterPath.htm">QPainterPath</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtPathArrowItem.htm">QtPathArrowItem</a>::<a href="CppShape.htm">shape</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Thanks to norobro <b><a href="CppFor.htm">for</a></b> posting <b><a href="CppThis.htm">this</a></b> code at<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>http://www.qtcentre.org/<a href="CppThread.htm">thread</a>s/49201-<a href="CppIncrease.htm">Increase</a>-margin-<b><a href="CppFor.htm">for</a></b>-detecting-<a href="Tools.htm">tool</a>tip-events-of-<a href="CppQGraphicsLineItem.htm">QGraphicsLineItem</a><br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a> path;<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a>Stroker stroker;<br/>
<br/>
&nbsp;&nbsp;path.moveTo(m_tail_pos);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_mid_pos.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a> sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;path.lineTo(m_mid_pos[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;path.lineTo(m_head_pos);<br/>
<br/>
&nbsp;&nbsp;stroker.setWidth(m_click_easy_width);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> stroker.createStroke(path);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
