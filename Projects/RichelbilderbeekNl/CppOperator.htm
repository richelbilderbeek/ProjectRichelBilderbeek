<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>operator</title>
  <meta name="description" content="C++ operator"/>
  <meta name="keywords" content="C++ operator"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppOperator.htm">operator</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppKeyword.htm">Keyword</a> to <a href="CppOverload.htm">overload</a> an <a href="CppOperator.htm">operator</a>. 
  An <a href="CppOperator.htm">operator</a> performs a <a href="CppFunction.htm">function</a> or <a href="CppMemberFunction.htm">member function</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Overview of operators (incomplete)</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1">
  <tr>
    <td><b><a href="CppOperator.htm">operator</a> name</b></td>
    <td><b><a href="CppOperator.htm">operator</a></b></td>
  </tr>
  <tr>
    <td></td>
    <td>.*</td>
  </tr>
  <tr>
    <td></td>
    <td>-&gt;*</td>
  </tr>
  <tr>
    <td><a href="CppOperatorAddressOf.htm">address-of operator</a></td>
    <td><a href="CppOperatorAddressOf.htm">&amp;</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorDereference.htm">dereference operator</a></td>
    <td><a href="CppOperatorDereference.htm">*</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorAssign.htm">assign operator</a></td>
    <td><a href="CppOperatorAssign.htm">=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorBitShiftLeftAssign.htm">bit shift left assign operator</a></td>
    <td><a href="CppOperatorBitShiftLeftAssign.htm">&lt;&lt;=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorBitShiftRightAssign.htm">bit shift right assign operator</a></td>
    <td><a href="CppOperatorBitShiftRightAssign.htm">&gt;&gt;=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorBitwiseAnd.htm">bitwise and operator</a></td>
    <td><a href="CppOperatorBitwiseAnd.htm">&amp;</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorBitwiseNot.htm">bitwise not operator</a></td>
    <td><a href="CppOperatorBitwiseNot.htm">~</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorBitwiseOr.htm">bitwise or operator</a></td>
    <td><a href="CppOperatorBitwiseOr.htm">|</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorBitwiseXor.htm">bitwise xor operator</a></td>
    <td><a href="CppOperatorBitwiseXor.htm">^</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorBitwiseXorAssign.htm">bitwise xor assign operator</a></p>
    </td><td><a href="CppOperatorBitwiseXorAssign.htm">^=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorComma.htm">comma operator</a></td>
    <td><a href="CppOperatorComma.htm">,</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorDecrement.htm">decrement operator</a></td>
    <td><a href="CppOperatorDecrement.htm">--</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorDivideAssign.htm">divide assign operator</a></td>
    <td><a href="CppOperatorDivideAssign.htm">/=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorDivide.htm">divide operator</a></td>
    <td><a href="CppOperatorDivide.htm">/</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorEqual.htm">equal operator</a></td>
    <td><a href="CppOperatorEqual.htm">==</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorFunctionCall.htm">function call operator</a></td>
    <td><a href="CppOperatorFunctionCall.htm">()</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorGreater.htm">greater than operator</a></td>
    <td><a href="CppOperatorGreater.htm">&gt;</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorGreaterEqual.htm">greater than or equal operator</a></td>
    <td><a href="CppOperatorGreaterEqual.htm">&gt;=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorIncrement.htm">increment operator</a></td>
    <td><a href="CppOperatorIncrement.htm">++</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorIndex.htm">index operator</a></td>
    <td><a href="CppOperatorIndex.htm">[</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorIndex.htm">index operator</a></td>
    <td><a href="CppOperatorIndex.htm">[]</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorIndex.htm">index operator</a></td>
    <td><a href="CppOperatorIndex.htm">]</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorLess.htm">less than operator</a></td>
    <td><a href="CppOperatorLess.htm">&lt;</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorLessEqual.htm">less than or equal operator</a></td>
    <td><a href="CppOperatorLessEqual.htm">&lt;=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorLogicalAnd.htm">logical and operator</a></td>
    <td><a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorLogicalNot.htm">logical not operator</a></td>
    <td><a href="CppOperatorLogicalNot.htm">!</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorLogicalOr.htm">||, logical or operator</a></td>
    <td><a href="CppOperatorLogicalOr.htm">||</a></td>
  </tr>
  <tr>
    <td>member access operator</td>
    <td>.</td>
  </tr>
  <tr>
    <td><a href="CppArrowOperator.htm">arrow operator</a></td>
    <td>-&gt;</td>
  </tr>
  <tr>
    <td><a href="CppOperatorMinusAssign.htm">minus assign operator</a></td>
    <td><a href="CppOperatorMinusAssign.htm">-=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorMinus.htm">minus operator</a></td>
    <td><a href="CppOperatorMinus.htm">-</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorModulusAssign.htm">modulus assign operator</a></td>
    <td><a href="CppOperatorModulusAssign.htm">%=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorModulus.htm">modulus operator</a></td>
    <td><a href="CppOperatorModulus.htm">%</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorMultiplyAssign.htm">multiply assign operator</a></td>
    <td><a href="CppOperatorMultiplyAssign.htm">*=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorMultiply.htm">multiply operator</a></td>
    <td><a href="CppOperatorMultiply.htm">*</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorNotEqual.htm">not equal operator</a></td>
    <td><a href="CppOperatorNotEqual.htm">!=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorPlusAssign.htm">plus assign operator</a></td>
    <td><a href="CppOperatorPlusAssign.htm">+=</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorPlus.htm">plus operator</a></td>
    <td><a href="CppOperatorPlus.htm">+</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorQuestionmarkColon.htm">questionmark colon operator</a></td>
    <td><a href="CppOperatorQuestionmarkColon.htm">?:</a></td>
  </tr>
  <tr>
    <td><a href="CppOperatorScope.htm">scope operator</a></td>
    <td><a href="CppOperatorScope.htm">::</a></td>
  </tr>
  <tr>
    <td><a href="CppSizeof.htm">sizeof operator</a></td>
    <td><b><a href="CppOperatorSizeof.htm">sizeof</a></p></b></td>
  </tr>
  <tr>
    <td><a href="CppOperatorStreamOut.htm">stream out operator</a></td>
    <td><a href="CppOperatorStreamOut.htm">&lt;&lt;</a></td>
  </tr>
</table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    <a href="CppDefinition.htm">Define</a> <a href="CppOperator.htm">operators</a> primarily to mimic conventional usage [1]
  </li>
  <li>
    Place spaces on either side of a binary <a href="CppOperator.htm">operator</a> [2]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice, page 547: '[1] Define operators primarily to mimic conventional usage'</li>
  <li><!--  2 -->Paul Deitel, Harvey Deitel. C++11 for programmers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 2.4, Good Programming Practice 2.7. page 28: 'Place spaces on either side of a binary operator. This will make the operator stand out and make the program more readable.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
