<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Fuzzy_equal_to</title>
  <meta name="description" content="C++ Fuzzy_equal_to"/>
  <meta name="keywords" content="C++ Fuzzy_equal_to "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppFuzzy_equal_to.htm">Fuzzy_equal_to</a></h1>
<p>&nbsp;</p>
<h2>./CppFuzzy_equal_to/CppFuzzy_equal_to.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFuzzy_equal_to/CppFuzzy_equal_to.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppFuzzy_equal_to<br/>
<br/>
SOURCES +=<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppFuzzy_equal_to/fuzzy_equal_to.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppFuzzy_equal_to/fuzzy_equal_to.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppFuzzy_equal_to/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppFuzzy_equal_to/fuzzy_equal_to.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppFuzzy_equal_to/fuzzy_equal_to.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
fuzzy_equal_to, fuzzy equal_to predicate<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppFuzzy_equal_to.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef RIBI_FUZZY_EQUAL_TO_H<br/>
#define RIBI_FUZZY_EQUAL_TO_H<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;cmath&gt;<br/>
#include &lt;functional&gt;<br/>
#include &lt;limits&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
//Temporarily suppress Weffc++ warning below, because I won't change std::binary_function<br/>
//error: base class 'struct std::binary_function&lt;double, double, bool&gt;' has a non-virtual destructor [-Werror=effc++]<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#pragma GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<br/>
namespace ribi {<br/>
<br/>
///fuzzy_equal_to is a predicate to test two doubles for equality<br/>
///with a certain tolerance. A tolerance of 0.0 denotes that<br/>
///an exact match is requested. Note that the value of 0.0 cannot<br/>
///be compared fuzzily.<br/>
///From http://www.richelbilderbeek.nl/CppFuzzy_equal_to.htm<br/>
struct fuzzy_equal_to<br/>
&nbsp;&nbsp;: public std::binary_function&lt;double,double,bool&gt;<br/>
{<br/>
&nbsp;&nbsp;explicit fuzzy_equal_to(const double tolerance = std::numeric_limits&lt;double&gt;::epsilon())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_tolerance(tolerance)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(tolerance &gt;= 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;bool operator()(const double lhs, const double rhs) const<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(lhs != 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return rhs &gt; (1.0 - m_tolerance) * lhs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rhs &lt; (1.0 + m_tolerance) * lhs;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const double m_tolerance;<br/>
<br/>
&nbsp;&nbsp;static std::string GetVersion()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return "1.3";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;static std::vector&lt;std::string&gt; GetVersionHistory()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"2011-02-24: version 1.0: initial version",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"2012-11-14: version 1.1: set default tolerance to std::numeric_limits&lt;double&gt;::epsilon()",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"2012-11-18: version 1.2: added #pragma's to file to suppress -Weffc++ warnings",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"2012-11-18: version 1.3: added #include &lt;limits&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
//Get back -Weffc++ warnings again<br/>
#pragma GCC diagnostic pop<br/>
<br/>
///fuzzy_equal_to_abs is a predicate to test two doubles for equality<br/>
///by allowing a certain absolute difference between the two values<br/>
///A tolerance of 0.0 denotes that an exact match is requested.<br/>
///From http://www.richelbilderbeek.nl/CppFuzzy_equal_to.htm<br/>
struct fuzzy_equal_to_abs<br/>
{<br/>
&nbsp;&nbsp;explicit fuzzy_equal_to_abs(const double tolerance = std::numeric_limits&lt;double&gt;::epsilon())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_tolerance(tolerance)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(tolerance &gt;= 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;bool operator()(const double lhs, const double rhs) const noexcept<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return std::abs(lhs-rhs) &lt; m_tolerance;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const double m_tolerance;<br/>
<br/>
&nbsp;&nbsp;static std::string GetVersion() noexcept<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return "1.0";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;static std::vector&lt;std::string&gt; GetVersionHistory() noexcept<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"2013-11-05: version 1.0: initial version from fuzzy_equal_to"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // RIBI_FUZZY_EQUAL_TO_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
