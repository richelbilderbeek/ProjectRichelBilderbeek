<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>pointer</title>
  <meta name="description" content="C++ pointer"/>
  <meta name="keywords" content="C++ pointer"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPointer.htm">pointer</a></h1>
<p>&nbsp;</p>
<p>
  A <a href="CppPointer.htm">pointer</a> is a type that holds an <a href="CppAddress.htm">address</a>.
</p>
<p>&nbsp;</p>
<p>
  A <a href="CppPointer.htm">pointer</a> can be initialized with the 
  <a href="CppKeyword.htm">keyword</a> <a href="CppNew.htm">new</a>, 
  which reserves free space for the dynamically allocated <a href="CppInstance.htm">instance</a> 
  and <b><a href="CppReturn.htm">return</a></b>s the <a href="CppAddress.htm">address</a> to it.
</p>
<p>&nbsp;</p>
<p>
  <a href="Cpp.htm">C++</a> does not free this <a href="CppMemory.htm">memory</a> 
  on its own. Therefore, you have to call <a href="CppDelete.htm">delete</a> to do so.
</p>
<p>&nbsp;</p>
<p>
  Reading/writing from/to an uninitialized <a href="CppPointer.htm">pointer</a>
  results in an <a href="CppAccessViolation.htm">access violation</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Keep use of <a href="CppPointer.htm">pointers</a> simple and straightforward [6]
  </li>
  <li>
    Initialize a <a href="CppPointer.htm">pointer</a> with <a href="CppNullptr.htm">nullptr</a> [8] 
    (in <a href="Cpp11.htm">C++11</a>) or the <a href="CppIntegerLiteral.htm">integer literal</a> 
    0 [4] (in <a href="Cpp98.htm">C++98</a>), rather than 
    <a href="CppNULL.htm">NULL</a>.
  </li>
  <li>
    Avoid non-trivial <a href="CppPointer.htm">pointer</a> arithmetic [5,7]
  </li>
  <li>
    Prefer using a <a href="CppSmartPointer.htm">smart pointer</a> over a 
    plain <a href="CppPointer.htm">pointer</a> [1-3]
  </li>
  <li>
    Keep <a href="CppPointer.htm">pointers</a> that represent ownership inside 
    handle <a href="CppClass.htm">classes</a> [9-11]
  </li>
  <li>
    Use <a href="CppConst.htm">const</a> <a href="CppPointer.htm">pointers</a> to express 
    immutability in <a href="CppInterface.htm">interfaces</a> [13]
  </li>
  <li>
    Prefer <a href="CppReference.htm">references</a> to <a href="CppPointer.htm">pointers</a> 
    as <a href="CppArgument.htm">arguments</a>, except where "no object" is a reasonable option [14,15]
  </li>
  <li>
    Avoid <a href="CppVoidPointer.htm">void*</a> except in low-level code [12]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 13: 'Use objects to manage resources'.</li>
  <li><!--  2 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 17: 'Store <a href="CppNew.htm">new</a>ed objects in <a href="CppSmartPointer.htm">smart pointer</a>s in standalone statements'</li>
  <li><!--  3 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Chapter 13: 'Ensure resources are owned by objects. Use explicit RAII and smart pointers.</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Section 5.8.3: 'Use 0 rather than <a href="CppNULL.htm">NULL</a>'.</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Section 5.8.1: 'Avoid non-trivial <a href="CppPointer.htm">pointer</a> arithmetic'.</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice, page 199: '[1] Keep use of pointers simple and straightforward'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice, page 199: '[2] Avoid nontrivial pointer arithmetic'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice, page 199: '[5] Use nullptr rather than 0 or NULL'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice, page 199: '[11] Keep pointers that represent ownership inside handle classes'</li>
  <li><!-- 10 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 13: 'Use objects to manage resources'.</li>
  <li><!-- 11 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Chapter 13: 'Ensure resources are owned by objects. Use explicit RAII and smart pointers.</li>
  <li><!-- 12 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice, page 199: 'Avoid <a href="CppVoidPointer.htm">void*</a> except in low-level code'</li>
  <li><!-- 13 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[13] Use const pointers and const references to express immutability in interfaces'</li>
  <li><!-- 14 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[14] Prefer references to pointers as arguments, except where "no object" is a reasonable option'</li>
  <li><!-- 15 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[11] Pass a pointer if "no object" is a valid alternative (and represent "no object" by nullptr)'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
