<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>identifier</title>
  <meta name="description" content="C++ identifier"/>
  <meta name="keywords" content="C++ identifier code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppIdentifier.htm">identifier</a></h1>
<p>&nbsp;</p>
<p>
  An <a href="CppIdentifier.htm">identifier</a> is the name given to a <a href="CppVariable.htm">variable</a>.
</p>
<p>&nbsp;</p>
<p>
  In the example below, a <a href="CppVariable.htm">variable</a> is <a href="CppDefinition.htm">defined</a> with
  the <a href="CppInt.htm">int</a> <a href="CppDataType.htm">data type</a> and the 
  <a href="CppIdentifier.htm">identifier</a> 'x':
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 1;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>Keep common and local names short, and keep uncommon and nonlocal names longer [4]</li>
  <li>Avoid similar-looking names [5]</li>
  <li>Be consistent about <a href="CppIdentifier.htm">identifier</a> names [1,7]</li>
  <li>Use either uppercase or underscore but not both to delimit words [1]<li>
  <li>Use meaningful names [2,12], as these make the code self-documenting [12]</li>
  <li>Consider not letting <a href="CppIdentifier.htm">identifiers</a> start with a leading underscore [3,14], as it might cause name collision [3,14]</li>
  <li>Name an object to reflect its meaning rather than its type [6]<li>
  <li>Avoid using <a href="CppHungarianNotation.htm">Hungarian notation</a> [9-10]</li>
  <li>Avoid using abbreviations in identifiers [13]</li>
  <li>Avoid ALL_CAPS names [8]</li>
  <li>Use <a href="CppIdentifier.htm">identifiers</a> of 31 characters or fewer to ensure portability [11]</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppJohnLakos.htm">John Lakos</a>. Large-Scale C++ Software Design. 1996. ISBN: 0-201-63362-0. Chapter 2.7: 'Be consistent about identifier names; use either uppercase or underscore but not both to delimit words in identifiers'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. Programming. 2009. ISBN: 978-0-321-54372-1. Chapter 5.9.1: 'Use meaningful names'</li>
  <li><!--  3 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 47: 'Identifiers will not begin with the underscore character '_'. Rationale: '_' is often used as the first character in the name of library functions (e.g. _main, _exit, etc.) In order to avoid name collisions, identifiers should not begin with '_'.'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice. page 169: '[12] Keep common and local names short, and keep uncommon and nonlocal names longer'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice. page 169: '[13] Avoid similar-looking names'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice. page 169: '[14] Name an object to reflect its meaning rather than its type'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice. page 169: '[15] Maintain a consistent naming style'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice. page 169: '[16] Avoid ALL_CAPS names'</li>
  <li><!--  9 --><a href="http://www.stroustrup.com/glossary.html">Bjarne Stroustrup's C++ glossary</a>: 'Hungarian notation - a coding convention that encodes type information in variable names. Its main use is to compensate for lack of type checking in weakly-typed or untyped languages. It is totally unsuitable for C++ where it complicates maintenance and gets in the way of abstraction'</li>
  <li><!-- 10 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Item 0, example 3: 'Therefore, no C++ coding standard should require Hungarian notation, though a C++ coding standard might legitimately choose to ban it</li>
  <li><!-- 11 -->Paul Deitel, Harvey Deitel. C++11 for programmers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 2.4, Portability Tip 2.1. page 26: 'C++ allows identifiers of any length, but your C++ implementation may restrict identifier lengths. Use identifiers of 31 characters or fewer to ensure portability.'</li>
  <li><!-- 12 -->Paul Deitel, Harvey Deitel. C++11 for programmers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 2.4, Good Programming Practice 2.4. page 26: 'Choosing meaningful indentifiers makes a program self-documenting - a person can understand the program simply by reading it rather than having to refer to program comments or documentation.'</li>
  <li><!-- 13 -->Paul Deitel, Harvey Deitel. C++11 for programmers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 2.4, Good Programming Practice 2.5. page 26: 'Avoid using abbreviations in identifiers. This improves program readability.'</li>
  <li><!-- 14 -->Paul Deitel, Harvey Deitel. C++11 for programmers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 2.4, Good Programming Practice 2.6. page 26: 'Do not use identifiers that begin with underscores and double underscores, because C++ compilers may use names like that for their own purposes internally. This will prevent the names you choose from being confused with names the compiler chooses'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
