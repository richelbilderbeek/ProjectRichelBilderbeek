<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::thread example 3: program flow</title>
  <meta name="description" content="C++ std::thread example 3: program flow"/>
  <meta name="keywords" content="C++ C++0x std::thread thread example 3: program flow code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <img src="PicCpp11.png" alt="C++11"/> <a href="CppThreadExample3.htm">std::thread example 3: program flow</a></h1>
<p>&nbsp;</p>
<p>This <a href="CppThread.htm">thread</a> example investigates the program flow from two simultaneously running <a href="CppThread.htm">threads</a>.</p>
<p>&nbsp;</p>
<p>The code I implemented after the talk given by Hans Boehm [1].</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppThreadExample3.zip">Download the Qt Creator project 'CppThreadExample3' (zip)</a></li>
  <li><a href="CppThreadExample3.csv">Download the raw script results 'CppThreadExample3.csv' (csv)</a></li>
  <li><a href="CppThreadExample3.xls">Download the investigated results 'CppThreadExample3.xls' (xls)</a></li>
  <li><a href="CppThreadExample3.xls">Download the investigated results 'CppThreadExample3.gnumeric' (gnumeric)</a></li>
  <li><a href="CppThreadExample3.txt">View the tally of the output of 'CppThreadExample3.txt' (txt)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 11.04 (natty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.5.2</li>
  <li>Borland <a href="CppBcc32Exe.htm">BCC32.EXE</a> version 6.0.10.157</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.5.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppThreadExample3.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by <a href="CppQtCreator.htm">QtCreator</a> 2011-07-29T16:22:11<br/>
#<br/>
#-------------------------------------------------<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp0x.htm">c++0x</a><br/>
TARGET = CppThreadExample3<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThread.htm">thread</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Tasks<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <a href="CppMutex.htm">mutex</a>, because each <a href="CppThread.htm">thread</a> its must use the same <a href="CppMutex.htm">mutex</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppMutex.htm">std::mutex</a> <a href="CppMutex.htm">mutex</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> y;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Task1()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> y;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Acquire access to <a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLock_guard.htm">std::lock_guard</a>&lt;<a href="CppMutex.htm">std::mutex</a>&gt; lock(<a href="CppMutex.htm">mutex</a>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write to <a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppThread.htm">thread</a> #1, x: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", copy of y: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> r <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", ";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Task2()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> x;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Acquire access to <a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLock_guard.htm">std::lock_guard</a>&lt;<a href="CppMutex.htm">std::mutex</a>&gt; lock(<a href="CppMutex.htm">mutex</a>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write to <a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppThread.htm">thread</a> #2, y: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", copy of x: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> r <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", ";<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<a href="CppMutex.htm">std::mutex</a> Tasks::<a href="CppMutex.htm">mutex</a>;<br/>
<b><a href="CppInt.htm">int</a></b> Tasks::x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<b><a href="CppInt.htm">int</a></b> Tasks::y <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> t1(Tasks::Task1);<br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> t2(Tasks::Task2);<br/>
&nbsp;&nbsp;t1.join();<br/>
&nbsp;&nbsp;t2.join();<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>CppThreadExample3.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#!/bin/bash<br/>
for ((i = 0;i&lt;=1000;i++))<br/>
do<br/>
../CppThreadExample3-build-desktop/./CppThreadExample3 &gt;&gt; output.csv<br/>
done<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Screen ouput</h2>
<p>&nbsp;</p>
<p>Screen output varies, so I used the script 'CppThreadExample3.sh' to let the program run a thousand times, so I could tally the output.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
197x thread #1, x: 1, copy of y: 0, thread #2, y: 1, copy of x: 0, <br/>
&nbsp;73x thread #1, x: 1, copy of y: 0, thread #2, y: 1, copy of x: 1, <br/>
242x thread #1, x: 1, copy of y: 1, thread #2, y: 1, copy of x: 0, <br/>
&nbsp;&nbsp;0x thread #1, x: 1, copy of y: 1, thread #2, y: 1, copy of x: 1, <br/>
270x thread #2, y: 1, copy of x: 0, thread #1, x: 1, copy of y: 0, <br/>
217x thread #2, y: 1, copy of x: 0, thread #1, x: 1, copy of y: 1, <br/>
&nbsp;&nbsp;2x thread #2, y: 1, copy of x: 1, thread #1, x: 1, copy of y: 0, <br/>
&nbsp;&nbsp;0x thread #2, y: 1, copy of x: 1, thread #1, x: 1, copy of y: 1, <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<ul>
  <li><a href="CppThreadExample3.zip">Download the Qt Creator project 'CppThreadExample3' (zip)</a></li>
  <li><a href="CppThreadExample3.csv">Download the raw script results 'CppThreadExample3.csv' (csv)</a></li>
  <li><a href="CppThreadExample3.xls">Download the investigated results 'CppThreadExample3.xls' (xls)</a></li>
  <li><a href="CppThreadExample3.xls">Download the investigated results 'CppThreadExample3.gnumeric' (gnumeric)</a></li>
  <li><a href="CppThreadExample3.txt">View the tally of the output of 'CppThreadExample3.txt' (txt)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://www.youtube.com/watch?v=mrvAqvtWYb4">Google TechTalk 'Getting C++ Threads Right' by Hans Boehm</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
