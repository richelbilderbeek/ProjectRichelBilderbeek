<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Encranger</title>
  <meta name="description" content="C++ Encranger"/>
  <meta name="keywords" content="C++ Encranger "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppEncranger.htm">Encranger</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.663 at Sat Jun 21 23:23:42 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppEncranger.htm">Encranger</a> is one of my own
<a href="CppCryptography.htm">cryptography</a> <a href="CppClass.htm">classes</a>.</p>
<p>&nbsp;</p>
<p><a href="CppEncranger.htm">Encranger</a> is used in, among others:</p>
<ul>
  <li><a href="ToolEncranger.htm">Encranger</a></li>
  <li><a href="ProjectWtWebsite.htm">ProjectWtWebsite</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppEncranger/CppEncranger.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppEncranger/CppEncranger.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppEncranger.htm">CppEncranger</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppEncranger.htm">CppEncranger</a>/<a href="CppEncranger.htm">encranger</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppEncranger.htm">CppEncranger</a>/<a href="CppEncranger.htm">encranger</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppEncranger.htm">CppEncranger</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppEncranger/encranger.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppEncranger/encranger.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppEncranger.htm">Encranger</a>, encryption and de-encryption <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="ToolMultiEncranger.htm">ToolMultiEncranger</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> ENCRANGER_H<br/>
<a href="CppDefine.htm">#define</a> ENCRANGER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppEncranger.htm">Encranger</a> stands <b><a href="CppFor.htm">for</a></b> 'ENCryption by RAndom Number GEneratoR'<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppEncranger.htm">Encranger</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppEncranger.htm">Encranger</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key);<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Encrypt(<a href="CppStdString.htm">std::string</a> s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Deencrypt(<a href="CppStdString.htm">std::string</a> s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <a href="CppChar.htm">character</a>s;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&nbsp;&nbsp;table;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; CreateTable(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key, <b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> sz) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; CreateTestKeys() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; Create<a href="CppChar.htm">Character</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> Encrypt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> d) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> Deencrypt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> d) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> ENCRANGER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppEncranger/encranger.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppEncranger/encranger.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppEncranger.htm">Encranger</a>, encryption and de-encryption <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="ToolMultiEncranger.htm">ToolMultiEncranger</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppEncranger.htm">encranger</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppLoopReader.htm">loopreader</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::<a href="CppEncranger.htm">Encranger</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key)<br/>
&nbsp;&nbsp;: <a href="CppChar.htm">character</a>s(Create<a href="CppChar.htm">Character</a>s()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table(CreateTable(key,Create<a href="CppChar.htm">Character</a>s().size()))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::CreateTestKeys() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v;<br/>
&nbsp;&nbsp;v.push_back(0);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i=1;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (i &gt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorMultiplyAssign.htm">*=</a> 2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Encrypt(<a href="CppStdString.htm">std::string</a> s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a>::<a href="CppIterator.htm">iterator</a> String<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator <a href="CppLoopReader.htm">LoopReader</a><a href="CppIterator.htm">Iterator</a>Type;<br/>
&nbsp;&nbsp;<a href="CppLoopReader.htm">LoopReader</a>&lt;<a href="CppLoopReader.htm">LoopReader</a><a href="CppIterator.htm">Iterator</a>Type&gt; table_reader(table.begin(), table.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> s.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (String<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> s.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i, table_reader.Next())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> Encrypt(*i,*table_reader.Read());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Deencrypt(<a href="CppStdString.htm">std::string</a> s) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a>::<a href="CppIterator.htm">iterator</a> String<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;<a href="CppLoopReader.htm">LoopReader</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator&gt; table_reader(table.begin(), table.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String<a href="CppIterator.htm">Iterator</a> j <a href="CppOperatorAssign.htm">=</a> s.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (String<a href="CppIterator.htm">Iterator</a> i <a href="CppOperatorAssign.htm">=</a> s.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i, table_reader.Next())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*i <a href="CppOperatorAssign.htm">=</a> Deencrypt(*i,*table_reader.Read());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppChar.htm">char</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Encrypt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> d) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> GetIndex(c);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppChar.htm">character</a>s.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i_new <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorPlus.htm">+</a> d) <a href="CppOperatorModulus.htm">%</a> n_<b><a href="CppChar.htm">char</a></b>s;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i_new <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i_new &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppChar.htm">character</a>s.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppChar.htm">character</a>s[i_new];<br/>
}<br/>
<br/>
<b><a href="CppChar.htm">char</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Deencrypt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> d) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> GetIndex(c);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<b><a href="CppChar.htm">char</a></b>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppChar.htm">character</a>s.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i_new <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorMinus.htm">-</a> d <a href="CppOperatorPlus.htm">+</a> n_<b><a href="CppChar.htm">char</a></b>s) <a href="CppOperatorModulus.htm">%</a> n_<b><a href="CppChar.htm">char</a></b>s;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i_new <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i_new &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppChar.htm">character</a>s.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppChar.htm">character</a>s[i_new];<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::GetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorEqual.htm">==</a> '\t' <a href="CppOperatorLogicalOr.htm">||</a> c <a href="CppOperatorEqual.htm">==</a> '\n') <b><a href="CppReturn.htm">return</a></b> GetIndex(' ');<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;::const_iterator i<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(<a href="CppChar.htm">character</a>s.begin(), <a href="CppChar.htm">character</a>s.end(), c);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppChar.htm">character</a>s.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i <a href="CppOperatorMinus.htm">-</a> <a href="CppChar.htm">character</a>s.begin();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::CreateTable(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key, <b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> sz) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sz <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppEncranger.htm">Encranger</a>::CreateTable: cannot create table of size zero");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(sz);<br/>
&nbsp;&nbsp;<a href="CppStdIota.htm">std::iota</a>(v.begin(),v.end(),0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The key is the seed<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(key);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shuffle<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Create<a href="CppChar.htm">Character</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Upper<b><a href="CppCase.htm">case</a></b><br/>
&nbsp;&nbsp;v.push_back('A');<br/>
&nbsp;&nbsp;v.push_back('B');<br/>
&nbsp;&nbsp;v.push_back('C');<br/>
&nbsp;&nbsp;v.push_back('D');<br/>
&nbsp;&nbsp;v.push_back('E');<br/>
&nbsp;&nbsp;v.push_back('F');<br/>
&nbsp;&nbsp;v.push_back('G');<br/>
&nbsp;&nbsp;v.push_back('H');<br/>
&nbsp;&nbsp;v.push_back('I');<br/>
&nbsp;&nbsp;v.push_back('J');<br/>
&nbsp;&nbsp;v.push_back('K');<br/>
&nbsp;&nbsp;v.push_back('L');<br/>
&nbsp;&nbsp;v.push_back('M');<br/>
&nbsp;&nbsp;v.push_back('N');<br/>
&nbsp;&nbsp;v.push_back('O');<br/>
&nbsp;&nbsp;v.push_back('P');<br/>
&nbsp;&nbsp;v.push_back('Q');<br/>
&nbsp;&nbsp;v.push_back('R');<br/>
&nbsp;&nbsp;v.push_back('S');<br/>
&nbsp;&nbsp;v.push_back('T');<br/>
&nbsp;&nbsp;v.push_back('U');<br/>
&nbsp;&nbsp;v.push_back('V');<br/>
&nbsp;&nbsp;v.push_back('W');<br/>
&nbsp;&nbsp;v.push_back('X');<br/>
&nbsp;&nbsp;v.push_back('Y');<br/>
&nbsp;&nbsp;v.push_back('Z');<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Lower<b><a href="CppCase.htm">case</a></b><br/>
&nbsp;&nbsp;v.push_back('a');<br/>
&nbsp;&nbsp;v.push_back('b');<br/>
&nbsp;&nbsp;v.push_back('c');<br/>
&nbsp;&nbsp;v.push_back('d');<br/>
&nbsp;&nbsp;v.push_back('e');<br/>
&nbsp;&nbsp;v.push_back('f');<br/>
&nbsp;&nbsp;v.push_back('g');<br/>
&nbsp;&nbsp;v.push_back('h');<br/>
&nbsp;&nbsp;v.push_back('i');<br/>
&nbsp;&nbsp;v.push_back('j');<br/>
&nbsp;&nbsp;v.push_back('k');<br/>
&nbsp;&nbsp;v.push_back('l');<br/>
&nbsp;&nbsp;v.push_back('m');<br/>
&nbsp;&nbsp;v.push_back('n');<br/>
&nbsp;&nbsp;v.push_back('o');<br/>
&nbsp;&nbsp;v.push_back('p');<br/>
&nbsp;&nbsp;v.push_back('q');<br/>
&nbsp;&nbsp;v.push_back('r');<br/>
&nbsp;&nbsp;v.push_back('s');<br/>
&nbsp;&nbsp;v.push_back('t');<br/>
&nbsp;&nbsp;v.push_back('u');<br/>
&nbsp;&nbsp;v.push_back('v');<br/>
&nbsp;&nbsp;v.push_back('w');<br/>
&nbsp;&nbsp;v.push_back('x');<br/>
&nbsp;&nbsp;v.push_back('y');<br/>
&nbsp;&nbsp;v.push_back('z');<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Digits<br/>
&nbsp;&nbsp;v.push_back('0');<br/>
&nbsp;&nbsp;v.push_back('1');<br/>
&nbsp;&nbsp;v.push_back('2');<br/>
&nbsp;&nbsp;v.push_back('3');<br/>
&nbsp;&nbsp;v.push_back('4');<br/>
&nbsp;&nbsp;v.push_back('5');<br/>
&nbsp;&nbsp;v.push_back('6');<br/>
&nbsp;&nbsp;v.push_back('7');<br/>
&nbsp;&nbsp;v.push_back('8');<br/>
&nbsp;&nbsp;v.push_back('9');<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Above digits<br/>
&nbsp;&nbsp;v.push_back('!');<br/>
&nbsp;&nbsp;v.push_back('@');<br/>
&nbsp;&nbsp;v.push_back('#');<br/>
&nbsp;&nbsp;v.push_back('$');<br/>
&nbsp;&nbsp;v.push_back('%');<br/>
&nbsp;&nbsp;v.push_back('^');<br/>
&nbsp;&nbsp;v.push_back('&amp;');<br/>
&nbsp;&nbsp;v.push_back('*');<br/>
&nbsp;&nbsp;v.push_back('(');<br/>
&nbsp;&nbsp;v.push_back(')');<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Other interpunction<br/>
&nbsp;&nbsp;v.push_back('~');<br/>
&nbsp;&nbsp;v.push_back('`');<br/>
&nbsp;&nbsp;v.push_back('-');<br/>
&nbsp;&nbsp;v.push_back('_');<br/>
&nbsp;&nbsp;v.push_back('=');<br/>
&nbsp;&nbsp;v.push_back('+');<br/>
&nbsp;&nbsp;v.push_back('[');<br/>
&nbsp;&nbsp;v.push_back(']');<br/>
&nbsp;&nbsp;v.push_back('{');<br/>
&nbsp;&nbsp;v.push_back('}');<br/>
&nbsp;&nbsp;v.push_back(';');<br/>
&nbsp;&nbsp;v.push_back(':');<br/>
&nbsp;&nbsp;v.push_back('\'');<br/>
&nbsp;&nbsp;v.push_back('\"');<br/>
&nbsp;&nbsp;v.push_back('&lt;');<br/>
&nbsp;&nbsp;v.push_back('&gt;');<br/>
&nbsp;&nbsp;v.push_back(',');<br/>
&nbsp;&nbsp;v.push_back('.');<br/>
&nbsp;&nbsp;v.push_back('/');<br/>
&nbsp;&nbsp;v.push_back('?');<br/>
&nbsp;&nbsp;v.push_back('\\');<br/>
&nbsp;&nbsp;v.push_back('|');<br/>
&nbsp;&nbsp;v.push_back(' ');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.2";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2010-01-05: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-01-12: <a href="CppVersion.htm">version</a> 1.1: added <a href="CppVersion.htm">version</a> info",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-04-01: <a href="CppVersion.htm">version</a> 1.2: replaced use of custom <a href="CppIncrease.htm">Increase</a> <b><a href="CppClass.htm">class</a></b> by <a href="CppStdIota.htm">std::iota</a>",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppIncrease.htm">Increase</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz { 5 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdFor_each.htm">std::for_each</a>(v.begin(), v.end(), <a href="CppIncrease.htm">Increase</a>() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIota.htm">std::iota</a>(v.begin(),v.end(),0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) { <a href="CppAssert.htm">assert</a>( v[i] <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(i) ); }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a cde ghijklm opqrstuvwxyzabc efghijklmnopqrstuvwxyzabcdefghi klmnopqrstuvwxyz",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" a",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" a ",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;a&nbsp;&nbsp;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key: CreateTestKeys())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppEncranger.htm">Encranger</a> e(key);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e.Deencrypt(e.Encrypt(s)) <a href="CppOperatorEqual.htm">==</a> s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test encryption with real, decryption with faker<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppEncranger.htm">Encranger</a> faker(key <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faker.Deencrypt(e.Encrypt(s)) <a href="CppOperatorNotEqual.htm">!=</a> s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppEncranger.htm">Encranger</a>::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
