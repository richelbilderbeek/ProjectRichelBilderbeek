<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::locale</title>
  <meta name="description" content="C++ std::locale"/>
  <meta name="keywords" content="C++ std::locale std STL locale local"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStdLocale.htm">std::locale</a></h1>
<p>&nbsp;</p>
<p>
  A <a href="CppStdLocale.htm">std::locale</a> is an <a href="CppStl.htm">STL</a> object that
  represents a set of cultural preferences [1].
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Prefer using <a href="CppStdLocale.htm">std::locale</a>s to writing ad hoc code for culture-sensitive I/O [2]
  </li>
  <li>
    Use <a href="CppStdLocale.htm">std::locale</a>s to meet external (non-C++) standards [3]
  </li>
  <li>
    Think of <a href="CppStdLocale.htm">std::locale</a> as a container of <a href="CppStdFacet.htm">std::facet</a>s [4]
  </li>
  <li>
    Avoid embedding <a href="CppStdLocale.htm">std::locale</a> name strings in program text [5]
  </li>
  <li>
    Keep changes of <a href="CppStdLocale.htm">std::locale</a> to a few places in a program [6]
  </li>
  <li>
    Prefer <a href="CppStdLocale.htm">std::locale</a>-sensitive string comparisons and sorts [7]
  </li>
  <li>
    Let <a href="CppStdLocale.htm">std::locale</a> handle the lifetime of <a href="CppStdFacet.htm">std::facet</a> [8]
  </li>
  <li>
    When writing <a href="CppStdLocale.htm">std::locale</a>-sensitive I/O functions, remember to handle exceptions from user-supplied (overriding) functions [9]
  </li>
  <li>
    Use simple user-defined values to hold values that require <a href="CppStdLocale.htm">std::locale</a>-sensitive I/O (rather than casting to and from values of built-in types) [10]
  </li>
  <li>
    Prefer the character classification functions in which the <a href="CppStdLocale.htm">std::locale</a> is explicit [11]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.1, page 1109: 'A locale is an object that represents a set of cultural preferences, such as how strings are compared, the way numbers appear as human-readable output, and the way characters are represented in external storage.'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.3, page 1157: 'Prefer using locales to writing ad hoc code for culture-sensitive I/O'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.4, page 1157: 'Use locales to meet external (non-C++) standards'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.5, page 1157: 'Think of locale as a container of facets'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.6, page 1157: 'Avoid embedding locale name strings in program text'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.7, page 1157: 'Keep changes of locale to a few places in a program'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.9, page 1157: 'Prefer locale-sensitive string comparisons and sorts'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.11, page 1157: 'Let locale handle the lifetime of facets'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.13, page 1157: 'When writing locale-sensitive I/O functions, remember to handle exceptions from user-supplied (overriding) functions'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.16, page 1157: 'Use simple user-defined values to hold values that require locale-sensitive I/O (rather than casting to and from values of built-in types)'</li>
  <li><!-- 11 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 39.6.18, page 1157: 'Prefer the character classification functions in which the locale is explicit'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
