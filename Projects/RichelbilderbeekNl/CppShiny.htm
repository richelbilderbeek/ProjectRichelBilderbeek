<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Shiny</title>
  <meta name="description" content="C++ Shiny"/>
  <meta name="keywords" content="C++ Shiny profiler code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppShiny.htm">Shiny</a></h1>
<p>&nbsp;</p>
<p><a href="CppShiny.htm">Shiny</a> is a free  <a href="Cpp.htm">C++</a>
<a href="CppProfiler.htm">profiler</a>. It works under (amongst other) <a href="CppGpp.htm">G++</a>. 
I have not got it to work under <a href="CppBuilder.htm">C++ Builder</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Using Shiny with C++ Builder</h2>
<p>You cannot use <a href="CppShiny.htm">Shiny</a> in <a href="CppBuilder.htm">C++ Builder</a>.</p>
<p>&nbsp;</p>
<p>But you can use the <a href="CppPreprocessor.htm">preprocessor</a> to remove the <a href="CppShiny.htm">Shiny</a> <a href="CppMacro.htm">macro's</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> _WIN32<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the program is not <a href="CppCompile.htm">compile</a>d under <a href="Cpp.htm">C++</a> Builder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> just <a href="CppInclude.htm">#include</a> the Shiny header<br/>
&nbsp;&nbsp;<a href="CppInclude.htm">#include</a> "..\..\Shiny\Shiny.h"<br/>
<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the program is <a href="CppCompile.htm">compile</a>d under <a href="Cpp.htm">C++</a> Builder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> remove all macro's.<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> PROFILE_FUNC() ((<b><a href="CppVoid.htm">void</a></b>)0)<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> PROFILER_UPDATE() ((<b><a href="CppVoid.htm">void</a></b>)0)<br/>
&nbsp;&nbsp;<a href="CppDefine.htm">#define</a> PROFILER_OUTPUT(x) ((<b><a href="CppVoid.htm">void</a></b>)0)<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>Suppose we want to compare the runtime speed of the <a href="CppStl.htm">STL</a> 
<a href="CppSort.htm">std::sort</a> and <a href="CppBubbleSort.htm">bubble sort</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppBubbleSort.htm">BubbleSort</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppBubbleSort.htm">BubbleSort</a>(<a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the <a href="CppProfiler.htm">profiler</a> include <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> in its measurements<br/>
&nbsp;&nbsp;PROFILE_FUNC();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>size-i-1; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(v[j] &gt; v[j+1])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.htm">std::swap</a>(v[j],v[j+1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppQuickSort.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> QuickSort(<a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the <a href="CppProfiler.htm">profiler</a> include <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> in its measurements<br/>
&nbsp;&nbsp;PROFILE_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppSort.htm">std::sort</a>(v.begin(),v.end());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppCreateVector.htm">CreateVector</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let the <a href="CppProfiler.htm">profiler</a> include <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> in its measurements<br/>
&nbsp;&nbsp;PROFILE_FUNC();<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(100);<br/>
&nbsp;&nbsp;<a href="CppGenerate.htm">std::generate</a>(v.begin(),v.end(),<a href="CppRand.htm">std::rand</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_runs <a href="CppOperatorAssign.htm">=</a> 10000;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max_int <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::max();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_runs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update the <a href="CppProfiler.htm">profiler</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;PROFILER_UPDATE();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a <a href="CppVector.htm">std::vector</a> of random <a href="CppInt.htm">integer</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppCreateVector.htm">CreateVector</a>(max_int);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bubble-sort a copy of <b><a href="CppThis.htm">this</a></b> <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v_bubble <a href="CppOperatorAssign.htm">=</a> v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBubbleSort.htm">BubbleSort</a>(v_bubble);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Quicksort a copy of <b><a href="CppThis.htm">this</a></b> <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v_quick <a href="CppOperatorAssign.htm">=</a> v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QuickSort(v_quick);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write the <a href="CppProfiler.htm">profiler</a> measurements to file<br/>
&nbsp;&nbsp;PROFILER_OUTPUT("<a href="CppProfiler.htm">profiler</a>.rtf");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Compile the program with for example:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
g++ -o Main UnitMain.cpp ../../Shiny/ShinyManager.cpp ../../Shiny/ShinyNode.cpp ../../Shiny/ShinyNodePool.cpp ../../Shiny/ShinyTools.cpp ../../Shiny/ShinyOutput.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Then run the program and the following text file (called profiler.rtf) is created:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
flat profile hits&nbsp;&nbsp;self&nbsp;&nbsp; time total time<br/>
&lt;root&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0&nbsp;&nbsp;&nbsp;&nbsp;31 us&nbsp;&nbsp; 3% 987 us 103%<br/>
CreateVector 1.0&nbsp;&nbsp; 274 ns&nbsp;&nbsp; 0% 274 ns&nbsp;&nbsp; 0%<br/>
BubbleSort&nbsp;&nbsp; 1.0&nbsp;&nbsp; 954 us 100% 954 us 100%<br/>
QuickSort&nbsp;&nbsp;&nbsp;&nbsp;1.0&nbsp;&nbsp;&nbsp;&nbsp; 1 us&nbsp;&nbsp; 0%&nbsp;&nbsp; 1 us&nbsp;&nbsp; 0%<br/>
<br/>
call tree&nbsp;&nbsp;&nbsp;&nbsp;hits&nbsp;&nbsp;self&nbsp;&nbsp;&nbsp;&nbsp;time total time<br/>
&lt;root&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0&nbsp;&nbsp;&nbsp;&nbsp; 31 us&nbsp;&nbsp; 3% 987 us 103%<br/>
CreateVector 1.0&nbsp;&nbsp;&nbsp;&nbsp;274 ns&nbsp;&nbsp; 0% 274 ns&nbsp;&nbsp; 0%<br/>
BubbleSort&nbsp;&nbsp; 1.0&nbsp;&nbsp;&nbsp;&nbsp;954 us 100% 954 us 100%<br/>
QuickSort&nbsp;&nbsp;&nbsp;&nbsp;1.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 us&nbsp;&nbsp; 0%&nbsp;&nbsp; 1 us&nbsp;&nbsp; 0%<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The program has spent 100% of 103% in the function BubbleSort and only
less then 0.5% in QuickSort. You have now measured that in this case QuickSort
is faster. This was just as expected for large std::vector sizes.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://sourceforge.net/projects/shinyprofiler">Shiny SourceForge website</a></li>
  <li><a href="http://code.google.com/p/shinyprofiler">Shiny Google Code website</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
