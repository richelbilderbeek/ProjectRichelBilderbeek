<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MultiVector</title>
  <meta name="description" content="C++ MultiVector"/>
  <meta name="keywords" content="C++ MultiVector "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMultiVector.htm">MultiVector</a></h1>
<p>&nbsp;</p>
<h2>./CppMultiVector/CppMultiVector.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultiVector/CppMultiVector.pri" border = "1"><tr><td><code>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMultiVector<br/>
<br/>
SOURCES +=<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMultiVector/multivector.cpp<br/>
<br/>
HEADERS&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMultiVector/multivector.h<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../Classes/CppMultiVector/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMultiVector/multivector.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultiVector/multivector.h" border = "1"><tr><td><code>
//---------------------------------------------------------------------------<br/>
/*<br/>
MultiVector, any-dimensional std::vector class<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS&nbsp;&nbsp;A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
*/<br/>
//---------------------------------------------------------------------------<br/>
//From http://www.richelbilderbeek.nl/CppMultiVector.htm<br/>
//---------------------------------------------------------------------------<br/>
#ifndef MULTIVECTOR_H<br/>
#define MULTIVECTOR_H<br/>
<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;string&gt;<br/>
#include &lt;vector&gt;<br/>
<br/>
#pragma GCC diagnostic push<br/>
#pragma GCC diagnostic ignored "-Weffc++"<br/>
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
#include &lt;boost/numeric/conversion/cast.hpp&gt;<br/>
#pragma GCC diagnostic pop<br/>
<br/>
namespace ribi {<br/>
<br/>
template &lt;class T&gt;<br/>
struct MultiVector<br/>
{<br/>
&nbsp;&nbsp;MultiVector() : m_indices{}, m_multivectors{} {}<br/>
<br/>
&nbsp;&nbsp;///CanRetrieve returns if an index/coordinat can be retrieved<br/>
&nbsp;&nbsp;bool CanRetrieve(const std::vector&lt;int&gt;&amp; indices) const<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!indices.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (indices.size() == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (indices[0] &lt; boost::numeric_cast&lt;int&gt;(m_indices.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; copy_indices;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(indices.begin() + 1,indices.end(),std::back_inserter(copy_indices));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(indices[0] &lt; boost::numeric_cast&lt;int&gt;(m_multivectors.size())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return m_multivectors[ indices[0] ].CanRetrieve(copy_indices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;///CreateTable creates a non-recursive table<br/>
&nbsp;&nbsp;const std::vector&lt;std::pair&lt;std::vector&lt;T&gt;,T&gt; &gt; CreateTable() const<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!"TODO");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;std::pair&lt;std::vector&lt;T&gt;,T&gt; &gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return v;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;T&gt;&amp; PeekIndices() const { return m_indices; }<br/>
<br/>
&nbsp;&nbsp;const std::vector&lt;MultiVector&gt;&amp; PeekMultiVectors() const { return m_multivectors; }<br/>
<br/>
&nbsp;&nbsp;///Retrieve retrieves a stored value at a certain, any-dimensional index/coordinat<br/>
&nbsp;&nbsp;const T&amp; Retrieve(const std::vector&lt;int&gt;&amp; indices) const<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!indices.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (!CanRetrieve(indices))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::clog &lt;&lt; "Breakpoint\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(CanRetrieve(indices));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (indices.size() == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(indices[0] &lt; boost::numeric_cast&lt;int&gt;(m_indices.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return m_indices[indices[0] ];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; copy_indices;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(indices.begin() + 1,indices.end(),std::back_inserter(copy_indices));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(indices[0] &lt; boost::numeric_cast&lt;int&gt;(m_multivectors.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return m_multivectors[ indices[0] ].Retrieve(copy_indices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;///Store stores a value at a certain, any-dimensional index/coordinat<br/>
&nbsp;&nbsp;void Store(const std::vector&lt;int&gt;&amp; indices, const T&amp; value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;assert(!indices.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;const int index = indices[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if (indices.size() == 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index + 1 &gt; boost::numeric_cast&lt;int&gt;(m_indices.size()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_indices.resize(index + 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(index &lt; boost::numeric_cast&lt;int&gt;(m_indices.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_indices[index] = value;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;int&gt; copy_indices;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::copy(indices.begin() + 1,indices.end(),std::back_inserter(copy_indices));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index + 1 &gt; boost::numeric_cast&lt;int&gt;(m_multivectors.size()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_multivectors.resize(index + 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(indices[0] &lt; boost::numeric_cast&lt;int&gt;(m_multivectors.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_multivectors[ indices[0] ].Store(copy_indices,value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;private:<br/>
&nbsp;&nbsp;std::vector&lt;T&gt; m_indices;<br/>
&nbsp;&nbsp;std::vector&lt;MultiVector&gt; m_multivectors;<br/>
<br/>
&nbsp;&nbsp;public:<br/>
<br/>
&nbsp;&nbsp;static std::string GetVersion()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return "1.1";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; GetVersionHistory()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;return {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"2011-03-02: version 1.0: initial version",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"2011-03-02: version 1.1: added CanRetrieve and Peek methods"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
} //~namespace ribi<br/>
<br/>
#endif // MULTIVECTOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
