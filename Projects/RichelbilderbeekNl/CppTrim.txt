#include <string>

///Trim leading and trailing whitespace
//From http://www.richelbilderbeek.nl/CppTrim.htm
const std::string TrimStl(const std::string& s)
{
  const int size = s.size();
  int posBegin = -1;
  int posEnd = size-1;
  for (int i=0; i!=size; ++i)
  {
    if (s[i]!=' ' && s[i]!='\n' && s[i]!='\t')
    {
      posBegin = i; break;
    }
  }
  if (posBegin == -1) return "";
  for (int i=size-1; i!=-1; --i)
  {
    if (s[i]!=' ' && s[i]!='\n' && s[i]!='\t')
    {
      posEnd = i; break;
    }
  }

  return s.substr(posBegin,posEnd-posBegin+1);
}

#include <boost/algorithm/string/trim.hpp>

///Trim leading and trailing whitespace
//From http://www.richelbilderbeek.nl/CppTrim.htm
const std::string TrimBoost(const std::string& s)
{
  return boost::algorithm::trim_copy(s);
}


#include <cassert>

int main()
{
  {
    const std::string s = "   x   ";
    const std::string t = TrimStl(s);
    const std::string u = TrimBoost(s);
    assert(t == "x");
    assert(u == "x");
  }
  {
    const std::string s = "\t \n x \n \t ";
    const std::string t = TrimStl(s);
    const std::string u = TrimBoost(s);
    assert(t == "x");
    assert(u == "x");
  }


}
