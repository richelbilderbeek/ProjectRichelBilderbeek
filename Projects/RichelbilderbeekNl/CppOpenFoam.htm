<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>OpenFoam</title>
  <meta name="description" content="C++ OpenFoam"/>
  <meta name="keywords" content="C++ OpenFoam "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppOpenFoam.htm">OpenFoam</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppOpenFoam-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/CppOpenFoam.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/CppOpenFoam.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfiles.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampointsfileitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampointsfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampointindex.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampoint.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamparseerror.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamhelper.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamownerfileitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamownerfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamneighbourfileitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamneighbourfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoammesh.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamheader.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfilenames.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfacesfileitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfacesfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfaceindex.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamface.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamcellindex.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamcell.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamboundaryindex.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamboundaryfileitem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamboundaryfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamboundary.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampatchfieldtypes.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampatchfieldtype.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamthermophysicalpropertiesfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampressurefile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamalphatfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamcontroldictfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamturbulencepropertiesfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamdecomposepardictfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamepsilonfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfvschemesfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfvsolutionfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamkfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamvelocityfieldfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamraspropertiesfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamtemperaturefile.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfiles.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampointsfileitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampointsfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampointindex.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampoint.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamparseerror.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamownerfileitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamownerfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamhelper.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamneighbourfileitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamneighbourfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoammesh.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamheader.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfwd.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfilenames.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfacesfileitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfacesfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfaceindex.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamface.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamcellindex.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamcell.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamboundaryindex.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamboundaryfileitem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamboundaryfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamboundary.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampatchfieldtypes.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampatchfieldtype.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamthermophysicalpropertiesfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoampressurefile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamalphatfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamcontroldictfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamturbulencepropertiesfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamdecomposepardictfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamepsilonfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfvschemesfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamfvsolutionfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamkfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamvelocityfieldfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamraspropertiesfile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/openfoamtemperaturefile.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/Licence.txt<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamalphatfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamalphatfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMALPHAT<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMALPHAT<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM alphat file<br/>
<b><a href="CppStruct.htm">struct</a></b> AlphatFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> AlphatFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBoundaryField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; boundary_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_boundary_field <a href="CppOperatorAssign.htm">=</a> boundary_field; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDimensions(<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,7&gt;&amp; dimensions) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_dimensions <a href="CppOperatorAssign.htm">=</a> dimensions; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInternalField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; internal_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_internal_field <a href="CppOperatorAssign.htm">=</a> internal_field; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_boundary_field;<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,7&gt; m_dimensions;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_internal_field;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> AlphatFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> AlphatFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMALPHAT<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamalphatfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamalphatfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamalphatfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::AlphatFile::AlphatFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_boundary_field{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dimensions{ {} },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_internal_field{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::AlphatFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("volScalarField","0","","alphat");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::AlphatFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::AlphatFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::AlphatFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> AlphatFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dimensions ["<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[0] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[1] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[2] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[3] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[4] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[5] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[6]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "];" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "internalField " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_internal_field <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "boundaryField" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_boundary_field <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamboundary.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamboundary.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMBOUNDARY_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMBOUNDARY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtype.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>A Boundary contains Faces that form a surface boundary<br/>
<b><a href="CppStruct.htm">struct</a></b> Boundary<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Boundary(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt;&amp; faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType type<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Face&gt; &gt;&amp; GetFaces() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_faces; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; &gt;&nbsp;&nbsp;GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_name; }<br/>
&nbsp;&nbsp;PatchFieldType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_type; }<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt; m_faces;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_name;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType m_type;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Boundary&amp; boundary) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Boundary&amp; boundary) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMBOUNDARY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamboundary.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamboundary.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamboundary.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppOstreamH.htm">ostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamface.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtypes.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Boundary::Boundary(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt;&amp; faces,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType type<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_faces(faces),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_name(name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_type(type)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; &gt; <a href="CppRibi.htm">ribi</a>::foam::Boundary::GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; const_face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face <a href="CppOperatorEqual.htm">==</a> const_face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> const_face;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> m_faces.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only check first and last<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorLogicalOr.htm">||</a> v[0] <a href="CppOperatorEqual.htm">==</a> m_faces[0]);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorLogicalOr.htm">||</a> v[ v.size() <a href="CppOperatorMinus.htm">-</a> 1 ] <a href="CppOperatorEqual.htm">==</a> m_faces[ v.size() <a href="CppOperatorMinus.htm">-</a> 1 ]);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Boundary&amp; boundary) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> boundary.m_name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> boundary.m_type <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: boundary.m_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *face <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamboundaryfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamboundaryfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMBOUNDARY<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMBOUNDARY<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfileitem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM boundary file<br/>
<b><a href="CppStruct.htm">struct</a></b> BoundaryFile<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read an OpenFOAM 'boundary' file.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdRuntime_error.htm">std::runtime_error</a> <b><a href="CppIf.htm">if</a></b> file is incorrectly formed<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> BoundaryFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) : BoundaryFile(Parse(filename)) {}<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> BoundaryFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt;&amp; items <a href="CppOperatorAssign.htm">=</a> {});<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt; GetItems() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_items; }<br/>
<br/>
&nbsp;&nbsp;BoundaryFileItem GetItem(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; boundary_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the number of boundaries, the size of m_items, or the first boundary index not available<br/>
&nbsp;&nbsp;BoundaryIndex GetMaxBoundaryIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is the Face belonging to a Boundary?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(<b><a href="CppIf.htm">if</a></b> not, it belongs to a Cell)<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsBoundary(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> CanGet(face_index); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Swap the face indices between<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Swap(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read an OpenFOAM 'boundary' file.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdRuntime_error.htm">std::runtime_error</a> <b><a href="CppIf.htm">if</a></b> file is incorrectly formed<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> BoundaryFile(<a href="CppStdIstream.htm">std::istream</a>&amp; is) : BoundaryFile(Parse(is)) {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items boundary contains<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt; m_items;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is the FaceIndex present among the current items?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGet(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find out which BoundaryFileItem the face belongs to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assumes CanGet(face_index) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;BoundaryFileItem&amp; Find(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read an OpenFOAM 'boundary' file.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdRuntime_error.htm">std::runtime_error</a> <b><a href="CppIf.htm">if</a></b> file is incorrectly formed<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> BoundaryFile Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> BoundaryFile Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryFile&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Read an OpenFOAM 'boundary' file.<br/>
<a href="CppComment.htm">///</a>Throws <a href="CppStdRuntime_error.htm">std::runtime_error</a> <b><a href="CppIf.htm">if</a></b> file is incorrectly formed<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryFile&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMBOUNDARY<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamboundaryfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamboundaryfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryindex.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfileitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::BoundaryFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt;&amp; items)<br/>
&nbsp;&nbsp;: m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_items(items)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::CanGet(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; item: m_items)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> face_index.Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> min <a href="CppOperatorAssign.htm">=</a> item.GetStartFace().Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max <a href="CppOperatorAssign.htm">=</a> min <a href="CppOperatorPlus.htm">+</a> item.GetNfaces();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i &lt; max) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem&amp; <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::Find(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGet(face_index));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> face_index.Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> min <a href="CppOperatorAssign.htm">=</a> m_items[i].GetStartFace().Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max <a href="CppOperatorAssign.htm">=</a> min <a href="CppOperatorPlus.htm">+</a> m_items[i].GetNfaces();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorGreaterEqual.htm">&gt;=</a> min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> j &lt; max) <b><a href="CppReturn.htm">return</a></b> m_items[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::Find");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <b><a href="CppClass.htm">class</a></b>_name <a href="CppOperatorAssign.htm">=</a> "polyBoundaryMesh";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> location&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> "constant" <a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator() <a href="CppOperatorPlus.htm">+</a> "polyMesh";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> note&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> object&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> "boundary";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header(<b><a href="CppClass.htm">class</a></b>_name,location,note,object);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::GetItem(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex&amp; boundary_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(boundary_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(boundary_index &lt; GetMaxBoundaryIndex());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_items[ boundary_index.Get() ];<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::GetMaxBoundaryIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> BoundaryIndex(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is)<br/>
{<br/>
&nbsp;&nbsp;BoundaryFile b;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> b;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tmp_filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName() };<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppCopyFile.htm">CopyFile</a>(filename,tmp_filename);<br/>
&nbsp;&nbsp;Header::CleanFile(tmp_filename);<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(tmp_filename.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile file { Parse(f) };<br/>
&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(tmp_filename);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> file;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some initial data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header("some_name","some_location","some_object");<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt; items;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> "some_name" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType type <a href="CppOperatorAssign.htm">=</a> PatchFieldType::codedFixedValue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex start_face(i * i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoundaryFileItem item(name,type,n_faces,start_face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;items.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFile c(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorEqual.htm">==</a> header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header other_header("some_other_name","some_other_location","some_other_object");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorNotEqual.htm">!=</a> other_header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFile c(other_header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt; other_items;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> "some_other_name" <a href="CppOperatorPlus.htm">+</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType type <a href="CppOperatorAssign.htm">=</a> PatchFieldType::compressible_turbulentTemperatureCoupledBaffleMixed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorPlus.htm">+</a> 123;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex start_face((i * i) <a href="CppOperatorPlus.htm">+</a> 456);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundaryFileItem item(name,type,n_faces,start_face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFile c(header,other_items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stream conversion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoundaryFile c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read from testing file<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> test_index <a href="CppOperatorAssign.htm">=</a> 0; test_index<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>test_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (test_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x1"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_2x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_3x4x5"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("foam::Files::CreateTestFiles: unknown test index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!filename_appendix.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base { GetDefaultHeader().GetObject() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> resources_path { ":/<a href="CppOpenFoam.htm">CppOpenFoam</a>/files/" <a href="CppOperatorPlus.htm">+</a> filename };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f( resources_path.c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.copy(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundaryFile b(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.GetItems().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (!b.GetItems().empty() <a href="CppOperatorLogicalOr.htm">||</a> b.GetItems().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "If a mesh has no non-boundary cells, neighbour can be empty");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::Header::BoundaryFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetHeader() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetHeader())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Headers differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(lhs.GetHeader());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(rhs.GetHeader());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt;&amp; lhs_items <a href="CppOperatorAssign.htm">=</a> lhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt;&amp; rhs_items <a href="CppOperatorAssign.htm">=</a> rhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_items.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_items.size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Number of items differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(lhs_items.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(rhs_items.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> all_items_equal {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEqual.htm">std::equal</a>(lhs_items.begin(),lhs_items.end(),rhs_items.begin())<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (!all_items_equal)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Items differ:");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(all_items_equal);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> all_items_equal;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryFile&amp; f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.m_items.empty()); <a href="CppComment.htm">//</a>Make empty otherwise<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read header<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_header;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read items<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_items <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> opening_bracket <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (c <a href="CppOperatorNotEqual.htm">!=</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorNotEqual.htm">!=</a> '{')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start eating n_items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorMultiplyAssign.htm">*=</a> 10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorMinus.htm">-</a> '0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n <a href="CppOperatorLessEqual.htm">&lt;=</a> 9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorPlusAssign.htm">+=</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;opening_bracket <a href="CppOperatorAssign.htm">=</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(opening_bracket);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundaryFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read once, push n_items <a href="CppTime.htm">time</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;BoundaryFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comments until bracket close<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_close <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (bracket_close <a href="CppOperatorNotEqual.htm">!=</a> ')' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorNotEqual.htm">!=</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close <a href="CppOperatorEqual.htm">==</a> ')' <a href="CppOperatorLogicalOr.htm">||</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '{' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BoundaryFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdCount_if.htm">std::count_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.begin(),f.m_items.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; item)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> item.GetType() <a href="CppOperatorNotEqual.htm">!=</a> PatchFieldType::no_patch_field;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFileItem item: f.m_items)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item.GetType() <a href="CppOperatorEqual.htm">==</a> PatchFieldType::no_patch_field) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamboundaryfileitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamboundaryfileitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMBOUNDARY<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMBOUNDARY<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamfaceindex.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>An item in an OpenFOAM boundary file<br/>
<b><a href="CppStruct.htm">struct</a></b> BoundaryFileItem<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> BoundaryFileItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name <a href="CppOperatorAssign.htm">=</a> "",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType patch_field_type <a href="CppOperatorAssign.htm">=</a> PatchFieldType::empty,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex n_start_face <a href="CppOperatorAssign.htm">=</a> FaceIndex(0)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_name; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNfaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_n_faces; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the first Face its index<br/>
&nbsp;&nbsp;FaceIndex GetStartFace() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_start_face; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the last+1 Face index<br/>
&nbsp;&nbsp;FaceIndex GetEndFace() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;PatchFieldType GetType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_type; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_faces;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_name;<br/>
&nbsp;&nbsp;FaceIndex m_start_face;<br/>
&nbsp;&nbsp;PatchFieldType m_type;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> OpenFoamBoundaryFile;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryFileItem&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryFileItem&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMBOUNDARY<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamboundaryfileitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamboundaryfileitem.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfileitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtypes.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem::BoundaryFileItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType patch_field_type,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex n_start_face<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_faces{n_faces},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_name{name},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_start_face{n_start_face},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_type{patch_field_type}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_n_faces <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_start_face.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex <a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem::GetEndFace() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_start_face <a href="CppOperatorPlus.htm">+</a> FaceIndex(m_n_faces);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFileItem i("some_name",PatchFieldType::empty,123,FaceIndex(456));<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i;<br/>
&nbsp;&nbsp;BoundaryFileItem j;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> j;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorNotEqual.htm">!=</a> j)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::BoundaryFileItem::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetName() <a href="CppOperatorEqual.htm">==</a> rhs.GetName()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetNfaces() <a href="CppOperatorEqual.htm">==</a> rhs.GetNfaces()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetStartFace() <a href="CppOperatorEqual.htm">==</a> rhs.GetStartFace()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetType() <a href="CppOperatorEqual.htm">==</a> rhs.GetType()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; item) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetName() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetType() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nFaces " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetNfaces() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startFace " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetStartFace() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;}" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryFileItem&amp; f)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> bracket_open;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_open;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_open <a href="CppOperatorEqual.htm">==</a> "{");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_text <a href="CppOperatorEqual.htm">==</a> "type");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str.back() <a href="CppOperatorEqual.htm">==</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;type_str.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str.back() <a href="CppOperatorNotEqual.htm">!=</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.m_type <a href="CppOperatorAssign.htm">=</a> PatchFieldTypes::ToType(type_str);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> n_faces_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> n_faces_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_faces_text <a href="CppOperatorEqual.htm">==</a> "nFaces");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_n_faces;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> semicolon;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> semicolon;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (semicolon <a href="CppOperatorNotEqual.htm">!=</a> ";")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(semicolon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(semicolon <a href="CppOperatorEqual.htm">==</a> ";");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> start_face_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> start_face_text;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (start_face_text <a href="CppOperatorNotEqual.htm">!=</a> "startFace")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(start_face_text);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(start_face_text <a href="CppOperatorEqual.htm">==</a> "startFace");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_start_face;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> semicolon;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> semicolon;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(semicolon <a href="CppOperatorEqual.htm">==</a> ";");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close <a href="CppOperatorEqual.htm">==</a> "}");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamboundaryindex.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamboundaryindex.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMBOUNDARYINDEX_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMBOUNDARYINDEX_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> BoundaryIndex<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdInvalid_argument.htm">std::invalid_argument</a> <b><a href="CppIf.htm">if</a></b> the index is invalid<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> BoundaryIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdInvalid_argument.htm">std::invalid_argument</a> <b><a href="CppIf.htm">if</a></b> the <b><a href="CppNew.htm">new</a></b> index is invalid<br/>
&nbsp;&nbsp;BoundaryIndex&amp; <b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs);<br/>
&nbsp;&nbsp;BoundaryIndex&amp; <b><a href="CppOperatorIncrement.htm">operator++</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b>;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Prefix<br/>
&nbsp;&nbsp;BoundaryIndex <b><a href="CppOperatorIncrement.htm">operator++</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b>; <a href="CppComment.htm">//</a>Postfix<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_index;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> BoundaryIndex <b><a href="CppOperatorPlus.htm">operator+</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppConst.htm">const</a></b> BoundaryIndex <b><a href="CppOperatorMinus.htm">operator-</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMBOUNDARYINDEX_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamboundaryindex.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamboundaryindex.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamboundaryindex.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex::BoundaryIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
&nbsp;&nbsp;: m_index(index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_index &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_index);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A BoundaryIndex must be zero or a positive value");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_index &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdInvalid_argument.htm">std::invalid_argument</a>("A BoundaryIndex must be zero or a positive value");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex&amp; <a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex::<b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;m_index <a href="CppOperatorMinusAssign.htm">-=</a> rhs.Get();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A BoundaryIndex must be zero or a positive value");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_index &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"BoundaryIndex::<b><a href="CppOperatorMinus.htm">operator-</a></b>=: BoundaryIndex cannot be negative");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex&amp; <a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex::<b><a href="CppOperatorIncrement.htm">operator++</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_index;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex <a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex::<b><a href="CppOperatorIncrement.htm">operator++</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;BoundaryIndex old(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> old;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face_index.Get();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, BoundaryIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_index.m_index;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorPlus.htm">operator+</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> BoundaryIndex(lhs.Get() <a href="CppOperatorPlus.htm">+</a> rhs.Get());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryIndex <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorMinus.htm">operator-</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> BoundaryIndex(lhs.Get() <a href="CppOperatorMinus.htm">-</a> rhs.Get());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() <a href="CppOperatorEqual.htm">==</a> rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() &lt; rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() &gt; rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs &lt; rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> BoundaryIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs &gt; rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamcell.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamcell.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMCELL_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMCELL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>A Cell contains Faces that enclose a volume<br/>
<a href="CppComment.htm">///</a>These Faces are<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> owned/managed by <b><a href="CppThis.htm">this</a></b> Cell: m_owned_faces<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> owned/managed by a neighbouring Cell: m_faces<br/>
<a href="CppComment.htm">///</a>Faces know<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> the Cell that owns them<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> optionally, the Cell they are also a member of, called 'neighbour'.<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;If <b><a href="CppThis.htm">this</a></b> is <b><a href="CppNullptr.htm">nullptr</a></b>, the Face is a boundary face<br/>
<a href="CppComment.htm">///</a>If a Cell contains a boundary Face, it is a boundary cell<br/>
<b><a href="CppStruct.htm">struct</a></b> Cell<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/owned_faces is a subset of all_faces<br/>
&nbsp;&nbsp;Cell(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> owned_faces <a href="CppOperatorAssign.htm">=</a> {},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> all_faces <a href="CppOperatorAssign.htm">=</a> {}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only assign once<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AssignOwnedFaces(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; owned_faces);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; GetNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;GetOwnedFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; GetOwnedFaces()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_owned_faces; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasFace(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> OwnsFace(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_owned_faces is a subset of m_all_faces<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_all_faces;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_owned_faces is a subset of m_all_faces<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_owned_faces;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Cell&amp; cell) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Cell&amp; cell) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cell&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cell&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cell&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cell&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMCELL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamcell.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamcell.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamcell.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppOstreamH.htm">ostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamface.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Cell::Cell(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> owned_faces,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> all_faces<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_all_faces{all_faces},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owned_faces{owned_faces}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: m_owned_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(m_all_faces.begin(),m_all_faces.end(),face) <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_owned_faces must be a subset of m_all_faces");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Cell::AssignOwnedFaces(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; owned_faces)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_owned_faces.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "owned faces can only be as<b><a href="CppSigned.htm">signed</a></b> once");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!owned_faces.empty());<br/>
&nbsp;&nbsp;m_owned_faces <a href="CppOperatorAssign.htm">=</a> owned_faces;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; &gt; <a href="CppRibi.htm">ribi</a>::foam::Cell::GetOwnedFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owned_faces.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owned_faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; const_face {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face <a href="CppOperatorEqual.htm">==</a> const_face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> const_face;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> m_owned_faces.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only check first and last<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorLogicalOr.htm">||</a> v[0] <a href="CppOperatorEqual.htm">==</a> m_owned_faces[0]);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorLogicalOr.htm">||</a> v[ v.size() <a href="CppOperatorMinus.htm">-</a> 1 ] <a href="CppOperatorEqual.htm">==</a> m_owned_faces[ v.size() <a href="CppOperatorMinus.htm">-</a> 1 ]);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::Cell::HasFace(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; face) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_all_faces.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_owned_faces.size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_owned_faces must be a subset of m_all_faces: there should be more m_all_faces"<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: m_owned_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(m_all_faces.begin(),m_all_faces.end(),face) <a href="CppOperatorEqual.htm">==</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "m_owned_faces must be a subset of m_all_faces: every owned Face must be in m_all_faces"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdCount.htm">std::count</a>(m_all_faces.begin(),m_all_faces.end(),face);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::Cell::OwnsFace(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; face) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdCount.htm">std::count</a>(m_owned_faces.begin(),m_owned_faces.end(),face);<br/>
<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Cell&amp; cell) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: cell.m_owned_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *face <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamcellindex.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamcellindex.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMCELLINDEX_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMCELLINDEX_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> CellIndex<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> CellIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
<br/>
&nbsp;&nbsp;CellIndex&amp; <b><a href="CppOperatorIncrement.htm">operator++</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b>;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Prefix<br/>
&nbsp;&nbsp;CellIndex <b><a href="CppOperatorIncrement.htm">operator++</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b>; <a href="CppComment.htm">//</a>Postfix<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_index;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, CellIndex&amp; cell_index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; cell_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, CellIndex&amp; cell_index);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMCELLINDEX_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamcellindex.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamcellindex.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamcellindex.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::CellIndex::CellIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
&nbsp;&nbsp;: m_index(index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A CellIndex must be minus one or higher");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::CellIndex&amp; <a href="CppRibi.htm">ribi</a>::foam::CellIndex::<b><a href="CppOperatorIncrement.htm">operator++</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_index;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::CellIndex <a href="CppRibi.htm">ribi</a>::foam::CellIndex::<b><a href="CppOperatorIncrement.htm">operator++</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;CellIndex old(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> old;<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::CellIndex::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::CellIndex::Test");<br/>
&nbsp;&nbsp;CellIndex a(2);<br/>
&nbsp;&nbsp;CellIndex b(2);<br/>
&nbsp;&nbsp;CellIndex c(3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> a);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::CellIndex::Test successfully");<br/>
<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; cell_index) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> cell_index.Get();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, CellIndex&amp; cell_index)<br/>
{<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cell_index.m_index;<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!is)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() <a href="CppOperatorEqual.htm">==</a> rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() &lt; rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() &gt; rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs &lt; rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> CellIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs &gt; rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamcontroldictfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamcontroldictfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMCONTROLDICT<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMCONTROLDICT<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM thermophysicalProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> ControlDictFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> ControlDictFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetAdjust<a href="CppTime.htm">Time</a>Step(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> adjust_<a href="CppTime.htm">time</a>_step) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_adjust_<a href="CppTime.htm">time</a>_step <a href="CppOperatorAssign.htm">=</a> adjust_<a href="CppTime.htm">time</a>_step; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppApplication.htm">application</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_<a href="CppApplication.htm">application</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppApplication.htm">application</a>; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDeltaT(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_t) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_delta_t <a href="CppOperatorAssign.htm">=</a> delta_t; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetEnd<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> end_<a href="CppTime.htm">time</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_end_<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> end_<a href="CppTime.htm">time</a>; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPurgeWrite(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> purge_write) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_purge_write <a href="CppOperatorAssign.htm">=</a> purge_write; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRun<a href="CppTime.htm">Time</a>Modifiable(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> run_<a href="CppTime.htm">time</a>_modifiable) { m_run_<a href="CppTime.htm">time</a>_modifiable <a href="CppOperatorAssign.htm">=</a> run_<a href="CppTime.htm">time</a>_modifiable; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetStartFrom(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; start_from) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_start_from <a href="CppOperatorAssign.htm">=</a> start_from; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetStart<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> start_<a href="CppTime.htm">time</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_start_<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> start_<a href="CppTime.htm">time</a>; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetStopAt(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; stop_at) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_stop_at <a href="CppOperatorAssign.htm">=</a> stop_at; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>Format(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppTime.htm">time</a>_format) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_<a href="CppTime.htm">time</a>_format <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>_format; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>Precision(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>_precision) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_<a href="CppTime.htm">time</a>_precision <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>_precision; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWriteCompression(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; write_compression) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_write_compression <a href="CppOperatorAssign.htm">=</a> write_compression; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWriteControl(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; write_control) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_write_control <a href="CppOperatorAssign.htm">=</a> write_control; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWriteFormat(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; write_format) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_write_format <a href="CppOperatorAssign.htm">=</a> write_format; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWriteInterval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> write_interval) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_write_interval <a href="CppOperatorAssign.htm">=</a> write_interval; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWritePrecision(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> write_precision) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_write_precision <a href="CppOperatorAssign.htm">=</a> write_precision; }<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_adjust_<a href="CppTime.htm">time</a>_step;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_<a href="CppApplication.htm">application</a>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_delta_t;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_end_<a href="CppTime.htm">time</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_purge_write;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_start_from;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_start_<a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_stop_at;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_<a href="CppTime.htm">time</a>_format;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_<a href="CppTime.htm">time</a>_precision;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_run_<a href="CppTime.htm">time</a>_modifiable;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_write_compression;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_write_control;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_write_format;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_write_interval;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_write_precision;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ControlDictFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ControlDictFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMCONTROLDICT<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamcontroldictfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamcontroldictfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamcontroldictfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::ControlDictFile::ControlDictFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
)<br/>
&nbsp;&nbsp;: m_adjust_<a href="CppTime.htm">time</a>_step{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppApplication.htm">application</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_delta_t{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_end_<a href="CppTime.htm">time</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_purge_write{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_start_from{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_start_<a href="CppTime.htm">time</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_stop_at{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>_format{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>_precision{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_run_<a href="CppTime.htm">time</a>_modifiable{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_write_compression{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_write_control{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_write_format{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_write_interval{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_write_precision{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::ControlDictFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("dictionary","system","","controlDict");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::ControlDictFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::ControlDictFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::ControlDictFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ControlDictFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppApplication.htm">application</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_<a href="CppApplication.htm">application</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "startFrom " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_start_from <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "start<a href="CppTime.htm">Time</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_start_<a href="CppTime.htm">time</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "stopAt " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_stop_at <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "end<a href="CppTime.htm">Time</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_end_<a href="CppTime.htm">time</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "deltaT " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_delta_t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "writeControl " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_write_control <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "writeInterval " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_write_interval <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "purgeWrite " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_purge_write <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "writeFormat " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_write_format <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "writePrecision " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_write_precision <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "writeCompression " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_write_compression <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppTime.htm">time</a>Format " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_<a href="CppTime.htm">time</a>_format <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppTime.htm">time</a>Precision " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_<a href="CppTime.htm">time</a>_precision <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "run<a href="CppTime.htm">Time</a>Modifiable " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (f.m_run_<a href="CppTime.htm">time</a>_modifiable ? "yes" : "no") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "adjust<a href="CppTime.htm">Time</a>Step " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (f.m_adjust_<a href="CppTime.htm">time</a>_step ? "yes" : "no") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamdecomposepardictfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamdecomposepardictfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMDECOMPOSEPARDICT<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMDECOMPOSEPARDICT<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM thermophysicalProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> DecomposeParDictFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> DecomposeParDictFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> DecomposeParDictFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> DecomposeParDictFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMDECOMPOSEPARDICT<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamdecomposepardictfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamdecomposepardictfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamdecomposepardictfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::DecomposeParDictFile::DecomposeParDictFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
)<br/>
&nbsp;&nbsp;: m_header{header}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::DecomposeParDictFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("dictionary","system","","decomposeParDict");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::DecomposeParDictFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::OpenFoamDecomposeParDictFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::OpenFoamDecomposeParDictFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> DecomposeParDictFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "numberOfSubdomains 4;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppMemberFunction.htm">member function</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	scotch;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "simpleCoeffs\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;n			( 4 1 1 );\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;delta		0.001;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "hierarchicalCoeffs\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;n			( 1 1 1 );\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;delta		0.001;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;order		xyz;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "metisCoeffs\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;processorWeights	( 1 1 1 1 );\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "manualCoeffs\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;dataFile		"";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "distributed		no;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "roots			( );\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamepsilonfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamepsilonfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMEPSILON<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMEPSILON<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM epsilon file<br/>
<b><a href="CppStruct.htm">struct</a></b> EpsilonFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> EpsilonFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> EpsilonFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> EpsilonFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMEPSILON<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamepsilonfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamepsilonfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamepsilonfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamdecomposepardictfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::EpsilonFile::EpsilonFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
)<br/>
&nbsp;&nbsp;: m_header{header}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::EpsilonFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("volScalarField","0","","epsilon");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::EpsilonFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::OpenFoamEpsilonFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::OpenFoamEpsilonFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> EpsilonFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dimensions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 0 2 <a href="CppOperatorMinus.htm">-</a>3 0 0 0 0 ];\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "internalField&nbsp;&nbsp; uniform 500000;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "boundaryField\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	inlet\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "		type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	outlet\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp; 	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	side_CW\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	side_CCW\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		zeroGradient;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " \n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	<b><a href="CppDefault.htm">default</a></b>Faces\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	type		compressible::epsilonWall<a href="CppFunction.htm">Function</a>;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	value		uniform 500000;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;	}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamface.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamface.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMFACE_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMFACE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppIfndef.htm">#ifndef</a> _WIN32<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/polygon.hpp&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>An OpenFOAM face:<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> has a collection of <a href="CppPointer.htm">point</a>s/vertices/coordinats<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> has a/no neighbouring cell<br/>
<a href="CppComment.htm">///</a><a href="CppOperatorMinus.htm">-</a> has a/no cell owning <b><a href="CppThis.htm">this</a></b> face<br/>
<b><a href="CppStruct.htm">struct</a></b> Face<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
<br/>
&nbsp;&nbsp;Face(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; neighbour,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;Face(<b><a href="CppConst.htm">const</a></b> Face&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Face&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Face&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only assign once<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AssignNeighbour(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; neighbour) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can only assign once<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AssignOwner(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; owner) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; GetNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_neighbour; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Cell&gt; GetOwner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_owner; }<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cell&gt; GetOwner()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt; Get<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D&gt; &gt;&amp;Get<a href="CppPoint.htm">Point</a>s()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s; }<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If <b><a href="CppThis.htm">this</a></b> Face has no Neighbour, <b><a href="CppThis.htm">this</a></b> is <b><a href="CppNullptr.htm">nullptr</a></b><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; m_neighbour;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If <b><a href="CppThis.htm">this</a></b> Face has no Owner, <b><a href="CppThis.htm">this</a></b> is <b><a href="CppNullptr.htm">nullptr</a></b><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; m_owner;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppPointer.htm">point</a>s/vertices/coordinats <b><a href="CppThis.htm">this</a></b> face consists of<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_<a href="CppPointer.htm">point</a>s;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Calculate the center of the Face<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; CalcCenter(<b><a href="CppConst.htm">const</a></b> Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Face&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Face&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Face&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<a href="CppComment.htm">//</a><b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Face&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt;&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMFACE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamface.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamface.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamface.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppOstreamH.htm">ostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamcell.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Face::Face(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; neighbour,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s<br/>
)<br/>
&nbsp;&nbsp;: m_neighbour(neighbour),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owner(owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(<a href="CppPointer.htm">point</a>s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_neighbour);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_owner);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> p: m_<a href="CppPointer.htm">point</a>s) { <a href="CppAssert.htm">assert</a>(p); }<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face::AssignNeighbour(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Cell&gt; neighbour) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_neighbour <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "neighbour can only be as<b><a href="CppSigned.htm">signed</a></b> once");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(neighbour);<br/>
&nbsp;&nbsp;m_neighbour <a href="CppOperatorAssign.htm">=</a> neighbour;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face::AssignOwner(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Cell&gt; owner) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_owner <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only assign owner once");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(owner);<br/>
<br/>
&nbsp;&nbsp;m_owner <a href="CppOperatorAssign.htm">=</a> owner;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Cell&gt; <a href="CppRibi.htm">ribi</a>::foam::Face::GetOwner() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (m_owner <a href="CppOperatorLogicalOr.htm">||</a> !m_owner) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Allow Face to have no owner");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_owner;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::foam::Face::Get<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; <a href="CppPointer.htm">point</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; const_<a href="CppPointer.htm">point</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a> <a href="CppOperatorEqual.htm">==</a> const_<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> const_<a href="CppPointer.htm">point</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> m_<a href="CppPointer.htm">point</a>s.size());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only check first and last<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorLogicalOr.htm">||</a> v[0] <a href="CppOperatorEqual.htm">==</a> m_<a href="CppPointer.htm">point</a>s[0]);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorLogicalOr.htm">||</a> v[ v.size() <a href="CppOperatorMinus.htm">-</a> 1 ] <a href="CppOperatorEqual.htm">==</a> m_<a href="CppPointer.htm">point</a>s[ v.size() <a href="CppOperatorMinus.htm">-</a> 1 ]);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; <a href="CppRibi.htm">ribi</a>::foam::CalcCenter(<b><a href="CppConst.htm">const</a></b> Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
<br/>
&nbsp;&nbsp;Coordinat3D d(0.0,0.0,0.0);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; c: face.Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.set&lt;0&gt;(d.get&lt;0&gt;() <a href="CppOperatorPlus.htm">+</a> c-&gt;get&lt;0&gt;());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.set&lt;1&gt;(d.get&lt;1&gt;() <a href="CppOperatorPlus.htm">+</a> c-&gt;get&lt;1&gt;());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.set&lt;2&gt;(d.get&lt;2&gt;() <a href="CppOperatorPlus.htm">+</a> c-&gt;get&lt;2&gt;());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>d <a href="CppOperatorPlusAssign.htm">+=</a> (*c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>d <a href="CppOperatorDivideAssign.htm">/=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(face.Get<a href="CppPoint.htm">Point</a>s().size());<br/>
&nbsp;&nbsp;d.set&lt;0&gt;(d.get&lt;0&gt;() <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(face.Get<a href="CppPoint.htm">Point</a>s().size()));<br/>
&nbsp;&nbsp;d.set&lt;1&gt;(d.get&lt;1&gt;() <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(face.Get<a href="CppPoint.htm">Point</a>s().size()));<br/>
&nbsp;&nbsp;d.set&lt;2&gt;(d.get&lt;2&gt;() <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(face.Get<a href="CppPoint.htm">Point</a>s().size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&amp; face) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (face.m_neighbour)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only display the <a href="CppAddress.htm">address</a> of a neighbour to prevent recursion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face.m_neighbour);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face.m_neighbour;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face.m_owner <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Every Face has an owner");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (face.m_owner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only display the <a href="CppAddress.htm">address</a> of a owner to prevent recursion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face.m_owner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face.m_owner;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; coordinat: face.m_<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(coordinat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ToStr(*coordinat) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfaceindex.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfaceindex.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMFACEINDEX_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMFACEINDEX_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> FaceIndex<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdInvalid_argument.htm">std::invalid_argument</a> <b><a href="CppIf.htm">if</a></b> the index is invalid<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FaceIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdInvalid_argument.htm">std::invalid_argument</a> <b><a href="CppIf.htm">if</a></b> the <b><a href="CppNew.htm">new</a></b> index is invalid<br/>
&nbsp;&nbsp;FaceIndex&amp; <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs);<br/>
&nbsp;&nbsp;FaceIndex&amp; <b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs);<br/>
&nbsp;&nbsp;FaceIndex&amp; <b><a href="CppOperatorIncrement.htm">operator++</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b>;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Prefix<br/>
&nbsp;&nbsp;FaceIndex <b><a href="CppOperatorIncrement.htm">operator++</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b>; <a href="CppComment.htm">//</a>Postfix<br/>
&nbsp;&nbsp;FaceIndex&amp; <b><a href="CppOperatorDecrement.htm">operator--</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b>;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Prefix<br/>
&nbsp;&nbsp;FaceIndex <b><a href="CppOperatorDecrement.htm">operator--</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b>; <a href="CppComment.htm">//</a>Postfix<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_index;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FaceIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FaceIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> FaceIndex <b><a href="CppOperatorPlus.htm">operator+</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppConst.htm">const</a></b> FaceIndex <b><a href="CppOperatorMinus.htm">operator-</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMFACEINDEX_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfaceindex.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfaceindex.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamfaceindex.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex::FaceIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
&nbsp;&nbsp;: m_index(index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_index &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_index);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A FaceIndex must be zero or a positive value");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_index &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdInvalid_argument.htm">std::invalid_argument</a>("A FaceIndex must be zero or a positive value");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; <a href="CppRibi.htm">ribi</a>::foam::FaceIndex::<b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;m_index <a href="CppOperatorPlusAssign.htm">+=</a> rhs.Get();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A FaceIndex must be zero or a positive value, must have overflowed");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_index &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"FaceIndex::<b><a href="CppOperatorPlus.htm">operator+</a></b>=: FaceIndex cannot be negative, must have overflowed");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; <a href="CppRibi.htm">ribi</a>::foam::FaceIndex::<b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;m_index <a href="CppOperatorMinusAssign.htm">-=</a> rhs.Get();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A FaceIndex must be zero or a positive value");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_index &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"FaceIndex::<b><a href="CppOperatorMinus.htm">operator-</a></b>=: FaceIndex cannot be negative");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; <a href="CppRibi.htm">ribi</a>::foam::FaceIndex::<b><a href="CppOperatorIncrement.htm">operator++</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_index;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex <a href="CppRibi.htm">ribi</a>::foam::FaceIndex::<b><a href="CppOperatorIncrement.htm">operator++</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;FaceIndex old(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> old;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; <a href="CppRibi.htm">ribi</a>::foam::FaceIndex::<b><a href="CppOperatorDecrement.htm">operator--</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>m_index;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex <a href="CppRibi.htm">ribi</a>::foam::FaceIndex::<b><a href="CppOperatorDecrement.htm">operator--</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;FaceIndex old(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> old;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face_index.Get();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FaceIndex&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_index.m_index;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::FaceIndex <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorPlus.htm">operator+</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> FaceIndex(lhs.Get() <a href="CppOperatorPlus.htm">+</a> rhs.Get());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::FaceIndex <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorMinus.htm">operator-</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> FaceIndex(lhs.Get() <a href="CppOperatorMinus.htm">-</a> rhs.Get());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() <a href="CppOperatorEqual.htm">==</a> rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() &lt; rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() &gt; rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs &lt; rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs &gt; rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfacesfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfacesfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMFACES<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMFACES<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfacesfileitem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM boundary file<br/>
<b><a href="CppStruct.htm">struct</a></b> FacesFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FacesFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) : FacesFile(Parse(filename)) {}<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FacesFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt;&amp; items <a href="CppOperatorAssign.htm">=</a> {});<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt; GetItems() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_items; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assumes CanGetItem is <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; GetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the number of faces, the size of m_items, or the first face index not available<br/>
&nbsp;&nbsp;FaceIndex GetMaxFaceIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FacesFile(<a href="CppStdIstream.htm">std::istream</a>&amp; is) : FacesFile(Parse(is)) {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items faces contains<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt; m_items;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> FacesFile Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> FacesFile Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FacesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FacesFile&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> FacesFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> FacesFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FacesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FacesFile&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMFACES<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfacesfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfacesfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamfacesfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfacesfileitem.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfaceindex.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamparseerror.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FacesFile::FacesFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt;&amp; items)<br/>
&nbsp;&nbsp;: m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_items(items)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::FacesFile::CanGetItem(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face_index.Get() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size());<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::FacesFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("faceList","constant/polyMesh","","faces");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::FacesFileItem&amp; <a href="CppRibi.htm">ribi</a>::foam::FacesFile::GetItem(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetItem(face_index));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_items[ face_index.Get() ];<br/>
}<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FaceIndex <a href="CppRibi.htm">ribi</a>::foam::FacesFile::GetMaxFaceIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> FaceIndex(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FacesFile <a href="CppRibi.htm">ribi</a>::foam::FacesFile::Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is)<br/>
{<br/>
&nbsp;&nbsp;FacesFile b;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> b;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FacesFile <a href="CppRibi.htm">ribi</a>::foam::FacesFile::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tmp_filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName() };<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppCopyFile.htm">CopyFile</a>(filename,tmp_filename);<br/>
&nbsp;&nbsp;Header::CleanFile(tmp_filename);<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(tmp_filename.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFile file { Parse(f) };<br/>
&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(tmp_filename);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> file;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::FacesFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::FacesFile::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some initial data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header("some_name","some_location","some_object");<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt; items;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FacesFileItem item( <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt;(i,<a href="CppPoint.htm">Point</a>Index(i)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;items.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFile c(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorEqual.htm">==</a> header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header other_header("some_other_name","some_other_location","some_other_object");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorNotEqual.htm">!=</a> other_header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFile c(other_header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt; other_items;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FacesFileItem item( <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt;(i+1,<a href="CppPoint.htm">Point</a>Index(i*i)) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFile c(header,other_items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stream conversion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FacesFile c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read from testing file<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> test_index <a href="CppOperatorAssign.htm">=</a> 0; test_index<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>test_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (test_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x1"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_2x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_3x4x5"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("foam::Files::CreateTestFiles: unknown test index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!filename_appendix.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base { GetDefaultHeader().GetObject() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> resources_path { ":/<a href="CppOpenFoam.htm">CppOpenFoam</a>/files/" <a href="CppOperatorPlus.htm">+</a> filename };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f( resources_path.c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.copy(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FacesFile b(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.GetItems().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (!b.GetItems().empty() <a href="CppOperatorLogicalOr.htm">||</a> b.GetItems().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "If a mesh has no non-bhoundary cells, neighbour can be empty");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::Header::FacesFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> FacesFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetHeader() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetHeader())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt;&amp; lhs_items <a href="CppOperatorAssign.htm">=</a> lhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt;&amp; rhs_items <a href="CppOperatorAssign.htm">=</a> rhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_items.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_items.size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(lhs_items.begin(),lhs_items.end(),rhs_items.begin());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> FacesFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FacesFile&amp; f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.m_items.empty()); <a href="CppComment.htm">//</a>Make empty otherwise<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read header<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_header;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read items<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_items <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> opening_bracket <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (c <a href="CppOperatorNotEqual.htm">!=</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorNotEqual.htm">!=</a> '{')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start eating n_items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorMultiplyAssign.htm">*=</a> 10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorMinus.htm">-</a> '0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n <a href="CppOperatorLessEqual.htm">&lt;=</a> 9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorPlusAssign.htm">+=</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;opening_bracket <a href="CppOperatorAssign.htm">=</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(opening_bracket);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FacesFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read once, push n_items <a href="CppTime.htm">time</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;FacesFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comments until bracket close<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_close <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (bracket_close <a href="CppOperatorNotEqual.htm">!=</a> ')' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorNotEqual.htm">!=</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close <a href="CppOperatorEqual.htm">==</a> ')' <a href="CppOperatorLogicalOr.htm">||</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '{' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FacesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_items.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFileItem item: f.m_items)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfacesfileitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfacesfileitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMFACES<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMFACES<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>index.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>An item in an OpenFOAM 'faces' file<br/>
<b><a href="CppStruct.htm">struct</a></b> FacesFileItem<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FacesFileItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt;&amp; <a href="CppPointer.htm">point</a>_indices <a href="CppOperatorAssign.htm">=</a> {}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt;&amp; Get<a href="CppPoint.htm">Point</a>Indices() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>_indices; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt; m_<a href="CppPointer.htm">point</a>_indices;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> OpenFoamFacesFile;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FacesFileItem&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FacesFileItem&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMFACES<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfacesfileitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfacesfileitem.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamfacesfileitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamparseerror.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FacesFileItem::FacesFileItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt;&amp; <a href="CppPointer.htm">point</a>_indices<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_<a href="CppPointer.htm">point</a>_indices{<a href="CppPointer.htm">point</a>_indices}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppPoint.htm">Point</a>Index index: m_<a href="CppPointer.htm">point</a>_indices)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Sure, there is a <a href="CppPointer.htm">point</a> with index 0");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::FacesFileItem::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::FacesFileItem::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FacesFileItem i( { <a href="CppPoint.htm">Point</a>Index(1),<a href="CppPoint.htm">Point</a>Index(2),<a href="CppPoint.htm">Point</a>Index(3),<a href="CppPoint.htm">Point</a>Index(4) } );<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i;<br/>
&nbsp;&nbsp;FacesFileItem j;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> j;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorNotEqual.htm">!=</a> j)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::FacesFileItem::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.Get<a href="CppPoint.htm">Point</a>Indices() <a href="CppOperatorEqual.htm">==</a> rhs.Get<a href="CppPoint.htm">Point</a>Indices()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; item) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.Get<a href="CppPoint.htm">Point</a>Indices().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "("<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index i: item.Get<a href="CppPoint.htm">Point</a>Indices()) { s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "; }<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t { s.str() };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.back() <a href="CppOperatorEqual.htm">==</a> ' ');<br/>
&nbsp;&nbsp;t.pop_back();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.back() <a href="CppOperatorNotEqual.htm">!=</a> ' ');<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, FacesFileItem&amp; f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.Get<a href="CppPoint.htm">Point</a>Indices().empty()); <a href="CppComment.htm">//</a>Or empty it<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_nodes <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> n_nodes;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_nodes <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> ParseError();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_nodes &gt; 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_open;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_open;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_open <a href="CppOperatorEqual.htm">==</a> '(');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_nodes; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.m_<a href="CppPointer.htm">point</a>_indices.push_back(node);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close <a href="CppOperatorEqual.htm">==</a> ')');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfilenames.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfilenames.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAM<a href="CppCfile.htm">FILE</a>NAMES_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAM<a href="CppCfile.htm">FILE</a>NAMES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppComment.htm">//</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Filenames used <b><a href="CppFor.htm">for</a></b> OpenFOAM<br/>
<b><a href="CppStruct.htm">struct</a></b> Filenames<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its velocity field<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetAlphat() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename the resulting boundary (needed by OpenFoam) will be written to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must use Win32 backslashes<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetBoundary() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename that indicates that <b><a href="CppThis.htm">this</a></b> is an OpenFOAM <b><a href="CppCase.htm">case</a></b><br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetCase() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its controlDict<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetControlDict() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename the resulting faces will be written to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must use Win32 backslashes<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename of the OpenFOAM solver schemes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must use Win32 backslashes<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetFvSchemes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename of the OpenFOAM solver solution<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must use Win32 backslashes<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetFvSolution() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename the resulting neighbour (needed by OpenFOAM) will be written to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must use Win32 backslashes<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename that indicates that <b><a href="CppThis.htm">this</a></b> is an OpenFOAM <b><a href="CppCase.htm">case</a></b><br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetOpenFoamCase() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetCase(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its controlDict<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetOpenFoamControlDict() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetControlDict(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename of the OpenFOAM solver schemes<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetOpenFoamFvSchemes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetFvSchemes(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename of the OpenFOAM solver solution<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetOpenFoamFvSolution() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetFvSolution(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its pressure field<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetOpenFoamPressureField() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetPressureField(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its TransportProperties<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetOpenFoamTransportProperties() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetTransportProperties(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its velocity field<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetOpenFoamVelocityField() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> GetVelocityField(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename the resulting owner (needed by OpenFOAM) will be written to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must use Win32 backslashes<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetOwner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename the resulting nodes will be written to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must use Win32 backslashes<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its pressure field<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetPressureField() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its pressure field<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetTemperatureField() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its thermophysicalProperties<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetThermophysicalProperties() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its TransportProperties<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetTransportProperties() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its TransportProperties<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetTurbulenceProperties() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The filename <b><a href="CppFor.htm">for</a></b> the OpenFOAM its <b><a href="CppCase.htm">case</a></b> its velocity field<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetVelocityField() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Filenames&amp; filenames) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAM<a href="CppCfile.htm">FILE</a>NAMES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfilenames.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfilenames.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamfilenames.h"<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "parameterfilenamesopenfoam.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetAll() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetBoundary(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetFaces(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetNeighbour(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetCase(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetOwner(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppPoint.htm">Point</a>s()<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetAlphat() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "alphat"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetBoundary() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "polyMesh"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "boundary"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "polyMesh"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "faces"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "polyMesh"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "neighbour"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetCase() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>("<b><a href="CppCase.htm">case</a></b>.foam");<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetControlDict() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"system"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "controlDict"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetFvSchemes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"system"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "fvSchemes"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetFvSolution() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"system"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "fvSolution"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetOwner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "polyMesh"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "owner"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::Get<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "polyMesh"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "<a href="CppPointer.htm">point</a>s"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetPressureField() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "p"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetTemperatureField() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "T"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetThermophysicalProperties() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "thermophysicalProperties"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetTransportProperties() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "transportProperties"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetTurbulenceProperties() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "turbulenceProperties"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::Filenames::GetVelocityField() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdString.htm">std::string</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "U"<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Filenames&amp; filenames) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("filename_boundary",filenames.GetBoundary())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("filename_faces",filenames.GetFaces())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("filename_neightbour",filenames.GetNeighbour())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("filename_openfoam",filenames.GetCase())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("filename_owner",filenames.GetOwner())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("filename_<a href="CppPointer.htm">point</a>s",filenames.Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("parameter_filenames_openfoam",s.str());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfiles.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfiles.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAM<a href="CppCfile.htm">FILE</a>S_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAM<a href="CppCfile.htm">FILE</a>S_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Files contains the info of all files in an OpenFOAM folder<br/>
<a href="CppComment.htm">///</a>This info can be used to create a Mesh<br/>
<a href="CppComment.htm">///</a>After creating a Files, these files can be deleted<br/>
<a href="CppComment.htm">///</a>Use CreateCopy to let these files be recreated again<br/>
<b><a href="CppStruct.htm">struct</a></b> Files<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Builds up Files from the current or <a href="CppAny.htm">any</a> folder<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use an empty string to build up from current folder<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Files(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: Files(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateBoundary(folder_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateFaces(folder_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateNeighbour(folder_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateOwner(folder_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create<a href="CppPoint.htm">Point</a>s(folder_name)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) { }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Builds up a Files from its information or from nothing<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Files(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; boundary <a href="CppOperatorAssign.htm">=</a> CreateDefaultBoundary(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; faces <a href="CppOperatorAssign.htm">=</a> CreateDefaultFaces(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;NeighbourFile&gt; neighbour <a href="CppOperatorAssign.htm">=</a> CreateDefaultNeighbour(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; owner <a href="CppOperatorAssign.htm">=</a> CreateDefaultOwner(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; <a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> CreateDefault<a href="CppPoint.htm">Point</a>s()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;Files(<b><a href="CppConst.htm">const</a></b> Files&amp; other);<br/>
&nbsp;&nbsp;Files&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Files&amp; rhs) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a copy of the complete file structure of Files in the copy folder name<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> CreateCopy(<b><a href="CppConst.htm">const</a></b> Files&amp; files, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> copy_folder_name) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create test files in the correct OpenFOAM folder structure<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/These files are obtained from the <a href="CppOperatorDivide.htm">/</a><a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>.qrc resources file<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> CreateTestFiles(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> test_index);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create valid test Files<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/0: empty Files<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/1: Cube<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2: 1x2 cubes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/3: 2x2 cubes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Files<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTestFiles() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> BoundaryFile&gt; GetBoundary() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_boundary; }<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> FacesFile&gt; GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_faces; }<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> NeighbourFile&gt; GetNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_neighbour; }<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> OwnerFile&gt; GetOwner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_owner; }<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&gt; Get<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Swap(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> FaceIndex&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; m_boundary;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; m_faces;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;NeighbourFile&gt; m_neighbour;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; m_owner;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; m_<a href="CppPointer.htm">point</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> correctless<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdLogic_error.htm">std::logic_error</a> <b><a href="CppIf.htm">if</a></b> there are incorrectnesses<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CheckMe() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; CreateBoundary(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; CreateDefaultBoundary() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; CreateDefaultFaces() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;NeighbourFile&gt; CreateDefaultNeighbour() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; CreateDefaultOwner() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; CreateDefault<a href="CppPoint.htm">Point</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; CreateFaces(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates the folder structure needed by OpenFOAM<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppCreateFolder.htm">CreateFolder</a>s(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Filenames&gt; CreateFilenames() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;NeighbourFile&gt; CreateNeighbour(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; CreateOwner(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; Create<a href="CppPoint.htm">Point</a>s(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Write all info to a single stream. Use CreateCopy to write all info<br/>
<a href="CppComment.htm">///</a>to an OpenFOAM folder structure with multiple files<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Files&amp; files) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Files&amp; lhs, <b><a href="CppConst.htm">const</a></b> Files&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Files&amp; lhs, <b><a href="CppConst.htm">const</a></b> Files&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAM<a href="CppCfile.htm">FILE</a>S_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfiles.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfiles.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamfiles.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppMake_shared.htm">make_shared</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfacesfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamneighbourfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamownerfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfilenames.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>sfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppRibi.htm">ribi</a>::foam::Files::Files(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name)<br/>
&nbsp;&nbsp;: m_boundary(CreateBoundary(folder_name)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces(CreateFaces(folder_name)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_neighbour(CreateNeighbour(folder_name)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owner(CreateOwner(folder_name)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(Create<a href="CppPoint.htm">Point</a>s(folder_name))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(folder_name));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_boundary);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_faces);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_neighbour);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_owner);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppPointer.htm">point</a>s);<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Files::Files(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; boundary,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; faces,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;NeighbourFile&gt; neighbour,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; <a href="CppPointer.htm">point</a>s<br/>
) : m_boundary(boundary),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces(faces),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_neighbour(neighbour),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owner(owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(<a href="CppPointer.htm">point</a>s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_boundary);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_faces);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_neighbour);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_owner);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;CheckMe();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Files::Files(<b><a href="CppConst.htm">const</a></b> Files&amp; other)<br/>
&nbsp;&nbsp;: m_boundary(<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;BoundaryFile&gt;(*other.m_boundary)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces(<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;FacesFile&gt;(*other.m_faces)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_neighbour(<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;NeighbourFile&gt;(*other.m_neighbour)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owner(<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;OwnerFile&gt;(*other.m_owner)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt;(*other.m_<a href="CppPointer.htm">point</a>s))<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_boundary);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_faces);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_neighbour);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_owner);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*m_boundary <a href="CppOperatorEqual.htm">==</a> *other.m_boundary <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a copy");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( m_boundary <a href="CppOperatorNotEqual.htm">!=</a>&nbsp;&nbsp;other.m_boundary <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a deep copy");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*m_faces <a href="CppOperatorEqual.htm">==</a> *other.m_faces <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a copy");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( m_faces <a href="CppOperatorNotEqual.htm">!=</a>&nbsp;&nbsp;other.m_faces <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a deep copy");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*m_neighbour <a href="CppOperatorEqual.htm">==</a> *other.m_neighbour <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a copy");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( m_neighbour <a href="CppOperatorNotEqual.htm">!=</a>&nbsp;&nbsp;other.m_neighbour <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a deep copy");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*m_owner <a href="CppOperatorEqual.htm">==</a> *other.m_owner <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a copy");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( m_owner <a href="CppOperatorNotEqual.htm">!=</a>&nbsp;&nbsp;other.m_owner <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a deep copy");<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*m_<a href="CppPointer.htm">point</a>s <a href="CppOperatorEqual.htm">==</a> *other.m_<a href="CppPointer.htm">point</a>s <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a copy");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( m_<a href="CppPointer.htm">point</a>s <a href="CppOperatorNotEqual.htm">!=</a>&nbsp;&nbsp;other.m_<a href="CppPointer.htm">point</a>s <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must be a deep copy");<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;CheckMe();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files::CheckMe() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_faces);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_<a href="CppPointer.htm">point</a>s);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex n_faces { FaceIndex(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_faces-&gt;GetItems().size())) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index n_<a href="CppPointer.htm">point</a>s { <a href="CppPoint.htm">Point</a>Index(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_<a href="CppPointer.htm">point</a>s-&gt;GetItems().size())) };<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("CheckMe: 'boundary' file individuals items");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; item: m_boundary-&gt;GetItems())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Error in 'boundary' file in <b><a href="CppThis.htm">this</a></b> item:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item.GetNfaces() <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "nFaces (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetNfaces() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") must be a positive non-zero value";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item.GetStartFace() &gt; n_faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "startFace (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetStartFace() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") beyond number of faces (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_faces <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item.GetStartFace() <a href="CppOperatorPlus.htm">+</a> FaceIndex(item.GetNfaces()) &gt; n_faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "startFace (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetStartFace() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppOperatorPlus.htm">+</a> nFaces (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_faces <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (item.GetStartFace() <a href="CppOperatorPlus.htm">+</a> FaceIndex(item.GetNfaces()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " is beyond number of faces (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_faces <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("CheckMe: 'boundary' file: no ranges should overlap");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_boundary_items { <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_boundary-&gt;GetItems().size()) };<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_boundary_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFileItem item_i <a href="CppOperatorAssign.htm">=</a> m_boundary-&gt;GetItems()[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex first_i <a href="CppOperatorAssign.htm">=</a> item_i.GetStartFace();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(first_i.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item_i.GetNfaces() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex last_i <a href="CppOperatorAssign.htm">=</a> first_i <a href="CppOperatorPlus.htm">+</a> FaceIndex(item_i.GetNfaces());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_boundary_items; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFileItem item_j <a href="CppOperatorAssign.htm">=</a> m_boundary-&gt;GetItems()[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex first_j <a href="CppOperatorAssign.htm">=</a> item_j.GetStartFace();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(item_j.GetNfaces() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex last_j <a href="CppOperatorAssign.htm">=</a> first_j <a href="CppOperatorPlus.htm">+</a> FaceIndex(item_j.GetNfaces());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( (first_i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> first_j <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> first_i &lt; last_j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (last_i&nbsp;&nbsp;&gt;&nbsp;&nbsp;first_j <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> last_i&nbsp;&nbsp;&lt; last_j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (first_j <a href="CppOperatorGreaterEqual.htm">&gt;=</a> first_i <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> first_j &lt; last_i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (last_j&nbsp;&nbsp;&gt;&nbsp;&nbsp;first_i <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> last_j&nbsp;&nbsp;&lt; last_i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*m_boundary);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Error in 'boundary' file in these items:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item_i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item_j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Face index ranges overlap: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> first_i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> last_i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt; and "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> first_j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> last_j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("CheckMe: 'faces' files: <a href="CppPointer.htm">point</a> indices must be valid");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> FacesFileItem&amp; item: m_faces-&gt;GetItems())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; index: item.Get<a href="CppPoint.htm">Point</a>Indices())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> n_<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Error in 'faces' file in <b><a href="CppThis.htm">this</a></b> item:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppPointer.htm">point</a> index (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> index <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ") beyond number of <a href="CppPointer.htm">point</a>s (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_<a href="CppPointer.htm">point</a>s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> do_check_<b><a href="CppDouble.htm">double</a></b>s <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (do_check_<b><a href="CppDouble.htm">double</a></b>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("CheckMe: 'faces' files: detect doublures: START");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FaceIndex i <a href="CppOperatorAssign.htm">=</a> FaceIndex(0); i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt; v_i { m_faces-&gt;GetItem(i).Get<a href="CppPoint.htm">Point</a>Indices() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(v_i.begin(),v_i.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FaceIndex j <a href="CppOperatorAssign.htm">=</a> FaceIndex(0); j<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt; v_j { m_faces-&gt;GetItem(j).Get<a href="CppPoint.htm">Point</a>Indices() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(v_j.begin(),v_j.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_i <a href="CppOperatorEqual.htm">==</a> v_j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Error in 'faces' file in these items:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Item " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_faces-&gt;GetItem(i) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Item " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_faces-&gt;GetItem(j) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Faces at index " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " and " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " consist of the same <a href="CppPoint.htm">Point</a> indices";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("CheckMe: 'faces' files: detect doublures: SKIP");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("CheckMe: 'owner' files");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_owner-&gt;GetItems().size() <a href="CppOperatorNotEqual.htm">!=</a> m_faces-&gt;GetItems().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "The file 'owner' has a different amount of faces than 'faces':\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'faces' has " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_faces-&gt;GetItems().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ", where 'owner' has " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_owner-&gt;GetItems().size()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> SURE_THIS_CODE_CANNOT_BE_REUSED_20131212<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Faces that have the same owner (which is a cell index) are member of the same cell<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Each <a href="CppPointer.htm">point</a> index of all faces must be present at least one <a href="CppTime.htm">time</a>s: at least three faces are<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>needed at each vertex to form an enclosing/non-leaking cell surface, yet not all faces<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>are owned by each cell<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Because each <a href="CppPointer.htm">point</a> index must be present once, it has no use collecting these<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;CellIndex,<a href="CppStdMultiset.htm">std::multiset</a>&lt;<a href="CppPoint.htm">Point</a>Index<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FaceIndex face_index <a href="CppOperatorAssign.htm">=</a> FaceIndex(0); face_index<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>face_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find the <a href="CppPointer.htm">point</a> indices of <b><a href="CppThis.htm">this</a></b> face<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt; p { m_faces-&gt;GetItem(face_index).Get<a href="CppPoint.htm">Point</a>Indices() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find the owner of <b><a href="CppThis.htm">this</a></b> face<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex c { m_owner-&gt;GetItem(face_index).GetCellIndex() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the combination to m<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m.find(c) <a href="CppOperatorEqual.htm">==</a> m.end()) { m.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(c,<a href="CppStdMultiset.htm">std::multiset</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt;())); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.find(c) <a href="CppOperatorNotEqual.htm">!=</a> m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(p.begin(),p.end(),<a href="CppStd.htm">std</a>::inserter(m.find(c)-&gt;second,m.find(c)-&gt;second.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that each <a href="CppPointer.htm">point</a> index is present at least twice<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;CellIndex,<a href="CppStdMultiset.htm">std::multiset</a>&lt;<a href="CppPoint.htm">Point</a>Index<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; s: m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; i: s.second)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> count <a href="CppOperatorAssign.htm">=</a> s.second.count(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (count &lt; 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*m_owner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*m_faces);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> str;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Error in 'owner' and 'faces' file combination:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "The file 'owner' has faces owned by the same cell,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "of which these faces <b><a href="CppDo.htm">do</a></b> not cover each vertex with at least two <a href="CppTime.htm">time</a>s\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "In <b><a href="CppThis.htm">this</a></b> <b><a href="CppCase.htm">case</a></b>, cell index " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.first<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " its faces have a <a href="CppPointer.htm">point</a> index " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " that is only a member of "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> count <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " faces"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(str.str());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("CheckMe finished successfully");<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateBoundary(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (<a href="Cpp__func__.htm">__func__</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(folder_name));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(folder_name.empty() ? folder_name : folder_name <a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CreateFilenames()-&gt;GetBoundary()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> is(filename.c_str());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::foam::BoundaryFile(filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdRuntime_error.htm">std::runtime_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "File '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' is not an OpenFOAM 'boundary' file: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files::CreateCopy(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files&amp; files,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> copy_folder_name) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(copy_folder_name))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(copy_folder_name);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(copy_folder_name)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot <a href="CppMake.htm">make</a> a copy in an existing folder");<br/>
<br/>
&nbsp;&nbsp;<a href="CppCreateFolder.htm">CreateFolder</a>s(copy_folder_name);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>boundary<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> destination_path {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;copy_folder_name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> BoundaryFile::GetDefaultHeader().GetLocation()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> BoundaryFile::GetDefaultHeader().GetObject()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(destination_path.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *files.GetBoundary();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>faces<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> destination_path {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;copy_folder_name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> FacesFile::GetDefaultHeader().GetLocation()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> FacesFile::GetDefaultHeader().GetObject()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(destination_path.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *files.GetFaces();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>neighbour<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> destination_path {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;copy_folder_name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> NeighbourFile::GetDefaultHeader().GetLocation()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> NeighbourFile::GetDefaultHeader().GetObject()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(destination_path.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *files.GetNeighbour();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>owner<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> destination_path {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;copy_folder_name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> OwnerFile::GetDefaultHeader().GetLocation()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> OwnerFile::GetDefaultHeader().GetObject()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(destination_path.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *files.GetOwner();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> destination_path {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;copy_folder_name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppPoint.htm">Point</a>sFile::GetDefaultHeader().GetLocation()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppPoint.htm">Point</a>sFile::GetDefaultHeader().GetObject()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(destination_path.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *files.Get<a href="CppPoint.htm">Point</a>s();<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Files(copy_folder_name) <a href="CppOperatorEqual.htm">==</a> files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Resulting Files must be same");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdRuntime_error.htm">std::runtime_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(e.what());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Resulting Files must be same");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateDefaultBoundary() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> BoundaryFile<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::FacesFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateDefaultFaces() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FacesFile<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::NeighbourFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateDefaultNeighbour() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;NeighbourFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> NeighbourFile<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::OwnerFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateDefaultOwner() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> OwnerFile<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateDefault<a href="CppPoint.htm">Point</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppPoint.htm">Point</a>sFile<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::FacesFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateFaces(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (<a href="Cpp__func__.htm">__func__</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(folder_name));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(folder_name.empty() ? folder_name : folder_name <a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CreateFilenames()-&gt;GetFaces()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdIfstream.htm">std::ifstream</a> is(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::FacesFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::foam::FacesFile(filename)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Filenames&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateFilenames() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Filenames&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Filenames<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files::<a href="CppCreateFolder.htm">CreateFolder</a>s(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> f { folder_name <a href="CppOperatorPlus.htm">+</a> s <a href="CppOperatorPlus.htm">+</a> "constant" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(f)) { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppCreateFolder.htm">CreateFolder</a>(f); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(f));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> f { folder_name <a href="CppOperatorPlus.htm">+</a> s <a href="CppOperatorPlus.htm">+</a> "constant" <a href="CppOperatorPlus.htm">+</a> s <a href="CppOperatorPlus.htm">+</a> "polyMesh" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(f)) { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppCreateFolder.htm">CreateFolder</a>(f); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(f));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::NeighbourFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateNeighbour(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (<a href="Cpp__func__.htm">__func__</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(folder_name));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(folder_name.empty() ? folder_name : folder_name <a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CreateFilenames()-&gt;GetNeighbour()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdIfstream.htm">std::ifstream</a> is(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::NeighbourFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile(filename)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::OwnerFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::CreateOwner(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (<a href="Cpp__func__.htm">__func__</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(folder_name));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(folder_name.empty() ? folder_name : folder_name <a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CreateFilenames()-&gt;GetOwner()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::OwnerFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::foam::OwnerFile(filename)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdIfstream.htm">std::ifstream</a> is(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::OwnerFile&gt; p {<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::foam::OwnerFile(is)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Files::Create<a href="CppPoint.htm">Point</a>s(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (<a href="Cpp__func__.htm">__func__</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(folder_name));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(folder_name.empty() ? folder_name : folder_name <a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> CreateFilenames()-&gt;Get<a href="CppPoint.htm">Point</a>s()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdIfstream.htm">std::ifstream</a> is(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile(filename)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Files<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::foam::Files::CreateTestFiles() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Files<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Empty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Files&gt; files {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Files<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(files);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(files);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Complex from resources<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> folder_name <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetTempFolderName.htm">GetTempFolderName</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateTestFiles(folder_name,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Files&gt; files {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Files(folder_name)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(files);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(files);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFolder.htm">DeleteFolder</a>(folder_name);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files::CreateTestFiles(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; folder_name, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> test_index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(test_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> test_index &lt; 5);<br/>
<br/>
&nbsp;&nbsp;<a href="CppCreateFolder.htm">CreateFolder</a>s(folder_name);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read from testing file<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundaryFile::GetDefaultHeader().GetObject(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FacesFile::GetDefaultHeader().GetObject(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NeighbourFile::GetDefaultHeader().GetObject(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OwnerFile::GetDefaultHeader().GetObject(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFile::GetDefaultHeader().GetObject()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (test_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x1"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_2x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_3x4x5"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("foam::Files::CreateTestFiles: unknown test index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!filename_appendix.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> resources_path { ":/<a href="CppOpenFoam.htm">CppOpenFoam</a>/files/" <a href="CppOperatorPlus.htm">+</a> filename };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> destination_path {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder_name<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "constant"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "polyMesh"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetPath.htm">GetPath</a>Seperator()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> filename_base<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f(resources_path.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.copy(destination_path.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(destination_path));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files::Swap(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorNotEqual.htm">!=</a> rhs);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Boundary<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cleanest <a href="CppInterface.htm">interface</a> I could think of<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_boundary-&gt;Swap(lhs,rhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; lhs_n_faces;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_boundary-&gt;CanGetItem(lhs))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lhs_n_faces.reset(<b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>(m_boundary-&gt;Find(lhs).GetNfaces()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; rhs_n_faces;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryIndex lhs_boundary_index <a href="CppOperatorAssign.htm">=</a> m_boundary-&gt;GetItem(lhs).GetCellIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryIndex rhs_boundary_index <a href="CppOperatorAssign.htm">=</a> m_owner-&gt;GetItem(rhs).GetCellIndex();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set swapped<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owner-&gt;SetItem(lhs,OwnerFileItem(rhs_cell_index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owner-&gt;SetItem(rhs,OwnerFileItem(lhs_cell_index));<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Neighbour<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can only swap two cellIndices when either both of them are absent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(both cells are boundary cells)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>or both of them are present<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(both cells are non-boundary cells)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> lhs_is_boundary <a href="CppOperatorAssign.htm">=</a> m_neighbour-&gt;CanGetItem(lhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> rhs_is_boundary <a href="CppOperatorAssign.htm">=</a> m_neighbour-&gt;CanGetItem(rhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs_is_boundary <a href="CppOperatorEqual.htm">==</a> rhs_is_boundary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only swap two boundary or two non-boundary faces");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_is_boundary <a href="CppOperatorNotEqual.htm">!=</a> rhs_is_boundary)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Can only swap two boundary or two non-boundary faces");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_is_boundary)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs_is_boundary);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Done! Boundary cells have no neighbours<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex lhs_cell_index <a href="CppOperatorAssign.htm">=</a> m_neighbour-&gt;GetItem(lhs).GetCellIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex rhs_cell_index <a href="CppOperatorAssign.htm">=</a> m_neighbour-&gt;GetItem(rhs).GetCellIndex();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set swapped<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_neighbour-&gt;SetItem(lhs,NeighbourFileItem(rhs_cell_index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_neighbour-&gt;SetItem(rhs,NeighbourFileItem(lhs_cell_index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Owner<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex lhs_cell_index <a href="CppOperatorAssign.htm">=</a> m_owner-&gt;GetItem(lhs).GetCellIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex rhs_cell_index <a href="CppOperatorAssign.htm">=</a> m_owner-&gt;GetItem(rhs).GetCellIndex();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set swapped<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owner-&gt;SetItem(lhs,OwnerFileItem(rhs_cell_index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_owner-&gt;SetItem(rhs,OwnerFileItem(lhs_cell_index));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::Files::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files g;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files g;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Files<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v { Files::CreateTestFiles() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> j) { <a href="CppAssert.htm">assert</a>(v[i] <a href="CppOperatorEqual.htm">==</a> v[j]); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorNotEqual.htm">!=</a> j) { <a href="CppAssert.htm">assert</a>(v[i] <a href="CppOperatorNotEqual.htm">!=</a> v[j]); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateCopy<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> test_index=0; test_index<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>test_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_folder_source <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetTempFolderName.htm">GetTempFolderName</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(temp_folder_source));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateTestFiles(temp_folder_source,test_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files source(temp_folder_source);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_folder_target <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetTempFolderName.htm">GetTempFolderName</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Files::CreateCopy(source,temp_folder_target);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files target(temp_folder_target);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(source <a href="CppOperatorEqual.htm">==</a> target);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFolder.htm">DeleteFolder</a>(temp_folder_source);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFolder.htm">DeleteFolder</a>(temp_folder_target);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Swap faces<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_folder <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppGetTempFolderName.htm">GetTempFolderName</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(temp_folder));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateTestFiles(temp_folder,3); <a href="CppComment.htm">//</a>3 <a href="CppOperatorAssign.htm">=</a> 2x2x2 cubes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files f(temp_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Files g(temp_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g <a href="CppOperatorEqual.htm">==</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex i(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex j(11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;g.Swap(i,j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(g <a href="CppOperatorNotEqual.htm">!=</a> f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorNotEqual.htm">!=</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;g.Swap(i,j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorEqual.htm">==</a> g);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFolder.htm">DeleteFolder</a>(temp_folder);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsFolder.htm">IsFolder</a>(temp_folder));<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::Files::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Split <a href="CppFunction.htm">function</a> <b><a href="CppFor.htm">for</a></b> ease in <a href="CppDebug.htm">debugging</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*lhs.GetBoundary()<a href="CppOperatorNotEqual.htm">!=</a> *rhs.GetBoundary())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Boundaries differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*lhs.GetBoundary());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*rhs.GetBoundary());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*lhs.GetFaces() <a href="CppOperatorNotEqual.htm">!=</a> *rhs.GetFaces())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Faces differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*lhs.GetFaces());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*rhs.GetFaces());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*lhs.GetNeighbour() <a href="CppOperatorNotEqual.htm">!=</a> *rhs.GetNeighbour())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Neighbours differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*lhs.GetNeighbour());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*rhs.GetNeighbour());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*lhs.GetOwner() <a href="CppOperatorNotEqual.htm">!=</a> *rhs.GetOwner())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Owners differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*lhs.GetOwner());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*rhs.GetOwner());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*lhs.Get<a href="CppPoint.htm">Point</a>s() <a href="CppOperatorNotEqual.htm">!=</a> *rhs.Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("<a href="CppPoint.htm">Point</a>s differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*lhs.Get<a href="CppPoint.htm">Point</a>s());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(*rhs.Get<a href="CppPoint.htm">Point</a>s());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Files&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Files&amp; files) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*files.GetBoundary()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*files.GetFaces())&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*files.GetNeighbour()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*files.GetOwner())&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*files.Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfvschemesfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfvschemesfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMFVSCHEMES<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMFVSCHEMES<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM thermophysicalProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> FvSchemesFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FvSchemesFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FvSchemesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FvSchemesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMFVSCHEMES<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfvschemesfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfvschemesfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamfvschemesfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FvSchemesFile::FvSchemesFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
) : m_header(header)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::FvSchemesFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("dictionary","system","","fvSchemes");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::FvSchemesFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::FvSchemesFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::FvSchemesFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FvSchemesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ddtSchemes\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> Euler;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "gradSchemes\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> Gauss linear;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "divSchemes\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> none;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;div(phi,U) Gauss limitedLinearV 1;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;div(phi,e) Gauss limitedLinear 1;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;div(phid,p) Gauss limitedLinear 1;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;div(phi,K) Gauss limitedLinear 1;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;div(phiv,p) Gauss limitedLinear 1;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;div(phi,k) Gauss upwind;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;div(phi,epsilon) Gauss upwind;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;div((muEff*dev2(T(grad(U))))) Gauss linear;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "laplacianSchemes\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> Gauss linear corrected;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "interpolationSchemes\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> linear;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "snGradSchemes\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> corrected;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "fluxRequired\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b> no;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;p;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfvsolutionfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfvsolutionfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMFVSOLUTION<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMFVSOLUTION<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM thermophysicalProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> FvSolutionFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> FvSolutionFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FvSolutionFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FvSolutionFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMFVSOLUTION<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfvsolutionfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfvsolutionfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamfvsolutionfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::FvSolutionFile::FvSolutionFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
) : m_header(header)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::FvSolutionFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("dictionary","system","","fvSolution");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::FvSolutionFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::FvSolutionFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::FvSolutionFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> FvSolutionFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "trianglemeshbuilder.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::trim::TriangleMeshBuilder::CreateOpenFoamFvSolution() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "FoamFile\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVersion.htm">version</a>&nbsp;&nbsp;&nbsp;&nbsp; 2.0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;format&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ascii;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dictionary;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;&nbsp;&nbsp;&nbsp;\"system\";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fvSolution;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "solvers\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;\"rho.*\"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solver&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diagonal;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;\"p.*\"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solver&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PBiCG;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preconditioner&nbsp;&nbsp;DILU;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tolerance&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e-08;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relTol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;\"(U|e|R).*\"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$p;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tolerance&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e-05;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;\"(k|epsilon).*\"\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$p;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tolerance&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1e-08;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "PIMPLE\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;nOuterCorrectors 2;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;nCorrectors&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;nNonOrthogonalCorrectors 0;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamfwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMFWD_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMFWD_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppStruct.htm">struct</a></b> Coordinat3D;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Boundary;<br/>
<b><a href="CppStruct.htm">struct</a></b> BoundaryFile;<br/>
<b><a href="CppStruct.htm">struct</a></b> BoundaryFileItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> BoundaryIndex;<br/>
<b><a href="CppStruct.htm">struct</a></b> Cell;<br/>
<b><a href="CppStruct.htm">struct</a></b> CellIndex;<br/>
<b><a href="CppStruct.htm">struct</a></b> Face;<br/>
<b><a href="CppStruct.htm">struct</a></b> FaceIndex;<br/>
<b><a href="CppStruct.htm">struct</a></b> FacesFile;<br/>
<b><a href="CppStruct.htm">struct</a></b> FacesFileItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> Filenames;<br/>
<b><a href="CppStruct.htm">struct</a></b> Files;<br/>
<b><a href="CppStruct.htm">struct</a></b> Header;<br/>
<b><a href="CppStruct.htm">struct</a></b> Mesh;<br/>
<b><a href="CppStruct.htm">struct</a></b> NeighbourFile;<br/>
<b><a href="CppStruct.htm">struct</a></b> NeighbourFileItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> OwnerFile;<br/>
<b><a href="CppStruct.htm">struct</a></b> OwnerFileItem;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>Index;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>sFile;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>sFileItem;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamheader.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamheader.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMHEADER_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMHEADER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>The header that is above all OpenFoam files<br/>
<b><a href="CppStruct.htm">struct</a></b> Header<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/In order of appearance in the text<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Header(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppClass.htm">class</a></b>_name <a href="CppOperatorAssign.htm">=</a> "",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; location&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> "",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; note&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> "",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; object&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> "",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppVersion.htm">version</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> "2.0"<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove comments from a file<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> CleanFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetClass() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_class_name; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetLocation() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_location; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetNote() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_note; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetObject() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_object; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppVersion.htm">version</a>; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A header consists out of multiple lines<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(1) header name<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(2) bracket open<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(3) <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(4) format<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(5) <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(6) location<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(7) object<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(8) bracket close<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConstexpr.htm">constexpr</a></b> <b><a href="CppInt.htm">int</a></b> GetNumberOfLines() { <b><a href="CppReturn.htm">return</a></b> 8; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppVersion.htm">Version</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppVersion.htm">version</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_<a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppVersion.htm">version</a>; }<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_class_name;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_location;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_note;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_object;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_<a href="CppVersion.htm">version</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Header&amp; h);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Header&amp; lhs, <b><a href="CppConst.htm">const</a></b> Header&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Header&amp; lhs, <b><a href="CppConst.htm">const</a></b> Header&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Header&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Read the header of an OpenFOAM file.<br/>
<a href="CppComment.htm">///</a>Throws <a href="CppStdRuntime_error.htm">std::runtime_error</a> <b><a href="CppIf.htm">if</a></b> file is incorrectly formed<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Header&amp; h);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMHEADER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamheader.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamheader.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppOstreamH.htm">ostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header::Header(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppClass.htm">class</a></b>_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; location,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; note,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; object,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_class_name(<b><a href="CppClass.htm">class</a></b>_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_location(location),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_note(note),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_object(object),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppVersion.htm">version</a>(<a href="CppVersion.htm">version</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (location.empty() <a href="CppOperatorLogicalOr.htm">||</a> location[0] <a href="CppOperatorNotEqual.htm">!=</a> '\"' )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A location may not start with a quotation mark"<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (location.empty() <a href="CppOperatorLogicalOr.htm">||</a> location[ location.size() <a href="CppOperatorMinus.htm">-</a> 1 ] <a href="CppOperatorNotEqual.htm">!=</a> '\"' )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A location may not end with a quotation mark"<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Header::CleanFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v is dirty<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppFileToVector.htm">FileToVector</a>(filename) };<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>w will be clean<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppStdString.htm">std::string</a> s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReplace.htm">std::replace</a>(s.begin(),s.end(),'\t',' ');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::trim(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s.substr(0,2) <a href="CppOperatorEqual.htm">==</a> "<a href="CppComment.htm">//</a>") s <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>w is clean<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().VectorToFile(w,filename,<a href="CppFileIo.htm">fileio</a>::CopyMode::allow_overwrite);<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Header::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::Header::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header h("some_name","some_location","some_note","some_object");<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> h;<br/>
&nbsp;&nbsp;Header i;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> i;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (h <a href="CppOperatorNotEqual.htm">!=</a> i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(h);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(h <a href="CppOperatorEqual.htm">==</a> i);<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::Header::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Header&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Header&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetClass() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetClass())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("<a href="CppClass.htm">Classes</a> differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(lhs.GetClass());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(rhs.GetClass());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Compare location independent of OS path seperator<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> lhs_location <a href="CppOperatorAssign.htm">=</a> lhs.GetLocation();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> rhs_location <a href="CppOperatorAssign.htm">=</a> rhs.GetLocation();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReplace.htm">std::replace</a>(lhs_location.begin(),lhs_location.end(),'\\','/');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdReplace.htm">std::replace</a>(rhs_location.begin(),rhs_location.end(),'\\','/');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_location <a href="CppOperatorNotEqual.htm">!=</a> rhs_location)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Locations differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(lhs.GetLocation());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(rhs.GetLocation());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetObject() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetObject())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Object differ:");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(lhs.GetObject());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(rhs.GetObject());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Header&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Header&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Header&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "FoamFile" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<a href="CppVersion.htm">version</a>&nbsp;&nbsp;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.Get<a href="CppVersion.htm">Version</a>()&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;format&nbsp;&nbsp; " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ascii"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b>&nbsp;&nbsp;&nbsp;&nbsp;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetClass()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;location \"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetLocation() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;object&nbsp;&nbsp; " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetObject()&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Header&amp; h)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> title;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> title;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (title <a href="CppOperatorNotEqual.htm">!=</a> "FoamFile")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(title.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (title.substr(0,2) <a href="CppOperatorEqual.htm">==</a> "<a href="CppComment.htm">/*</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (s.size() &lt; 2 <a href="CppOperatorLogicalOr.htm">||</a> s.substr(s.size()-2,2) <a href="CppOperatorNotEqual.htm">!=</a> "<a href="CppComment.htm">*/</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Try reading title after comment again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> title;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (title <a href="CppOperatorNotEqual.htm">!=</a> "FoamFile")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Stream incorrectly assumed to be an OpenFOAM header. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "OpenFOAM header start with 'FoamFile'. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "This file starts with&nbsp;&nbsp;'"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> title <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' instead";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> bracket_open;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_open;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_open <a href="CppOperatorEqual.htm">==</a> "{");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "<a href="CppVersion.htm">version</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "2.0;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.m_<a href="CppVersion.htm">version</a> <a href="CppOperatorAssign.htm">=</a> t.substr(0,t.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(h.m_<a href="CppVersion.htm">version</a> <a href="CppOperatorEqual.htm">==</a> "2.0");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "format" )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "ascii;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "<b><a href="CppClass.htm">class</a></b>"&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <b><a href="CppClass.htm">class</a></b>_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <b><a href="CppClass.htm">class</a></b>_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppClass.htm">class</a></b>_name.back() <a href="CppOperatorEqual.htm">==</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b>_name.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppClass.htm">class</a></b>_name.back() <a href="CppOperatorNotEqual.htm">!=</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.m_class_name <a href="CppOperatorAssign.htm">=</a> <b><a href="CppClass.htm">class</a></b>_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "location")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> location;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> location;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(location.size() &gt; 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(location[0] <a href="CppOperatorEqual.htm">==</a> '\"');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(location[ location.size() <a href="CppOperatorMinus.htm">-</a> 2] <a href="CppOperatorEqual.htm">==</a> '\"');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(location[ location.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location <a href="CppOperatorAssign.htm">=</a> location.substr(1,location.size() <a href="CppOperatorMinus.htm">-</a> 3);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (location.empty() <a href="CppOperatorLogicalOr.htm">||</a> location[0] <a href="CppOperatorNotEqual.htm">!=</a> '\"' )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A location may not start with a quotation mark"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (location.empty() <a href="CppOperatorLogicalOr.htm">||</a> location[ location.size() <a href="CppOperatorMinus.htm">-</a> 1 ] <a href="CppOperatorNotEqual.htm">!=</a> '\"' )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A location may not end with a quotation mark"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (location.empty() <a href="CppOperatorLogicalOr.htm">||</a> location[ location.size() <a href="CppOperatorMinus.htm">-</a> 1 ] <a href="CppOperatorNotEqual.htm">!=</a> ';' )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A location may not end with a semicolon"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.m_location <a href="CppOperatorAssign.htm">=</a> location;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "note")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read until ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (s.back() <a href="CppOperatorNotEqual.htm">!=</a> ';')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorPlusAssign.htm">+=</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.back() <a href="CppOperatorEqual.htm">==</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.back() <a href="CppOperatorNotEqual.htm">!=</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.m_note <a href="CppOperatorAssign.htm">=</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "object")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> object;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> object;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(object.back() <a href="CppOperatorEqual.htm">==</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(object.back() <a href="CppOperatorNotEqual.htm">!=</a> ';');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h.m_object <a href="CppOperatorAssign.htm">=</a> object;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "}")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamhelper.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamhelper.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMHELPER_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMHELPER_H<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppIfndef.htm">#ifndef</a> _WIN32<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/polygon.hpp&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>Help adding constness a bit<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> T&gt; &gt; <a href="CppAdd.htm">Add</a>Const(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T&gt; &gt; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> T&gt; &gt;(v.begin(),v.end());<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; p) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; p) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; rhs<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; <b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; rhs<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; <b><a href="CppOperatorDivide.htm">operator/</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> factor<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; rhs<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; <b><a href="CppOperatorDivide.htm">operator/</a></b>=(<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; p,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> factor<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">//</a>Name of <b><a href="CppOperatorPlus.htm">operator+</a></b><br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; <a href="CppAdd.htm">Add</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; rhs<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMHELPER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamhelper.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamhelper.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamhelper.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; <a href="CppRibi.htm">ribi</a>::foam::<a href="CppAdd.htm">Add</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; rhs<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs <a href="CppOperatorPlus.htm">+</a> rhs;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; p) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(p)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::To<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; p) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("x",<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(p))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("y",<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(p))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("z",<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(p));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> t;<br/>
&nbsp;&nbsp;t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppRibi.htm">ribi</a>::xml::To<a href="CppXml.htm">Xml</a>("coordinat3d",s.str());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t.str();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; rhs<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(lhs) <a href="CppOperatorEqual.htm">==</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(rhs)<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorPlus.htm">operator+</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; rhs<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdRemove.htm">std::remove</a>_const&lt;<a href="CppStdRemove.htm">std::remove</a>_reference&lt;decltype(lhs)&gt;::type&gt;::type ReturnType;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ReturnType(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(lhs) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(rhs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(lhs) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(rhs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(lhs) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(rhs)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorPlus.htm">operator+</a></b>=(<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; rhs<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;lhs <a href="CppOperatorAssign.htm">=</a> lhs <a href="CppOperatorPlus.htm">+</a> rhs;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs;<br/>
}<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorDivide.htm">operator/</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; p,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> factor<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdRemove.htm">std::remove</a>_const&lt;<a href="CppStdRemove.htm">std::remove</a>_reference&lt;decltype(p)&gt;::type&gt;::type ReturnType;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ReturnType(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(p) <a href="CppOperatorDivide.htm">/</a> factor,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(p) <a href="CppOperatorDivide.htm">/</a> factor,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(p) <a href="CppOperatorDivide.htm">/</a> factor<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorDivide.htm">operator/</a></b>=(<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt;&amp; p,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> factor<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;p <a href="CppOperatorAssign.htm">=</a> p <a href="CppOperatorDivide.htm">/</a> factor;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamkfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamkfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMK<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMK<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM thermophysicalProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> KFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> KFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> KFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> KFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMK<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamkfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamkfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamkfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::KFile::KFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
) : m_header(header)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::KFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("dictionary","system","","K");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::KFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::KFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::KFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> KFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No idea<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoammesh.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoammesh.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMMESH_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMMESH_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-variable"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppIfndef.htm">#ifndef</a> _WIN32<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/polygon.hpp&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Mesh contains the mesh of an OpenFOAM mesh in an indexless way<br/>
<a href="CppComment.htm">///</a>A Mesh can be <a href="CppConvert.htm">convert</a>ed to a Files and vice versa<br/>
<b><a href="CppStruct.htm">struct</a></b> Mesh<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Step #0<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <a href="CppPoint.htm">Point</a>s so these can be shared over the Faces<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create Cells so these can be shared over the Faces<br/>
&nbsp;&nbsp;Mesh(<b><a href="CppConst.htm">const</a></b> Files&amp; files) : Mesh(files,Create<a href="CppPoint.htm">Point</a>s(files)) {}<br/>
<br/>
&nbsp;&nbsp;Mesh(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; boundaries,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write the Mesh to a Files<br/>
&nbsp;&nbsp;Files CreateFiles() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; FindMostSimilarFace(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; coordinats<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfBoundaries() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfCells() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOf<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary&gt; &gt;&amp; GetBoundaries() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_boundaries; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; &gt;&amp; GetCells() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;m_cells; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Face&gt; &gt;&amp; GetFaces()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_faces; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; &gt;&nbsp;&nbsp;GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; Get<a href="CppPoint.htm">Point</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppPointer.htm">point</a>s; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Order is not important<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_boundaries;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Order is not important<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_cells;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Order is important <b><a href="CppFor.htm">for</a></b> ReorderFaces only<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_faces;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Order is not important<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_<a href="CppPointer.htm">point</a>s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Step #1<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create Faces so these can be shared over Boundary and Cell<br/>
&nbsp;&nbsp;Mesh(<b><a href="CppConst.htm">const</a></b> Files&amp; files,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Checks <b><a href="CppIf.htm">if</a></b> the Faces their indices are adjacent<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/when they belong to the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/same Boundary<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> AreFacesOrdered() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> CalcSimilaritySlow(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; v,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; w) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> CalcSimilarityFaster(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt;&amp; v,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; w) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> CalcSimilaritySlow(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt;&amp; v,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; w) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary&gt; &gt; CreateBoundaries(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files&amp; files, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; faces);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; CreateBoundary() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create empty Cells, as much as needed<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateEmptyCells(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files&amp; files);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; CreateFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Faces from the <a href="CppPointer.htm">point</a>s, but cannot <a href="CppInitialize.htm">initialize</a> Owner and Neighbour<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateFacesWith<a href="CppPoint.htm">Point</a>s(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files&amp; files,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s);<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;NeighbourFile&gt; CreateNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; CreateOwner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; Create<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; &gt; Create<a href="CppPoint.htm">Point</a>s(<b><a href="CppConst.htm">const</a></b> Files&amp; files);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This <a href="CppMemberFunction.htm">member function</a> is called to reorder the faces in such a way<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/that indices in m_faces are adjacent when they belong to the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/same Boundary<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example, consider the following boundary file:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;boundary_left<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;patch;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;nFaces&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;startFace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;boundary_right<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;patch;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;nFaces&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;startFace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/ReorderFaces will put the faces belonging to 'boundary_left'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/at indices 0 and 1, and the faces belonging to 'boundary_right'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/at indices 2 and 3.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Because <b><a href="CppThis.htm">this</a></b> is an indexless structure, the ordering of Faces in<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_faces is unimportant, except <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b>: when writing to file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ReorderFaces();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Mesh&amp; mesh) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Mesh&amp; mesh) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMMESH_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoammesh.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoammesh.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoammesh.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppOstreamH.htm">ostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundary.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryfileitem.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamboundaryindex.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamcell.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamface.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfacesfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfiles.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamhelper.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamneighbourfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamownerfile.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtypes.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>sfile.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Mesh::Mesh(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; boundaries,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; cells,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; faces,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_boundaries(boundaries),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cells(cells),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces(faces),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(<a href="CppPointer.htm">point</a>s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: m_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (face-&gt;GetNeighbour() <a href="CppOperatorLogicalOr.htm">||</a> !face-&gt;GetNeighbour() )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "internalMesh faces have a neighbour, <b><a href="CppDefault.htm">default</a></b>Wall faces don't"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!AreFacesOrdered())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Reordering faces" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ReorderFaces();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(AreFacesOrdered());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files f(<b><a href="CppThis.htm">this</a></b>-&gt;CreateFiles());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetFaces()-&gt;GetItems().size() <a href="CppOperatorEqual.htm">==</a> faces.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetBoundary()-&gt;GetItems().size() <a href="CppOperatorEqual.htm">==</a> boundaries.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.Get<a href="CppPoint.htm">Point</a>s()-&gt;GetItems().size() <a href="CppOperatorEqual.htm">==</a> <a href="CppPointer.htm">point</a>s.size());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Mesh::Mesh(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files&amp; files,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_boundaries{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_cells{CreateEmptyCells(files)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces{CreateFacesWith<a href="CppPoint.htm">Point</a>s(files,<a href="CppPointer.htm">point</a>s)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s(<a href="CppPointer.htm">point</a>s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> Cell owner to Faces<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_cells.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex n_faces <a href="CppOperatorAssign.htm">=</a> files.GetFaces()-&gt;GetMaxFaceIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FaceIndex i <a href="CppOperatorAssign.htm">=</a> FaceIndex(0); i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex owner_cell_index { files.GetOwner()-&gt;GetItem(i).GetCellIndex() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (owner_cell_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(owner_cell_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_cells.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(owner_cell_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(owner_cell_index.Get() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_cells[ owner_cell_index.Get() ]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; owner { m_cells[ owner_cell_index.Get() ] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(owner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_faces[i.Get()]-&gt;GetOwner() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_faces[i.Get()]-&gt;AssignOwner(owner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( m_faces[i.Get()]-&gt;GetOwner() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: m_faces) { <a href="CppAssert.htm">assert</a>(face); <a href="CppAssert.htm">assert</a>(face-&gt;GetOwner()); }<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> owned Faces to Cells<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt;,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: m_faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; owner { face-&gt;GetOwner() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(owner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (!owner) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m.find(owner) <a href="CppOperatorEqual.htm">==</a> m.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.insert(<a href="CppStdMake_pair.htm">std::make_pair</a>(owner, <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>() ) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.find(owner) <a href="CppOperatorNotEqual.htm">!=</a> m.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*m.find(owner)).second.push_back(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> p: m)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.first-&gt;AssignOwnedFaces(p.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> neighbours to Faces<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex index(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(files.GetNeighbour());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Not all Faces have a neighbour<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!files.GetNeighbour()-&gt;CanGetItem(index)) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(files.GetNeighbour()-&gt;CanGetItem(index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex neighbour_index {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files.GetNeighbour()-&gt;GetItem(index).GetCellIndex()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(neighbour_index.Get() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_faces[i]-&gt;GetNeighbour());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_faces[i]-&gt;AssignNeighbour( m_cells[ neighbour_index.Get() ] );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_faces[i]-&gt;GetNeighbour());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assign boundaries<br/>
&nbsp;&nbsp;m_boundaries <a href="CppOperatorAssign.htm">=</a> CreateBoundaries(files,m_faces);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell: m_cells)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cell);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>( (cell-&gt;GetNeighbour() <a href="CppOperatorLogicalOr.htm">||</a> !cell-&gt;GetNeighbour())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Not all cells have a neighbour, <b><a href="CppFor.htm">for</a></b> example in a 1x1x1 mesh");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetNumberOfBoundaries() <a href="CppOperatorNotEqual.htm">!=</a> files.GetBoundary()-&gt;GetMaxBoundaryIndex().Get())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(GetNumberOfBoundaries());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(files.GetBoundary()-&gt;GetMaxBoundaryIndex());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetNumberOfBoundaries() <a href="CppOperatorEqual.htm">==</a> files.GetBoundary()-&gt;GetMaxBoundaryIndex().Get());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetNumberOfFaces() <a href="CppOperatorEqual.htm">==</a> files.GetFaces()-&gt;GetMaxFaceIndex().Get());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::AreFacesOrdered() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary&gt; boundary: m_boundaries)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!boundary-&gt;GetFaces().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(boundary-&gt;GetFaces().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_faces &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Determine the start face: at which indices are the Faces in m_faces?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; indices;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(boundary-&gt;GetFaces().begin(),boundary-&gt;GetFaces().end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(indices),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>::const_iterator iter {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFind.htm">std::find</a>(m_faces.begin(),m_faces.end(),face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter <a href="CppOperatorNotEqual.htm">!=</a> m_faces.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(m_faces.begin(),iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!indices.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indices.size() <a href="CppOperatorEqual.htm">==</a> boundary-&gt;GetFaces().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(indices.begin(),indices.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_indices <a href="CppOperatorAssign.htm">=</a> indices.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_indices &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>n_indices; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indices[i-1] <a href="CppOperatorNotEqual.htm">!=</a> indices[i]&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All face indices must be unique");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (indices[i-1] <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorNotEqual.htm">!=</a> indices[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::CalcSimilarityFaster(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt;&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; w) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> w.size()) <b><a href="CppReturn.htm">return</a></b> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sum all coordinats, distance equals the distance between the center <a href="CppPointer.htm">point</a>s<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> USE_CUSTOM_RIBI_COORDINAT3D<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D a <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),Coordinat3D(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> (*c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; c: v) { a <a href="CppOperatorPlusAssign.htm">+=</a> (*c); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D b <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(w.begin(),w.end(),Coordinat3D());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Distance(a,b);<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),Coordinat3D(0.0,0.0,0.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(init) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(*c),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(init) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(*c),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(init) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(*c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAccumulate.htm">std::accumulate</a>(w.begin(),w.end(),Coordinat3D(),&amp;<a href="CppRibi.htm">ribi</a>::foam::<a href="CppAdd.htm">Add</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,[](<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; init, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(init) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;0&gt;(c),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(init) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;1&gt;(c),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(init) <a href="CppOperatorPlus.htm">+</a> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get&lt;2&gt;(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::distance(a,b);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::CalcSimilaritySlow(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; w) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> w.size()) <b><a href="CppReturn.htm">return</a></b> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[w](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> init,<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find the closest coordinat in w to c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;::const_iterator closest {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMin_element.htm">std::min_element</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[c](<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Distance(lhs,c) &lt; Distance(rhs,c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> Distance(c,*closest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> distance;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::CalcSimilaritySlow(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt;&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; w) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> w.size()) <b><a href="CppReturn.htm">return</a></b> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[w](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> init,<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt;&amp; c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find the closest coordinat in w to c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;::const_iterator closest {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMin_element.htm">std::min_element</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[c](<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; lhs, <b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Distance(lhs,*c) &lt; Distance(rhs,*c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> Distance(*c,*closest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> distance;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Boundary&gt; &gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::CreateBoundaries(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files&amp; files,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; all_faces<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(files.GetFaces()-&gt;GetMaxFaceIndex().Get() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_faces.size()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Boundary<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> boundaries;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryIndex n_boundaries <a href="CppOperatorAssign.htm">=</a> files.GetBoundary()-&gt;GetMaxBoundaryIndex();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (BoundaryIndex i <a href="CppOperatorAssign.htm">=</a> BoundaryIndex(0); i<a href="CppOperatorNotEqual.htm">!=</a>n_boundaries; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFileItem&amp; item { files.GetBoundary()-&gt;GetItem(i) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> item.GetName();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> type <a href="CppOperatorAssign.htm">=</a> item.GetType();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt; faces;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex end_face { item.GetEndFace() } ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FaceIndex face_index <a href="CppOperatorAssign.htm">=</a> item.GetStartFace(); face_index<a href="CppOperatorNotEqual.htm">!=</a>end_face; <a href="CppOperatorIncrement.htm">++</a>face_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> fi <a href="CppOperatorAssign.htm">=</a> face_index.Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fi <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fi &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_faces.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces.push_back(all_faces[fi]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Face belongs to Boundary<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary&gt; boundary {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Boundary(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boundaries.push_back(boundary);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> boundaries;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::BoundaryFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::CreateBoundary() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;BoundaryFileItem&gt; items;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary&gt; boundary: m_boundaries)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!boundary-&gt;GetFaces().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(boundary-&gt;GetFaces().size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_faces &gt; 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Determine the start face: at which indices are the Faces in m_faces?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; indices;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(boundary-&gt;GetFaces().begin(),boundary-&gt;GetFaces().end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(indices),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>::const_iterator iter {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFind.htm">std::find</a>(m_faces.begin(),m_faces.end(),face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter <a href="CppOperatorNotEqual.htm">!=</a> m_faces.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(m_faces.begin(),iter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!indices.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indices.size() <a href="CppOperatorEqual.htm">==</a> boundary-&gt;GetFaces().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(indices.begin(),indices.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_indices <a href="CppOperatorAssign.htm">=</a> indices.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_indices &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>n_indices; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indices[i-1] <a href="CppOperatorNotEqual.htm">!=</a> indices[i]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All face indices must be unique");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (indices[i-1] <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorNotEqual.htm">!=</a> indices[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(indices[i-1] <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorEqual.htm">==</a> indices[i]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "All face indices must be adjacent");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex n_start_face <a href="CppOperatorAssign.htm">=</a> FaceIndex(indices[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(n_start_face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BoundaryFileItem item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundary-&gt;GetName(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundary-&gt;GetType(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_start_face<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;items.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> BoundaryFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundaryFile::GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> f;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Cell&gt; &gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::CreateEmptyCells(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files&amp; files)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Cell&gt; &gt; cells;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex n_cells <a href="CppOperatorAssign.htm">=</a> files.GetOwner()-&gt;CountNumberOfCells();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_cells <a href="CppOperatorEqual.htm">==</a> files.GetOwner()-&gt;CountNumberOfCells());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_cells &gt; CellIndex(0));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (CellIndex i=CellIndex(0); i<a href="CppOperatorNotEqual.htm">!=</a>n_cells; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Cell<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cells.push_back(cell);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!cells.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> cells;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::FacesFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::CreateFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;FacesFileItem&gt; items;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(items),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt; <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;face-&gt;Get<a href="CppPoint.htm">Point</a>s()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt; <a href="CppPointer.htm">point</a>_indices;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(<a href="CppPointer.htm">point</a>_indices),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>::const_iterator iter {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFind.htm">std::find</a>(m_<a href="CppPointer.htm">point</a>s.begin(),m_<a href="CppPointer.htm">point</a>s.end(),coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter <a href="CppOperatorNotEqual.htm">!=</a> m_<a href="CppPointer.htm">point</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdDistance.htm">std::distance</a>(m_<a href="CppPointer.htm">point</a>s.begin(),iter)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppPointer.htm">point</a>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPoint.htm">Point</a>Index(index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> FacesFileItem(<a href="CppPointer.htm">point</a>_indices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; f {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> FacesFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FacesFile::GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> f;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::foam::Mesh::CreateFacesWith<a href="CppPoint.htm">Point</a>s(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files&amp; files,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; all_<a href="CppPointer.htm">point</a>s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex n_faces { files.GetFaces()-&gt;GetMaxFaceIndex() };<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (FaceIndex i <a href="CppOperatorAssign.htm">=</a> FaceIndex(0); i<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>Index&gt; <a href="CppPointer.htm">point</a>_indices {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files.GetFaces()-&gt;GetItem(i).Get<a href="CppPoint.htm">Point</a>Indices()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; <a href="CppPointer.htm">point</a>_index: <a href="CppPointer.htm">point</a>_indices)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>_index.Get() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(all_<a href="CppPointer.htm">point</a>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.push_back(all_<a href="CppPointer.htm">point</a>s[<a href="CppPointer.htm">point</a>_index.Get() ]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Face(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNullptr.htm">nullptr</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNullptr.htm">nullptr</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;faces.push_back(face);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces.size() <a href="CppOperatorEqual.htm">==</a> files.GetFaces()-&gt;GetItems().size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> faces;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Files <a href="CppRibi.htm">ribi</a>::foam::Mesh::CreateFiles() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;BoundaryFile&gt; boundary {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateBoundary()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(boundary);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;FacesFile&gt; faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateFaces()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(faces);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;NeighbourFile&gt; neighbour {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateNeighbour()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(neighbour);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; owner {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateOwner()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(owner);<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Create<a href="CppPoint.htm">Point</a>s()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Files f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boundary,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;neighbour,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;owner,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> f;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::NeighbourFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::CreateNeighbour() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: m_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Cell&gt; neighbour { face-&gt;GetNeighbour() };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (neighbour <a href="CppOperatorLogicalOr.htm">||</a> !neighbour)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Not all cells have a neighbour, <b><a href="CppFor.htm">for</a></b> example in a 1x1x1 mesh");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!neighbour) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdFind.htm">std::find</a>(m_cells.begin(),m_cells.end(),neighbour) <a href="CppOperatorNotEqual.htm">!=</a> m_cells.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cells.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFind.htm">std::find</a>(m_cells.begin(),m_cells.end(),neighbour)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex cell_index(index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFileItem item(cell_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::NeighbourFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> NeighbourFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NeighbourFile::GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::OwnerFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::CreateOwner() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt; items;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(items),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[<b><a href="CppThis.htm">this</a></b>](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; owner <a href="CppOperatorAssign.htm">=</a> face-&gt;GetOwner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(owner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind.htm">std::find</a>(m_cells.begin(),m_cells.end(),owner);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iter <a href="CppOperatorNotEqual.htm">!=</a> m_cells.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdDistance.htm">std::distance</a>(m_cells.begin(),iter));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex cell_index(index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> OwnerFileItem(cell_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;OwnerFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> OwnerFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OwnerFile::GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile&gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::Create<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt; items;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppPointer.htm">point</a>s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(items),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; <a href="CppPointer.htm">point</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPoint.htm">Point</a>sFileItem(*<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPoint.htm">Point</a>sFile&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppPoint.htm">Point</a>sFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFile::GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::foam::Mesh::Create<a href="CppPoint.htm">Point</a>s(<b><a href="CppConst.htm">const</a></b> Files&amp; files)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(files.Get<a href="CppPoint.htm">Point</a>s());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; item: files.Get<a href="CppPoint.htm">Point</a>s()-&gt;GetItems())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(<a href="CppStdIs_same.htm">std::is_same</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem,<a href="CppPoint.htm">Point</a>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppPoint.htm">Point</a> is a <b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppFor.htm">for</a></b> <a href="CppPoint.htm">Point</a>sFileItem"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Coordinat3D(item.GetCoordinat())<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(p);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::FindMostSimilarFace(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt;&amp; coordinats<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the distance from focal coordinats to each face its coordinat<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; distances;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_faces.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; m_faces.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_faces[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance <a href="CppOperatorAssign.htm">=</a> CalcSimilarityFaster(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAdd.htm">Add</a>Const(m_faces[i]-&gt;Get<a href="CppPoint.htm">Point</a>s()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coordinats<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(distance);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;distances.push_back(distance);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find the most similar<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdDistance.htm">std::distance</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distances.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMin_element.htm">std::min_element</a>(distances.begin(),distances.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Return the face<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces[index]<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; &gt; <a href="CppRibi.htm">ribi</a>::foam::Mesh::GetFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; &gt; v;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_faces.begin(),m_faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Face&gt; old_face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; new_face(old_face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(old_face <a href="CppOperatorEqual.htm">==</a> new_face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> new_face;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::GetNumberOfBoundaries() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_boundaries.size());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::GetNumberOfCells() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_cells.size());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::GetNumberOfFaces() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_faces.size());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::GetNumberOf<a href="CppPoint.htm">Point</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppPointer.htm">point</a>s.size());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::ReorderFaces()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;AreFacesOrdered());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_boundaries <a href="CppOperatorAssign.htm">=</a> m_boundaries.size();<br/>
&nbsp;&nbsp;<a href="CppStdSize_t.htm">std::size_t</a> new_face_index <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>The index to put the next Face at<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_boundaries; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary&gt; boundary <a href="CppOperatorAssign.htm">=</a> m_boundaries[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_faces <a href="CppOperatorAssign.htm">=</a> boundary-&gt;GetFaces().size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_faces; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; boundary-&gt;GetFaces().size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; &gt;::<a href="CppIterator.htm">iterator</a> here {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFind.htm">std::find</a>(m_faces.begin(),m_faces.end(),boundary-&gt;GetFaces()[j])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(here <a href="CppOperatorNotEqual.htm">!=</a> m_faces.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> old_face_index <a href="CppOperatorAssign.htm">=</a> <a href="CppStdDistance.htm">std::distance</a>(m_faces.begin(),here);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(old_face_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> new_face_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_faces[old_face_index],m_faces[new_face_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>new_face_index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;AreFacesOrdered());<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::Mesh::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> the number of boundary faces is correct<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::Files<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v { Files::CreateTestFiles() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; n_internal_mesh_faces_expected { 0,0,1,4,12,133 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> n_internal_mesh_faces_expected.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_meshes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> mesh_index <a href="CppOperatorAssign.htm">=</a> 0; mesh_index <a href="CppOperatorNotEqual.htm">!=</a> n_meshes; <a href="CppOperatorIncrement.htm">++</a>mesh_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Mesh mesh(*v[mesh_index]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; &gt; mesh_faces {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mesh.GetFaces()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_internal {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount_if.htm">std::count_if</a>(mesh_faces.begin(),mesh_faces.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face-&gt;GetOwner());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face-&gt;GetNeighbour(); <a href="CppComment.htm">//</a>internal faces have a neighbour<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_internal <a href="CppOperatorEqual.htm">==</a> n_internal_mesh_faces_expected[mesh_index]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Must have as much internal faces as expected"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcSimilarity: empty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcSimilarityFaster(v,w) &lt; 0.001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcSimilarity: one <a href="CppPointer.htm">point</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D c(1.1,2.2,3.3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; d {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Coordinat3D(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> *d); <a href="CppComment.htm">//</a>Exact comparison<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::distance(c,*d) &lt; 0.0000001); <a href="CppComment.htm">//</a>Fuzzier comparison<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcSimilarityFaster(v,w) &lt; 0.001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcSimilarity: two <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D c(1.1,2.2,3.3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; d {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Coordinat3D(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> *d); <a href="CppComment.htm">//</a>Exact comparison<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::distance(c,*d) &lt; 0.0000001); <a href="CppComment.htm">//</a>Fuzzier comparison<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D c(2.2,3.3,4.4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; d {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Coordinat3D(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> *d); <a href="CppComment.htm">//</a>Exact comparison<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::distance(c,*d) &lt; 0.0000001); <a href="CppComment.htm">//</a>Fuzzier comparison<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcSimilarityFaster(v,w) &lt; 0.001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CalcSimilarity: one versus two <a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; &gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D c(1.1,2.2,3.3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; d {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Coordinat3D(c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> *d); <a href="CppComment.htm">//</a>Exact comparison<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::distance(c,*d) &lt; 0.0000001); <a href="CppComment.htm">//</a>Fuzzier comparison<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D c(2.2,3.3,4.4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CalcSimilarityFaster(v,w) &gt; 1000000000.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find most similar Faces<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Handcraft Faces, put these in mesh<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>For the <a href="CppPoint.htm">Point</a>s, I used the same setup as in <a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/<a href="CppPointer.htm">point</a>s_1x1x1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> 8((0 0 0) (1 0 0) (0 1 0) (1 1 0) (0 0 1) (1 0 1) (0 1 1) (1 1 1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> The order of <a href="CppPointer.htm">point</a>s is determined by blockMesh<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p0 { <b><a href="CppNew.htm">new</a></b> Coordinat3D(0.0,0.0,0.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p1 { <b><a href="CppNew.htm">new</a></b> Coordinat3D(1.0,0.0,0.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p2 { <b><a href="CppNew.htm">new</a></b> Coordinat3D(0.0,1.0,0.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p3 { <b><a href="CppNew.htm">new</a></b> Coordinat3D(1.0,1.0,0.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p4 { <b><a href="CppNew.htm">new</a></b> Coordinat3D(0.0,0.0,1.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p5 { <b><a href="CppNew.htm">new</a></b> Coordinat3D(1.0,0.0,1.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p6 { <b><a href="CppNew.htm">new</a></b> Coordinat3D(0.0,1.0,1.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; p7 { <b><a href="CppNew.htm">new</a></b> Coordinat3D(1.0,1.0,1.0) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p0); <a href="CppAssert.htm">assert</a>(p1); <a href="CppAssert.htm">assert</a>(p2); <a href="CppAssert.htm">assert</a>(p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p4); <a href="CppAssert.htm">assert</a>(p5); <a href="CppAssert.htm">assert</a>(p6); <a href="CppAssert.htm">assert</a>(p7);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell { <b><a href="CppNew.htm">new</a></b> Cell };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> cells { cell };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; n0; <a href="CppComment.htm">//</a>No neighbours in a 1x1 mesh<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; n1; <a href="CppComment.htm">//</a>No neighbours in a 1x1 mesh<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; n2; <a href="CppComment.htm">//</a>No neighbours in a 1x1 mesh<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; n3; <a href="CppComment.htm">//</a>No neighbours in a 1x1 mesh<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; n4; <a href="CppComment.htm">//</a>No neighbours in a 1x1 mesh<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; n5; <a href="CppComment.htm">//</a>No neighbours in a 1x1 mesh<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; own0 { cell }; <a href="CppComment.htm">//</a>The only Cell owns all Faces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; own1 { cell }; <a href="CppComment.htm">//</a>The only Cell owns all Faces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; own2 { cell }; <a href="CppComment.htm">//</a>The only Cell owns all Faces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; own3 { cell }; <a href="CppComment.htm">//</a>The only Cell owns all Faces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; own4 { cell }; <a href="CppComment.htm">//</a>The only Cell owns all Faces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; own5 { cell }; <a href="CppComment.htm">//</a>The only Cell owns all Faces<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s { p0,p1,p2,p3,p4,p5,p6,p7 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>For the Faces, I used the same setup as in <a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/faces_1x1x1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;6<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;4(0 2 3 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;4(0 4 6 2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;4(0 1 5 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;4(1 3 7 5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;4(2 6 7 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;4(4 5 7 6)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> The order of faces is determined by blockMesh<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; f0 { <b><a href="CppNew.htm">new</a></b> Face(n0,own0, { p0, p2, p3, p1 } ) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; f1 { <b><a href="CppNew.htm">new</a></b> Face(n1,own1, { p0, p4, p6, p2 } ) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; f2 { <b><a href="CppNew.htm">new</a></b> Face(n2,own2, { p0, p1, p5, p4 } ) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; f3 { <b><a href="CppNew.htm">new</a></b> Face(n3,own3, { p1, p3, p7, p5 } ) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; f4 { <b><a href="CppNew.htm">new</a></b> Face(n4,own4, { p2, p6, p7, p3 } ) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; f5 { <b><a href="CppNew.htm">new</a></b> Face(n5,own5, { p4, p5, p7, p6 } ) };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> faces { f0,f1,f2,f3,f4,f5 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cell-&gt;AssignOwnedFaces( { f0,f1,f2,f3,f4,f5 } );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary&gt; boundary { <b><a href="CppNew.htm">new</a></b> Boundary(&nbsp;&nbsp;{f0,f1,f2,f3,f4,f5 },"<b><a href="CppDefault.htm">default</a></b>Faces",PatchFieldType::slip ) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> boundaries { boundary };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Mesh m(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundaries,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;faces,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: faces)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppPointer.htm">point</a>s { <a href="CppAdd.htm">Add</a>Const(face-&gt;Get<a href="CppPoint.htm">Point</a>s()) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Coordinat3D&gt; coordinats;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(coordinats),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; shared_coordinat)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Coordinat3D(*shared_coordinat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>For every Face, extract the coordinats<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>FindMostSimilar should find back the original Face<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; result {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.FindMostSimilarFace(coordinats)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(result);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (face <a href="CppOperatorNotEqual.htm">!=</a> result)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*result);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(result <a href="CppOperatorEqual.htm">==</a> face);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::Mesh::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Mesh&amp; mesh) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Smallest: <a href="CppPointer.htm">point</a>s");<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppPoint.htm">Point</a>s: ";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Coordinat3D&gt; <a href="CppPointer.htm">point</a>: mesh.m_<a href="CppPointer.htm">point</a>s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ToStr(*<a href="CppPointer.htm">point</a>) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Small: faces");<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Faces:\n";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Face&gt; face: mesh.m_faces)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* Neighbour: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face-&gt;GetNeighbour() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* Owner: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face-&gt;GetOwner() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* Coordinats: ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Coordinat3D&gt; coordinat: face-&gt;Get<a href="CppPoint.htm">Point</a>s())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> coordinat <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ' ';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Bigger: boundaries");<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Boundary:\n";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Boundary&gt; boundary: mesh.m_boundaries)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* Name: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> boundary-&gt;GetName() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* Type: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> boundary-&gt;GetType() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* Faces: ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Face&gt; face: boundary-&gt;GetFaces())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ' ';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Biggest: cells");<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Cells:\n";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Cell&gt; cell: mesh.m_cells)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* Neighbour: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> cell-&gt;GetNeighbour() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* Faces: ";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::Face&gt; face: cell-&gt;GetOwnedFaces())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ' ';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamneighbourfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamneighbourfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMNEIGHBOUR<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMNEIGHBOUR<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamneighbourfileitem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM boundary file<br/>
<b><a href="CppStruct.htm">struct</a></b> NeighbourFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> NeighbourFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) : NeighbourFile(Parse(filename)) {}<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> NeighbourFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt;&amp; items <a href="CppOperatorAssign.htm">=</a> {});<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the FaceIndex is present<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CanGetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DON'T: Use OwnerFile::CountNumberOfCells instead<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>WHY: because all cell indices are detected in owner<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the first CellIndex beyond the cell indices present<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Or: find the first CellIndex that does not exist <a href="CppAny.htm">any</a>more<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> CellIndex CountNumberOfCells() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt;&amp; GetItems() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_items; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Assumes CanGetItem <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; GetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfItems() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size()); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index, <b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; item) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> NeighbourFile(<a href="CppStdIstream.htm">std::istream</a>&amp; is) : NeighbourFile(Parse(is)) {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items 'neighbour' contains<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt; m_items;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> NeighbourFile Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> NeighbourFile Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, NeighbourFile&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, NeighbourFile&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMNEIGHBOUR<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamneighbourfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamneighbourfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamneighbourfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamneighbourfileitem.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfaceindex.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::NeighbourFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt;&amp; items)<br/>
&nbsp;&nbsp;: m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_items(items)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::CanGetItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> face_index.Get() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size());<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("labelList","constant/polyMesh","","neighbour");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::NeighbourFileItem&amp; <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::GetItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(!CanGetItem(face_index))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("BREAK");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanGetItem(face_index));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_items[ <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(face_index.Get()) ];<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::NeighbourFile <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is)<br/>
{<br/>
&nbsp;&nbsp;NeighbourFile b;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> b;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::NeighbourFile <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tmp_filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName() };<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppCopyFile.htm">CopyFile</a>(filename,tmp_filename);<br/>
&nbsp;&nbsp;Header::CleanFile(tmp_filename);<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(tmp_filename.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFile file { Parse(f) };<br/>
&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(tmp_filename);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> file;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::SetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index, <b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; item) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(face_index.Get() &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size()));<br/>
&nbsp;&nbsp;m_items[ face_index.Get() ] <a href="CppOperatorAssign.htm">=</a> item;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetItem(face_index) <a href="CppOperatorEqual.htm">==</a> item);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::NeighbourFile::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some initial data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header("some_name","some_location","some_object");<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt; items;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NeighbourFileItem item(CellIndex(i * i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;items.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFile c(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorEqual.htm">==</a> header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header other_header("some_other_name","some_other_location","some_other_object");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorNotEqual.htm">!=</a> other_header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFile c(other_header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt; other_items;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NeighbourFileItem item(CellIndex(2 * i * i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFile c(header,other_items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stream conversion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NeighbourFile c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read from testing file<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> test_index <a href="CppOperatorAssign.htm">=</a> 0; test_index<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>test_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (test_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x1"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_2x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_3x4x5"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("foam::Files::CreateTestFiles: unknown test index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!filename_appendix.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base { GetDefaultHeader().GetObject() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> resources_path { ":/<a href="CppOpenFoam.htm">CppOpenFoam</a>/files/" <a href="CppOperatorPlus.htm">+</a> filename };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f( resources_path.c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.copy(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NeighbourFile b(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (!b.GetItems().empty() <a href="CppOperatorLogicalOr.htm">||</a> b.GetItems().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "If a mesh has no non-bhoundary cells, neighbour can be empty");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::Header::NeighbourFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetHeader() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetHeader())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt;&amp; lhs_items <a href="CppOperatorAssign.htm">=</a> lhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;NeighbourFileItem&gt;&amp; rhs_items <a href="CppOperatorAssign.htm">=</a> rhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_items.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_items.size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(lhs_items.begin(),lhs_items.end(),rhs_items.begin());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, NeighbourFile&amp; f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.m_items.empty()); <a href="CppComment.htm">//</a>Make empty otherwise<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read header<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_header;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read items<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_items <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> opening_bracket <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (c <a href="CppOperatorNotEqual.htm">!=</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorNotEqual.htm">!=</a> '{')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start eating n_items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorMultiplyAssign.htm">*=</a> 10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorMinus.htm">-</a> '0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n <a href="CppOperatorLessEqual.htm">&lt;=</a> 9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorPlusAssign.htm">+=</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;opening_bracket <a href="CppOperatorAssign.htm">=</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(opening_bracket);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NeighbourFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read once, push n_items <a href="CppTime.htm">time</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;NeighbourFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comments until bracket close<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_close <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (bracket_close <a href="CppOperatorNotEqual.htm">!=</a> ')' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorNotEqual.htm">!=</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close <a href="CppOperatorEqual.htm">==</a> ')' <a href="CppOperatorLogicalOr.htm">||</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '{' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> NeighbourFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_items.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFileItem item: f.m_items)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamneighbourfileitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamneighbourfileitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMNEIGHBOUR<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMNEIGHBOUR<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamcellindex.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>An item in an OpenFOAM 'neighbour' file<br/>
<a href="CppComment.htm">///</a>A neighbour files contains, <b><a href="CppFor.htm">for</a></b> every face, the cell index of which the face is a neighbour of<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>For example, from <a href="CppOperatorDivide.htm">/</a><a href="CppClass.htm">Classes</a>/<a href="CppOpenFoam.htm">CppOpenFoam</a>/neighbour_1x2x2:<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>4(1 2 3 3)<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Equivalent to, as faces_1x2x2 contains twenty faces:<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>20(1 2 3 3 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorMinus.htm">-</a>1)<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>This means that:<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> Face 0 has Cell 1 as its neighbour, and is thus an internal face<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> Face 1 has Cell 2 as its neighbour, and is thus an internal face<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> Face 2 has Cell 3 as its neighbour, and is thus an internal face<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> Face 3 has Cell 3 as its neighbour, and is thus an internal face<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> All other Faces have no neighbours, and are thus boundary faces<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The file 'neighbour' has path '[<b><a href="CppCase.htm">case</a></b>_folder]/constant/polyMesh/neighbour'<br/>
<b><a href="CppStruct.htm">struct</a></b> NeighbourFileItem<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A CellIndex of <a href="CppOperatorMinus.htm">-</a>1 denotes that a Face has no Neighbour<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> NeighbourFileItem(<b><a href="CppConst.htm">const</a></b> CellIndex cell_index <a href="CppOperatorAssign.htm">=</a> CellIndex(-1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A CellIndex of <a href="CppOperatorMinus.htm">-</a>1 denotes that a Face has no Neighbour<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex&amp; GetCellIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_cell_index; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;CellIndex m_cell_index;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> OpenFoamNeighbourFile;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, NeighbourFileItem&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, NeighbourFileItem&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMNEIGHBOUR<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamneighbourfileitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamneighbourfileitem.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamneighbourfileitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::NeighbourFileItem::NeighbourFileItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex cell_index<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_cell_index{cell_index}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_cell_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Also allow <a href="CppOperatorMinus.htm">-</a>1"); <a href="CppComment.htm">//</a>?NONSENSE or not?<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::NeighbourFileItem::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::NeighbourFileItem::Test");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> NeighbourFileItem i(CellIndex(123));<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i;<br/>
&nbsp;&nbsp;NeighbourFileItem j;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> j;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorNotEqual.htm">!=</a> j)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::NeighbourFileItem::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetCellIndex() <a href="CppOperatorEqual.htm">==</a> rhs.GetCellIndex()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> NeighbourFileItem&amp; item) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetCellIndex();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, NeighbourFileItem&amp; f)<br/>
{<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_cell_index;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetCellIndex().Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamownerfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamownerfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMOWNER<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMOWNER<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamownerfileitem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM boundary file<br/>
<b><a href="CppStruct.htm">struct</a></b> OwnerFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> OwnerFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) : OwnerFile(Parse(filename)) {}<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> OwnerFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt;&amp; items <a href="CppOperatorAssign.htm">=</a> {});<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the first CellIndex beyond the cell indices present<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Or: find the first CellIndex that does not exist <a href="CppAny.htm">any</a>more<br/>
&nbsp;&nbsp;CellIndex CountNumberOfCells() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt; GetItems() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_items; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; GetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; item) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items 'neighbour' contains<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt; m_items;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> OwnerFile(<a href="CppStdIstream.htm">std::istream</a>&amp; is) : OwnerFile(Parse(is)) {}<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> OwnerFile Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> OwnerFile Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> OwnerFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, OwnerFile&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> OwnerFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> OwnerFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> OwnerFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, OwnerFile&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMOWNER<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamownerfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamownerfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamownerfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfaceindex.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamownerfileitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::OwnerFile::OwnerFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt;&amp; items)<br/>
&nbsp;&nbsp;: m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_items(items)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::CellIndex <a href="CppRibi.htm">ribi</a>::foam::OwnerFile::CountNumberOfCells() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (!m_items.empty() <a href="CppOperatorLogicalOr.htm">||</a> m_items.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "If an OwnerFile is empty, there is 1 cell, otherwise 1+max_value_found");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_items.empty()) <b><a href="CppReturn.htm">return</a></b> CellIndex(1);<br/>
<br/>
&nbsp;&nbsp;CellIndex i <a href="CppOperatorAssign.htm">=</a> (*<a href="CppStdMax_element.htm">std::max_element</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_items.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_items.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetCellIndex() &lt; rhs.GetCellIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)).GetCellIndex();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorPlus.htm">+</a>1, because <b><a href="CppIf.htm">if</a></b> the highest cell index found is x, there are x+1 cells<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorIncrement.htm">++</a>i;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::OwnerFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("labelList","constant/polyMesh","","owner");<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::OwnerFileItem&amp; <a href="CppRibi.htm">ribi</a>::foam::OwnerFile::GetItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::FaceIndex&amp; face_index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> face_index.Get();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_items[i];<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::OwnerFile <a href="CppRibi.htm">ribi</a>::foam::OwnerFile::Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is)<br/>
{<br/>
&nbsp;&nbsp;OwnerFile b;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> b;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::OwnerFile <a href="CppRibi.htm">ribi</a>::foam::OwnerFile::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tmp_filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName() };<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppCopyFile.htm">CopyFile</a>(filename,tmp_filename);<br/>
&nbsp;&nbsp;Header::CleanFile(tmp_filename);<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(tmp_filename.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile file { Parse(f) };<br/>
&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(tmp_filename);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> file;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::OwnerFile::SetItem(<b><a href="CppConst.htm">const</a></b> FaceIndex&amp; face_index, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; item) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> face_index.Get();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_items.size()));<br/>
&nbsp;&nbsp;m_items[i] <a href="CppOperatorAssign.htm">=</a> item;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_items[i] <a href="CppOperatorEqual.htm">==</a> item);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::OwnerFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::OwnerFile::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some initial data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header("some_name","some_location","some_object");<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt; items;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OwnerFileItem item(CellIndex(i * i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;items.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile c(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorEqual.htm">==</a> header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header other_header("some_other_name","some_other_location","some_other_object");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorNotEqual.htm">!=</a> other_header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile c(other_header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt; other_items;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OwnerFileItem item(CellIndex(2 * i * i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile c(header,other_items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OwnerFile c(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FaceIndex i(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex j { c.GetItem(i).GetCellIndex() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFileItem new_item(CellIndex(j.Get() <a href="CppOperatorPlus.htm">+</a> 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.GetItem(i) <a href="CppOperatorNotEqual.htm">!=</a> new_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;c.SetItem(i,new_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.GetItem(i) <a href="CppOperatorEqual.htm">==</a> new_item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stream conversion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OwnerFile c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read from testing file<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> test_index <a href="CppOperatorAssign.htm">=</a> 0; test_index<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>test_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (test_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x1"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_2x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_3x4x5"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("foam::Files::CreateTestFiles: unknown test index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!filename_appendix.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base { GetDefaultHeader().GetObject() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> resources_path { ":/<a href="CppOpenFoam.htm">CppOpenFoam</a>/files/" <a href="CppOperatorPlus.htm">+</a> filename };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f( resources_path.c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.copy(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OwnerFile b(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.GetItems().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!b.GetItems().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::Header::OwnerFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> OwnerFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetHeader() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetHeader())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt;&amp; lhs_items <a href="CppOperatorAssign.htm">=</a> lhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;OwnerFileItem&gt;&amp; rhs_items <a href="CppOperatorAssign.htm">=</a> rhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_items.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_items.size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(lhs_items.begin(),lhs_items.end(),rhs_items.begin());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> OwnerFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, OwnerFile&amp; f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.m_items.empty()); <a href="CppComment.htm">//</a>Make empty otherwise<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read header<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_header;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read items<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_items <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> opening_bracket <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (c <a href="CppOperatorNotEqual.htm">!=</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorNotEqual.htm">!=</a> '{')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start eating n_items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorMultiplyAssign.htm">*=</a> 10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorMinus.htm">-</a> '0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n <a href="CppOperatorLessEqual.htm">&lt;=</a> 9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorPlusAssign.htm">+=</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;opening_bracket <a href="CppOperatorAssign.htm">=</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(opening_bracket);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OwnerFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read once, push n_items <a href="CppTime.htm">time</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OwnerFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comments until bracket close<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_close <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (bracket_close <a href="CppOperatorNotEqual.htm">!=</a> ')' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorNotEqual.htm">!=</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close <a href="CppOperatorEqual.htm">==</a> ')' <a href="CppOperatorLogicalOr.htm">||</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '{' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> OwnerFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_items.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFileItem item: f.m_items)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamownerfileitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamownerfileitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMOWNER<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMOWNER<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamcellindex.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>An item in an OpenFOAM boundary file<br/>
<b><a href="CppStruct.htm">struct</a></b> OwnerFileItem<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> OwnerFileItem(<b><a href="CppConst.htm">const</a></b> CellIndex&amp; cell_index <a href="CppOperatorAssign.htm">=</a> CellIndex(0));<br/>
<br/>
&nbsp;&nbsp;CellIndex GetCellIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_cell_index; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;CellIndex m_cell_index;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> OpenFoamOwnerFile;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, OwnerFileItem&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; rhs);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; rhs);<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; f);<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, OwnerFileItem&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMOWNER<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamownerfileitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamownerfileitem.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamownerfileitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::OwnerFileItem::OwnerFileItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> CellIndex&amp; cell_index<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_cell_index{cell_index}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_cell_index.Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::OwnerFileItem::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::OwnerFileItem::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFileItem i(CellIndex(123));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFileItem j(CellIndex(123));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j <a href="CppOperatorEqual.htm">==</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFileItem i(CellIndex(123));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFileItem j(CellIndex(234));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j <a href="CppOperatorNotEqual.htm">!=</a> i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b> and <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> OwnerFileItem i(CellIndex(123));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OwnerFileItem j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorNotEqual.htm">!=</a> j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::OwnerFileItem::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetCellIndex() <a href="CppOperatorEqual.htm">==</a> rhs.GetCellIndex()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> OwnerFileItem&amp; item)<br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetCellIndex();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, OwnerFileItem&amp; f)<br/>
{<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_cell_index;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f.GetCellIndex().Get() &lt; 0) <a href="CppTRACE.htm">TRACE</a>(f.GetCellIndex());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetCellIndex().Get() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamparseerror.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamparseerror.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMPARSEERROR_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMPARSEERROR_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> ParseError : <b><a href="CppPublic.htm">public</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> ParseError(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename <a href="CppOperatorAssign.htm">=</a> "",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> line <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_filename;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_line;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> CreateErrorMsg(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> line) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMPARSEERROR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamparseerror.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamparseerror.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamparseerror.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::ParseError::ParseError(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> line)<br/>
: <a href="CppStdRuntime_error.htm">std::runtime_error</a>(CreateErrorMsg(filename,line).c_str()),<br/>
&nbsp;&nbsp;m_filename(filename),<br/>
&nbsp;&nbsp;m_line(line)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::ParseError::CreateErrorMsg(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> line) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "OpenFOAM file parsing error in ";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (filename.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "unknown file";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "file '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " in ";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "unknown line";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "line " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> line;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampatchfieldtype.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampatchfieldtype.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMPATCHFIELDTYPE_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMPATCHFIELDTYPE_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
/<a href="CppComment.htm">//</a> From http://openfoam.org/docs/user/mesh-description.php, pragraph 5.1.1.4 Boundary:<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; A boundary is a list of patches, each of which is associated with a boundary condition.<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; A patch is a list of face labels which clearly must contain only boundary faces<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; and no internal faces. The boundary is required to be closed,<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; i.e. the sum all boundary face area vectors equates to zero to machine tolerance.<br/>
/<a href="CppComment.htm">//</a> To indicate internal faces, use no_patch_field<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> PatchFieldType {<br/>
&nbsp;&nbsp;advective,<br/>
&nbsp;&nbsp;alphaSgsJayatillekeWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;alphaSgsWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;alphatJayatillekeWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;alphatWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;buoyantPressure,<br/>
&nbsp;&nbsp;calculated,<br/>
&nbsp;&nbsp;codedFixedValue,<br/>
&nbsp;&nbsp;codedMixed,<br/>
&nbsp;&nbsp;compressible_epsilonWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;compressible_kqRWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;compressible_omegaWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;compressible_temperatureThermoBaffle1D_constSolidThermoPhysics,<br/>
&nbsp;&nbsp;compressible_temperatureThermoBaffle1D_expoSolidThermoPhysics,<br/>
&nbsp;&nbsp;compressible_turbulentHeatFluxTemperature,<br/>
&nbsp;&nbsp;compressible_turbulentMixingLengthDissipationRateInlet,<br/>
&nbsp;&nbsp;compressible_turbulentMixingLengthFrequencyInlet,<br/>
&nbsp;&nbsp;compressible_turbulentTemperatureCoupledBaffle,<br/>
&nbsp;&nbsp;compressible_turbulentTemperatureCoupledBaffleMixed,<br/>
&nbsp;&nbsp;compressible_turbulentTemperatureRadCoupledMixed,<br/>
&nbsp;&nbsp;cyclic,<br/>
&nbsp;&nbsp;cyclicAMI,<br/>
&nbsp;&nbsp;cyclicSlip,<br/>
&nbsp;&nbsp;directionMixed,<br/>
&nbsp;&nbsp;empty,<br/>
&nbsp;&nbsp;<b><a href="CppExtern.htm">extern</a></b>alWallHeatFluxTemperature,<br/>
&nbsp;&nbsp;fan,<br/>
&nbsp;&nbsp;fanPressure,<br/>
&nbsp;&nbsp;fixedEnthalpy,<br/>
&nbsp;&nbsp;fixedFluxPressure,<br/>
&nbsp;&nbsp;fixedGradient,<br/>
&nbsp;&nbsp;fixedInternalEnergy,<br/>
&nbsp;&nbsp;fixedInternalValue,<br/>
&nbsp;&nbsp;fixedPressureCompressibleDensity,<br/>
&nbsp;&nbsp;fixedValue,<br/>
&nbsp;&nbsp;freestream,<br/>
&nbsp;&nbsp;freestreamPressure,<br/>
&nbsp;&nbsp;gradientEnthalpy,<br/>
&nbsp;&nbsp;gradientInternalEnergy,<br/>
&nbsp;&nbsp;htcConvection,<br/>
&nbsp;&nbsp;inletOutlet,<br/>
&nbsp;&nbsp;inletOutletTotalTemperature,<br/>
&nbsp;&nbsp;mapped,<br/>
&nbsp;&nbsp;mappedField,<br/>
&nbsp;&nbsp;mappedFixedInternalValue,<br/>
&nbsp;&nbsp;mappedFixedPushedInternalValue,<br/>
&nbsp;&nbsp;mixed,<br/>
&nbsp;&nbsp;mixedEnthalpy,<br/>
&nbsp;&nbsp;mixedInternalEnergy,<br/>
&nbsp;&nbsp;muSgsUSpaldingWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;multiphaseFixedFluxPressure,<br/>
&nbsp;&nbsp;mutLowReWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;mutURoughWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;mutUSpaldingWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;mutUWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;mutkRoughWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;mutkWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;no_patch_field, <a href="CppComment.htm">//</a>To indicate that a 'no boundary'; that is, an internal face<br/>
&nbsp;&nbsp;nonuniformTransformCyclic,<br/>
&nbsp;&nbsp;oscillatingFixedValue,<br/>
&nbsp;&nbsp;outletInlet,<br/>
&nbsp;&nbsp;outletMappedUniformInlet,<br/>
&nbsp;&nbsp;partialSlip,<br/>
&nbsp;&nbsp;patch,<br/>
&nbsp;&nbsp;phaseHydro<b><a href="CppStatic.htm">static</a></b>Pressure,<br/>
&nbsp;&nbsp;processor,<br/>
&nbsp;&nbsp;processorCyclic,<br/>
&nbsp;&nbsp;rotatingTotalPressure,<br/>
&nbsp;&nbsp;sliced,<br/>
&nbsp;&nbsp;slip,<br/>
&nbsp;&nbsp;symmetryPlane,<br/>
&nbsp;&nbsp;syringePressure,<br/>
&nbsp;&nbsp;<a href="CppTime.htm">time</a>VaryingMappedFixedValue,<br/>
&nbsp;&nbsp;totalFlowRateAdvectiveDiffusive,<br/>
&nbsp;&nbsp;totalPressure,<br/>
&nbsp;&nbsp;totalTemperature,<br/>
&nbsp;&nbsp;turbulentInlet,<br/>
&nbsp;&nbsp;turbulentIntensityKineticEnergyInlet,<br/>
&nbsp;&nbsp;uniformDensityHydro<b><a href="CppStatic.htm">static</a></b>Pressure,<br/>
&nbsp;&nbsp;uniformFixedValue,<br/>
&nbsp;&nbsp;uniformTotalPressure,<br/>
&nbsp;&nbsp;wallHeatTransfer,<br/>
&nbsp;&nbsp;waveSurfacePressure,<br/>
&nbsp;&nbsp;waveTransmissive,<br/>
&nbsp;&nbsp;wedge,<br/>
&nbsp;&nbsp;zeroGradient,<br/>
&nbsp;&nbsp;n_types <a href="CppComment.htm">//</a>Used <b><a href="CppFor.htm">for</a></b> <a href="CppDebug.htm">debugging</a> only, keep at last position<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMPATCHFIELDTYPE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampatchfieldtype.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampatchfieldtype.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtype.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampatchfieldtypes.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampatchfieldtypes.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMPATCHFIELDTYPES_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMPATCHFIELDTYPES_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bimap.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> PatchFieldTypes<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PatchFieldType&gt; GetAllTypes();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> PatchFieldType type);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> PatchFieldType ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt; m_map;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt; CreateMap();<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> PatchFieldType patch_field) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, PatchFieldType&amp; patch_field);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMPATCHFIELDTYPES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampatchfieldtypes.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampatchfieldtypes.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtypes.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bimap.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::foam::PatchFieldTypes::m_map;<br/>
<br/>
<a href="CppBoostBimap.htm">boost::bimap</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::foam::PatchFieldTypes::CreateMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt; m;<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::advective,"advective"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::alphaSgsJayatillekeWall<a href="CppFunction.htm">Function</a>,"alphaSgsJayatillekeWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::alphaSgsWall<a href="CppFunction.htm">Function</a>,"alphaSgsWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::alphatJayatillekeWall<a href="CppFunction.htm">Function</a>,"alphatJayatillekeWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::alphatWall<a href="CppFunction.htm">Function</a>,"alphatWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::buoyantPressure,"buoyantPressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::calculated,"calculated"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::codedFixedValue,"codedFixedValue"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::codedMixed,"codedMixed"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_epsilonWall<a href="CppFunction.htm">Function</a>,"compressible_epsilonWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_kqRWall<a href="CppFunction.htm">Function</a>,"compressible_kqRWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_omegaWall<a href="CppFunction.htm">Function</a>,"compressible_omegaWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_temperatureThermoBaffle1D_constSolidThermoPhysics,"compressible_temperatureThermoBaffle1D_constSolidThermoPhysics"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_temperatureThermoBaffle1D_expoSolidThermoPhysics,"compressible_temperatureThermoBaffle1D_expoSolidThermoPhysics"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_turbulentHeatFluxTemperature,"compressible_turbulentHeatFluxTemperature"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_turbulentMixingLengthDissipationRateInlet,"compressible_turbulentMixingLengthDissipationRateInlet"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_turbulentMixingLengthFrequencyInlet,"compressible_turbulentMixingLengthFrequencyInlet"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_turbulentTemperatureCoupledBaffle,"compressible_turbulentTemperatureCoupledBaffle"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_turbulentTemperatureCoupledBaffleMixed,"compressible_turbulentTemperatureCoupledBaffleMixed"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::compressible_turbulentTemperatureRadCoupledMixed,"compressible_turbulentTemperatureRadCoupledMixed"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::cyclic,"cyclic"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::cyclicAMI,"cyclicAMI"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::cyclicSlip,"cyclicSlip"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::directionMixed,"directionMixed"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::empty,"empty"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::<b><a href="CppExtern.htm">extern</a></b>alWallHeatFluxTemperature,"<b><a href="CppExtern.htm">extern</a></b>alWallHeatFluxTemperature"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fan,"fan"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fanPressure,"fanPressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fixedEnthalpy,"fixedEnthalpy"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fixedFluxPressure,"fixedFluxPressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fixedGradient,"fixedGradient"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fixedInternalEnergy,"fixedInternalEnergy"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fixedInternalValue,"fixedInternalValue"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fixedPressureCompressibleDensity,"fixedPressureCompressibleDensity"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::fixedValue,"fixedValue"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::freestream,"freestream"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::freestreamPressure,"freestreamPressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::gradientEnthalpy,"gradientEnthalpy"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::gradientInternalEnergy,"gradientInternalEnergy"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::htcConvection,"htcConvection"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::inletOutlet,"inletOutlet"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::inletOutletTotalTemperature,"inletOutletTotalTemperature"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mapped,"mapped"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mappedField,"mappedField"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mappedFixedInternalValue,"mappedFixedInternalValue"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mappedFixedPushedInternalValue,"mappedFixedPushedInternalValue"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mixed,"mixed"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mixedEnthalpy,"mixedEnthalpy"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mixedInternalEnergy,"mixedInternalEnergy"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::muSgsUSpaldingWall<a href="CppFunction.htm">Function</a>,"muSgsUSpaldingWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::multiphaseFixedFluxPressure,"multiphaseFixedFluxPressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mutLowReWall<a href="CppFunction.htm">Function</a>,"mutLowReWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mutURoughWall<a href="CppFunction.htm">Function</a>,"mutURoughWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mutUSpaldingWall<a href="CppFunction.htm">Function</a>,"mutUSpaldingWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mutUWall<a href="CppFunction.htm">Function</a>,"mutUWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mutkRoughWall<a href="CppFunction.htm">Function</a>,"mutkRoughWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::mutkWall<a href="CppFunction.htm">Function</a>,"mutkWall<a href="CppFunction.htm">Function</a>"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::no_patch_field,"no_patch_field"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::nonuniformTransformCyclic,"nonuniformTransformCyclic"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::oscillatingFixedValue,"oscillatingFixedValue"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::outletInlet,"outletInlet"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::outletMappedUniformInlet,"outletMappedUniformInlet"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::partialSlip,"partialSlip"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::patch,"patch"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::phaseHydro<b><a href="CppStatic.htm">static</a></b>Pressure,"phaseHydro<b><a href="CppStatic.htm">static</a></b>Pressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::processor,"processor"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::processorCyclic,"processorCyclic"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::rotatingTotalPressure,"rotatingTotalPressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::sliced,"sliced"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::slip,"slip"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::symmetryPlane,"symmetryPlane"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::syringePressure,"syringePressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::<a href="CppTime.htm">time</a>VaryingMappedFixedValue,"<a href="CppTime.htm">time</a>VaryingMappedFixedValue"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::totalFlowRateAdvectiveDiffusive,"totalFlowRateAdvectiveDiffusive"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::totalPressure,"totalPressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::totalTemperature,"totalTemperature"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::turbulentInlet,"turbulentInlet"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::turbulentIntensityKineticEnergyInlet,"turbulentIntensityKineticEnergyInlet"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::uniformDensityHydro<b><a href="CppStatic.htm">static</a></b>Pressure,"uniformDensityHydro<b><a href="CppStatic.htm">static</a></b>Pressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::uniformFixedValue,"uniformFixedValue"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::uniformTotalPressure,"uniformTotalPressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::wallHeatTransfer,"wallHeatTransfer"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::waveSurfacePressure,"waveSurfacePressure"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::waveTransmissive,"waveTransmissive"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::wedge,"wedge"));<br/>
&nbsp;&nbsp;m.insert(<a href="CppBoostBimap.htm">boost::bimap</a>&lt;PatchFieldType,<a href="CppStdString.htm">std::string</a>&gt;::value_type(PatchFieldType::zeroGradient,"zeroGradient"));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType&gt; <a href="CppRibi.htm">ribi</a>::foam::PatchFieldTypes::GetAllTypes()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PatchFieldType&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::advective,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::alphaSgsJayatillekeWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::alphaSgsWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::alphatJayatillekeWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::alphatWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::buoyantPressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::calculated,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::codedFixedValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::codedMixed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_epsilonWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_kqRWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_omegaWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_temperatureThermoBaffle1D_constSolidThermoPhysics,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_temperatureThermoBaffle1D_expoSolidThermoPhysics,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_turbulentHeatFluxTemperature,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_turbulentMixingLengthDissipationRateInlet,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_turbulentMixingLengthFrequencyInlet,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_turbulentTemperatureCoupledBaffle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_turbulentTemperatureCoupledBaffleMixed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::compressible_turbulentTemperatureRadCoupledMixed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::cyclic,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::cyclicAMI,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::cyclicSlip,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::directionMixed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::empty,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::<b><a href="CppExtern.htm">extern</a></b>alWallHeatFluxTemperature,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fan,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fanPressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fixedEnthalpy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fixedFluxPressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fixedGradient,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fixedInternalEnergy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fixedInternalValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fixedPressureCompressibleDensity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::fixedValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::freestream,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::freestreamPressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::gradientEnthalpy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::gradientInternalEnergy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::htcConvection,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::inletOutlet,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::inletOutletTotalTemperature,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mapped,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mappedField,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mappedFixedInternalValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mappedFixedPushedInternalValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mixed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mixedEnthalpy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mixedInternalEnergy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::muSgsUSpaldingWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::multiphaseFixedFluxPressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mutLowReWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mutURoughWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mutUSpaldingWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mutUWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mutkRoughWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::mutkWall<a href="CppFunction.htm">Function</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::no_patch_field,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::nonuniformTransformCyclic,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::oscillatingFixedValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::outletInlet,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::outletMappedUniformInlet,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::partialSlip,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::patch,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::phaseHydro<b><a href="CppStatic.htm">static</a></b>Pressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::processor,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::processorCyclic,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::rotatingTotalPressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::sliced,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::slip,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::symmetryPlane,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::syringePressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::<a href="CppTime.htm">time</a>VaryingMappedFixedValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::totalFlowRateAdvectiveDiffusive,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::totalPressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::totalTemperature,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::turbulentInlet,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::turbulentIntensityKineticEnergyInlet,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::uniformDensityHydro<b><a href="CppStatic.htm">static</a></b>Pressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::uniformFixedValue,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::uniformTotalPressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::wallHeatTransfer,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::waveSurfacePressure,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::waveTransmissive,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::wedge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PatchFieldType::zeroGradient<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(PatchFieldType::n_types));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::PatchFieldTypes::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PatchFieldType&gt; v <a href="CppOperatorAssign.htm">=</a> GetAllTypes();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType t <a href="CppOperatorAssign.htm">=</a> v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> ToStr(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType u <a href="CppOperatorAssign.htm">=</a> ToType(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::foam::PatchFieldTypes::ToStr(<b><a href="CppConst.htm">const</a></b> PatchFieldType type)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.left.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.left.count(type) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> m_map.left.find(type)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::PatchFieldType <a href="CppRibi.htm">ribi</a>::foam::PatchFieldTypes::ToType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_map.right.empty()) m_map <a href="CppOperatorAssign.htm">=</a> CreateMap();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_map.right.empty());<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(m_map.right.count(s) <a href="CppOperatorNotEqual.htm">!=</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(m_map.right.count(s));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_map.right.count(s) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PatchFieldType t <a href="CppOperatorAssign.htm">=</a> m_map.right.find(s)-&gt;second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> PatchFieldType patch_field) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> PatchFieldTypes::ToStr(patch_field);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, PatchFieldType&amp; patch_field)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;patch_field <a href="CppOperatorAssign.htm">=</a> PatchFieldTypes::ToType(s);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampoint.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampoint.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMPOINT_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMPOINT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>sfileitem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppPoint.htm">Point</a>sFileItem <a href="CppPoint.htm">Point</a>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMPOINT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampoint.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampoint.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampointindex.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampointindex.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMPOINTINDEX_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMPOINTINDEX_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>The index in the '<a href="CppPointer.htm">point</a>s' file<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>Index<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppPoint.htm">Point</a>Index(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index&amp; <b><a href="CppOperatorIncrement.htm">operator++</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b>;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Prefix<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index <b><a href="CppOperatorIncrement.htm">operator++</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b>; <a href="CppComment.htm">//</a>Postfix<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index&amp; <b><a href="CppOperatorDecrement.htm">operator--</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b>;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Prefix<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index <b><a href="CppOperatorDecrement.htm">operator--</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b>; <a href="CppComment.htm">//</a>Postfix<br/>
<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index&amp; <b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index&amp; <b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_index;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>Index&amp; face_index);<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>Index&amp; face_index);<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index <b><a href="CppOperatorPlus.htm">operator+</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index <b><a href="CppOperatorMinus.htm">operator-</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMPOINTINDEX_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampointindex.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampointindex.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>index.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index::<a href="CppPoint.htm">Point</a>Index(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
&nbsp;&nbsp;: m_index(index)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A <a href="CppPoint.htm">Point</a>Index must be zero or a positive value");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (index &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A <a href="CppPoint.htm">Point</a>Index must be zero or a positive value");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index&amp; <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index::<b><a href="CppOperatorIncrement.htm">operator++</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_index;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index::<b><a href="CppOperatorIncrement.htm">operator++</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index old(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> old;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index&amp; <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index::<b><a href="CppOperatorDecrement.htm">operator--</a></b>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>m_index;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index::<b><a href="CppOperatorDecrement.htm">operator--</a></b>(<b><a href="CppInt.htm">int</a></b>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>Index old(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> old;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index&amp; <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index::<b><a href="CppOperatorPlus.htm">operator+</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_index <a href="CppOperatorPlusAssign.htm">+=</a> rhs.Get();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A <a href="CppPoint.htm">Point</a>Index must be zero or a positive value");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index&amp; <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index::<b><a href="CppOperatorMinus.htm">operator-</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs.Get() <a href="CppOperatorLessEqual.htm">&lt;=</a> m_index);<br/>
&nbsp;&nbsp;m_index <a href="CppOperatorMinusAssign.htm">-=</a> rhs.Get();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A <a href="CppPoint.htm">Point</a>Index must be zero or a positive value");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; face_index) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> face_index.Get();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>Index&amp; face_index)<br/>
{<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> face_index.m_index;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() <a href="CppOperatorEqual.htm">==</a> rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() &lt; rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.Get() &gt; rhs.Get();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs &gt; rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorGreaterEqual.htm">&gt;=</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs &lt; rhs);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorPlus.htm">operator+</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPoint.htm">Point</a>Index(lhs.Get() <a href="CppOperatorPlus.htm">+</a> rhs.Get());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>Index <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorMinus.htm">operator-</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>Index&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs <a href="CppOperatorGreaterEqual.htm">&gt;=</a> rhs);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPoint.htm">Point</a>Index(lhs.Get() <a href="CppOperatorMinus.htm">-</a> rhs.Get());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampointsfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampointsfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMPOINTS<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMPOINTS<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>sfileitem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM boundary file<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>sFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppPoint.htm">Point</a>sFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) : <a href="CppPoint.htm">Point</a>sFile(Parse(filename)) {}<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppPoint.htm">Point</a>sFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt;&amp; items <a href="CppOperatorAssign.htm">=</a> {});<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt;&amp; GetItems() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_items; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppPoint.htm">Point</a>sFile(<a href="CppStdIstream.htm">std::istream</a>&amp; is) : <a href="CppPoint.htm">Point</a>sFile(Parse(is)) {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The items faces contains<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt; m_items;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppPoint.htm">Point</a>sFile Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppPoint.htm">Point</a>sFile Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>sFile&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>sFile&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMPOINTS<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampointsfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampointsfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>sfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>sfileitem.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile::<a href="CppPoint.htm">Point</a>sFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt;&amp; items)<br/>
&nbsp;&nbsp;: m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_items(items)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("vectorField","constant/polyMesh","","<a href="CppPointer.htm">point</a>s");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile::Parse(<a href="CppStdIstream.htm">std::istream</a>&amp; is)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFile b;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> b;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile::Parse(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tmp_filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName() };<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppCopyFile.htm">CopyFile</a>(filename,tmp_filename);<br/>
&nbsp;&nbsp;Header::CleanFile(tmp_filename);<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(tmp_filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile file { Parse(f) };<br/>
&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(tmp_filename);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> file;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFile::Test");<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some initial data<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header("some_name","some_location","some_object");<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt; items;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFileItem item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) * 1.1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) * 2.2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) * 3.3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;items.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile c(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorEqual.htm">==</a> header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header other_header("some_other_name","some_other_location","some_other_object");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(header <a href="CppOperatorNotEqual.htm">!=</a> other_header);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile c(other_header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt; other_items;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>3; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFileItem item(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) * 4.4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) * 5.5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i) * 6.6<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile c(header,other_items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Stream conversion<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile b(header,items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFile c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> c)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read from testing file<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> test_index <a href="CppOperatorAssign.htm">=</a> 0; test_index<a href="CppOperatorNotEqual.htm">!=</a>5; <a href="CppOperatorIncrement.htm">++</a>test_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (test_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x1"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x1x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_1x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_2x2x2"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: filename_appendix <a href="CppOperatorAssign.htm">=</a> "_3x4x5"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should never get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("foam::Files::CreateTestFiles: unknown test index");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!filename_appendix.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base { GetDefaultHeader().GetObject() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> filename_base <a href="CppOperatorPlus.htm">+</a> filename_appendix;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> resources_path { ":/<a href="CppOpenFoam.htm">CppOpenFoam</a>/files/" <a href="CppOperatorPlus.htm">+</a> filename };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f( resources_path.c_str() );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.copy(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFile b(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.GetItems().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!b.GetItems().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::Header::<a href="CppPoint.htm">Point</a>sFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetHeader() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetHeader())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt;&amp; lhs_items <a href="CppOperatorAssign.htm">=</a> lhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>sFileItem&gt;&amp; rhs_items <a href="CppOperatorAssign.htm">=</a> rhs.GetItems();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs_items.size() <a href="CppOperatorNotEqual.htm">!=</a> rhs_items.size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(lhs_items.begin(),lhs_items.end(),rhs_items.begin());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; lhs,<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>sFile&amp; f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.m_items.empty()); <a href="CppComment.htm">//</a>Make empty otherwise<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read header<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> f.m_header;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read items<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_items <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> opening_bracket <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comment<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> c <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (c <a href="CppOperatorNotEqual.htm">!=</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> c <a href="CppOperatorNotEqual.htm">!=</a> '{')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start eating n_items<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorMultiplyAssign.htm">*=</a> 10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorMinus.htm">-</a> '0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n <a href="CppOperatorLessEqual.htm">&lt;=</a> 9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_items <a href="CppOperatorPlusAssign.htm">+=</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;opening_bracket <a href="CppOperatorAssign.htm">=</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(opening_bracket);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalOr.htm">||</a> opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(opening_bracket <a href="CppOperatorEqual.htm">==</a> '{');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read once, push n_items <a href="CppTime.htm">time</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFileItem item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> item;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_items; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.m_items.push_back(item);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Eat comments until bracket close<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_close <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (bracket_close <a href="CppOperatorNotEqual.htm">!=</a> ')' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorNotEqual.htm">!=</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close <a href="CppOperatorEqual.htm">==</a> ')' <a href="CppOperatorLogicalOr.htm">||</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (opening_bracket <a href="CppOperatorEqual.htm">==</a> '(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (opening_bracket <a href="CppOperatorEqual.htm">==</a> '{' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> bracket_close <a href="CppOperatorEqual.htm">==</a> '}')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_items.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem item: f.m_items)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampointsfileitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampointsfileitem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMPOINTS<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMPOINTS<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>An item in an OpenFOAM '<a href="CppPointer.htm">point</a>s' file<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPoint.htm">Point</a>sFileItem<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::<a href="CppPointer.htm">point</a>&lt;<b><a href="CppDouble.htm">double</a></b>,3,<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::cs::cartesian&gt; Coordinat3D;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppPoint.htm">Point</a>sFileItem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat <a href="CppOperatorAssign.htm">=</a> Coordinat3D(0.0, 0.0, 0.0)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; GetCoordinat() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_coordinat; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Coordinat3D&amp; GetCoordinat()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_coordinat; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;Coordinat3D m_coordinat;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> OpenFoam<a href="CppPoint.htm">Point</a>sFile;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>sFileItem&amp; f);<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>sFileItem&amp; f);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMPOINTS<a href="CppCfile.htm">FILE</a>ITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampointsfileitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampointsfileitem.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoam<a href="CppPointer.htm">point</a>sfileitem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFileItem::<a href="CppPoint.htm">Point</a>sFileItem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Coordinat3D&amp; coordinat<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_coordinat(coordinat)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFileItem::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFileItem::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b> and <b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem i( Coordinat3D(1.1,2.2,3.3) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFileItem j( Coordinat3D(2.2,3.3,4.4) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j <a href="CppOperatorNotEqual.htm">!=</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b> and <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem i( Coordinat3D(1.1,2.2,3.3) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>sFileItem j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorNotEqual.htm">!=</a> j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::<a href="CppPoint.htm">Point</a>sFileItem::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> abs_tolerance <a href="CppOperatorAssign.htm">=</a> 0.001;<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> USE_CUSTOM_RIBI_COORDINAT3D<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>_abs(abs_tolerance)(lhs.GetCoordinat().GetX(),rhs.GetCoordinat().GetX())<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>_abs(abs_tolerance)(lhs.GetCoordinat().GetY(),rhs.GetCoordinat().GetY())<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>_abs(abs_tolerance)(lhs.GetCoordinat().GetZ(),rhs.GetCoordinat().GetZ())<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>_abs(abs_tolerance)(get&lt;0&gt;(lhs.GetCoordinat()),get&lt;0&gt;(rhs.GetCoordinat()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>_abs(abs_tolerance)(get&lt;1&gt;(lhs.GetCoordinat()),get&lt;1&gt;(rhs.GetCoordinat()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>_abs(abs_tolerance)(get&lt;2&gt;(lhs.GetCoordinat()),get&lt;2&gt;(rhs.GetCoordinat()))<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>sFileItem&amp; item) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> USE_CUSTOM_RIBI_COORDINAT3D<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetCoordinat().GetX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetCoordinat().GetY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> item.GetCoordinat().GetZ()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::get;<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "("<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> get&lt;0&gt;(item.GetCoordinat()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> get&lt;1&gt;(item.GetCoordinat()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> get&lt;2&gt;(item.GetCoordinat())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppPoint.htm">Point</a>sFileItem&amp; f)<br/>
{<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_open;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_open;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_open <a href="CppOperatorEqual.htm">==</a> '(');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> z <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> z;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.m_coordinat <a href="CppOperatorAssign.htm">=</a> decltype(f.m_coordinat)(x,y,z);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> bracket_close;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close <a href="CppOperatorEqual.htm">==</a> ')');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampressurefile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampressurefile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMPRESSURE<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMPRESSURE<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM pressure file, which has 'P' as its <b><a href="CppDefault.htm">default</a></b> name<br/>
<b><a href="CppStruct.htm">struct</a></b> PressureFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> PressureFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Header&amp; GetHeader()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBoundaryField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; boundary_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_boundary_field <a href="CppOperatorAssign.htm">=</a> boundary_field; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot use <b><a href="CppThis.htm">this</a></b> variant, as the boundary has very variable form<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetBoundaryField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,PatchFieldType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; boundary_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_boundary_field <a href="CppOperatorAssign.htm">=</a> boundary_field; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDimensions(<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,7&gt;&amp; dimensions) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_dimensions <a href="CppOperatorAssign.htm">=</a> dimensions; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInternalField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; internal_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_internal_field <a href="CppOperatorAssign.htm">=</a> internal_field; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_boundary_field;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot use <b><a href="CppThis.htm">this</a></b> variant, as the boundary has very variable form<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,PatchFieldType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_boundary_field;<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,7&gt; m_dimensions;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_internal_field;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> PressureFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> PressureFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMPRESSURE<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoampressurefile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoampressurefile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoampressurefile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtypes.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::PressureFile::PressureFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
) : m_boundary_field{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dimensions{ {} },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_internal_field{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::PressureFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("volScalarField","0","","p");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::PressureFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::PressureFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::PressureFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> PressureFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dimensions ["<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[0] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[1] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[2] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[3] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[4] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[5] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[6]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "];" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "internalField " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_internal_field <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "boundaryField" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_boundary_field <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p: f.m_boundary_field)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.first <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;type " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> PatchFieldTypes::ToStr(p.second) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamraspropertiesfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamraspropertiesfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMRASPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMRASPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM thermophysicalProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> RasPropertiesFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> RasPropertiesFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> RasPropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> RasPropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMRASPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamraspropertiesfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamraspropertiesfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamraspropertiesfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::RasPropertiesFile::RasPropertiesFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; header<br/>
)<br/>
&nbsp;&nbsp;: m_header{header}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::RasPropertiesFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("dictionary","constant","","RASProperties");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::RasPropertiesFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::RasPropertiesFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::RasPropertiesFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> RasPropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "RASModel realizableKE;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "turbulence on;\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "printCoeffs on;\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamtemperaturefile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamtemperaturefile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMTEMPERATURE<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMTEMPERATURE<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM pressure file, which has 'P' as its <b><a href="CppDefault.htm">default</a></b> name<br/>
<b><a href="CppStruct.htm">struct</a></b> TemperatureFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> TemperatureFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Header&amp; GetHeader()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBoundaryField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; boundary_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_boundary_field <a href="CppOperatorAssign.htm">=</a> boundary_field; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot use <b><a href="CppThis.htm">this</a></b> variant, as the boundary has very variable form<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetBoundaryField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,PatchFieldType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; boundary_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_boundary_field <a href="CppOperatorAssign.htm">=</a> boundary_field; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDimensions(<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,7&gt;&amp; dimensions) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_dimensions <a href="CppOperatorAssign.htm">=</a> dimensions; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInternalField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; internal_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_internal_field <a href="CppOperatorAssign.htm">=</a> internal_field; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_boundary_field;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot use <b><a href="CppThis.htm">this</a></b> variant, as the boundary has very variable form<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,PatchFieldType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_boundary_field;<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,7&gt; m_dimensions;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_internal_field;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TemperatureFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TemperatureFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMTEMPERATURE<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamtemperaturefile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamtemperaturefile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamtemperaturefile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtypes.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::TemperatureFile::TemperatureFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
) : m_boundary_field{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dimensions{ {} },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_internal_field{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::TemperatureFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("volScalarField","0","","T");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::TemperatureFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::TemperatureFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::TemperatureFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TemperatureFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dimensions ["<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[0] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[1] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[2] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[3] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[4] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[5] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[6]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "];" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "internalField " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_internal_field <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "boundaryField" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_boundary_field <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p: f.m_boundary_field)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.first <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;type " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> PatchFieldTypes::ToStr(p.second) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamthermophysicalpropertiesfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamthermophysicalpropertiesfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMTHERMOPHYSICALPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMTHERMOPHYSICALPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM thermophysicalProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> ThermophysicalPropertiesFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> ThermophysicalPropertiesFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMixture(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; mixture) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_mixture <a href="CppOperatorAssign.htm">=</a> mixture; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetThermoType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; thermo_type) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_thermo_type <a href="CppOperatorAssign.htm">=</a> thermo_type; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_mixture;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_thermo_type;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ThermophysicalPropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ThermophysicalPropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMTHERMOPHYSICALPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamthermophysicalpropertiesfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamthermophysicalpropertiesfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamthermophysicalpropertiesfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::ThermophysicalPropertiesFile::ThermophysicalPropertiesFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
)<br/>
&nbsp;&nbsp;: m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mixture{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_thermo_type{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::ThermophysicalPropertiesFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("dictionary","constant","","thermophysicalProperties");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::ThermophysicalPropertiesFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::ThermophysicalPropertiesFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::ThermophysicalPropertiesFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ThermophysicalPropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "thermoType " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_thermo_type <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "mixture " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_mixture <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamturbulencepropertiesfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamturbulencepropertiesfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMTURBULENCEPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMTURBULENCEPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM turbulenceProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> TurbulencePropertiesFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> TurbulencePropertiesFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSimulationType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; simulation_type) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_simulation_type <a href="CppOperatorAssign.htm">=</a> simulation_type; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_simulation_type;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TurbulencePropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TurbulencePropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMTURBULENCEPROPERTIES<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamturbulencepropertiesfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamturbulencepropertiesfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamturbulencepropertiesfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::TurbulencePropertiesFile::TurbulencePropertiesFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
)<br/>
&nbsp;&nbsp;: m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_simulation_type{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::TurbulencePropertiesFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("dictionary","constant","","turbulenceProperties");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::TurbulencePropertiesFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::TurbulencePropertiesFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::TurbulencePropertiesFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TurbulencePropertiesFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "simulationType " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_simulation_type <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamvelocityfieldfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamvelocityfieldfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> OPENFOAMVELOCITYFIELD<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> OPENFOAMVELOCITYFIELD<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "openfoamfwd.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtype.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> foam {<br/>
<br/>
<a href="CppComment.htm">///</a>Reads and writes an OpenFOAM turbulenceProperties file<br/>
<b><a href="CppStruct.htm">struct</a></b> VelocityFieldFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> VelocityFieldFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header <a href="CppOperatorAssign.htm">=</a> GetDefaultHeader()<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Header GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header&amp; GetHeader() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_header; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetBoundaryField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; boundary_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_boundary_field <a href="CppOperatorAssign.htm">=</a> boundary_field; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot use <b><a href="CppThis.htm">this</a></b> variant, as the boundary has very variable form<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> SetBoundaryField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,PatchFieldType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; boundary_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_boundary_field <a href="CppOperatorAssign.htm">=</a> boundary_field; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDimensions(<b><a href="CppConst.htm">const</a></b> <a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,7&gt;&amp; dimensions) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_dimensions <a href="CppOperatorAssign.htm">=</a> dimensions; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInternalField(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; internal_field) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_internal_field <a href="CppOperatorAssign.htm">=</a> internal_field; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_boundary_field;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot use <b><a href="CppThis.htm">this</a></b> variant, as the boundary has very variable form<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,PatchFieldType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_boundary_field;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppInt.htm">int</a></b>,7&gt; m_dimensions;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The OpenFOAM header<br/>
&nbsp;&nbsp;Header m_header;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_internal_field;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> VelocityFieldFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> VelocityFieldFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> foam<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> OPENFOAMVELOCITYFIELD<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppOpenFoam/openfoamvelocityfieldfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppOpenFoam/openfoamvelocityfieldfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "openfoamvelocityfieldfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/trim.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "openfoamheader.h"<br/>
<a href="CppInclude.htm">#include</a> "openfoampatchfieldtypes.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::VelocityFieldFile::VelocityFieldFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Header header<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_boundary_field{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dimensions{{}},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_header{header},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_internal_field{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::foam::Header <a href="CppRibi.htm">ribi</a>::foam::VelocityFieldFile::GetDefaultHeader() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Header("volVectorField","0","","U");<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::foam::VelocityFieldFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::foam::VelocityFieldFile::Test");<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::foam::VelocityFieldFile successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::foam::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> VelocityFieldFile&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.GetHeader() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dimensions ["<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[0] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[1] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[2] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[3] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[4] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[5] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_dimensions[6]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "];" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "internalField " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_internal_field <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "boundaryField\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{\n" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.m_boundary_field <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p: f.m_boundary_field)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.first <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;{\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;type " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> PatchFieldTypes::ToStr(p.second) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;}\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
