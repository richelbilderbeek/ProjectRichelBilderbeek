<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Triangle</title>
  <meta name="description" content="C++ Triangle"/>
  <meta name="keywords" content="C++ Triangle "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolTriangle.htm">Triangle</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ToolTriangle-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolTriangle/ToolTriangleConsole.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/ToolTriangleConsole.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
<br/>
include(../../<a href="Tools.htm">Tools</a>/ToolTriangle/ToolTriangleConsole.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTriangle/ToolTriangleConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/ToolTriangleConsole.pri" border = "1"><tr><td><code>
#<a href="CppQmakeDefines.htm">DEFINES</a> += ANSI_DECLARATORS<br/>
<br/>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolTriangle<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolTriangle/triangle.c<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolTriangle/triangle.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolTriangle/README<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTriangle/ToolTriangleDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/ToolTriangleDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/ToolTriangle/ToolTriangleConsole.pri)<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> +=<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> +=<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTriangle/ToolTriangleWebsite.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/ToolTriangleWebsite.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/ToolTriangle/ToolTriangleConsole.pri)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTriangle/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/main.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "triangle.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;triangle_main(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTriangle/showme.c</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/showme.c" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;,d88^^o 888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;8888&nbsp;&nbsp;&nbsp;&nbsp;888o^88,&nbsp;&nbsp;o88^^o Y88b&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d8b&nbsp;&nbsp;d8b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o88^^8o&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;"Y88b&nbsp;&nbsp; 888&nbsp;&nbsp;888 d888&nbsp;&nbsp; b Y88b&nbsp;&nbsp;d8b&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d888bdY88b&nbsp;&nbsp;&nbsp;&nbsp;d888&nbsp;&nbsp;88b&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp; "Y88b, 888&nbsp;&nbsp;888 8888&nbsp;&nbsp; 8&nbsp;&nbsp;Y888/Y88b<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> Y88Y Y888b&nbsp;&nbsp; 8888oo888&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;8888 888&nbsp;&nbsp;888 q888&nbsp;&nbsp; p&nbsp;&nbsp; Y8<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;Y8<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; YY&nbsp;&nbsp; Y888b&nbsp;&nbsp;q888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;"oo88P" 888&nbsp;&nbsp;888&nbsp;&nbsp;"88oo"&nbsp;&nbsp;&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y888b&nbsp;&nbsp;"88oooo"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A Display Program <b><a href="CppFor.htm">for</a></b> Meshes and More.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(showme.c)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppVersion.htm">Version</a> 1.6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;July 28, 2005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Copyright 1996, 1998, 2005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;2360 Woolsey #H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Berkeley, California&nbsp;&nbsp;94705-1927&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;jrs@cs.berkeley.edu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This program may be freely redistributed under the condition that the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;copyright notices (including <b><a href="CppThis.htm">this</a></b> entire header and the copyright&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;notice printed when the `-h' <b><a href="CppSwitch.htm">switch</a></b> is selected) are not removed, and&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;no compensation is received.&nbsp;&nbsp;Private, research, and institutional&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;use is free.&nbsp;&nbsp;You may distribute modified <a href="CppVersion.htm">version</a>s of <b><a href="CppThis.htm">this</a></b> code UNDER&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;THE CONDITION THAT THIS CODE AND ANY MODIFICATIONS MADE TO IT IN THE&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;SAME <a href="CppCfile.htm">FILE</a> REMAIN UNDER COPYRIGHT OF THE ORIGINAL AUTHOR, BOTH SOURCE&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;AND OBJECT CODE ARE MADE FREELY AVAILABLE WITHOUT CHARGE, AND CLEAR&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;NOTICE IS GIVEN OF THE MODIFICATIONS.&nbsp;&nbsp;Distribution of <b><a href="CppThis.htm">this</a></b> code as&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;part of a commercial system is permissible ONLY BY DIRECT ARRANGEMENT&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;WITH THE AUTHOR.&nbsp;&nbsp;(If you are not directly supplying <b><a href="CppThis.htm">this</a></b> code to a&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;customer, and you are instead telling them how they can obtain it <b><a href="CppFor.htm">for</a></b>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;free, then you are not required to <a href="CppMake.htm">make</a> <a href="CppAny.htm">any</a> arrangement with me.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Hypertext instructions <b><a href="CppFor.htm">for</a></b> Triangle are available on the Web at&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.cs.cmu.edu/~quake/showme.html&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Show Me was created as part of the Archimedes project in the School of&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Computer Science at Carnegie Mellon University.&nbsp;&nbsp;Archimedes is a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;system <b><a href="CppFor.htm">for</a></b> compiling parallel finite element solvers.&nbsp;&nbsp;For further&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;information, see Anja Feldmann, Omar Ghattas, John R. Gilbert, Gary L. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Miller, David R. O'Hallaron, Eric J. Schwabe, Jonathan R. Shewchuk,&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;and Shang-Hua Teng.&nbsp;&nbsp;"Automated Parallel Solution of Unstructured PDE&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Problems."&nbsp;&nbsp;To appear in Communications of the ACM, we hope.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If you <a href="CppMake.htm">make</a> <a href="CppAny.htm">any</a> improvements to <b><a href="CppThis.htm">this</a></b> code, please please please let me&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;know, so that I may obtain the improvements.&nbsp;&nbsp;Even <b><a href="CppIf.htm">if</a></b> you don't change <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;the code, I'd still love to hear what it's being used <b><a href="CppFor.htm">for</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Disclaimer:&nbsp;&nbsp;Neither I nor Carnegie Mellon warrant <b><a href="CppThis.htm">this</a></b> code in <a href="CppAny.htm">any</a> way&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;whatsoever.&nbsp;&nbsp;Use at your own risk.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> For single precision (which will save some <a href="CppMemory.htm">memory</a> and reduce paging),&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; write "<a href="CppDefine.htm">#define</a> SINGLE" below.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> For <b><a href="CppDouble.htm">double</a></b> precision (which will allow you to display triangulations of&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; a finer resolution), leave SINGLE undefined.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> SINGLE <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> SINGLE<br/>
<a href="CppDefine.htm">#define</a> REAL <b><a href="CppFloat.htm">float</a></b><br/>
<a href="CppPreElse.htm">#else</a><br/>
<a href="CppDefine.htm">#define</a> REAL <b><a href="CppDouble.htm">double</a></b><br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Maximum number of <a href="CppChar.htm">character</a>s in a file name (including the null).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> <a href="CppCfile.htm">FILE</a>NAMESIZE 2048<br/>
<br/>
<a href="CppComment.htm">/*</a> Maximum number of <a href="CppChar.htm">character</a>s in a line read from a file (including the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; null).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> INPUTLINESIZE 1024<br/>
<br/>
<a href="CppDefine.htm">#define</a> STARTWIDTH 414<br/>
<a href="CppDefine.htm">#define</a> STARTHEIGHT 414<br/>
<a href="CppDefine.htm">#define</a> MINWIDTH 50<br/>
<a href="CppDefine.htm">#define</a> MINHEIGHT 50<br/>
<a href="CppDefine.htm">#define</a> BUTTONHEIGHT 21<br/>
<a href="CppDefine.htm">#define</a> BUTTONROWS 3<br/>
<a href="CppDefine.htm">#define</a> PANELHEIGHT (BUTTONHEIGHT * BUTTONROWS)<br/>
<a href="CppDefine.htm">#define</a> MAXCOLORS 64<br/>
<br/>
<a href="CppDefine.htm">#define</a> IMAGE_TYPES 7<br/>
<a href="CppDefine.htm">#define</a> NOTHING <a href="CppOperatorMinus.htm">-</a>1<br/>
<a href="CppDefine.htm">#define</a> NODE 0<br/>
<a href="CppDefine.htm">#define</a> POLY 1<br/>
<a href="CppDefine.htm">#define</a> ELE 2<br/>
<a href="CppDefine.htm">#define</a> EDGE 3<br/>
<a href="CppDefine.htm">#define</a> PART 4<br/>
<a href="CppDefine.htm">#define</a> ADJ 5<br/>
<a href="CppDefine.htm">#define</a> VORO 6<br/>
<br/>
<a href="CppDefine.htm">#define</a> STARTEXPLOSION 0.5<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdioH.htm">stdio.h</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStd.htm">std</a>lib.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;string.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;X11/Xlib.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;X11/Xutil.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;X11/Xatom.h&gt;<br/>
<br/>
<a href="CppComment.htm">/*</a> A necessary <a href="CppForwardDeclaration.htm">forward declaration</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppInt.htm">int</a></b> load_image();<br/>
<br/>
Display *display;<br/>
<b><a href="CppInt.htm">int</a></b> screen;<br/>
Window rootwindow;<br/>
Window mainwindow;<br/>
Window quitwin;<br/>
Window leftwin;<br/>
Window rightwin;<br/>
Window upwin;<br/>
Window downwin;<br/>
Window resetwin;<br/>
Window pswin;<br/>
Window epswin;<br/>
Window expwin;<br/>
Window exppluswin;<br/>
Window expminuswin;<br/>
Window widthpluswin;<br/>
Window widthminuswin;<br/>
Window <a href="CppVersion.htm">version</a>pluswin;<br/>
Window <a href="CppVersion.htm">version</a>minuswin;<br/>
Window fillwin;<br/>
Window nodewin[2];<br/>
Window polywin[2];<br/>
Window elewin[2];<br/>
Window edgewin[2];<br/>
Window partwin[2];<br/>
Window adjwin[2];<br/>
Window voronoiwin[2];<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> windowdepth;<br/>
XEvent event;<br/>
Colormap rootmap;<br/>
XFontStruct *font;<br/>
<b><a href="CppInt.htm">int</a></b> width, height;<br/>
<b><a href="CppInt.htm">int</a></b> black, white;<br/>
<b><a href="CppInt.htm">int</a></b> showme_foreground;<br/>
GC fontgc;<br/>
GC blackfontgc;<br/>
GC linegc;<br/>
GC trianglegc;<br/>
<b><a href="CppInt.htm">int</a></b> colors[MAXCOLORS];<br/>
XColor rgb[MAXCOLORS];<br/>
<b><a href="CppInt.htm">int</a></b> color;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> start_image, current_image;<br/>
<b><a href="CppInt.htm">int</a></b> start_inc, current_inc;<br/>
<b><a href="CppInt.htm">int</a></b> loweriteration;<br/>
<b><a href="CppInt.htm">int</a></b> line_width;<br/>
<b><a href="CppInt.htm">int</a></b> loaded[2][IMAGE_TYPES];<br/>
REAL xlo[2][IMAGE_TYPES], ylo[2][IMAGE_TYPES];<br/>
REAL xhi[2][IMAGE_TYPES], yhi[2][IMAGE_TYPES];<br/>
REAL xscale, yscale;<br/>
REAL xoffset, yoffset;<br/>
<b><a href="CppInt.htm">int</a></b> zoom;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> nodes[2], node_dim[2];<br/>
REAL *nodeptr[2];<br/>
<b><a href="CppInt.htm">int</a></b> polynodes[2], poly_dim[2], polyedges[2], polyholes[2];<br/>
REAL *polynodeptr[2], *polyholeptr[2];<br/>
<b><a href="CppInt.htm">int</a></b> *polyedgeptr[2];<br/>
<b><a href="CppInt.htm">int</a></b> elems[2], ele_corners[2];<br/>
<b><a href="CppInt.htm">int</a></b> *eleptr[2];<br/>
<b><a href="CppInt.htm">int</a></b> edges[2];<br/>
<b><a href="CppInt.htm">int</a></b> *edgeptr[2];<br/>
REAL *normptr[2];<br/>
<b><a href="CppInt.htm">int</a></b> subdomains[2];<br/>
<b><a href="CppInt.htm">int</a></b> *partpart[2];<br/>
REAL *partcenter[2], *partshift[2];<br/>
<b><a href="CppInt.htm">int</a></b> adjsubdomains[2];<br/>
<b><a href="CppInt.htm">int</a></b> *adjptr[2];<br/>
<b><a href="CppInt.htm">int</a></b> vnodes[2], vnode_dim[2];<br/>
REAL *vnodeptr[2];<br/>
<b><a href="CppInt.htm">int</a></b> vedges[2];<br/>
<b><a href="CppInt.htm">int</a></b> *vedgeptr[2];<br/>
REAL *vnormptr[2];<br/>
<b><a href="CppInt.htm">int</a></b> firstnumber[2];<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> quiet, fillelem, bw_ps, explode;<br/>
REAL explosion;<br/>
<br/>
<b><a href="CppChar.htm">char</a></b> filename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<b><a href="CppChar.htm">char</a></b> nodefilename[2][<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<b><a href="CppChar.htm">char</a></b> polyfilename[2][<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<b><a href="CppChar.htm">char</a></b> elefilename[2][<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<b><a href="CppChar.htm">char</a></b> edgefilename[2][<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<b><a href="CppChar.htm">char</a></b> partfilename[2][<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<b><a href="CppChar.htm">char</a></b> adjfilename[2][<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<b><a href="CppChar.htm">char</a></b> vnodefilename[2][<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<b><a href="CppChar.htm">char</a></b> vedgefilename[2][<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<br/>
<b><a href="CppChar.htm">char</a></b> *colorname[] <a href="CppOperatorAssign.htm">=</a> {"aquamarine", "red", "green yellow", "magenta",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "yellow", "green", "orange", "blue",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "white", "sandy brown", "cyan", "moccasin",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "cadet blue", "coral", "cornflower blue", "sky blue",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "firebrick", "forest green", "gold", "goldenrod",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "gray", "hot pink", "<b><a href="CppChar.htm">char</a></b>treuse", "pale violet red",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "indian red", "khaki", "lavender", "light blue",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "light gray", "light steel blue", "lime green", "azure",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "maroon", "medium aquamarine", "dodger blue", "honeydew",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "medium orchid", "medium sea green", "moccasin",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "medium slate blue", "medium spring green",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "medium turquoise", "medium violet red",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "orange red", "chocolate", "light goldenrod",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "orchid", "pale green", "pink", "plum",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "purple", "salmon", "sea green",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "sienna", "slate blue", "spring green",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "steel blue", "tan", "<b><a href="CppThis.htm">this</a></b>tle", "turquoise",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "violet", "violet red", "wheat",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "yellow green"};<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> syntax()<br/>
{<br/>
&nbsp;&nbsp;printf("showme [-bfw_Qh] input_file\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>b&nbsp;&nbsp;Black and white PostScript (<b><a href="CppDefault.htm">default</a></b> is color).\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>f&nbsp;&nbsp;Fill triangles of partitioned mesh with color.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>w&nbsp;&nbsp;Set line width to some specified number.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>Q&nbsp;&nbsp;Quiet:&nbsp;&nbsp;No terminal output except errors.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>h&nbsp;&nbsp;Help:&nbsp;&nbsp;Detailed instructions <b><a href="CppFor.htm">for</a></b> Show Me.\n");<br/>
&nbsp;&nbsp;exit(0);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> info()<br/>
{<br/>
&nbsp;&nbsp;printf("Show Me\n");<br/>
&nbsp;&nbsp;printf("A Display Program <b><a href="CppFor.htm">for</a></b> Meshes and More.\n");<br/>
&nbsp;&nbsp;printf("<a href="CppVersion.htm">Version</a> 1.6\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Copyright 1996 Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk&nbsp;&nbsp;(<a href="CppBug.htm">bug</a>s/comments to jrs@cs.cmu.edu)\n"<br/>
);<br/>
&nbsp;&nbsp;printf("School of Computer Science <a href="CppOperatorDivide.htm">/</a> Carnegie Mellon University\n");<br/>
&nbsp;&nbsp;printf("5000 Forbes Avenue <a href="CppOperatorDivide.htm">/</a> Pittsburgh, Pennsylvania&nbsp;&nbsp;15213-3891\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Created as part of the Archimedes project (<a href="Tools.htm">tools</a> <b><a href="CppFor.htm">for</a></b> parallel FEM).\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Supported in part by NSF Grant CMS-9318163 and an NSERC 1967 Scholarship.\n");<br/>
&nbsp;&nbsp;printf("There is no warranty whatsoever.&nbsp;&nbsp;Use at your own risk.\n");<br/>
<a href="CppIfdef.htm">#ifdef</a> SINGLE<br/>
&nbsp;&nbsp;printf("This executable is <a href="CppCompile.htm">compile</a>d <b><a href="CppFor.htm">for</a></b> single precision arithmetic.\n\n\n");<br/>
<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;printf("This executable is <a href="CppCompile.htm">compile</a>d <b><a href="CppFor.htm">for</a></b> <b><a href="CppDouble.htm">double</a></b> precision arithmetic.\n\n\n");<br/>
<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;printf(<br/>
"Show Me graphically displays the contents of geometric files, especially\n");<br/>
&nbsp;&nbsp;printf(<br/>
"those generated by Triangle, my two-dimensional quality mesh generator and\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"Delaunay triangulator.&nbsp;&nbsp;Show Me can also write images in PostScript form.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Show Me is also useful <b><a href="CppFor.htm">for</a></b> checking the consistency of the files you create\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"as input to Triangle; Show Me does these checks more thoroughly than\n");<br/>
&nbsp;&nbsp;printf("Triangle does.&nbsp;&nbsp;The command syntax is:\n\n");<br/>
&nbsp;&nbsp;printf("showme [-bfw_Qh] input_file\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"The underscore indicates that a number should follow the <a href="CppOperatorMinus.htm">-</a>w <b><a href="CppSwitch.htm">switch</a></b>.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"input_file may be one of several types of file.&nbsp;&nbsp;It must have extension\n");<br/>
&nbsp;&nbsp;printf(<br/>
".node, .poly, .ele, .edge, .part, or .adj.&nbsp;&nbsp;If no extension is provided,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Show Me will assume the extension .ele.&nbsp;&nbsp;A .node file represents a set of\n");<br/>
&nbsp;&nbsp;printf(<br/>
"<a href="CppPointer.htm">point</a>s; a .poly file represents a Planar Straight Line Graph; an .ele file\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"(coupled with a .node file) represents the elements of a mesh or the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"triangles of a triangulation; an .edge file (coupled with a .node file)\n");<br/>
&nbsp;&nbsp;printf(<br/>
"represents a set of edges; a .part file specifies a partition of a mesh;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"and a .adj file represents the adjacency graph defined by a partition.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("Command Line Switches:\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>b&nbsp;&nbsp;Makes all PostScript output black and white.&nbsp;&nbsp;If <b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> is not\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected, color PostScript is used <b><a href="CppFor.htm">for</a></b> partitioned meshes and\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adjacency graphs (.part and .adj files).\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>f&nbsp;&nbsp;On color displays and in color PostScript, displays partitioned\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;meshes by filling triangles with color, rather than by coloring the\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edges.&nbsp;&nbsp;This <b><a href="CppSwitch.htm">switch</a></b> will result in a clearer picture <b><a href="CppIf.htm">if</a></b> all\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangles are reasonably large, and a less clear picture <b><a href="CppIf.htm">if</a></b> small\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangles are present.&nbsp;&nbsp;(There is also a button to toggle <b><a href="CppThis.htm">this</a></b>\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;behavior.)\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>w&nbsp;&nbsp;Followed by an <a href="CppInt.htm">integer</a>, specifies the line width used in all\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;images.&nbsp;&nbsp;(There are also buttons to change the line width.)\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>Q&nbsp;&nbsp;Quiet:&nbsp;&nbsp;Suppresses all explanation of what Show Me is doing, unless\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an error occurs.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>h&nbsp;&nbsp;Help:&nbsp;&nbsp;Displays these instructions.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("Controls:\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;To zoom in on an image, <a href="CppPointer.htm">point</a> at the location where you want a closer\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;look, and click the left mouse button.&nbsp;&nbsp;To zoom out, click the right\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;mouse button.&nbsp;&nbsp;In either <b><a href="CppCase.htm">case</a></b>, the <a href="CppPointer.htm">point</a> you click on will be centered in\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;the window.&nbsp;&nbsp;If you want to know the coordinates of a <a href="CppPointer.htm">point</a>, click the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;middle mouse button; the coordinates will be printed on the terminal you\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;invoked Show Me from.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you resize the window, the image will grow or shrink to match.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;There is a panel of control buttons at the bottom of the Show Me window:\n"<br/>
);<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Quit:&nbsp;&nbsp;Shuts down Show Me.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&lt;, &gt;, ^, v:&nbsp;&nbsp;Moves the image in the indicated direction.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Reset: Unzooms and centers the image in the window.&nbsp;&nbsp;When you <b><a href="CppSwitch.htm">switch</a></b> from\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;one image to another, the viewing region does not change, so you may\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;need to reset the <b><a href="CppNew.htm">new</a></b> image to <a href="CppMake.htm">make</a> it fully visible.&nbsp;&nbsp;This often is\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;the <b><a href="CppCase.htm">case</a></b> when <b><a href="CppSwitch.htm">switch</a></b>ing between Delaunay triangulations and their\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;corresponding Voronoi diagrams, as Voronoi vertices can be far from the\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;initial <a href="CppPointer.htm">point</a> set.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Width+, <a href="CppOperatorMinus.htm">-</a>:&nbsp;&nbsp;<a href="CppIncrease.htm">Increase</a>s or decreases the width of all lines and <a href="CppPointer.htm">point</a>s.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Exp, <a href="CppOperatorPlus.htm">+</a>, <a href="CppOperatorMinus.htm">-</a>:&nbsp;&nbsp;These buttons appear only when you are viewing a partitioned\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;mesh (.part file).&nbsp;&nbsp;`Exp' toggles between an exploded and non-exploded\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;image of the mesh.&nbsp;&nbsp;The non-exploded image will not show the partition\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;on a black and white monitor.&nbsp;&nbsp;`+' and `-' allow you to adjust the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;spacing between pieces of the mesh to better distinguish them.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Fill:&nbsp;&nbsp;This button appears only when you are viewing a partitioned mesh\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;(.part file).&nbsp;&nbsp;It toggles between color-filled triangles and colored\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;edges (as the <a href="CppOperatorMinus.htm">-</a>f <b><a href="CppSwitch.htm">switch</a></b> does).&nbsp;&nbsp;Filled triangles look better when all\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;triangles are reasonably large; colored edges look better when there\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;are very small triangles present.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;PS:&nbsp;&nbsp;Creates a PostScript file containing the image you are viewing.&nbsp;&nbsp;If\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;the <a href="CppOperatorMinus.htm">-</a>b <b><a href="CppSwitch.htm">switch</a></b> is selected, all PostScript output will be black and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;white; otherwise, .part.ps and .adj.ps files will be color, independent\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;of whether you are <b><a href="CppUsing.htm">using</a></b> a color monitor.&nbsp;&nbsp;Normally the output will\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;preserve the properties of the image you see on the screen, including\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;zoom and line width; however, <b><a href="CppIf.htm">if</a></b> black and white output is selected (-b\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>), partitioned meshes will always be drawn exploded.&nbsp;&nbsp;The output\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;file name depends on the image being viewed.&nbsp;&nbsp;If you want several\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;different snapshots (zooming in on different parts) of the same object,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;you'll have to rename each file after Show Me creates it so that it\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;isn't overwritten by the next snapshot.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;EPS:&nbsp;&nbsp;Creates an encapsulated PostScript file, suitable <b><a href="CppFor.htm">for</a></b> inclusion in\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;documents.&nbsp;&nbsp;Otherwise, <b><a href="CppThis.htm">this</a></b> button is just like the PS button.&nbsp;&nbsp;(The\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;only difference is that .eps files lack a `showpage' command at the\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;end.)\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;There are two nearly-identical rows of buttons that load different images\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;from disk.&nbsp;&nbsp;Each row contains the following buttons:\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;node:&nbsp;&nbsp;Loads a .node file.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;poly:&nbsp;&nbsp;Loads a .poly file (and possibly an associated .node file).\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;ele:&nbsp;&nbsp;Loads an .ele file (and associated .node file).\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;edge:&nbsp;&nbsp;Loads an .edge file (and associated .node file).\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;part:&nbsp;&nbsp;Loads a .part file (and associated .node and .ele files).\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;adj:&nbsp;&nbsp;Loads an .adj file (and associated .node, .ele, and .part files).\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;voro:&nbsp;&nbsp;Loads a .v.node and .v.edge file <b><a href="CppFor.htm">for</a></b> a Voronoi diagram.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Each row represents a different iteration number of the <a href="CppGeometry.htm">geometry</a> files.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;For a full explanation of iteration numbers, read the instructions <b><a href="CppFor.htm">for</a></b>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Triangle.&nbsp;&nbsp;Briefly, iteration numbers are used to allow a user to easily\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;represent a sequence of related triangulations.&nbsp;&nbsp;Iteration numbers are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;used in the names of <a href="CppGeometry.htm">geometry</a> files; <b><a href="CppFor.htm">for</a></b> <a href="CppInstance.htm">instance</a>, mymesh.3.ele is a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;triangle file with iteration number three, and mymesh.ele has an implicit\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;iteration number of zero.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The control buttons at the right end of each row display the two\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;iterations currently under view.&nbsp;&nbsp;These buttons can be clicked to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;increase or decrease the iteration numbers, and thus conveniently view\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;a sequence of meshes.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Show Me keeps each file in <a href="CppMemory.htm">memory</a> after loading it, but you can force\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Show Me to reread a set of files (<b><a href="CppFor.htm">for</a></b> one iteration number) by reclicking\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;the button that corresponds to the current image.&nbsp;&nbsp;This is convenient <b><a href="CppIf.htm">if</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;you have changed a <a href="CppGeometry.htm">geometry</a> file.\n\n");<br/>
&nbsp;&nbsp;printf("File Formats:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;All files may contain comments prefixed by the <a href="CppChar.htm">character</a> '#'.&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>s,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;segments, holes, triangles, edges, and subdomains must be numbered\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;consecutively, starting from either 1 or 0.&nbsp;&nbsp;Whichever you choose, all\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;input files must be consistent (<b><a href="CppFor.htm">for</a></b> <a href="CppAny.htm">any</a> single iteration number); <b><a href="CppIf.htm">if</a></b> the\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;nodes are numbered from 1, so must be all other objects.&nbsp;&nbsp;Show Me\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;automatically detects your choice <b><a href="CppWhile.htm">while</a></b> reading a .node (or .poly) file.\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Examples of these file formats are given below.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.node files:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of <a href="CppPointer.htm">point</a>s&gt; &lt;dimension (must be 2)&gt; &lt;# of attributes&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;# of boundary markers (0 or 1)&gt;\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Remaining lines:&nbsp;&nbsp;&lt;<a href="CppPointer.htm">point</a> #&gt; &lt;x&gt; &lt;y&gt; [attributes] [boundary marker]\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The attributes, which are typically floating-<a href="CppPointer.htm">point</a> values of physical\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;quantities (such as mass or conductivity) associated with the nodes of\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;a finite element mesh, are ignored by Show Me.&nbsp;&nbsp;Show Me also ignores\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;boundary markers.&nbsp;&nbsp;See the instructions <b><a href="CppFor.htm">for</a></b> Triangle to find out what\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;attributes and boundary markers are.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.poly files:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of <a href="CppPointer.htm">point</a>s&gt; &lt;dimension (must be 2)&gt; &lt;# of attributes&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;# of boundary markers (0 or 1)&gt;\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;<a href="CppPointer.htm">point</a> #&gt; &lt;x&gt; &lt;y&gt; [attributes] [boundary marker]\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;One line:&nbsp;&nbsp;&lt;# of segments&gt; &lt;# of boundary markers (0 or 1)&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;segment #&gt; &lt;endpoint&gt; &lt;endpoint&gt; [boundary marker]\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;One line:&nbsp;&nbsp;&lt;# of holes&gt;\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;hole #&gt; &lt;x&gt; &lt;y&gt;\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[Optional additional lines that are ignored]\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;A .poly file represents a Planar Straight Line Graph (PSLG), an idea\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;familiar to computational geometers.&nbsp;&nbsp;By <a href="CppDefinition.htm">definition</a>, a PSLG is just a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;list of <a href="CppPointer.htm">point</a>s and edges.&nbsp;&nbsp;A .poly file also contains some additional\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;information.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The first section lists all the <a href="CppPointer.htm">point</a>s, and is identical to the format\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;of .node files.&nbsp;&nbsp;&lt;# of <a href="CppPointer.htm">point</a>s&gt; may be set to zero to indicate that the\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s are listed in a separate .node file; .poly files produced by\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Triangle always have <b><a href="CppThis.htm">this</a></b> format.&nbsp;&nbsp;When Show Me reads such a file, it\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;also reads the corresponding .node file.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The second section lists the segments.&nbsp;&nbsp;Segments are edges whose\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;presence in a triangulation produced from the PSLG is enforced.&nbsp;&nbsp;Each\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;segment is specified by listing the indices of its two endpoints.&nbsp;&nbsp;This\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;means that its endpoints must be included in the <a href="CppPointer.htm">point</a> list.&nbsp;&nbsp;Each\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;segment, like each <a href="CppPointer.htm">point</a>, may have a boundary marker, which is ignored\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;by Show Me.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The third section lists holes and concavities that are desired in <a href="CppAny.htm">any</a>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;triangulation generated from the PSLG.&nbsp;&nbsp;Holes are specified by\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;identifying a <a href="CppPointer.htm">point</a> inside each hole.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.ele files:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of triangles&gt; &lt;<a href="CppPointer.htm">point</a>s per triangle&gt; &lt;# of attributes&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Remaining lines:&nbsp;&nbsp;&lt;triangle #&gt; &lt;<a href="CppPointer.htm">point</a>&gt; &lt;<a href="CppPointer.htm">point</a>&gt; &lt;<a href="CppPointer.htm">point</a>&gt; ... [attributes]\n"<br/>
);<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>s are indices into the corresponding .node file.&nbsp;&nbsp;Show Me ignores\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;all but the first three <a href="CppPointer.htm">point</a>s of each triangle; these should be the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;corners listed in <a href="CppCounter.htm">counter</a>clockwise order around the triangle.&nbsp;&nbsp;The\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;attributes are ignored by Show Me.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.edge files:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of edges&gt; &lt;# of boundary markers (0 or 1)&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;edge #&gt; &lt;endpoint&gt; &lt;endpoint&gt; [boundary marker]\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;End<a href="CppPointer.htm">point</a>s are indices into the corresponding .node file.&nbsp;&nbsp;The boundary\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;markers are ignored by Show Me.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;In Voronoi diagrams, one also finds a special kind of edge that is an\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;infinite ray with only one endpoint.&nbsp;&nbsp;For these edges, a different\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;format is used:\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;edge #&gt; &lt;endpoint&gt; <a href="CppOperatorMinus.htm">-</a>1 &lt;direction x&gt; &lt;direction y&gt;\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The `direction' is a floating-<a href="CppPointer.htm">point</a> vector that indicates the direction\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;of the infinite ray.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.part files:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of triangles&gt; &lt;# of subdomains&gt;\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Remaining lines:&nbsp;&nbsp;&lt;triangle #&gt; &lt;subdomain #&gt;\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The set of triangles is partitioned by a .part file; each triangle is\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;mapped to a subdomain.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.adj files:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of subdomains&gt;\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Remaining lines:&nbsp;&nbsp;&lt;adjacency <a href="CppMatrix.htm">matrix</a> entry&gt;\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;An .adj file represents adjacencies between subdomains (presumably\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;computed by a partitioner).&nbsp;&nbsp;The first line is followed by\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;(subdomains X subdomains) lines, each containing one entry of the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;adjacency <a href="CppMatrix.htm">matrix</a>.&nbsp;&nbsp;A nonzero entry indicates that two subdomains are\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;adjacent (share a <a href="CppPointer.htm">point</a>).\n\n");<br/>
&nbsp;&nbsp;printf("Example:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Here is a sample file `box.poly' desc<a href="CppRibi.htm">ribi</a>ng a square with a square hole:\n"<br/>
);<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;# A box with eight <a href="CppPointer.htm">point</a>s in 2D, no attributes, no boundary marker.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;8 2 0 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Outer box has these vertices:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 0 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 0 3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 3 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp; 3 3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Inner square has these vertices:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 1 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp; 1 2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp; 2 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp; 2 2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Five segments without boundary markers.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;5 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Left side of outer box.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 5 7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Segments 2 through 5 enclose the hole.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 7 8\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp; 8 6\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 6 5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# One hole in the middle of the inner square.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1.5 1.5\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;After <b><a href="CppThis.htm">this</a></b> PSLG is triangulated by Triangle, the resulting triangulation\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;consists of a .node and .ele file.&nbsp;&nbsp;Here is the former, `box.1.node',\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;which duplicates the <a href="CppPointer.htm">point</a>s of the PSLG:\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;2&nbsp;&nbsp;0&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Generated by triangle <a href="CppOperatorMinus.htm">-</a>pcBev box\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Here is the triangulation file, `box.1.ele'.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;3&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp; 6\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp; 3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp; 8\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 4\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp; 5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp; 7\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Generated by triangle <a href="CppOperatorMinus.htm">-</a>pcBev box\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Here is the edge file <b><a href="CppFor.htm">for</a></b> the triangulation, `box.1.edge'.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1&nbsp;&nbsp;5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 5&nbsp;&nbsp;6\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 6&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp; 1&nbsp;&nbsp;3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 3&nbsp;&nbsp;5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp; 2&nbsp;&nbsp;6\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp; 6&nbsp;&nbsp;8\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp; 8&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 2&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp; 7&nbsp;&nbsp;3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp; 3&nbsp;&nbsp;4\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp; 4&nbsp;&nbsp;7\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp; 7&nbsp;&nbsp;5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp; 8&nbsp;&nbsp;4\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp; 4&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp; 8&nbsp;&nbsp;7\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Generated by triangle <a href="CppOperatorMinus.htm">-</a>pcBev box\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Here's a file `box.1.part' that partitions the mesh into four subdomains.\n"<br/>
);<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;4\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;3\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;4\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp;4\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Generated by slice <a href="CppOperatorMinus.htm">-</a>s4 box.1\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Here's a file `box.1.adj' that represents the resulting adjacencies.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;4\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("Display Speed:\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;It is worth<b><a href="CppWhile.htm">while</a></b> to note that .edge files typically plot and print twice\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;as quickly as .ele files, because .ele files cause each internal edge to\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;be drawn twice.&nbsp;&nbsp;For the same reason, PostScript files created from edge\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;sets are smaller than those created from triangulations.\n\n");<br/>
&nbsp;&nbsp;printf("Show Me on the Web:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;To see an illustrated, updated <a href="CppVersion.htm">version</a> of these instructions, check out\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;http://www.cs.cmu.edu/~quake/showme.html\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("A Brief Plea:\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you use Show Me (or Triangle), and especially <b><a href="CppIf.htm">if</a></b> you use it to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;accomplish real work, I would like very much to hear from you.&nbsp;&nbsp;A <b><a href="CppShort.htm">short</a></b>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;letter or email (to jrs@cs.cmu.edu) desc<a href="CppRibi.htm">ribi</a>ng how you use Show Me (and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;its sister programs) will mean a lot to me.&nbsp;&nbsp;The more people I know\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;are <b><a href="CppUsing.htm">using</a></b> my programs, the more easily I can justify spending <a href="CppTime.htm">time</a> on\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;improvements, which in turn will benefit you.&nbsp;&nbsp;Also, I can put you\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;on a list to receive email whenever <b><a href="CppNew.htm">new</a></b> <a href="CppVersion.htm">version</a>s are available.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you use a PostScript file generated by Show Me in a <b><a href="CppPublic.htm">public</a></b>ation,\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;please include an acknowledgment as well.\n\n");<br/>
&nbsp;&nbsp;exit(0);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> set_filenames(filename, lowermeshnumber)<br/>
<b><a href="CppChar.htm">char</a></b> *filename;<br/>
<b><a href="CppInt.htm">int</a></b> lowermeshnumber;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> numberstring[100];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 2; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(nodefilename[i], filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(polyfilename[i], filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(elefilename[i], filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(edgefilename[i], filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(partfilename[i], filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(adjfilename[i], filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(vnodefilename[i], filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(vedgefilename[i], filename);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lowermeshnumber <a href="CppOperatorPlus.htm">+</a> i &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSprintf.htm">sprintf</a>(numberstring, ".%d", lowermeshnumber <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(nodefilename[i], numberstring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(polyfilename[i], numberstring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(elefilename[i], numberstring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(edgefilename[i], numberstring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(partfilename[i], numberstring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(adjfilename[i], numberstring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(vnodefilename[i], numberstring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(vedgefilename[i], numberstring);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(nodefilename[i], ".node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(polyfilename[i], ".poly");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(elefilename[i], ".ele");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(edgefilename[i], ".edge");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(partfilename[i], ".part");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(adjfilename[i], ".adj");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(vnodefilename[i], ".v.node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(vedgefilename[i], ".v.edge");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> parsecommandline(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> increment;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> meshnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
<br/>
&nbsp;&nbsp;quiet <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;fillelem <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;line_width <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;bw_ps <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;start_image <a href="CppOperatorAssign.htm">=</a> ELE;<br/>
&nbsp;&nbsp;filename[0] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i &lt; <a href="CppArgc.htm">argc</a>; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][0] <a href="CppOperatorEqual.htm">==</a> '-') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 1; <a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorNotEqual.htm">!=</a> '\0'; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'f') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fillelem <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'w') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '1') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_width <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_width <a href="CppOperatorAssign.htm">=</a> line_width * 10 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppInt.htm">int</a></b>) (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorMinus.htm">-</a> '0');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line_width &gt; 100) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Line width cannot exceed 100.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_width <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;}<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'b') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bw_ps <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'Q') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quiet <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'h') <a href="CppOperatorLogicalOr.htm">||</a> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'H') <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> '?')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info();<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(filename, <a href="CppArgc.htm">argv</a>[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (filename[0] <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;syntax();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 5], ".node")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 5] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_image <a href="CppOperatorAssign.htm">=</a> NODE;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 5], ".poly")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 5] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_image <a href="CppOperatorAssign.htm">=</a> POLY;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 4], ".ele")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 4] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_image <a href="CppOperatorAssign.htm">=</a> ELE;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 5], ".edge")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 5] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_image <a href="CppOperatorAssign.htm">=</a> EDGE;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 5], ".part")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 5] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_image <a href="CppOperatorAssign.htm">=</a> PART;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 4], ".adj")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename[<a href="CppStrlen.htm">strlen</a>(filename) <a href="CppOperatorMinus.htm">-</a> 4] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_image <a href="CppOperatorAssign.htm">=</a> ADJ;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;increment <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;j <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (filename[j] <a href="CppOperatorNotEqual.htm">!=</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((filename[j] <a href="CppOperatorEqual.htm">==</a> '.') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (filename[j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorNotEqual.htm">!=</a> '\0')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment <a href="CppOperatorAssign.htm">=</a> j <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;meshnumber <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (increment &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j <a href="CppOperatorAssign.htm">=</a> increment;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((filename[j] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (filename[j] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;meshnumber <a href="CppOperatorAssign.htm">=</a> meshnumber * 10 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppInt.htm">int</a></b>) (filename[j] <a href="CppOperatorMinus.htm">-</a> '0');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (filename[j] <a href="CppOperatorNotEqual.htm">!=</a> '\0');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (increment &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename[increment <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (meshnumber <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loweriteration <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;start_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loweriteration <a href="CppOperatorAssign.htm">=</a> meshnumber <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;set_filenames(filename, loweriteration);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> free_inc(inc)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loaded[inc][NODE]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(nodeptr[inc]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loaded[inc][POLY]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (polynodes[inc] &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(polynodeptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(polyedgeptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(polyholeptr[inc]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loaded[inc][ELE]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(eleptr[inc]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loaded[inc][PART]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(partpart[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(partcenter[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(partshift[inc]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loaded[inc][EDGE]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(edgeptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(normptr[inc]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loaded[inc][ADJ]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(adjptr[inc]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loaded[inc][VORO]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(vnodeptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(vedgeptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(vnormptr[inc]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> move_inc(inc)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;free_inc(1 <a href="CppOperatorMinus.htm">-</a> inc);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; IMAGE_TYPES; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loaded[1 <a href="CppOperatorMinus.htm">-</a> inc][i] <a href="CppOperatorAssign.htm">=</a> loaded[inc][i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loaded[inc][i] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xlo[1 <a href="CppOperatorMinus.htm">-</a> inc][i] <a href="CppOperatorAssign.htm">=</a> xlo[inc][i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ylo[1 <a href="CppOperatorMinus.htm">-</a> inc][i] <a href="CppOperatorAssign.htm">=</a> ylo[inc][i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xhi[1 <a href="CppOperatorMinus.htm">-</a> inc][i] <a href="CppOperatorAssign.htm">=</a> xhi[inc][i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yhi[1 <a href="CppOperatorMinus.htm">-</a> inc][i] <a href="CppOperatorAssign.htm">=</a> yhi[inc][i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;nodes[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> nodes[inc];<br/>
&nbsp;&nbsp;node_dim[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> node_dim[inc];<br/>
&nbsp;&nbsp;nodeptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> nodeptr[inc];<br/>
&nbsp;&nbsp;polynodes[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> polynodes[inc];<br/>
&nbsp;&nbsp;poly_dim[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> poly_dim[inc];<br/>
&nbsp;&nbsp;polyedges[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> polyedges[inc];<br/>
&nbsp;&nbsp;polyholes[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> polyholes[inc];<br/>
&nbsp;&nbsp;polynodeptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> polynodeptr[inc];<br/>
&nbsp;&nbsp;polyedgeptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> polyedgeptr[inc];<br/>
&nbsp;&nbsp;polyholeptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> polyholeptr[inc];<br/>
&nbsp;&nbsp;elems[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> elems[inc];<br/>
&nbsp;&nbsp;ele_corners[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> ele_corners[inc];<br/>
&nbsp;&nbsp;eleptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> eleptr[inc];<br/>
&nbsp;&nbsp;edges[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> edges[inc];<br/>
&nbsp;&nbsp;edgeptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> edgeptr[inc];<br/>
&nbsp;&nbsp;normptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> normptr[inc];<br/>
&nbsp;&nbsp;subdomains[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> subdomains[inc];<br/>
&nbsp;&nbsp;partpart[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> partpart[inc];<br/>
&nbsp;&nbsp;partcenter[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> partcenter[inc];<br/>
&nbsp;&nbsp;partshift[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> partshift[inc];<br/>
&nbsp;&nbsp;adjsubdomains[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> adjsubdomains[inc];<br/>
&nbsp;&nbsp;adjptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> adjptr[inc];<br/>
&nbsp;&nbsp;vnodes[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> vnodes[inc];<br/>
&nbsp;&nbsp;vnode_dim[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> vnode_dim[inc];<br/>
&nbsp;&nbsp;vnodeptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> vnodeptr[inc];<br/>
&nbsp;&nbsp;vedges[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> vedges[inc];<br/>
&nbsp;&nbsp;vedgeptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> vedgeptr[inc];<br/>
&nbsp;&nbsp;vnormptr[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> vnormptr[inc];<br/>
&nbsp;&nbsp;firstnumber[1 <a href="CppOperatorMinus.htm">-</a> inc] <a href="CppOperatorAssign.htm">=</a> firstnumber[inc];<br/>
&nbsp;&nbsp;firstnumber[inc] <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> unload_inc(inc)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;current_image <a href="CppOperatorAssign.htm">=</a> NOTHING;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; IMAGE_TYPES; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loaded[inc][i] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;firstnumber[inc] <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> showme_init()<br/>
{<br/>
&nbsp;&nbsp;current_image <a href="CppOperatorAssign.htm">=</a> NOTHING;<br/>
&nbsp;&nbsp;current_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;explosion <a href="CppOperatorAssign.htm">=</a> STARTEXPLOSION;<br/>
&nbsp;&nbsp;unload_inc(0);<br/>
&nbsp;&nbsp;unload_inc(1);<br/>
}<br/>
<br/>
<b><a href="CppChar.htm">char</a></b> *readline(string, infile, infilename)<br/>
<b><a href="CppChar.htm">char</a></b> *string;<br/>
<a href="CppCfile.htm">FILE</a> *infile;<br/>
<b><a href="CppChar.htm">char</a></b> *infilename;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *result;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result <a href="CppOperatorAssign.htm">=</a> fgets(string, INPUTLINESIZE, infile);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (result <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppChar.htm">char</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Unexpected end of file in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; infilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((*result <a href="CppOperatorNotEqual.htm">!=</a> '\0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '#')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '.') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '+') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '-')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((*result &lt; '0') <a href="CppOperatorLogicalOr.htm">||</a> (*result &gt; '9'))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((*result <a href="CppOperatorEqual.htm">==</a> '#') <a href="CppOperatorLogicalOr.htm">||</a> (*result <a href="CppOperatorEqual.htm">==</a> '\0'));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<b><a href="CppChar.htm">char</a></b> *findfield(string)<br/>
<b><a href="CppChar.htm">char</a></b> *string;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *result;<br/>
<br/>
&nbsp;&nbsp;result <a href="CppOperatorAssign.htm">=</a> string;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((*result <a href="CppOperatorNotEqual.htm">!=</a> '\0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '#')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> ' ') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '\t')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((*result <a href="CppOperatorNotEqual.htm">!=</a> '\0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '#')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '.') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '+') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '-')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((*result &lt; '0') <a href="CppOperatorLogicalOr.htm">||</a> (*result &gt; '9'))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*result <a href="CppOperatorEqual.htm">==</a> '#') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*result <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> load_node(fname, firstnumber, nodes, dim, ptr, xmin, ymin, xmax, ymax)<br/>
<b><a href="CppChar.htm">char</a></b> *fname;<br/>
<b><a href="CppInt.htm">int</a></b> *firstnumber;<br/>
<b><a href="CppInt.htm">int</a></b> *nodes;<br/>
<b><a href="CppInt.htm">int</a></b> *dim;<br/>
REAL **ptr;<br/>
REAL *xmin;<br/>
REAL *ymin;<br/>
REAL *xmax;<br/>
REAL *ymax;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *infile;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *stringptr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> extras;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nodemarks;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nod<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> smallerr;<br/>
&nbsp;&nbsp;REAL x, y;<br/>
<br/>
&nbsp;&nbsp;*xmin <a href="CppOperatorAssign.htm">=</a> *ymin <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;*xmax <a href="CppOperatorAssign.htm">=</a> *ymax <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;infile <a href="CppOperatorAssign.htm">=</a> fopen(fname, "r");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;*nodes <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*nodes &lt; 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s contains <a href="CppOperatorModulus.htm">%</a>d <a href="CppPointer.htm">point</a>s.\n", fname, *nodes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*dim <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*dim <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*dim &lt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has dimensionality <a href="CppOperatorModulus.htm">%</a>d.\n", fname, *dim);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*dim <a href="CppOperatorNotEqual.htm">!=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;I only understand two-dimensional meshes.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;extras <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;extras <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (extras &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has negative value <b><a href="CppFor.htm">for</a></b> number of attributes.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nodemarks <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nodemarks <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nodemarks &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has negative value <b><a href="CppFor.htm">for</a></b> number of <a href="CppPointer.htm">point</a> markers.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nodemarks &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp; "&nbsp;&nbsp;Warning:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has value greater than one <b><a href="CppFor.htm">for</a></b> number of <a href="CppPointer.htm">point</a> markers.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*ptr <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc((*nodes <a href="CppOperatorPlus.htm">+</a> 1) * *dim * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*ptr <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> *dim;<br/>
&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; *nodes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nod<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((i <a href="CppOperatorEqual.htm">==</a> 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*firstnumber <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nod<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*firstnumber <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*firstnumber <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((nod<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorNotEqual.htm">!=</a> *firstnumber <a href="CppOperatorPlus.htm">+</a> i) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (smallerr)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>s in <a href="CppOperatorModulus.htm">%</a>s are not numbered correctly\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(starting with <a href="CppPointer.htm">point</a> <a href="CppOperatorModulus.htm">%</a>d).\n", *firstnumber <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; *dim; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;<a href="CppPoint.htm">Point</a> <a href="CppOperatorModulus.htm">%</a>d is missing a coordinate in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *firstnumber <a href="CppOperatorPlus.htm">+</a> i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*ptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*ptr)[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fclose(infile);<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> *dim;<br/>
&nbsp;&nbsp;*xmin <a href="CppOperatorAssign.htm">=</a> *xmax <a href="CppOperatorAssign.htm">=</a> (*ptr)[index];<br/>
&nbsp;&nbsp;*ymin <a href="CppOperatorAssign.htm">=</a> *ymax <a href="CppOperatorAssign.htm">=</a> (*ptr)[index <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 2; i <a href="CppOperatorLessEqual.htm">&lt;=</a> *nodes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> *dim;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (*ptr)[index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> (*ptr)[index <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; *xmin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*xmin <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &lt; *ymin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*ymin <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &gt; *xmax) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*xmax <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &gt; *ymax) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*ymax <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*xmin <a href="CppOperatorEqual.htm">==</a> *xmax) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*xmin <a href="CppOperatorMinusAssign.htm">-=</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*xmax <a href="CppOperatorPlusAssign.htm">+=</a> 0.5;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*ymin <a href="CppOperatorEqual.htm">==</a> *ymax) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*ymin <a href="CppOperatorMinusAssign.htm">-=</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*ymax <a href="CppOperatorPlusAssign.htm">+=</a> 0.5;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> load_poly(inc, fname, firstnumber, pnodes, dim, edges, holes, nodeptr,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgeptr, holeptr, xmin, ymin, xmax, ymax)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
<b><a href="CppChar.htm">char</a></b> *fname;<br/>
<b><a href="CppInt.htm">int</a></b> *firstnumber;<br/>
<b><a href="CppInt.htm">int</a></b> *pnodes;<br/>
<b><a href="CppInt.htm">int</a></b> *dim;<br/>
<b><a href="CppInt.htm">int</a></b> *edges;<br/>
<b><a href="CppInt.htm">int</a></b> *holes;<br/>
REAL **nodeptr;<br/>
<b><a href="CppInt.htm">int</a></b> **edgeptr;<br/>
REAL **holeptr;<br/>
REAL *xmin;<br/>
REAL *ymin;<br/>
REAL *xmax;<br/>
REAL *ymax;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *infile;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *stringptr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> extras;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nodemarks;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> segmentmarks;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nod<b><a href="CppEnum.htm">enum</a></b>ber, edg<b><a href="CppEnum.htm">enum</a></b>ber, hol<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> maxnode;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> smallerr;<br/>
&nbsp;&nbsp;REAL x, y;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;infile <a href="CppOperatorAssign.htm">=</a> fopen(fname, "r");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;*pnodes <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*pnodes <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!loaded[inc][NODE]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (load_image(inc, NODE)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maxnode <a href="CppOperatorAssign.htm">=</a> nodes[inc];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*xmin <a href="CppOperatorAssign.htm">=</a> xlo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*ymin <a href="CppOperatorAssign.htm">=</a> ylo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*xmax <a href="CppOperatorAssign.htm">=</a> xhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*ymax <a href="CppOperatorAssign.htm">=</a> yhi[inc][NODE];<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*pnodes &lt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s contains <a href="CppOperatorModulus.htm">%</a>d <a href="CppPointer.htm">point</a>s.\n", fname, *pnodes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maxnode <a href="CppOperatorAssign.htm">=</a> *pnodes;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*dim <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*dim <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*dim &lt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has dimensionality <a href="CppOperatorModulus.htm">%</a>d.\n", fname, *dim);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*dim <a href="CppOperatorNotEqual.htm">!=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;I only understand two-dimensional .poly files.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;extras <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;extras <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (extras &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has negative value <b><a href="CppFor.htm">for</a></b> number of attributes.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nodemarks <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nodemarks <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nodemarks &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has negative value <b><a href="CppFor.htm">for</a></b> number of <a href="CppPointer.htm">point</a> markers.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nodemarks &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp; "&nbsp;&nbsp;Warning:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has value greater than one <b><a href="CppFor.htm">for</a></b> number of <a href="CppPointer.htm">point</a> markers.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*pnodes &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*nodeptr <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc((*pnodes <a href="CppOperatorPlus.htm">+</a> 1) * *dim * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*nodeptr <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> *dim;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; *pnodes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nod<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((i <a href="CppOperatorEqual.htm">==</a> 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*firstnumber <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nod<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*firstnumber <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*firstnumber <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((nod<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorNotEqual.htm">!=</a> *firstnumber <a href="CppOperatorPlus.htm">+</a> i) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (smallerr)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>s in <a href="CppOperatorModulus.htm">%</a>s are not numbered correctly.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(starting with <a href="CppPointer.htm">point</a> <a href="CppOperatorModulus.htm">%</a>d).\n", *firstnumber <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; *dim; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;<a href="CppPoint.htm">Point</a> <a href="CppOperatorModulus.htm">%</a>d is missing a coordinate in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *firstnumber <a href="CppOperatorPlus.htm">+</a> i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*nodeptr)[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;*edges <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*edges &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s contains <a href="CppOperatorModulus.htm">%</a>d segments.\n", fname, *edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;segmentmarks <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;segmentmarks <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (segmentmarks &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has negative value <b><a href="CppFor.htm">for</a></b> number of segment markers.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (segmentmarks &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp; "&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has value greater than one <b><a href="CppFor.htm">for</a></b> number of segment markers.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*edgeptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) malloc(((*edges <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*edgeptr <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> *firstnumber; i &lt; *firstnumber <a href="CppOperatorPlus.htm">+</a> *edges; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((edg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorNotEqual.htm">!=</a> i) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (smallerr)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;Segments in <a href="CppOperatorModulus.htm">%</a>s are not numbered correctly.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(starting with segment <a href="CppOperatorModulus.htm">%</a>d).\n", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>d is missing its endpoints in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*edgeptr)[index] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0) <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*firstnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((*edgeptr)[index] &lt; 1) <a href="CppOperatorLogicalOr.htm">||</a> ((*edgeptr)[index] &gt; maxnode)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>d has invalid endpoint in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>d is missing an endpoint in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*edgeptr)[index <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0) <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*firstnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((*edgeptr)[index <a href="CppOperatorPlus.htm">+</a> 1] &lt; 1) <a href="CppOperatorLogicalOr.htm">||</a> ((*edgeptr)[index <a href="CppOperatorPlus.htm">+</a> 1] &gt; maxnode)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>d has invalid endpoint in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> 2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;*holes <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*holes &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s contains <a href="CppOperatorModulus.htm">%</a>d holes.\n", fname, *holes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*holeptr <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc((*holes <a href="CppOperatorPlus.htm">+</a> 1) * *dim * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*holeptr <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> *dim;<br/>
&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> *firstnumber; i &lt; *firstnumber <a href="CppOperatorPlus.htm">+</a> *holes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;hol<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((hol<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorNotEqual.htm">!=</a> i) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (smallerr)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;Holes in <a href="CppOperatorModulus.htm">%</a>s are not numbered correctly.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(starting with hole <a href="CppOperatorModulus.htm">%</a>d).\n", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; *dim; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Hole <a href="CppOperatorModulus.htm">%</a>d is missing a coordinate in <a href="CppOperatorModulus.htm">%</a>s.\n", i,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*nodeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*holeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*holeptr)[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fclose(infile);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*pnodes &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> *dim;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*xmin <a href="CppOperatorAssign.htm">=</a> *xmax <a href="CppOperatorAssign.htm">=</a> (*nodeptr)[index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*ymin <a href="CppOperatorAssign.htm">=</a> *ymax <a href="CppOperatorAssign.htm">=</a> (*nodeptr)[index <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 2; i <a href="CppOperatorLessEqual.htm">&lt;=</a> *pnodes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> *dim;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (*nodeptr)[index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> (*nodeptr)[index <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; *xmin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*xmin <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &lt; *ymin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*ymin <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &gt; *xmax) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*xmax <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &gt; *ymax) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*ymax <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> *dim;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> *holes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (*holeptr)[index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> (*holeptr)[index <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; *xmin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*xmin <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &lt; *ymin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*ymin <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &gt; *xmax) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*xmax <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &gt; *ymax) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*ymax <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> *dim;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> load_ele(fname, firstnumber, nodes, elems, corners, ptr)<br/>
<b><a href="CppChar.htm">char</a></b> *fname;<br/>
<b><a href="CppInt.htm">int</a></b> firstnumber;<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> *elems;<br/>
<b><a href="CppInt.htm">int</a></b> *corners;<br/>
<b><a href="CppInt.htm">int</a></b> **ptr;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *infile;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *stringptr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> extras;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> elemnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> smallerr;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;infile <a href="CppOperatorAssign.htm">=</a> fopen(fname, "r");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;*elems <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*elems &lt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s contains <a href="CppOperatorModulus.htm">%</a>d triangles.\n", fname, *elems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*corners <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*corners <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*corners &lt; 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Triangles in <a href="CppOperatorModulus.htm">%</a>s have only <a href="CppOperatorModulus.htm">%</a>d corners.\n", fname,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *corners);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;extras <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;extras <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (extras &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has negative value <b><a href="CppFor.htm">for</a></b> extra fields.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*ptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) malloc((*elems <a href="CppOperatorPlus.htm">+</a> 1) * 3 * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*ptr <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> firstnumber; i &lt; firstnumber <a href="CppOperatorPlus.htm">+</a> *elems; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elemnumber <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((elemnumber <a href="CppOperatorNotEqual.htm">!=</a> i) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (smallerr)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;Triangles in <a href="CppOperatorModulus.htm">%</a>s are not numbered correctly.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(starting with triangle <a href="CppOperatorModulus.htm">%</a>d).\n", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangle <a href="CppOperatorModulus.htm">%</a>d is missing a corner in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*ptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*ptr)[index] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0) <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((*ptr)[index] &lt; 1) <a href="CppOperatorLogicalOr.htm">||</a> ((*ptr)[index] &gt; nodes)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangle <a href="CppOperatorModulus.htm">%</a>d has invalid corner in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fclose(infile);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> load_edge(fname, firstnumber, nodes, edges, edgeptr, normptr)<br/>
<b><a href="CppChar.htm">char</a></b> *fname;<br/>
<b><a href="CppInt.htm">int</a></b> firstnumber;<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> *edges;<br/>
<b><a href="CppInt.htm">int</a></b> **edgeptr;<br/>
REAL **normptr;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *infile;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *stringptr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> edg<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> edgemarks;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> smallerr;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;infile <a href="CppOperatorAssign.htm">=</a> fopen(fname, "r");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;*edges <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*edges &lt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s contains <a href="CppOperatorModulus.htm">%</a>d edges.\n", fname, *edges);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edgemarks <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edgemarks <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgemarks &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has negative value <b><a href="CppFor.htm">for</a></b> number of edge markers.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgemarks &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp; "&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s has value greater than one <b><a href="CppFor.htm">for</a></b> number of edge markers.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*edgeptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) malloc(((*edges <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*edgeptr <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*normptr <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc(((*edges <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*normptr <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> firstnumber; i &lt; firstnumber <a href="CppOperatorPlus.htm">+</a> *edges; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((edg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorNotEqual.htm">!=</a> i) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (smallerr)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;Edges in <a href="CppOperatorModulus.htm">%</a>s are not numbered correctly.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(starting with edge <a href="CppOperatorModulus.htm">%</a>d).\n", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Edge <a href="CppOperatorModulus.htm">%</a>d is missing its endpoints in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*normptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*edgeptr)[index] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0) <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((*edgeptr)[index] &lt; 1) <a href="CppOperatorLogicalOr.htm">||</a> ((*edgeptr)[index] &gt; nodes)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Edge <a href="CppOperatorModulus.htm">%</a>d has invalid endpoint in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Edge <a href="CppOperatorModulus.htm">%</a>d is missing an endpoint in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*normptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*edgeptr)[index <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*edgeptr)[index <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Edge <a href="CppOperatorModulus.htm">%</a>d is missing its direction in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*normptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*normptr)[index] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Edge <a href="CppOperatorModulus.htm">%</a>d is missing a direction coordinate in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*edgeptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*normptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*normptr)[index <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*edgeptr)[index <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorPlusAssign.htm">+=</a> 1 <a href="CppOperatorMinus.htm">-</a> firstnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((*edgeptr)[index <a href="CppOperatorPlus.htm">+</a> 1] &lt; 1) <a href="CppOperatorLogicalOr.htm">||</a> ((*edgeptr)[index <a href="CppOperatorPlus.htm">+</a> 1] &gt; nodes)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Edge <a href="CppOperatorModulus.htm">%</a>d has invalid endpoint in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> 2;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fclose(infile);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> load_part(fname, dim, firstnumber, elems, nodeptr, eleptr, parts,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition, partcenter, partshift)<br/>
<b><a href="CppChar.htm">char</a></b> *fname;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
<b><a href="CppInt.htm">int</a></b> firstnumber;<br/>
<b><a href="CppInt.htm">int</a></b> elems;<br/>
REAL *nodeptr;<br/>
<b><a href="CppInt.htm">int</a></b> *eleptr;<br/>
<b><a href="CppInt.htm">int</a></b> *parts;<br/>
<b><a href="CppInt.htm">int</a></b> **partition;<br/>
REAL **partcenter;<br/>
REAL **partshift;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *infile;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *stringptr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> partelems;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> elemnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> smallerr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *partsize;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;infile <a href="CppOperatorAssign.htm">=</a> fopen(fname, "r");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;partelems <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (partelems <a href="CppOperatorNotEqual.htm">!=</a> elems) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;Error:&nbsp;&nbsp;.ele and .part files <b><a href="CppDo.htm">do</a></b> not agree on number of triangles.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*parts <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*parts <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*parts &lt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s specifies <a href="CppOperatorModulus.htm">%</a>d subdomains.\n", fname, *parts);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*partition <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) malloc((elems <a href="CppOperatorPlus.htm">+</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*partition <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> firstnumber; i &lt; firstnumber <a href="CppOperatorPlus.htm">+</a> partelems; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elemnumber <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((elemnumber <a href="CppOperatorNotEqual.htm">!=</a> i) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (smallerr)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Warning:&nbsp;&nbsp;Triangles in <a href="CppOperatorModulus.htm">%</a>s are not numbered correctly.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(starting with triangle <a href="CppOperatorModulus.htm">%</a>d).\n", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallerr <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangle <a href="CppOperatorModulus.htm">%</a>d has no subdomain in <a href="CppOperatorModulus.htm">%</a>s.\n", i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*partition);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorMinus.htm">-</a> firstnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*partition)[j] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0) <a href="CppOperatorMinus.htm">-</a> firstnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((*partition)[j] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> *parts) <a href="CppOperatorLogicalOr.htm">||</a> ((*partition)[j] &lt; 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Triangle <a href="CppOperatorModulus.htm">%</a>d of <a href="CppOperatorModulus.htm">%</a>s has an invalid subdomain.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*partition);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fclose(infile);<br/>
&nbsp;&nbsp;*partcenter <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc(((*parts <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*partcenter <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*partition);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*partshift <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc((*parts <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*partshift <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*partition);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*partcenter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;partsize <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) malloc((*parts <a href="CppOperatorPlus.htm">+</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (partsize <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*partition);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*partcenter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(*partshift);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i <a href="CppOperatorLessEqual.htm">&lt;=</a> *parts; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;partsize[i] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*partcenter)[i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*partcenter)[(i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> elems; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;partsize[(*partition)[i]] <a href="CppOperatorPlusAssign.htm">+=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*partcenter)[(*partition)[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1] <a href="CppOperatorPlusAssign.htm">+=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeptr[eleptr[index] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*partcenter)[((*partition)[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorPlusAssign.htm">+=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeptr[eleptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; *parts; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*partcenter)[i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1] <a href="CppOperatorDivideAssign.htm">/=</a> (REAL) partsize[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*partcenter)[(i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorDivideAssign.htm">/=</a> (REAL) partsize[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*partcenter)[*parts <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1] <a href="CppOperatorPlusAssign.htm">+=</a> (*partcenter)[i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*partcenter)[(*parts <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorPlusAssign.htm">+=</a> (*partcenter)[(i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;(*partcenter)[*parts <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1] <a href="CppOperatorDivideAssign.htm">/=</a> (REAL) *parts;<br/>
&nbsp;&nbsp;(*partcenter)[(*parts <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorDivideAssign.htm">/=</a> (REAL) *parts;<br/>
&nbsp;&nbsp;free(partsize);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> load_adj(fname, subdomains, ptr)<br/>
<b><a href="CppChar.htm">char</a></b> *fname;<br/>
<b><a href="CppInt.htm">int</a></b> *subdomains;<br/>
<b><a href="CppInt.htm">int</a></b> **ptr;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *infile;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *stringptr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;infile <a href="CppOperatorAssign.htm">=</a> fopen(fname, "r");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;*subdomains <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*subdomains &lt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s contains <a href="CppOperatorModulus.htm">%</a>d subdomains.\n", fname, *subdomains);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*ptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) malloc(*subdomains * *subdomains * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*ptr <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; *subdomains; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; *subdomains; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*ptr)[i * *subdomains <a href="CppOperatorPlus.htm">+</a> j] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol (stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> findpartshift(parts, explosion, partcenter, partshift)<br/>
<b><a href="CppInt.htm">int</a></b> parts;<br/>
REAL explosion;<br/>
REAL *partcenter;<br/>
REAL *partshift;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; parts; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;partshift[i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1] <a href="CppOperatorAssign.htm">=</a> explosion *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(partcenter[i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1] <a href="CppOperatorMinus.htm">-</a> partcenter[parts <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;partshift[(i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorAssign.htm">=</a> explosion *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(partcenter[(i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorMinus.htm">-</a> partcenter[(parts <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> load_image(inc, image)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
<b><a href="CppInt.htm">int</a></b> image;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> error;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (image) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> NODE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> load_node(nodefilename[inc], &amp;firstnumber[inc], &amp;nodes[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;node_dim[inc], &amp;nodeptr[inc], &amp;xlo[inc][NODE],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ylo[inc][NODE], &amp;xhi[inc][NODE], &amp;yhi[inc][NODE]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> POLY:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> load_poly(inc, polyfilename[inc], &amp;firstnumber[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;polynodes[inc], &amp;poly_dim[inc], &amp;polyedges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;polyholes[inc], &amp;polynodeptr[inc], &amp;polyedgeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;polyholeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;xlo[inc][POLY], &amp;ylo[inc][POLY],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;xhi[inc][POLY], &amp;yhi[inc][POLY]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ELE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> load_ele(elefilename[inc], firstnumber[inc], nodes[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;elems[inc], &amp;ele_corners[inc], &amp;eleptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xlo[inc][ELE] <a href="CppOperatorAssign.htm">=</a> xlo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ylo[inc][ELE] <a href="CppOperatorAssign.htm">=</a> ylo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhi[inc][ELE] <a href="CppOperatorAssign.htm">=</a> xhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yhi[inc][ELE] <a href="CppOperatorAssign.htm">=</a> yhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> EDGE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> load_edge(edgefilename[inc], firstnumber[inc], nodes[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;edges[inc], &amp;edgeptr[inc], &amp;normptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xlo[inc][EDGE] <a href="CppOperatorAssign.htm">=</a> xlo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ylo[inc][EDGE] <a href="CppOperatorAssign.htm">=</a> ylo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhi[inc][EDGE] <a href="CppOperatorAssign.htm">=</a> xhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yhi[inc][EDGE] <a href="CppOperatorAssign.htm">=</a> yhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> PART:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> load_part(partfilename[inc], node_dim[inc], firstnumber[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elems[inc], nodeptr[inc], eleptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;subdomains[inc], &amp;partpart[inc], &amp;partcenter[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;partshift[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!error) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;findpartshift(subdomains[inc], explosion, partcenter[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partshift[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xlo[inc][PART] <a href="CppOperatorAssign.htm">=</a> xlo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ylo[inc][PART] <a href="CppOperatorAssign.htm">=</a> ylo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhi[inc][PART] <a href="CppOperatorAssign.htm">=</a> xhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yhi[inc][PART] <a href="CppOperatorAssign.htm">=</a> yhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ADJ:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> load_adj(adjfilename[inc], &amp;adjsubdomains[inc], &amp;adjptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xlo[inc][ADJ] <a href="CppOperatorAssign.htm">=</a> xlo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ylo[inc][ADJ] <a href="CppOperatorAssign.htm">=</a> ylo[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhi[inc][ADJ] <a href="CppOperatorAssign.htm">=</a> xhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yhi[inc][ADJ] <a href="CppOperatorAssign.htm">=</a> yhi[inc][NODE];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VORO:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> load_node(vnodefilename[inc], &amp;firstnumber[inc], &amp;vnodes[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;vnode_dim[inc], &amp;vnodeptr[inc], &amp;xlo[inc][VORO],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ylo[inc][VORO], &amp;xhi[inc][VORO], &amp;yhi[inc][VORO]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!error) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> load_edge(vedgefilename[inc], firstnumber[inc], vnodes[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;vedges[inc], &amp;vedgeptr[inc], &amp;vnormptr[inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!error) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loaded[inc][image] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> choose_image(inc, image)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
<b><a href="CppInt.htm">int</a></b> image;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!loaded[inc][image]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((image <a href="CppOperatorEqual.htm">==</a> ELE) <a href="CppOperatorLogicalOr.htm">||</a> (image <a href="CppOperatorEqual.htm">==</a> EDGE) <a href="CppOperatorLogicalOr.htm">||</a> (image <a href="CppOperatorEqual.htm">==</a> PART)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (image <a href="CppOperatorEqual.htm">==</a> ADJ)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!loaded[inc][NODE]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (load_image(inc, NODE)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalOr.htm">||</a> (image <a href="CppOperatorEqual.htm">==</a> ADJ)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!loaded[inc][ELE]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (load_image(inc, ELE)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (image <a href="CppOperatorEqual.htm">==</a> ADJ) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!loaded[inc][PART]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (load_image(inc, PART)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (load_image(inc, image)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;current_inc <a href="CppOperatorAssign.htm">=</a> inc;<br/>
&nbsp;&nbsp;current_image <a href="CppOperatorAssign.htm">=</a> image;<br/>
}<br/>
<br/>
Window make_button(name, x, y, width)<br/>
<b><a href="CppChar.htm">char</a></b> *name;<br/>
<b><a href="CppInt.htm">int</a></b> x;<br/>
<b><a href="CppInt.htm">int</a></b> y;<br/>
<b><a href="CppInt.htm">int</a></b> width;<br/>
{<br/>
&nbsp;&nbsp;XSetWindowAttributes attr;<br/>
&nbsp;&nbsp;XSizeHints hints;<br/>
&nbsp;&nbsp;Window button;<br/>
<br/>
&nbsp;&nbsp;attr.background_pixel <a href="CppOperatorAssign.htm">=</a> black;<br/>
&nbsp;&nbsp;attr.border_pixel <a href="CppOperatorAssign.htm">=</a> white;<br/>
&nbsp;&nbsp;attr.backing_store <a href="CppOperatorAssign.htm">=</a> NotUseful;<br/>
&nbsp;&nbsp;attr.event_mask <a href="CppOperatorAssign.htm">=</a> ExposureMask | ButtonReleaseMask | ButtonPressMask;<br/>
&nbsp;&nbsp;attr.bit_gravity <a href="CppOperatorAssign.htm">=</a> SouthWestGravity;<br/>
&nbsp;&nbsp;attr.win_gravity <a href="CppOperatorAssign.htm">=</a> SouthWestGravity;<br/>
&nbsp;&nbsp;attr.save_under <a href="CppOperatorAssign.htm">=</a> False;<br/>
&nbsp;&nbsp;button <a href="CppOperatorAssign.htm">=</a> XCreateWindow(display, mainwindow, x, y, width, BUTTONHEIGHT <a href="CppOperatorMinus.htm">-</a> 4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, 0, InputOutput, CopyFromParent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CWBackPixel | CWBorderPixel | C<a href="CppWEvent.htm">WEvent</a>Mask |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CWBitGravity | CWWinGravity | CWBackingStore |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CWSaveUnder, &amp;attr);<br/>
&nbsp;&nbsp;hints.width <a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;hints.height <a href="CppOperatorAssign.htm">=</a> BUTTONHEIGHT <a href="CppOperatorMinus.htm">-</a> 4;<br/>
&nbsp;&nbsp;hints.min_width <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;hints.min_height <a href="CppOperatorAssign.htm">=</a> BUTTONHEIGHT <a href="CppOperatorMinus.htm">-</a> 4;<br/>
&nbsp;&nbsp;hints.max_width <a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;hints.max_height <a href="CppOperatorAssign.htm">=</a> BUTTONHEIGHT <a href="CppOperatorMinus.htm">-</a> 4;<br/>
&nbsp;&nbsp;hints.width_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;hints.height_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;hints.flags <a href="CppOperatorAssign.htm">=</a> PMinSize | PMaxSize | PSize | PResizeInc;<br/>
&nbsp;&nbsp;XSetStandardProperties(display, button, name, "showme", None, (<b><a href="CppChar.htm">char</a></b> **) <a href="CppNULL.htm">NULL</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, &amp;hints);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> button;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> make_buttons(y)<br/>
<b><a href="CppInt.htm">int</a></b> y;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0; i<a href="CppOperatorDecrement.htm">--</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nodewin[i] <a href="CppOperatorAssign.htm">=</a> make_button("node", 0, y <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorMinus.htm">-</a> i) * BUTTONHEIGHT, 42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XMapWindow(display, nodewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;polywin[i] <a href="CppOperatorAssign.htm">=</a> make_button("poly", 44, y <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorMinus.htm">-</a> i) * BUTTONHEIGHT, 42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XMapWindow(display, polywin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elewin[i] <a href="CppOperatorAssign.htm">=</a> make_button("ele", 88, y <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorMinus.htm">-</a> i) * BUTTONHEIGHT, 33);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XMapWindow(display, elewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edgewin[i] <a href="CppOperatorAssign.htm">=</a> make_button("edge", 123, y <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorMinus.htm">-</a> i) * BUTTONHEIGHT, 42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XMapWindow(display, edgewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;partwin[i] <a href="CppOperatorAssign.htm">=</a> make_button("part", 167, y <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorMinus.htm">-</a> i) * BUTTONHEIGHT, 42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XMapWindow(display, partwin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;adjwin[i] <a href="CppOperatorAssign.htm">=</a> make_button("adj", 211, y <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorMinus.htm">-</a> i) * BUTTONHEIGHT, 33);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XMapWindow(display, adjwin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;voronoiwin[i] <a href="CppOperatorAssign.htm">=</a> make_button("voro", 246, y <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorMinus.htm">-</a> i) * BUTTONHEIGHT, 42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XMapWindow(display, voronoiwin[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppVersion.htm">version</a>pluswin <a href="CppOperatorAssign.htm">=</a> make_button("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>", 290, y, 52);<br/>
&nbsp;&nbsp;XMapWindow(display, <a href="CppVersion.htm">version</a>pluswin);<br/>
&nbsp;&nbsp;<a href="CppVersion.htm">version</a>minuswin <a href="CppOperatorAssign.htm">=</a> make_button("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>", 290, y <a href="CppOperatorPlus.htm">+</a> BUTTONHEIGHT, 52);<br/>
&nbsp;&nbsp;XMapWindow(display, <a href="CppVersion.htm">version</a>minuswin);<br/>
<br/>
&nbsp;&nbsp;quitwin <a href="CppOperatorAssign.htm">=</a> make_button("Quit", 0, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 42);<br/>
&nbsp;&nbsp;XMapWindow(display, quitwin);<br/>
&nbsp;&nbsp;leftwin <a href="CppOperatorAssign.htm">=</a> make_button("&lt;", 44, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 14);<br/>
&nbsp;&nbsp;XMapWindow(display, leftwin);<br/>
&nbsp;&nbsp;rightwin <a href="CppOperatorAssign.htm">=</a> make_button("&gt;", 60, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 14);<br/>
&nbsp;&nbsp;XMapWindow(display, rightwin);<br/>
&nbsp;&nbsp;upwin <a href="CppOperatorAssign.htm">=</a> make_button("^", 76, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 14);<br/>
&nbsp;&nbsp;XMapWindow(display, upwin);<br/>
&nbsp;&nbsp;downwin <a href="CppOperatorAssign.htm">=</a> make_button("v", 92, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 14);<br/>
&nbsp;&nbsp;XMapWindow(display, downwin);<br/>
&nbsp;&nbsp;resetwin <a href="CppOperatorAssign.htm">=</a> make_button("Reset", 108, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 52);<br/>
&nbsp;&nbsp;XMapWindow(display, resetwin);<br/>
&nbsp;&nbsp;widthpluswin <a href="CppOperatorAssign.htm">=</a> make_button("Width+", 162, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 61);<br/>
&nbsp;&nbsp;XMapWindow(display, widthpluswin);<br/>
&nbsp;&nbsp;widthminuswin <a href="CppOperatorAssign.htm">=</a> make_button("-", 225, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 14);<br/>
&nbsp;&nbsp;XMapWindow(display, widthminuswin);<br/>
&nbsp;&nbsp;expwin <a href="CppOperatorAssign.htm">=</a> make_button("Exp", 241, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 33);<br/>
&nbsp;&nbsp;XMapWindow(display, expwin);<br/>
&nbsp;&nbsp;exppluswin <a href="CppOperatorAssign.htm">=</a> make_button("+", 276, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 14);<br/>
&nbsp;&nbsp;XMapWindow(display, exppluswin);<br/>
&nbsp;&nbsp;expminuswin <a href="CppOperatorAssign.htm">=</a> make_button("-", 292, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 14);<br/>
&nbsp;&nbsp;XMapWindow(display, expminuswin);<br/>
&nbsp;&nbsp;fillwin <a href="CppOperatorAssign.htm">=</a> make_button("Fill", 308, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 41);<br/>
&nbsp;&nbsp;XMapWindow(display, fillwin);<br/>
&nbsp;&nbsp;pswin <a href="CppOperatorAssign.htm">=</a> make_button("PS", 351, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 24);<br/>
&nbsp;&nbsp;XMapWindow(display, pswin);<br/>
&nbsp;&nbsp;epswin <a href="CppOperatorAssign.htm">=</a> make_button("EPS", 377, y <a href="CppOperatorPlus.htm">+</a> 2 * BUTTONHEIGHT, 33);<br/>
&nbsp;&nbsp;XMapWindow(display, epswin);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> fill_button(button)<br/>
Window button;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x, y;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> w, h, d, b;<br/>
&nbsp;&nbsp;Window rootw;<br/>
<br/>
&nbsp;&nbsp;XGetGeometry(display, button, &amp;rootw, &amp;x, &amp;y, &amp;w, &amp;h, &amp;d, &amp;b);<br/>
&nbsp;&nbsp;XFill<a href="CppRectangle.htm">Rectangle</a>(display, button, fontgc, 0, 0, w, h);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> draw_buttons()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> numberstring[32];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> buttonstring[6];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0; i<a href="CppOperatorDecrement.htm">--</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> NODE) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_inc <a href="CppOperatorEqual.htm">==</a> i)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(nodewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, nodewin[i], blackfontgc, 2, 13, "node", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, nodewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, nodewin[i], fontgc, 2, 13, "node", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> POLY) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_inc <a href="CppOperatorEqual.htm">==</a> i)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(polywin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, polywin[i], blackfontgc, 2, 13, "poly", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, polywin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, polywin[i], fontgc, 2, 13, "poly", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> ELE) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_inc <a href="CppOperatorEqual.htm">==</a> i)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(elewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, elewin[i], blackfontgc, 2, 13, "ele", 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, elewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, elewin[i], fontgc, 2, 13, "ele", 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> EDGE) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_inc <a href="CppOperatorEqual.htm">==</a> i)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(edgewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, edgewin[i], blackfontgc, 2, 13, "edge", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, edgewin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, edgewin[i], fontgc, 2, 13, "edge", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_inc <a href="CppOperatorEqual.htm">==</a> i)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(partwin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, partwin[i], blackfontgc, 2, 13, "part", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, partwin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, partwin[i], fontgc, 2, 13, "part", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> ADJ) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_inc <a href="CppOperatorEqual.htm">==</a> i)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(adjwin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, adjwin[i], blackfontgc, 2, 13, "adj", 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, adjwin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, adjwin[i], fontgc, 2, 13, "adj", 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> VORO) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_inc <a href="CppOperatorEqual.htm">==</a> i)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(voronoiwin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, voronoiwin[i], blackfontgc, 2, 13, "voro", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, voronoiwin[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, voronoiwin[i], fontgc, 2, 13, "voro", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;XClearWindow(display, <a href="CppVersion.htm">version</a>pluswin);<br/>
&nbsp;&nbsp;<a href="CppSprintf.htm">sprintf</a>(numberstring, "%d", loweriteration <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;<a href="CppSprintf.htm">sprintf</a>(buttonstring, "%-4.4s+", numberstring);<br/>
&nbsp;&nbsp;XDrawString(display, <a href="CppVersion.htm">version</a>pluswin, fontgc, 2, 13, buttonstring, 5);<br/>
&nbsp;&nbsp;XClearWindow(display, <a href="CppVersion.htm">version</a>minuswin);<br/>
&nbsp;&nbsp;<a href="CppSprintf.htm">sprintf</a>(numberstring, "%d", loweriteration);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loweriteration <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSprintf.htm">sprintf</a>(buttonstring, "%-4.4s", numberstring);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSprintf.htm">sprintf</a>(buttonstring, "%-4.4s-", numberstring);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;XDrawString(display, <a href="CppVersion.htm">version</a>minuswin, fontgc, 2, 13, buttonstring, 5);<br/>
<br/>
&nbsp;&nbsp;XClearWindow(display, quitwin);<br/>
&nbsp;&nbsp;XDrawString(display, quitwin, fontgc, 2, 13, "Quit", 4);<br/>
&nbsp;&nbsp;XClearWindow(display, leftwin);<br/>
&nbsp;&nbsp;XDrawString(display, leftwin, fontgc, 2, 13, "&lt;", 1);<br/>
&nbsp;&nbsp;XClearWindow(display, rightwin);<br/>
&nbsp;&nbsp;XDrawString(display, rightwin, fontgc, 2, 13, "&gt;", 1);<br/>
&nbsp;&nbsp;XClearWindow(display, upwin);<br/>
&nbsp;&nbsp;XDrawString(display, upwin, fontgc, 2, 13, "^", 1);<br/>
&nbsp;&nbsp;XClearWindow(display, downwin);<br/>
&nbsp;&nbsp;XDrawString(display, downwin, fontgc, 2, 13, "v", 1);<br/>
&nbsp;&nbsp;XClearWindow(display, resetwin);<br/>
&nbsp;&nbsp;XDrawString(display, resetwin, fontgc, 2, 13, "Reset", 6);<br/>
&nbsp;&nbsp;XClearWindow(display, widthpluswin);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line_width &lt; 100) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, widthpluswin, fontgc, 2, 13, "Width+", 6);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, widthpluswin, fontgc, 2, 13, "Width ", 6);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;XClearWindow(display, widthminuswin);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line_width &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, widthminuswin, fontgc, 2, 13, "-", 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;XClearWindow(display, expwin);<br/>
&nbsp;&nbsp;XClearWindow(display, exppluswin);<br/>
&nbsp;&nbsp;XClearWindow(display, expminuswin);<br/>
&nbsp;&nbsp;XClearWindow(display, fillwin);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (current_image <a href="CppOperatorEqual.htm">==</a> PART) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (explode) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(expwin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, expwin, blackfontgc, 2, 13, "Exp", 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, expwin, fontgc, 2, 13, "Exp", 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, exppluswin, fontgc, 2, 13, "+", 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, expminuswin, fontgc, 2, 13, "-", 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (fillelem) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(fillwin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, fillwin, blackfontgc, 2, 13, "Fill", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, fillwin, fontgc, 2, 13, "Fill", 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;XClearWindow(display, pswin);<br/>
&nbsp;&nbsp;XDrawString(display, pswin, fontgc, 2, 13, "PS", 2);<br/>
&nbsp;&nbsp;XClearWindow(display, epswin);<br/>
&nbsp;&nbsp;XDrawString(display, epswin, fontgc, 2, 13, "EPS", 3);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> showme_window(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
{<br/>
&nbsp;&nbsp;XSetWindowAttributes attr;<br/>
&nbsp;&nbsp;XSizeHints hints;<br/>
&nbsp;&nbsp;XGCValues fontvalues, linevalues;<br/>
&nbsp;&nbsp;XColor alloc_color, exact_color;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;display <a href="CppOperatorAssign.htm">=</a> XOpenDisplay((<b><a href="CppChar.htm">char</a></b> *) <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!display) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Cannot open display.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;screen <a href="CppOperatorAssign.htm">=</a> DefaultScreen(display);<br/>
&nbsp;&nbsp;rootwindow <a href="CppOperatorAssign.htm">=</a> DefaultRootWindow(display);<br/>
&nbsp;&nbsp;black <a href="CppOperatorAssign.htm">=</a> BlackPixel(display, screen);<br/>
&nbsp;&nbsp;white <a href="CppOperatorAssign.htm">=</a> WhitePixel(display, screen);<br/>
&nbsp;&nbsp;windowdepth <a href="CppOperatorAssign.htm">=</a> DefaultDepth(display, screen);<br/>
&nbsp;&nbsp;rootmap <a href="CppOperatorAssign.htm">=</a> DefaultColormap(display, screen);<br/>
&nbsp;&nbsp;width <a href="CppOperatorAssign.htm">=</a> STARTWIDTH;<br/>
&nbsp;&nbsp;height <a href="CppOperatorAssign.htm">=</a> STARTHEIGHT;<br/>
&nbsp;&nbsp;attr.background_pixel <a href="CppOperatorAssign.htm">=</a> black;<br/>
&nbsp;&nbsp;attr.border_pixel <a href="CppOperatorAssign.htm">=</a> white;<br/>
&nbsp;&nbsp;attr.backing_store <a href="CppOperatorAssign.htm">=</a> NotUseful;<br/>
&nbsp;&nbsp;attr.event_mask <a href="CppOperatorAssign.htm">=</a> ExposureMask | ButtonReleaseMask | ButtonPressMask |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StructureNotifyMask;<br/>
&nbsp;&nbsp;attr.bit_gravity <a href="CppOperatorAssign.htm">=</a> NorthWestGravity;<br/>
&nbsp;&nbsp;attr.win_gravity <a href="CppOperatorAssign.htm">=</a> NorthWestGravity;<br/>
&nbsp;&nbsp;attr.save_under <a href="CppOperatorAssign.htm">=</a> False;<br/>
&nbsp;&nbsp;mainwindow <a href="CppOperatorAssign.htm">=</a> XCreateWindow(display, rootwindow, 0, 0, width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; height <a href="CppOperatorPlus.htm">+</a> PANELHEIGHT, 3, 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InputOutput, CopyFromParent,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CWBackPixel | CWBorderPixel | C<a href="CppWEvent.htm">WEvent</a>Mask |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CWBitGravity | CWWinGravity | CWBackingStore |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CWSaveUnder, &amp;attr);<br/>
&nbsp;&nbsp;hints.width <a href="CppOperatorAssign.htm">=</a> width;<br/>
&nbsp;&nbsp;hints.height <a href="CppOperatorAssign.htm">=</a> height <a href="CppOperatorPlus.htm">+</a> PANELHEIGHT;<br/>
&nbsp;&nbsp;hints.min_width <a href="CppOperatorAssign.htm">=</a> MINWIDTH;<br/>
&nbsp;&nbsp;hints.min_height <a href="CppOperatorAssign.htm">=</a> MINHEIGHT <a href="CppOperatorPlus.htm">+</a> PANELHEIGHT;<br/>
&nbsp;&nbsp;hints.width_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;hints.height_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;hints.flags <a href="CppOperatorAssign.htm">=</a> PMinSize | PSize | PResizeInc;<br/>
&nbsp;&nbsp;XSetStandardProperties(display, mainwindow, "Show Me", "showme", None,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppArgc.htm">argv</a>, <a href="CppArgc.htm">argc</a>, &amp;hints);<br/>
&nbsp;&nbsp;XChangeProperty(display, mainwindow, XA_WM_CLASS, XA_STRING, 8,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PropModeReplace, "showme\0Archimedes", 18);<br/>
&nbsp;&nbsp;XClearWindow(display, mainwindow);<br/>
&nbsp;&nbsp;XMapWindow(display, mainwindow);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((windowdepth &gt; 1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XAllocNamedColor(display, rootmap, "yellow", &amp;alloc_color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;exact_color)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;color <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;explode <a href="CppOperatorAssign.htm">=</a> bw_ps;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fontvalues.foreground <a href="CppOperatorAssign.htm">=</a> alloc_color.pixel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;linevalues.foreground <a href="CppOperatorAssign.htm">=</a> alloc_color.pixel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;showme_foreground <a href="CppOperatorAssign.htm">=</a> alloc_color.pixel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 64; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (XAllocNamedColor(display, rootmap, colorname[i], &amp;alloc_color,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;rgb[i])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[i] <a href="CppOperatorAssign.htm">=</a> alloc_color.pixel;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[i] <a href="CppOperatorAssign.htm">=</a> white;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rgb[i].red <a href="CppOperatorAssign.htm">=</a> alloc_color.red;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rgb[i].green <a href="CppOperatorAssign.htm">=</a> alloc_color.green;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rgb[i].blue <a href="CppOperatorAssign.htm">=</a> alloc_color.blue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Warning:&nbsp;&nbsp;I could not allocate <a href="CppOperatorModulus.htm">%</a>s.\n", colorname[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;color <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fillelem <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;explode <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fontvalues.foreground <a href="CppOperatorAssign.htm">=</a> white;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;linevalues.foreground <a href="CppOperatorAssign.htm">=</a> white;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;showme_foreground <a href="CppOperatorAssign.htm">=</a> white;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;font <a href="CppOperatorAssign.htm">=</a> XLoadQueryFont(display, "9x15");<br/>
&nbsp;&nbsp;fontvalues.background <a href="CppOperatorAssign.htm">=</a> black;<br/>
&nbsp;&nbsp;fontvalues.font <a href="CppOperatorAssign.htm">=</a> font-&gt;fid;<br/>
&nbsp;&nbsp;fontvalues.fill_style <a href="CppOperatorAssign.htm">=</a> FillSolid;<br/>
&nbsp;&nbsp;fontvalues.line_width <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;fontgc <a href="CppOperatorAssign.htm">=</a> XCreateGC(display, rootwindow, GCForeground | GCBackground |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GCFont | GCLineWidth | GCFillStyle, &amp;fontvalues);<br/>
&nbsp;&nbsp;fontvalues.foreground <a href="CppOperatorAssign.htm">=</a> black;<br/>
&nbsp;&nbsp;blackfontgc <a href="CppOperatorAssign.htm">=</a> XCreateGC(display, rootwindow, GCForeground | GCBackground |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GCFont | GCLineWidth | GCFillStyle, &amp;fontvalues);<br/>
&nbsp;&nbsp;linevalues.background <a href="CppOperatorAssign.htm">=</a> black;<br/>
&nbsp;&nbsp;linevalues.line_width <a href="CppOperatorAssign.htm">=</a> line_width;<br/>
&nbsp;&nbsp;linevalues.cap_style <a href="CppOperatorAssign.htm">=</a> CapRound;<br/>
&nbsp;&nbsp;linevalues.join_style <a href="CppOperatorAssign.htm">=</a> JoinRound;<br/>
&nbsp;&nbsp;linevalues.fill_style <a href="CppOperatorAssign.htm">=</a> FillSolid;<br/>
&nbsp;&nbsp;linegc <a href="CppOperatorAssign.htm">=</a> XCreateGC(display, rootwindow, GCForeground | GCBackground |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GCLineWidth | GCCapStyle | GCJoinStyle | GCFillStyle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;linevalues);<br/>
&nbsp;&nbsp;trianglegc <a href="CppOperatorAssign.htm">=</a> XCreateGC(display, rootwindow, GCForeground | GCBackground |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GCLineWidth | GCCapStyle | GCJoinStyle | GCFillStyle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;linevalues);<br/>
&nbsp;&nbsp;make_buttons(height);<br/>
&nbsp;&nbsp;XFlush(display);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> draw_node(nodes, dim, ptr, xscale, yscale, xoffset, yoffset)<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
REAL *ptr;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> dim;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> nodes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XFill<a href="CppRectangle.htm">Rectangle</a>(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) (ptr[index] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset) <a href="CppOperatorMinus.htm">-</a> (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) (ptr[index <a href="CppOperatorPlus.htm">+</a> 1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset) <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1), line_width, line_width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> dim;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> draw_poly(nodes, dim, edges, holes, nodeptr, edgeptr, holeptr,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xscale, yscale, xoffset, yoffset)<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
<b><a href="CppInt.htm">int</a></b> edges;<br/>
<b><a href="CppInt.htm">int</a></b> holes;<br/>
REAL *nodeptr;<br/>
<b><a href="CppInt.htm">int</a></b> *edgeptr;<br/>
REAL *holeptr;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;REAL *<a href="CppPointer.htm">point</a>1, *<a href="CppPointer.htm">point</a>2;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x1, y1, x2, y2;<br/>
<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> dim;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> nodes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XFill<a href="CppRectangle.htm">Rectangle</a>(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) (nodeptr[index] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset) <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) (nodeptr[index <a href="CppOperatorPlus.htm">+</a> 1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset) <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1), line_width, line_width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> dim;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> edges; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[edgeptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[edgeptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XDrawLine(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> dim;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (color) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XSetForeground(display, linegc, colors[0]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> holes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x1 <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) (holeptr[index] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset) <a href="CppOperatorMinus.htm">-</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y1 <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) (holeptr[index <a href="CppOperatorPlus.htm">+</a> 1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset) <a href="CppOperatorMinus.htm">-</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x2 <a href="CppOperatorAssign.htm">=</a> x1 <a href="CppOperatorPlus.htm">+</a> 6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y2 <a href="CppOperatorAssign.htm">=</a> y1 <a href="CppOperatorPlus.htm">+</a> 6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XDrawLine(display, mainwindow, linegc, x1, y1, x2, y2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XDrawLine(display, mainwindow, linegc, x1, y2, x2, y1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> dim;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;XSetForeground(display, linegc, showme_foreground);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> draw_ele(inc, elems, corners, ptr, partition, shift,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
<b><a href="CppInt.htm">int</a></b> elems;<br/>
<b><a href="CppInt.htm">int</a></b> corners;<br/>
<b><a href="CppInt.htm">int</a></b> *ptr;<br/>
<b><a href="CppInt.htm">int</a></b> *partition;<br/>
REAL *shift;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;REAL shiftx, shifty;<br/>
&nbsp;&nbsp;REAL *prev<a href="CppPointer.htm">point</a>, *now<a href="CppPointer.htm">point</a>;<br/>
&nbsp;&nbsp;X<a href="CppPoint.htm">Point</a> *vertices;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (color <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fillelem <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertices <a href="CppOperatorAssign.htm">=</a> (X<a href="CppPoint.htm">Point</a> *) malloc(3 * <b><a href="CppSizeof.htm">sizeof</a></b>(X<a href="CppPoint.htm">Point</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertices <a href="CppOperatorEqual.htm">==</a> (X<a href="CppPoint.htm">Point</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> elems; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> explode) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiftx <a href="CppOperatorAssign.htm">=</a> shift[partition[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shifty <a href="CppOperatorAssign.htm">=</a> shift[(partition[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (color <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (fillelem) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XSetForeground(display, trianglegc, colors[partition[i] &amp; 63]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XSetForeground(display, linegc, colors[partition[i] &amp; 63]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (color <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fillelem <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> explode) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;now<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[inc][ptr[index <a href="CppOperatorPlus.htm">+</a> j] * node_dim[inc]];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices[j].x <a href="CppOperatorAssign.htm">=</a> (now<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorPlus.htm">+</a> shiftx) * xscale <a href="CppOperatorPlus.htm">+</a> xoffset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices[j].y <a href="CppOperatorAssign.htm">=</a> (now<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorPlus.htm">+</a> shifty) * yscale <a href="CppOperatorPlus.htm">+</a> yoffset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;now<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[inc][ptr[index <a href="CppOperatorPlus.htm">+</a> j] * node_dim[inc]];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices[j].x <a href="CppOperatorAssign.htm">=</a> now<a href="CppPointer.htm">point</a>[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices[j].y <a href="CppOperatorAssign.htm">=</a> now<a href="CppPointer.htm">point</a>[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XFillPolygon(display, mainwindow, trianglegc, vertices, 3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Convex, CoordModeOrigin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;prev<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[inc][ptr[index <a href="CppOperatorPlus.htm">+</a> 2] * node_dim[inc]];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> explode) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;now<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[inc][ptr[index<a href="CppOperatorIncrement.htm">++</a>] * node_dim[inc]];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawLine(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((prev<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorPlus.htm">+</a> shiftx) * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((prev<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorPlus.htm">+</a> shifty) * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((now<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorPlus.htm">+</a> shiftx) * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((now<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorPlus.htm">+</a> shifty) * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> now<a href="CppPointer.htm">point</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;now<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[inc][ptr[index<a href="CppOperatorIncrement.htm">++</a>] * node_dim[inc]];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawLine(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (prev<a href="CppPointer.htm">point</a>[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (prev<a href="CppPointer.htm">point</a>[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (now<a href="CppPointer.htm">point</a>[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (now<a href="CppPointer.htm">point</a>[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> now<a href="CppPointer.htm">point</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (color <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fillelem <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;free(vertices);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;XSetForeground(display, linegc, showme_foreground);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> draw_edge(nodes, dim, edges, nodeptr, edgeptr, normptr,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xscale, yscale, xoffset, yoffset)<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
<b><a href="CppInt.htm">int</a></b> edges;<br/>
REAL *nodeptr;<br/>
<b><a href="CppInt.htm">int</a></b> *edgeptr;<br/>
REAL *normptr;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;REAL *<a href="CppPointer.htm">point</a>1, *<a href="CppPointer.htm">point</a>2;<br/>
&nbsp;&nbsp;REAL normx, normy;<br/>
&nbsp;&nbsp;REAL normmult, normmultx, normmulty;<br/>
&nbsp;&nbsp;REAL windowxmin, windowymin, windowxmax, windowymax;<br/>
<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> edges; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[edgeptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgeptr[index] <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normx <a href="CppOperatorAssign.htm">=</a> normptr[index <a href="CppOperatorMinus.htm">-</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normy <a href="CppOperatorAssign.htm">=</a> normptr[index<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmultx <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (normx &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windowxmax <a href="CppOperatorAssign.htm">=</a> (width <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorMinus.htm">-</a> xoffset) <a href="CppOperatorDivide.htm">/</a> xscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmultx <a href="CppOperatorAssign.htm">=</a> (windowxmax <a href="CppOperatorMinus.htm">-</a> <a href="CppPointer.htm">point</a>1[0]) <a href="CppOperatorDivide.htm">/</a> normx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (normx &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windowxmin <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>xoffset <a href="CppOperatorDivide.htm">/</a> xscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmultx <a href="CppOperatorAssign.htm">=</a> (windowxmin <a href="CppOperatorMinus.htm">-</a> <a href="CppPointer.htm">point</a>1[0]) <a href="CppOperatorDivide.htm">/</a> normx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmulty <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (normy &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windowymax <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>yoffset <a href="CppOperatorDivide.htm">/</a> yscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmulty <a href="CppOperatorAssign.htm">=</a> (windowymax <a href="CppOperatorMinus.htm">-</a> <a href="CppPointer.htm">point</a>1[1]) <a href="CppOperatorDivide.htm">/</a> normy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (normy &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windowymin <a href="CppOperatorAssign.htm">=</a> (height <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorMinus.htm">-</a> yoffset) <a href="CppOperatorDivide.htm">/</a> yscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmulty <a href="CppOperatorAssign.htm">=</a> (windowymin <a href="CppOperatorMinus.htm">-</a> <a href="CppPointer.htm">point</a>1[1]) <a href="CppOperatorDivide.htm">/</a> normy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (normmultx <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmult <a href="CppOperatorAssign.htm">=</a> normmulty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (normmulty <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmult <a href="CppOperatorAssign.htm">=</a> normmultx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (normmultx &lt; normmulty) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmult <a href="CppOperatorAssign.htm">=</a> normmultx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmult <a href="CppOperatorAssign.htm">=</a> normmulty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (normmult &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawLine(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((<a href="CppPointer.htm">point</a>1[0] <a href="CppOperatorPlus.htm">+</a> normmult * normx) * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((<a href="CppPointer.htm">point</a>1[1] <a href="CppOperatorPlus.htm">+</a> normmult * normy) * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[edgeptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawLine(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> draw_adj(dim, subdomains, ptr, center, xscale, yscale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xoffset, yoffset)<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
<b><a href="CppInt.htm">int</a></b> subdomains;<br/>
<b><a href="CppInt.htm">int</a></b> *ptr;<br/>
REAL *center;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;REAL *<a href="CppPointer.htm">point</a>1, *<a href="CppPointer.htm">point</a>2;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; subdomains; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorPlus.htm">+</a> 1; j &lt; subdomains; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ptr[i * subdomains <a href="CppOperatorPlus.htm">+</a> j]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> &amp;center[i * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> &amp;center[j * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawLine(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; subdomains; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> &amp;center[i * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (color) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XSetForeground(display, linegc, colors[i &amp; 63]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XFillArc(display, mainwindow, linegc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset) <a href="CppOperatorMinus.htm">-</a> 5 <a href="CppOperatorMinus.htm">-</a> (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset) <a href="CppOperatorMinus.htm">-</a> 5 <a href="CppOperatorMinus.htm">-</a> (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; line_width <a href="CppOperatorPlus.htm">+</a> 10, line_width <a href="CppOperatorPlus.htm">+</a> 10, 0, 23040);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;XSetForeground(display, linegc, showme_foreground);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> draw(inc, image, xmin, ymin, xmax, ymax)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
<b><a href="CppInt.htm">int</a></b> image;<br/>
REAL xmin;<br/>
REAL ymin;<br/>
REAL xmax;<br/>
REAL ymax;<br/>
{<br/>
&nbsp;&nbsp;draw_buttons();<br/>
&nbsp;&nbsp;XClearWindow(display, mainwindow);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (image <a href="CppOperatorEqual.htm">==</a> NOTHING) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!loaded[inc][image]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> explode) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xmin <a href="CppOperatorPlusAssign.htm">+=</a> (xmin <a href="CppOperatorMinus.htm">-</a> partcenter[inc][subdomains[inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1]) * explosion;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xmax <a href="CppOperatorPlusAssign.htm">+=</a> (xmax <a href="CppOperatorMinus.htm">-</a> partcenter[inc][subdomains[inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1]) * explosion;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ymin <a href="CppOperatorPlusAssign.htm">+=</a> (ymin <a href="CppOperatorMinus.htm">-</a> partcenter[inc][(subdomains[inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1]) * explosion;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ymax <a href="CppOperatorPlusAssign.htm">+=</a> (ymax <a href="CppOperatorMinus.htm">-</a> partcenter[inc][(subdomains[inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1]) * explosion;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;xscale <a href="CppOperatorAssign.htm">=</a> (REAL) (width <a href="CppOperatorMinus.htm">-</a> line_width <a href="CppOperatorMinus.htm">-</a> 4) <a href="CppOperatorDivide.htm">/</a> (xmax <a href="CppOperatorMinus.htm">-</a> xmin);<br/>
&nbsp;&nbsp;yscale <a href="CppOperatorAssign.htm">=</a> (REAL) (height <a href="CppOperatorMinus.htm">-</a> line_width <a href="CppOperatorMinus.htm">-</a> 4) <a href="CppOperatorDivide.htm">/</a> (ymax <a href="CppOperatorMinus.htm">-</a> ymin);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (xscale &gt; yscale) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xscale <a href="CppOperatorAssign.htm">=</a> yscale;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yscale <a href="CppOperatorAssign.htm">=</a> xscale;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;xoffset <a href="CppOperatorAssign.htm">=</a> 0.5 * ((REAL) width <a href="CppOperatorMinus.htm">-</a> xscale * (xmax <a href="CppOperatorMinus.htm">-</a> xmin)) <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale * xmin;<br/>
&nbsp;&nbsp;yoffset <a href="CppOperatorAssign.htm">=</a> (REAL) height <a href="CppOperatorMinus.htm">-</a> 0.5 * ((REAL) height <a href="CppOperatorMinus.htm">-</a> yscale * (ymax <a href="CppOperatorMinus.htm">-</a> ymin)) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yscale * ymin;<br/>
&nbsp;&nbsp;yscale <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a> yscale;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(image) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> NODE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_node(nodes[inc], node_dim[inc], nodeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> POLY:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (polynodes[inc] &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_poly(polynodes[inc], poly_dim[inc], polyedges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polyholes[inc], polynodeptr[inc], polyedgeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polyholeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_poly(nodes[inc], node_dim[inc], polyedges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polyholes[inc], nodeptr[inc], polyedgeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polyholeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ELE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_ele(inc, elems[inc], ele_corners[inc], eleptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>, (REAL *) <a href="CppNULL.htm">NULL</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> EDGE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_edge(nodes[inc], node_dim[inc], edges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeptr[inc], edgeptr[inc], normptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> PART:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_ele(inc, elems[inc], ele_corners[inc], eleptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partpart[inc], partshift[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ADJ:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_adj(node_dim[inc], adjsubdomains[inc], adjptr[inc], partcenter[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VORO:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loaded[inc][NODE]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_node(nodes[inc], node_dim[inc], nodeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_edge(vnodes[inc], vnode_dim[inc], vedges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vnodeptr[inc], vedgeptr[inc], vnormptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> addps(instring, outstring, eps)<br/>
<b><a href="CppChar.htm">char</a></b> *instring;<br/>
<b><a href="CppChar.htm">char</a></b> *outstring;<br/>
<b><a href="CppInt.htm">int</a></b> eps;<br/>
{<br/>
&nbsp;&nbsp;strcpy(outstring, instring);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (eps) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(outstring, ".eps");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(outstring, ".ps");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> print_head(fname, file, llcornerx, llcornery, eps)<br/>
<b><a href="CppChar.htm">char</a></b> *fname;<br/>
<a href="CppCfile.htm">FILE</a> **file;<br/>
<b><a href="CppInt.htm">int</a></b> llcornerx;<br/>
<b><a href="CppInt.htm">int</a></b> llcornery;<br/>
<b><a href="CppInt.htm">int</a></b> eps;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s\n", fname);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*file <a href="CppOperatorAssign.htm">=</a> fopen(fname, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*file <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Could not open <a href="CppOperatorModulus.htm">%</a>s\n", fname);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (eps) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(*file, "%%!PS-Adobe-2.0 EPSF-2.0\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(*file, "%%!PS-Adobe-2.0\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fprintf(*file, "%%%%BoundingBox: <a href="CppOperatorModulus.htm">%</a>d <a href="CppOperatorModulus.htm">%</a>d <a href="CppOperatorModulus.htm">%</a>d <a href="CppOperatorModulus.htm">%</a>d\n", llcornerx, llcornery,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;612 <a href="CppOperatorMinus.htm">-</a> llcornerx, 792 <a href="CppOperatorMinus.htm">-</a> llcornery);<br/>
&nbsp;&nbsp;fprintf(*file, "%%%%Creator: Show Me\n");<br/>
&nbsp;&nbsp;fprintf(*file, "%%%%EndComments\n\n");<br/>
&nbsp;&nbsp;fprintf(*file, "/m {moveto} bind def\n");<br/>
&nbsp;&nbsp;fprintf(*file, "/l {lineto} bind def\n");<br/>
&nbsp;&nbsp;fprintf(*file, "/s {setrgbcolor} bind def\n");<br/>
&nbsp;&nbsp;fprintf(*file, "/g {gsave fill grestore} bind def\n");<br/>
&nbsp;&nbsp;fprintf(*file, "/k {stroke} bind def\n\n");<br/>
&nbsp;&nbsp;fprintf(*file, "1 setlinecap\n");<br/>
&nbsp;&nbsp;fprintf(*file, "1 setlinejoin\n");<br/>
&nbsp;&nbsp;fprintf(*file, "%d setlinewidth\n", line_width);<br/>
&nbsp;&nbsp;fprintf(*file, "%d <a href="CppOperatorModulus.htm">%</a>d m\n", llcornerx, llcornery);<br/>
&nbsp;&nbsp;fprintf(*file, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", 612 <a href="CppOperatorMinus.htm">-</a> llcornerx, llcornery);<br/>
&nbsp;&nbsp;fprintf(*file, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", 612 <a href="CppOperatorMinus.htm">-</a> llcornerx, 792 <a href="CppOperatorMinus.htm">-</a> llcornery);<br/>
&nbsp;&nbsp;fprintf(*file, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", llcornerx, 792 <a href="CppOperatorMinus.htm">-</a> llcornery);<br/>
&nbsp;&nbsp;fprintf(*file, "closepath\nclip\nnewpath\n");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> print_node(nodefile, nodes, dim, ptr, xscale, yscale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xoffset, yoffset)<br/>
<a href="CppCfile.htm">FILE</a> *nodefile;<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
REAL *ptr;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> dim;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> nodes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(nodefile, "%d <a href="CppOperatorModulus.htm">%</a>d <a href="CppOperatorModulus.htm">%</a>d 0 360 arc\nfill\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (ptr[index] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (ptr[index <a href="CppOperatorPlus.htm">+</a> 1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> dim;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> print_poly(polyfile, nodes, dim, edges, holes, nodeptr, edgeptr, holeptr,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset)<br/>
<a href="CppCfile.htm">FILE</a> *polyfile;<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
<b><a href="CppInt.htm">int</a></b> edges;<br/>
<b><a href="CppInt.htm">int</a></b> holes;<br/>
REAL *nodeptr;<br/>
<b><a href="CppInt.htm">int</a></b> *edgeptr;<br/>
REAL *holeptr;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;REAL *<a href="CppPointer.htm">point</a>1, *<a href="CppPointer.htm">point</a>2;<br/>
<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> dim;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> nodes; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(polyfile, "%d <a href="CppOperatorModulus.htm">%</a>d <a href="CppOperatorModulus.htm">%</a>d 0 360 arc\nfill\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (nodeptr[index] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (nodeptr[index <a href="CppOperatorPlus.htm">+</a> 1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorPlusAssign.htm">+=</a> dim;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> edges; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[edgeptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[edgeptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(polyfile, "%d <a href="CppOperatorModulus.htm">%</a>d m\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(polyfile, "%d <a href="CppOperatorModulus.htm">%</a>d l\nk\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> print_ele(elefile, nodes, dim, elems, corners, nodeptr, eleptr,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partition, shift,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xscale, yscale, xoffset, yoffset, llcornerx, llcornery)<br/>
<a href="CppCfile.htm">FILE</a> *elefile;<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
<b><a href="CppInt.htm">int</a></b> elems;<br/>
<b><a href="CppInt.htm">int</a></b> corners;<br/>
REAL *nodeptr;<br/>
<b><a href="CppInt.htm">int</a></b> *eleptr;<br/>
<b><a href="CppInt.htm">int</a></b> *partition;<br/>
REAL *shift;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
<b><a href="CppInt.htm">int</a></b> llcornerx;<br/>
<b><a href="CppInt.htm">int</a></b> llcornery;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index, colorindex;<br/>
&nbsp;&nbsp;REAL shiftx, shifty;<br/>
&nbsp;&nbsp;REAL *now<a href="CppPointer.htm">point</a>;<br/>
<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !bw_ps) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "0 0 0 s\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%d <a href="CppOperatorModulus.htm">%</a>d m\n", llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", 612 <a href="CppOperatorMinus.htm">-</a> llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", 612 <a href="CppOperatorMinus.htm">-</a> llcornerx, 792 <a href="CppOperatorMinus.htm">-</a> llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", llcornerx, 792 <a href="CppOperatorMinus.htm">-</a> llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "fill\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> elems; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !bw_ps) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colorindex <a href="CppOperatorAssign.htm">=</a> partition[i] &amp; 63;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%6.3f <a href="CppOperatorModulus.htm">%</a>6.3f <a href="CppOperatorModulus.htm">%</a>6.3f s\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(REAL) rgb[colorindex].red <a href="CppOperatorDivide.htm">/</a> 65535.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(REAL) rgb[colorindex].green <a href="CppOperatorDivide.htm">/</a> 65535.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(REAL) rgb[colorindex].blue <a href="CppOperatorDivide.htm">/</a> 65535.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;now<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[eleptr[index <a href="CppOperatorPlus.htm">+</a> 2] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (explode <a href="CppOperatorLogicalOr.htm">||</a> bw_ps)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiftx <a href="CppOperatorAssign.htm">=</a> shift[partition[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shifty <a href="CppOperatorAssign.htm">=</a> shift[(partition[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%d <a href="CppOperatorModulus.htm">%</a>d m\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((now<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorPlus.htm">+</a> shiftx) * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((now<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorPlus.htm">+</a> shifty) * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;now<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[eleptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%d <a href="CppOperatorModulus.htm">%</a>d l\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((now<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorPlus.htm">+</a> shiftx) * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((now<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorPlus.htm">+</a> shifty) * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%d <a href="CppOperatorModulus.htm">%</a>d m\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (now<a href="CppPointer.htm">point</a>[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (now<a href="CppPointer.htm">point</a>[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;now<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[eleptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "%d <a href="CppOperatorModulus.htm">%</a>d l\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (now<a href="CppPointer.htm">point</a>[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (now<a href="CppPointer.htm">point</a>[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (fillelem <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (partition <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !bw_ps) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "g\n1 1 0 s\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(elefile, "k\n");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> print_edge(edgefile, nodes, dim, edges, nodeptr, edgeptr, normptr,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xscale, yscale, xoffset, yoffset, llcornerx, llcornery)<br/>
<a href="CppCfile.htm">FILE</a> *edgefile;<br/>
<b><a href="CppInt.htm">int</a></b> nodes;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
<b><a href="CppInt.htm">int</a></b> edges;<br/>
REAL *nodeptr;<br/>
<b><a href="CppInt.htm">int</a></b> *edgeptr;<br/>
REAL *normptr;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
<b><a href="CppInt.htm">int</a></b> llcornerx;<br/>
<b><a href="CppInt.htm">int</a></b> llcornery;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;REAL *<a href="CppPointer.htm">point</a>1, *<a href="CppPointer.htm">point</a>2;<br/>
&nbsp;&nbsp;REAL normx, normy;<br/>
&nbsp;&nbsp;REAL normmult, normmultx, normmulty;<br/>
&nbsp;&nbsp;REAL windowxmin, windowymin, windowxmax, windowymax;<br/>
<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorLessEqual.htm">&lt;=</a> edges; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[edgeptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgeptr[index] <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normx <a href="CppOperatorAssign.htm">=</a> normptr[index <a href="CppOperatorMinus.htm">-</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normy <a href="CppOperatorAssign.htm">=</a> normptr[index<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmultx <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (normx &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windowxmax <a href="CppOperatorAssign.htm">=</a> ((REAL) (612 <a href="CppOperatorMinus.htm">-</a> llcornerx) <a href="CppOperatorMinus.htm">-</a> xoffset) <a href="CppOperatorDivide.htm">/</a> xscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmultx <a href="CppOperatorAssign.htm">=</a> (windowxmax <a href="CppOperatorMinus.htm">-</a> <a href="CppPointer.htm">point</a>1[0]) <a href="CppOperatorDivide.htm">/</a> normx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (normx &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windowxmin <a href="CppOperatorAssign.htm">=</a> ((REAL) llcornerx <a href="CppOperatorMinus.htm">-</a> xoffset) <a href="CppOperatorDivide.htm">/</a> xscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmultx <a href="CppOperatorAssign.htm">=</a> (windowxmin <a href="CppOperatorMinus.htm">-</a> <a href="CppPointer.htm">point</a>1[0]) <a href="CppOperatorDivide.htm">/</a> normx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmulty <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (normy &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windowymax <a href="CppOperatorAssign.htm">=</a> ((REAL) (792 <a href="CppOperatorMinus.htm">-</a> llcornery) <a href="CppOperatorMinus.htm">-</a> yoffset) <a href="CppOperatorDivide.htm">/</a> yscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmulty <a href="CppOperatorAssign.htm">=</a> (windowymax <a href="CppOperatorMinus.htm">-</a> <a href="CppPointer.htm">point</a>1[1]) <a href="CppOperatorDivide.htm">/</a> normy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (normy &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;windowymin <a href="CppOperatorAssign.htm">=</a> ((REAL) llcornery <a href="CppOperatorMinus.htm">-</a> yoffset) <a href="CppOperatorDivide.htm">/</a> yscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmulty <a href="CppOperatorAssign.htm">=</a> (windowymin <a href="CppOperatorMinus.htm">-</a> <a href="CppPointer.htm">point</a>1[1]) <a href="CppOperatorDivide.htm">/</a> normy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (normmultx <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmult <a href="CppOperatorAssign.htm">=</a> normmulty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (normmulty <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmult <a href="CppOperatorAssign.htm">=</a> normmultx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (normmultx &lt; normmulty) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmult <a href="CppOperatorAssign.htm">=</a> normmultx;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normmult <a href="CppOperatorAssign.htm">=</a> normmulty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (normmult &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(edgefile, "%d <a href="CppOperatorModulus.htm">%</a>d m\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(edgefile, "%d <a href="CppOperatorModulus.htm">%</a>d l\nk\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((<a href="CppPointer.htm">point</a>1[0] <a href="CppOperatorPlus.htm">+</a> normmult * normx) * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) ((<a href="CppPointer.htm">point</a>1[1] <a href="CppOperatorPlus.htm">+</a> normmult * normy) * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> &amp;nodeptr[edgeptr[index<a href="CppOperatorIncrement.htm">++</a>] * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(edgefile, "%d <a href="CppOperatorModulus.htm">%</a>d m\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(edgefile, "%d <a href="CppOperatorModulus.htm">%</a>d l\nk\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> print_adj(adjfile, dim, subdomains, ptr, center, xscale, yscale,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xoffset, yoffset, llcornerx, llcornery)<br/>
<a href="CppCfile.htm">FILE</a> *adjfile;<br/>
<b><a href="CppInt.htm">int</a></b> dim;<br/>
<b><a href="CppInt.htm">int</a></b> subdomains;<br/>
<b><a href="CppInt.htm">int</a></b> *ptr;<br/>
REAL *center;<br/>
REAL xscale;<br/>
REAL yscale;<br/>
REAL xoffset;<br/>
REAL yoffset;<br/>
<b><a href="CppInt.htm">int</a></b> llcornerx;<br/>
<b><a href="CppInt.htm">int</a></b> llcornery;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;REAL *<a href="CppPointer.htm">point</a>1, *<a href="CppPointer.htm">point</a>2;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> colorindex;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!bw_ps) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "0 0 0 s\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%d <a href="CppOperatorModulus.htm">%</a>d m\n", llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", 612 <a href="CppOperatorMinus.htm">-</a> llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", 612 <a href="CppOperatorMinus.htm">-</a> llcornerx, 792 <a href="CppOperatorMinus.htm">-</a> llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%d <a href="CppOperatorModulus.htm">%</a>d l\n", llcornerx, 792 <a href="CppOperatorMinus.htm">-</a> llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "fill\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "1 1 0 s\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; subdomains; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorPlus.htm">+</a> 1; j &lt; subdomains; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ptr[i * subdomains <a href="CppOperatorPlus.htm">+</a> j]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> &amp;center[i * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>2 <a href="CppOperatorAssign.htm">=</a> &amp;center[j * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%d <a href="CppOperatorModulus.htm">%</a>d m\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%d <a href="CppOperatorModulus.htm">%</a>d l\nk\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>2[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; subdomains; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>1 <a href="CppOperatorAssign.htm">=</a> &amp;center[i * dim];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!bw_ps) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colorindex <a href="CppOperatorAssign.htm">=</a> i &amp; 63;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%6.3f <a href="CppOperatorModulus.htm">%</a>6.3f <a href="CppOperatorModulus.htm">%</a>6.3f s\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(REAL) rgb[colorindex].red <a href="CppOperatorDivide.htm">/</a> 65535.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(REAL) rgb[colorindex].green <a href="CppOperatorDivide.htm">/</a> 65535.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(REAL) rgb[colorindex].blue <a href="CppOperatorDivide.htm">/</a> 65535.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%d <a href="CppOperatorModulus.htm">%</a>d <a href="CppOperatorModulus.htm">%</a>d 0 360 arc\nfill\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5 <a href="CppOperatorPlus.htm">+</a> (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(adjfile, "%d <a href="CppOperatorModulus.htm">%</a>d <a href="CppOperatorModulus.htm">%</a>d 0 360 arc\nfill\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[0] * xscale <a href="CppOperatorPlus.htm">+</a> xoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b>) (<a href="CppPointer.htm">point</a>1[1] * yscale <a href="CppOperatorPlus.htm">+</a> yoffset),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 <a href="CppOperatorPlus.htm">+</a> (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> print(inc, image, xmin, ymin, xmax, ymax, eps)<br/>
<b><a href="CppInt.htm">int</a></b> inc;<br/>
<b><a href="CppInt.htm">int</a></b> image;<br/>
REAL xmin;<br/>
REAL ymin;<br/>
REAL xmax;<br/>
REAL ymax;<br/>
<b><a href="CppInt.htm">int</a></b> eps;<br/>
{<br/>
&nbsp;&nbsp;REAL xxscale, yyscale, xxoffset, yyoffset;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> psfilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> llcornerx, llcornery;<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *psfile;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (image <a href="CppOperatorEqual.htm">==</a> NOTHING) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!loaded[inc][image]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (explode <a href="CppOperatorLogicalOr.htm">||</a> bw_ps)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xmin <a href="CppOperatorPlusAssign.htm">+=</a> (xmin <a href="CppOperatorMinus.htm">-</a> partcenter[inc][subdomains[inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1]) * explosion;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xmax <a href="CppOperatorPlusAssign.htm">+=</a> (xmax <a href="CppOperatorMinus.htm">-</a> partcenter[inc][subdomains[inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1]) * explosion;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ymin <a href="CppOperatorPlusAssign.htm">+=</a> (ymin <a href="CppOperatorMinus.htm">-</a> partcenter[inc][(subdomains[inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1]) * explosion;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ymax <a href="CppOperatorPlusAssign.htm">+=</a> (ymax <a href="CppOperatorMinus.htm">-</a> partcenter[inc][(subdomains[inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1]) * explosion;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;xxscale <a href="CppOperatorAssign.htm">=</a> (460.0 <a href="CppOperatorMinus.htm">-</a> (REAL) line_width) <a href="CppOperatorDivide.htm">/</a> (xmax <a href="CppOperatorMinus.htm">-</a> xmin);<br/>
&nbsp;&nbsp;yyscale <a href="CppOperatorAssign.htm">=</a> (640.0 <a href="CppOperatorMinus.htm">-</a> (REAL) line_width) <a href="CppOperatorDivide.htm">/</a> (ymax <a href="CppOperatorMinus.htm">-</a> ymin);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (xxscale &gt; yyscale) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xxscale <a href="CppOperatorAssign.htm">=</a> yyscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;llcornerx <a href="CppOperatorAssign.htm">=</a> (604 <a href="CppOperatorMinus.htm">-</a> (<b><a href="CppInt.htm">int</a></b>) (yyscale * (xmax <a href="CppOperatorMinus.htm">-</a> xmin)) <a href="CppOperatorMinus.htm">-</a> line_width) <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;llcornery <a href="CppOperatorAssign.htm">=</a> 72;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yyscale <a href="CppOperatorAssign.htm">=</a> xxscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;llcornerx <a href="CppOperatorAssign.htm">=</a> 72;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;llcornery <a href="CppOperatorAssign.htm">=</a> (784 <a href="CppOperatorMinus.htm">-</a> (<b><a href="CppInt.htm">int</a></b>) (xxscale * (ymax <a href="CppOperatorMinus.htm">-</a> ymin)) <a href="CppOperatorMinus.htm">-</a> line_width) <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;xxoffset <a href="CppOperatorAssign.htm">=</a> 0.5 * (612.0 <a href="CppOperatorMinus.htm">-</a> xxscale * (xmax <a href="CppOperatorMinus.htm">-</a> xmin)) <a href="CppOperatorMinus.htm">-</a> xxscale * xmin <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1);<br/>
&nbsp;&nbsp;yyoffset <a href="CppOperatorAssign.htm">=</a> 0.5 * (792.0 <a href="CppOperatorMinus.htm">-</a> yyscale * (ymax <a href="CppOperatorMinus.htm">-</a> ymin)) <a href="CppOperatorMinus.htm">-</a> yyscale * ymin <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (line_width <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(image) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> NODE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addps(nodefilename[inc], psfilename, eps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> POLY:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addps(polyfilename[inc], psfilename, eps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ELE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addps(elefilename[inc], psfilename, eps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> EDGE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addps(edgefilename[inc], psfilename, eps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> PART:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addps(partfilename[inc], psfilename, eps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ADJ:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addps(adjfilename[inc], psfilename, eps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VORO:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addps(vedgefilename[inc], psfilename, eps);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (print_head(psfilename, &amp;psfile, llcornerx, llcornery, eps)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(image) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> NODE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_node(psfile, nodes[inc], node_dim[inc], nodeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xxscale, yyscale, xxoffset, yyoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> POLY:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (polynodes[inc] &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_poly(psfile, polynodes[inc], poly_dim[inc], polyedges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polyholes[inc], polynodeptr[inc], polyedgeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polyholeptr[inc], xxscale, yyscale, xxoffset, yyoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_poly(psfile, nodes[inc], node_dim[inc], polyedges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polyholes[inc], nodeptr[inc], polyedgeptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polyholeptr[inc], xxscale, yyscale, xxoffset, yyoffset);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ELE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_ele(psfile, nodes[inc], node_dim[inc], elems[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ele_corners[inc], nodeptr[inc], eleptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>, (REAL *) <a href="CppNULL.htm">NULL</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xxscale, yyscale, xxoffset, yyoffset, llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> EDGE:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_edge(psfile, nodes[inc], node_dim[inc], edges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nodeptr[inc], edgeptr[inc], normptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xxscale, yyscale, xxoffset, yyoffset, llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> PART:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_ele(psfile, nodes[inc], node_dim[inc], elems[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ele_corners[inc], nodeptr[inc], eleptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partpart[inc], partshift[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xxscale, yyscale, xxoffset, yyoffset, llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ADJ:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_adj(psfile, node_dim[inc], adjsubdomains[inc], adjptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partcenter[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xxscale, yyscale, xxoffset, yyoffset, llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VORO:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_edge(psfile, vnodes[inc], vnode_dim[inc], vedges[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vnodeptr[inc], vedgeptr[inc], vnormptr[inc],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xxscale, yyscale, xxoffset, yyoffset, llcornerx, llcornery);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!eps) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(psfile, "showpage\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fclose(psfile);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
{<br/>
&nbsp;&nbsp;REAL xmin, ymin, xmax, ymax;<br/>
&nbsp;&nbsp;REAL xptr, yptr, xspan, yspan;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> past_image;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> new_image;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> new_inc;<br/>
<br/>
&nbsp;&nbsp;parsecommandline(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;showme_init();<br/>
&nbsp;&nbsp;choose_image(start_inc, start_image);<br/>
&nbsp;&nbsp;showme_window(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (current_image <a href="CppOperatorNotEqual.htm">!=</a> NOTHING) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xmin <a href="CppOperatorAssign.htm">=</a> xlo[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ymin <a href="CppOperatorAssign.htm">=</a> ylo[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xmax <a href="CppOperatorAssign.htm">=</a> xhi[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ymax <a href="CppOperatorAssign.htm">=</a> yhi[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;zoom <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;XMaskEvent(display, ExposureMask, &amp;event);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event.type) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ButtonRelease:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> quitwin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDestroyWindow(display, mainwindow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XCloseDisplay(display);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> leftwin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xspan <a href="CppOperatorAssign.htm">=</a> 0.25 * (xmax <a href="CppOperatorMinus.htm">-</a> xmin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmin <a href="CppOperatorPlusAssign.htm">+=</a> xspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmax <a href="CppOperatorPlusAssign.htm">+=</a> xspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> rightwin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xspan <a href="CppOperatorAssign.htm">=</a> 0.25 * (xmax <a href="CppOperatorMinus.htm">-</a> xmin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmin <a href="CppOperatorMinusAssign.htm">-=</a> xspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmax <a href="CppOperatorMinusAssign.htm">-=</a> xspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> upwin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yspan <a href="CppOperatorAssign.htm">=</a> 0.25 * (ymax <a href="CppOperatorMinus.htm">-</a> ymin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymin <a href="CppOperatorMinusAssign.htm">-=</a> yspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymax <a href="CppOperatorMinusAssign.htm">-=</a> yspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> downwin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yspan <a href="CppOperatorAssign.htm">=</a> 0.25 * (ymax <a href="CppOperatorMinus.htm">-</a> ymin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymin <a href="CppOperatorPlusAssign.htm">+=</a> yspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymax <a href="CppOperatorPlusAssign.htm">+=</a> yspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> resetwin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmin <a href="CppOperatorAssign.htm">=</a> xlo[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymin <a href="CppOperatorAssign.htm">=</a> ylo[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmax <a href="CppOperatorAssign.htm">=</a> xhi[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymax <a href="CppOperatorAssign.htm">=</a> yhi[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zoom <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> widthpluswin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line_width &lt; 100) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_width<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XSetLineAttributes(display, linegc, line_width, LineSolid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CapRound, JoinRound);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XSetLineAttributes(display, trianglegc, line_width, LineSolid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CapRound, JoinRound);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> widthminuswin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line_width &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_width<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XSetLineAttributes(display, linegc, line_width, LineSolid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CapRound, JoinRound);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XSetLineAttributes(display, trianglegc, line_width, LineSolid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CapRound, JoinRound);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> expwin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> loaded[current_inc][PART]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;explode <a href="CppOperatorAssign.htm">=</a> !explode;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> exppluswin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> loaded[PART] <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> explode) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;explosion <a href="CppOperatorPlusAssign.htm">+=</a> 0.125;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;findpartshift(subdomains[current_inc], explosion,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partcenter[current_inc], partshift[current_inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> expminuswin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> loaded[PART] <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> explode <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(explosion <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.125)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;explosion <a href="CppOperatorMinusAssign.htm">-=</a> 0.125;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;findpartshift(subdomains[current_inc], explosion,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partcenter[current_inc], partshift[current_inc]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> fillwin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> loaded[PART]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fillelem <a href="CppOperatorAssign.htm">=</a> !fillelem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> pswin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(pswin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XFlush(display);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(current_inc, current_image, xmin, ymin, xmax, ymax, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, pswin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, pswin, fontgc, 2, 13, "PS", 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> epswin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill_button(epswin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XFlush(display);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(current_inc, current_image, xmin, ymin, xmax, ymax, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, epswin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDrawString(display, epswin, fontgc, 2, 13, "EPS", 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> <a href="CppVersion.htm">version</a>pluswin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move_inc(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loweriteration<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_filenames(filename, loweriteration);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (current_inc <a href="CppOperatorEqual.htm">==</a> 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_image <a href="CppOperatorAssign.htm">=</a> NOTHING;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, mainwindow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_buttons();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> <a href="CppVersion.htm">version</a>minuswin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loweriteration &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move_inc(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loweriteration<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_filenames(filename, loweriteration);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (current_inc <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current_image <a href="CppOperatorAssign.htm">=</a> NOTHING;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XClearWindow(display, mainwindow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_buttons();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> nodewin[0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> polywin[0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> elewin[0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> edgewin[0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> partwin[0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> adjwin[0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> voronoiwin[0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> nodewin[1]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> polywin[1]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> elewin[1]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> edgewin[1]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> partwin[1]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> adjwin[1]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> voronoiwin[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> nodewin[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> NODE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> polywin[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> POLY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> elewin[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> ELE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> edgewin[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> EDGE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> partwin[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> PART;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> adjwin[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> ADJ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> voronoiwin[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> VORO;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> nodewin[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> NODE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> polywin[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> POLY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> elewin[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> ELE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> edgewin[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> EDGE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> partwin[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> PART;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> adjwin[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> ADJ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.x<a href="CppAny.htm">any</a>.window <a href="CppOperatorEqual.htm">==</a> voronoiwin[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_inc <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_image <a href="CppOperatorAssign.htm">=</a> VORO;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;past_image <a href="CppOperatorAssign.htm">=</a> current_image;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_inc <a href="CppOperatorEqual.htm">==</a> new_inc) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_image <a href="CppOperatorEqual.htm">==</a> new_image)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free_inc(new_inc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unload_inc(new_inc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;choose_image(new_inc, new_image);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((past_image <a href="CppOperatorEqual.htm">==</a> NOTHING) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (current_image <a href="CppOperatorNotEqual.htm">!=</a> NOTHING)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmin <a href="CppOperatorAssign.htm">=</a> xlo[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymin <a href="CppOperatorAssign.htm">=</a> ylo[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmax <a href="CppOperatorAssign.htm">=</a> xhi[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymax <a href="CppOperatorAssign.htm">=</a> yhi[current_inc][current_image];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zoom <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xptr <a href="CppOperatorAssign.htm">=</a> ((REAL) event.xbutton.x <a href="CppOperatorMinus.htm">-</a> xoffset) <a href="CppOperatorDivide.htm">/</a> xscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yptr <a href="CppOperatorAssign.htm">=</a> ((REAL) event.xbutton.y <a href="CppOperatorMinus.htm">-</a> yoffset) <a href="CppOperatorDivide.htm">/</a> yscale;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((current_image <a href="CppOperatorEqual.htm">==</a> PART) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> loaded[PART] <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> explode) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xptr <a href="CppOperatorAssign.htm">=</a> (xptr <a href="CppOperatorPlus.htm">+</a> partcenter[current_inc]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [subdomains[current_inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* explosion) <a href="CppOperatorDivide.htm">/</a> (1.0 <a href="CppOperatorPlus.htm">+</a> explosion);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yptr <a href="CppOperatorAssign.htm">=</a> (yptr <a href="CppOperatorPlus.htm">+</a> partcenter[current_inc]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [(subdomains[current_inc] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 1) <a href="CppOperatorPlus.htm">+</a> 1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* explosion) <a href="CppOperatorDivide.htm">/</a> (1.0 <a href="CppOperatorPlus.htm">+</a> explosion);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((event.xbutton.button <a href="CppOperatorEqual.htm">==</a> Button1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (event.xbutton.button <a href="CppOperatorEqual.htm">==</a> Button3)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event.xbutton.button <a href="CppOperatorEqual.htm">==</a> Button1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xspan <a href="CppOperatorAssign.htm">=</a> 0.25 * (xmax <a href="CppOperatorMinus.htm">-</a> xmin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yspan <a href="CppOperatorAssign.htm">=</a> 0.25 * (ymax <a href="CppOperatorMinus.htm">-</a> ymin);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zoom<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xspan <a href="CppOperatorAssign.htm">=</a> xmax <a href="CppOperatorMinus.htm">-</a> xmin;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yspan <a href="CppOperatorAssign.htm">=</a> ymax <a href="CppOperatorMinus.htm">-</a> ymin;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zoom<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmin <a href="CppOperatorAssign.htm">=</a> xptr <a href="CppOperatorMinus.htm">-</a> xspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymin <a href="CppOperatorAssign.htm">=</a> yptr <a href="CppOperatorMinus.htm">-</a> yspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmax <a href="CppOperatorAssign.htm">=</a> xptr <a href="CppOperatorPlus.htm">+</a> xspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymax <a href="CppOperatorAssign.htm">=</a> yptr <a href="CppOperatorPlus.htm">+</a> yspan;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (event.xbutton.button <a href="CppOperatorEqual.htm">==</a> Button2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("x <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorModulus.htm">%</a>.4g, y <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorModulus.htm">%</a>.4g\n", xptr, yptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> DestroyNotify:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XDestroyWindow(display, mainwindow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XCloseDisplay(display);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ConfigureNotify:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((width <a href="CppOperatorNotEqual.htm">!=</a> event.xconfigure.width) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(height <a href="CppOperatorNotEqual.htm">!=</a> event.xconfigure.height <a href="CppOperatorMinus.htm">-</a> PANELHEIGHT)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width <a href="CppOperatorAssign.htm">=</a> event.xconfigure.width;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height <a href="CppOperatorAssign.htm">=</a> event.xconfigure.height <a href="CppOperatorMinus.htm">-</a> PANELHEIGHT;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (XCheckMaskEvent(display, ExposureMask, &amp;event));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Expose:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(current_inc, current_image, xmin, ymin, xmax, ymax);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (XCheckMaskEvent(display, ExposureMask, &amp;event));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;XNextEvent(display, &amp;event);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTriangle/triangle.c</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/triangle.c" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;888888888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,o,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 888&nbsp;&nbsp;&nbsp;&nbsp;88o88o&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;o8888o&nbsp;&nbsp;88o8888o o88888o 888&nbsp;&nbsp;o88888o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 888&nbsp;&nbsp;&nbsp;&nbsp;888&nbsp;&nbsp;&nbsp;&nbsp;888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 88b 888&nbsp;&nbsp;888 888 888 888 d888&nbsp;&nbsp;88b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 888&nbsp;&nbsp;&nbsp;&nbsp;888&nbsp;&nbsp;&nbsp;&nbsp;888&nbsp;&nbsp;o88^o888 888&nbsp;&nbsp;888 "88888" 888 8888oo888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 888&nbsp;&nbsp;&nbsp;&nbsp;888&nbsp;&nbsp;&nbsp;&nbsp;888 C888&nbsp;&nbsp;888 888&nbsp;&nbsp;888&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;888 q888&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 888&nbsp;&nbsp;&nbsp;&nbsp;888&nbsp;&nbsp;&nbsp;&nbsp;888&nbsp;&nbsp;"88o^888 888&nbsp;&nbsp;888 Cb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;888&nbsp;&nbsp;"88oooo"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"8oo8D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A Two-Dimensional Quality Mesh Generator and Delaunay Triangulator.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(triangle.c)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppVersion.htm">Version</a> 1.6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;July 28, 2005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Copyright 1993, 1995, 1997, 1998, 2002, 2005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;2360 Woolsey #H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Berkeley, California&nbsp;&nbsp;94705-1927&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;jrs@cs.berkeley.edu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This program may be freely redistributed under the condition that the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;copyright notices (including <b><a href="CppThis.htm">this</a></b> entire header and the copyright&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;notice printed when the `-h' <b><a href="CppSwitch.htm">switch</a></b> is selected) are not removed, and&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;no compensation is received.&nbsp;&nbsp;Private, research, and institutional&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;use is free.&nbsp;&nbsp;You may distribute modified <a href="CppVersion.htm">version</a>s of <b><a href="CppThis.htm">this</a></b> code UNDER&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;THE CONDITION THAT THIS CODE AND ANY MODIFICATIONS MADE TO IT IN THE&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;SAME <a href="CppCfile.htm">FILE</a> REMAIN UNDER COPYRIGHT OF THE ORIGINAL AUTHOR, BOTH SOURCE&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;AND OBJECT CODE ARE MADE FREELY AVAILABLE WITHOUT CHARGE, AND CLEAR&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;NOTICE IS GIVEN OF THE MODIFICATIONS.&nbsp;&nbsp;Distribution of <b><a href="CppThis.htm">this</a></b> code as&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;part of a commercial system is permissible ONLY BY DIRECT ARRANGEMENT&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;WITH THE AUTHOR.&nbsp;&nbsp;(If you are not directly supplying <b><a href="CppThis.htm">this</a></b> code to a&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;customer, and you are instead telling them how they can obtain it <b><a href="CppFor.htm">for</a></b>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;free, then you are not required to <a href="CppMake.htm">make</a> <a href="CppAny.htm">any</a> arrangement with me.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Hypertext instructions <b><a href="CppFor.htm">for</a></b> Triangle are available on the Web at&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.cs.cmu.edu/~quake/triangle.html&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Disclaimer:&nbsp;&nbsp;Neither I nor Carnegie Mellon warrant <b><a href="CppThis.htm">this</a></b> code in <a href="CppAny.htm">any</a> way&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;whatsoever.&nbsp;&nbsp;This code is provided "as-is".&nbsp;&nbsp;Use at your own risk.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Some of the references listed below are marked with an asterisk.&nbsp;&nbsp;[*]&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;These references are available <b><a href="CppFor.htm">for</a></b> downloading from the Web page&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.cs.cmu.edu/~quake/triangle.research.html&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Three papers discussing aspects of Triangle are available.&nbsp;&nbsp;A <b><a href="CppShort.htm">short</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;overview appears in "Triangle:&nbsp;&nbsp;Engineering a 2D Quality Mesh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Generator and Delaunay Triangulator," in Applied Computational&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Geometry:&nbsp;&nbsp;Towards Geometric Engineering, Ming C. Lin and Dinesh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Manocha, editors, Lecture Notes in Computer Science volume 1148,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;pages 203-222, Springer-Verlag, Berlin, May 1996 (from the First ACM&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Workshop on Applied Computational Geometry).&nbsp;&nbsp;[*]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;The <a href="CppAlgorithm.htm">algorithm</a>s are discussed in the greatest detail in "Delaunay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Refinement <a href="CppAlgorithm.htm">Algorithm</a>s <b><a href="CppFor.htm">for</a></b> Triangular Mesh Generation," Computational&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Geometry:&nbsp;&nbsp;Theory and <a href="CppApplication.htm">Application</a>s 22(1-3):21-74, May 2002.&nbsp;&nbsp;[*]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;More detail <a href="CppAbout.htm">about</a> the data structures may be found in my dissertation: <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;"Delaunay Refinement Mesh Generation," Ph.D. thesis, Technical Report&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;CMU-CS-97-137, School of Computer Science, Carnegie Mellon University, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Pittsburgh, Pennsylvania, 18 May 1997.&nbsp;&nbsp;[*]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Triangle was created as part of the Quake Project in the School of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Computer Science at Carnegie Mellon University.&nbsp;&nbsp;For further&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;information, see Hesheng Bao, Jacobo Bielak, Omar Ghattas, Loukas F.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Kallivokas, David R. O'Hallaron, Jonathan R. Shewchuk, and Jifeng Xu,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;"Large-scale Simulation of Elastic Wave Propagation in Heterogeneous&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Media on Parallel Computers," Computer <a href="CppMemberFunction.htm">Member function</a>s in Applied Mechanics&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;and Engineering 152(1-2):85-102, 22 January 1998.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Triangle's Delaunay refinement <a href="CppAlgorithm.htm">algorithm</a> <b><a href="CppFor.htm">for</a></b> quality mesh generation is&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;a hybrid of one due to Jim Ruppert, "A Delaunay Refinement <a href="CppAlgorithm.htm">Algorithm</a>&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> Quality 2-Dimensional Mesh Generation," Journal of <a href="CppAlgorithm.htm">Algorithm</a>s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;18(3):548-585, May 1995 [*], and one due to L. Paul Chew, "Guaranteed<a href="CppOperatorMinus.htm">-</a> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Quality Mesh Generation <b><a href="CppFor.htm">for</a></b> Curved Surfaces," Proceedings of the Ninth <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Annual Symposium on Computational Geometry (San Diego, California),&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;pages 274-280, Association <b><a href="CppFor.htm">for</a></b> Computing Machinery, May 1993,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;http://portal.acm.org/citation.cfm?id=161150 .&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The Delaunay refinement <a href="CppAlgorithm.htm">algorithm</a> has been modified so that it meshes&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;domains with small input angles well, as described in Gary L. Miller,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Steven E. Pav, and Noel J. Walkington, "When and Why Ruppert's&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAlgorithm.htm">Algorithm</a> Works," Twelfth International Meshing Roundtable, pages&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;91-102, Sandia National Laboratories, September 2003.&nbsp;&nbsp;[*]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;My implementation of the divide-and-conquer and incremental Delaunay&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;triangulation <a href="CppAlgorithm.htm">algorithm</a>s follows closely the presentation of Guibas&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;and Stolfi, even though I use a triangle-based data structure instead&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;of their quad-edge data structure.&nbsp;&nbsp;(In fact, I originally implemented <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Triangle <b><a href="CppUsing.htm">using</a></b> the quad-edge data structure, but the <b><a href="CppSwitch.htm">switch</a></b> to a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;triangle-based data structure sped Triangle by a factor of two.)&nbsp;&nbsp;The&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;mesh manipulation primitives and the two aforementioned Delaunay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;triangulation <a href="CppAlgorithm.htm">algorithm</a>s are described by Leonidas J. Guibas and Jorge <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Stolfi, "Primitives <b><a href="CppFor.htm">for</a></b> the Manipulation of General Subdivisions and&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;the Computation of Voronoi Diagrams," ACM Transactions on Graphics&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;4(2):74-123, April 1985, http://portal.acm.org/citation.cfm?id=282923 .<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Their O(n log n) divide-and-conquer <a href="CppAlgorithm.htm">algorithm</a> is adapted from Der-Tsai&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Lee and Bruce J. Schachter, "Two <a href="CppAlgorithm.htm">Algorithm</a>s <b><a href="CppFor.htm">for</a></b> <a href="CppConstructor.htm">Construct</a>ing the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Delaunay Triangulation," International Journal of Computer and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Information Science 9(3):219-242, 1980.&nbsp;&nbsp;Triangle's improvement of the <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;divide-and-conquer <a href="CppAlgorithm.htm">algorithm</a> by alternating between vertical and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;horizontal cuts was introduced by Rex A. Dwyer, "A Faster Divide-and<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Conquer <a href="CppAlgorithm.htm">Algorithm</a> <b><a href="CppFor.htm">for</a></b> <a href="CppConstructor.htm">Construct</a>ing Delaunay Triangulations,"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAlgorithm.htm">Algorithm</a>ica 2(2):137-151, 1987.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The incremental insertion <a href="CppAlgorithm.htm">algorithm</a> was first proposed by C. L. Lawson,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;"Software <b><a href="CppFor.htm">for</a></b> C1 Surface Interpolation," in Mathematical Software III, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;John R. Rice, editor, Academic Press, New York, pp. 161-194, 1977.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;For <a href="CppPointer.htm">point</a> location, I use the <a href="CppAlgorithm.htm">algorithm</a> of Ernst P. Mucke, Isaac&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Saias, and Binhai Zhu, "Fast Randomized <a href="CppPoint.htm">Point</a> Location Without&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Preprocessing in Two<a href="CppOperatorMinus.htm">-</a> and Three-Dimensional Delaunay Triangulations,"&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Proceedings of the Twelfth Annual Symposium on Computational Geometry, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;ACM, May 1996.&nbsp;&nbsp;[*]&nbsp;&nbsp;If I were to randomize the order of vertex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;insertion (I currently don't bother), their result combined with the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;result of Kenneth L. Clarkson and Peter W. Shor, "<a href="CppApplication.htm">Application</a>s of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Random Sampling in Computational Geometry II," Discrete &amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Computational Geometry 4(1):387-421, 1989, would yield an expected&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;O(n^{4/3}) bound on running <a href="CppTime.htm">time</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The O(n log n) sweepline Delaunay triangulation <a href="CppAlgorithm.htm">algorithm</a> is taken from&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Steven Fortune, "A Sweepline <a href="CppAlgorithm.htm">Algorithm</a> <b><a href="CppFor.htm">for</a></b> Voronoi Diagrams",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAlgorithm.htm">Algorithm</a>ica 2(2):153-174, 1987.&nbsp;&nbsp;A random sample of edges on the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;boundary of the triangulation are maintained in a splay tree <b><a href="CppFor.htm">for</a></b> the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;purpose of <a href="CppPointer.htm">point</a> location.&nbsp;&nbsp;Splay trees are described by Daniel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Dominic Sleator and Robert Endre Tarjan, "Self-Adjusting Binary Search <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Trees," Journal of the ACM 32(3):652-686, July 1985,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;http://portal.acm.org/citation.cfm?id=3835 .&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <a href="CppAlgorithm.htm">algorithm</a>s <b><a href="CppFor.htm">for</a></b> exact computation of the signs of determinants are&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;described in Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk, "Adaptive Precision Floating<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a> Arithmetic and Fast Robust Geometric <a href="CppPredicate.htm">Predicate</a>s," Discrete &amp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Computational Geometry 18(3):305-363, October 1997.&nbsp;&nbsp;(Also available&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;as Technical Report CMU-CS-96-140, School of Computer Science,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Carnegie Mellon University, Pittsburgh, Pennsylvania, May 1996.)&nbsp;&nbsp;[*]&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;An abbreviated <a href="CppVersion.htm">version</a> appears as Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk, "Robust&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Adaptive Floating-<a href="CppPoint.htm">Point</a> Geometric <a href="CppPredicate.htm">Predicate</a>s," Proceedings of the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Twelfth Annual Symposium on Computational Geometry, ACM, May 1996. [*] <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;M<a href="CppAny.htm">any</a> of the ideas <b><a href="CppFor.htm">for</a></b> my exact arithmetic routines originate with&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Douglas M. Priest, "<a href="CppAlgorithm.htm">Algorithm</a>s <b><a href="CppFor.htm">for</a></b> Arbitrary Precision Floating <a href="CppPoint.htm">Point</a>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Arithmetic," Tenth Symposium on Computer Arithmetic, pp. 132-143, IEEE <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Computer Society Press, 1991.&nbsp;&nbsp;[*]&nbsp;&nbsp;M<a href="CppAny.htm">any</a> of the ideas <b><a href="CppFor.htm">for</a></b> the correct&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;evaluation of the signs of determinants are taken from Steven Fortune&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;and Christopher J. Van Wyk, "Efficient Exact Arithmetic <b><a href="CppFor.htm">for</a></b> Computa<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;tional Geometry," Proceedings of the Ninth Annual Symposium on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Computational Geometry, ACM, pp. 163-172, May 1993, and from Steven&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Fortune, "Numerical Stability of <a href="CppAlgorithm.htm">Algorithm</a>s <b><a href="CppFor.htm">for</a></b> 2D Delaunay Triangu<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;lations," International Journal of Computational Geometry &amp; Applica<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;tions 5(1-2):193-213, March-June 1995.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <a href="CppMemberFunction.htm">member function</a> of inserting <b><a href="CppNew.htm">new</a></b> vertices off-center (not precisely at the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;circumcenter of every poor-quality triangle) is from Alper Ungor,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;"Off-centers:&nbsp;&nbsp;A New Type of Steiner <a href="CppPoint.htm">Point</a>s <b><a href="CppFor.htm">for</a></b> Computing Size-Optimal <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Quality-Guaranteed Delaunay Triangulations," Proceedings of LATIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;2004 (Buenos Aires, Argentina), April 2004.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;For <a href="CppDefinition.htm">definitions</a> of and results involving Delaunay triangulations,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;constrained and conforming <a href="CppVersion.htm">version</a>s thereof, and other aspects of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;triangular mesh generation, see the excellent <a href="CppSurvey.htm">survey</a> by Marshall Bern&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;and David Eppstein, "Mesh Generation and Optimal Triangulation," in&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Computing and Euclidean Geometry, Ding-Zhu Du and Frank Hwang,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;editors, World Scientific, Singapore, pp. 23-90, 1992.&nbsp;&nbsp;[*]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <a href="CppTime.htm">time</a> <b><a href="CppFor.htm">for</a></b> incrementally adding PSLG (planar straight line graph)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;segments to create a constrained Delaunay triangulation is probably&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;O(t^2) per segment in the worst <b><a href="CppCase.htm">case</a></b> and O(t) per segment in the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;common <b><a href="CppCase.htm">case</a></b>, where t is the number of triangles that intersect the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;segment before it is inserted.&nbsp;&nbsp;This doesn't count <a href="CppPointer.htm">point</a> location,&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;which can be much more expensive.&nbsp;&nbsp;I could improve <b><a href="CppThis.htm">this</a></b> to O(d log d)&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>, but d is usually quite small, so it's not worth the bother.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;(This note does not apply when the <a href="CppOperatorMinus.htm">-</a>s <b><a href="CppSwitch.htm">switch</a></b> is used, invoking a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;different <a href="CppMemberFunction.htm">member function</a> is used to insert segments.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <a href="CppTime.htm">time</a> <b><a href="CppFor.htm">for</a></b> deleting a vertex from a Delaunay triangulation is O(d^2)&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;in the worst <b><a href="CppCase.htm">case</a></b> and O(d) in the common <b><a href="CppCase.htm">case</a></b>, where d is the degree&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;of the vertex being deleted.&nbsp;&nbsp;I could improve <b><a href="CppThis.htm">this</a></b> to O(d log d) <a href="CppTime.htm">time</a>, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;but d is usually quite small, so it's not worth the bother.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Ruppert's Delaunay refinement <a href="CppAlgorithm.htm">algorithm</a> typically generates triangles&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;at a linear rate (constant <a href="CppTime.htm">time</a> per triangle) after the initial&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;triangulation is formed.&nbsp;&nbsp;There may be pathological <b><a href="CppCase.htm">case</a></b>s where&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;quadratic <a href="CppTime.htm">time</a> is required, but these never arise in practice.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The geometric <a href="CppPredicate.htm">predicate</a>s (circumcenter calculations, segment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;intersection formulae, etc.) appear in my "Lecture Notes on Geometric&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Robustness" at http://www.cs.berkeley.edu/~jrs/mesh .&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If you <a href="CppMake.htm">make</a> <a href="CppAny.htm">any</a> improvements to <b><a href="CppThis.htm">this</a></b> code, please please please let me&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;know, so that I may obtain the improvements.&nbsp;&nbsp;Even <b><a href="CppIf.htm">if</a></b> you don't change <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;the code, I'd still love to hear what it's being used <b><a href="CppFor.htm">for</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> For single precision (which will save some <a href="CppMemory.htm">memory</a> and reduce paging),&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; define the symbol SINGLE by <b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>DSINGLE <a href="CppCompiler.htm">compiler</a> <b><a href="CppSwitch.htm">switch</a></b> or by&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; writing "<a href="CppDefine.htm">#define</a> SINGLE" below.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> For <b><a href="CppDouble.htm">double</a></b> precision (which will allow you to refine meshes to a smaller&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edge length), leave SINGLE undefined.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> <a href="CppDouble.htm">Double</a> precision uses more <a href="CppMemory.htm">memory</a>, but improves the resolution of the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; meshes you can generate with Triangle.&nbsp;&nbsp;It also reduces the likelihood&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of a floating <a href="CppException.htm">exception</a> due to overflow.&nbsp;&nbsp;Finally, it is much faster&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; than single precision on 64-bit architectures like the DEC Alpha.&nbsp;&nbsp;I&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; recommend <b><a href="CppDouble.htm">double</a></b> precision unless you want to generate a mesh <b><a href="CppFor.htm">for</a></b> which <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; you <b><a href="CppDo.htm">do</a></b> not have enough <a href="CppMemory.htm">memory</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wsign-compare" <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-parameter" <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter" <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppIfdef.htm">#ifdef</a> __cplusplus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<b><a href="CppExtern.htm">extern</a></b> "C" {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a>ifdef __cplusplus <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> _STDIO_S_DEFINED <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdioH.htm">stdio.h</a>&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppDefine.htm">#define</a> ANSI_DECLARATORS<br/>
<a href="CppIfndef.htm">#ifndef</a> ANSI_DECLARATORS<br/>
<a href="CppPragma.htm">#pragma</a> error<br/>
I_WILL_NOT_COMPILE<br/>
<a href="CppEndif.htm">#endif</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<br/>
<a href="CppInclude.htm">#include</a> "triangle.h"<br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> SINGLE <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> SINGLE<br/>
<a href="CppDefine.htm">#define</a> REAL <b><a href="CppFloat.htm">float</a></b><br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> REAL <b><a href="CppDouble.htm">double</a></b><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> If yours is not a Unix system, define the NO_TIMER <a href="CppCompiler.htm">compiler</a> <b><a href="CppSwitch.htm">switch</a></b> to&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; remove the Unix-specific timing code.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> To insert lots of self-checks <b><a href="CppFor.htm">for</a></b> internal errors, define the SELF_CHECK&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; symbol.&nbsp;&nbsp;This will slow down the program significantly.&nbsp;&nbsp;It is best to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; define the symbol <b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>DSELF_CHECK <a href="CppCompiler.htm">compiler</a> <b><a href="CppSwitch.htm">switch</a></b>, but you could <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; write "<a href="CppDefine.htm">#define</a> SELF_CHECK" below.&nbsp;&nbsp;If you are modifying <b><a href="CppThis.htm">this</a></b> code, I&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; recommend you turn self-checks on until your work is <a href="CppDebug.htm">debug</a>ged.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> SELF_CHECK <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> To <a href="CppCompile.htm">compile</a> Triangle as a callable object <a href="CppLibrary.htm">library</a> (triangle.o), define the <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; TRILIBRARY symbol.&nbsp;&nbsp;Read the file triangle.h <b><a href="CppFor.htm">for</a></b> details on how to call <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the procedure triangulate() that results.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> It is possible to generate a smaller <a href="CppVersion.htm">version</a> of Triangle <b><a href="CppUsing.htm">using</a></b> one or&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; both of the following symbols.&nbsp;&nbsp;Define the REDUCED symbol to eliminate&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; all features that are primarily of research interest; specifically, the <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>i, <a href="CppOperatorMinus.htm">-</a>F, <a href="CppOperatorMinus.htm">-</a>s, and <a href="CppOperatorMinus.htm">-</a>C <b><a href="CppSwitch.htm">switch</a></b>es.&nbsp;&nbsp;Define the CDT_ONLY symbol to eliminate&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; all meshing <a href="CppAlgorithm.htm">algorithm</a>s above and beyond constrained Delaunay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangulation; specifically, the <a href="CppOperatorMinus.htm">-</a>r, <a href="CppOperatorMinus.htm">-</a>q, <a href="CppOperatorMinus.htm">-</a>a, <a href="CppOperatorMinus.htm">-</a>u, <a href="CppOperatorMinus.htm">-</a>D, <a href="CppOperatorMinus.htm">-</a>S, and <a href="CppOperatorMinus.htm">-</a>s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <b><a href="CppSwitch.htm">switch</a></b>es.&nbsp;&nbsp;These reductions are most likely to be useful when&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; generating an object <a href="CppLibrary.htm">library</a> (triangle.o) by defining the TRILIBRARY&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; symbol.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> REDUCED <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> On some machines, my exact arithmetic routines might be defeated by the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; use of internal extended precision floating-<a href="CppPointer.htm">point</a> <b><a href="CppRegister.htm">register</a></b>s.&nbsp;&nbsp;The best&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; way to solve <b><a href="CppThis.htm">this</a></b> problem is to set the floating-<a href="CppPointer.htm">point</a> <b><a href="CppRegister.htm">register</a></b>s to use <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; single or <b><a href="CppDouble.htm">double</a></b> precision internally.&nbsp;&nbsp;On 80x86 processors, <b><a href="CppThis.htm">this</a></b> may&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; be accomplished by setting the CPU86 symbol <b><a href="CppFor.htm">for</a></b> the Microsoft C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppCompiler.htm">compiler</a>, or the LINUX symbol <b><a href="CppFor.htm">for</a></b> the gcc <a href="CppCompiler.htm">compiler</a> running on <a href="CppLinux.htm">Linux</a>.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> For more discussion, see http://www.cs.cmu.edu/~quake/robust.pc.html .&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; For yet more discussion, see Section 5 of my paper, "Adaptive Precision <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Floating-<a href="CppPoint.htm">Point</a> Arithmetic and Fast Robust Geometric <a href="CppPredicate.htm">Predicate</a>s" (also&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; available as Section 6.6 of my dissertation).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> CPU86 <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> LINUX <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Maximum number of <a href="CppChar.htm">character</a>s in a file name (including the null).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> <a href="CppCfile.htm">FILE</a>NAMESIZE 2048<br/>
<br/>
<a href="CppComment.htm">/*</a> Maximum number of <a href="CppChar.htm">character</a>s in a line read from a file (including the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; null).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> INPUTLINESIZE 1024<br/>
<br/>
<a href="CppComment.htm">/*</a> For efficiency, a variety of data structures are allocated in bulk.&nbsp;&nbsp;The&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; following constants determine how many of each structure is allocated&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; at once.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> TRIPERBLOCK 4092&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of triangles allocated at once. <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> SUBSEGPERBLOCK 508&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of subsegments allocated at once. <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> VERTEXPERBLOCK 4092&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of vertices allocated at once. <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> VIRUSPERBLOCK 1020&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of virus triangles allocated at once. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> Number of encroached subsegments allocated at once. <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> BADSUBSEGPERBLOCK 252<br/>
<a href="CppComment.htm">/*</a> Number of skinny triangles allocated at once. <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> BADTRIPERBLOCK 4092<br/>
<a href="CppComment.htm">/*</a> Number of flipped triangles allocated at once. <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> FLIPSTACKERPERBLOCK 252<br/>
<a href="CppComment.htm">/*</a> Number of splay tree nodes allocated at once. <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> SPLAYNODEPERBLOCK 508<br/>
<br/>
<a href="CppComment.htm">/*</a> The vertex types.&nbsp;&nbsp; A DEADVERTEX has been deleted entirely.&nbsp;&nbsp;An&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; UNDEADVERTEX is not part of the mesh, but is written to the output&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; .node file and affects the node indexing in the other output files.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> INPUTVERTEX 0<br/>
<a href="CppDefine.htm">#define</a> SEGMENTVERTEX 1<br/>
<a href="CppDefine.htm">#define</a> FREEVERTEX 2<br/>
<a href="CppDefine.htm">#define</a> DEADVERTEX <a href="CppOperatorMinus.htm">-</a>32768<br/>
<a href="CppDefine.htm">#define</a> UNDEADVERTEX <a href="CppOperatorMinus.htm">-</a>32767<br/>
<br/>
<a href="CppComment.htm">/*</a> The next line is used to outsmart some very stupid <a href="CppCompiler.htm">compilers</a>.&nbsp;&nbsp;If your&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppCompiler.htm">compiler</a> is smarter, feel free to replace the "<b><a href="CppInt.htm">int</a></b>" with "<b><a href="CppVoid.htm">void</a></b>".&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Not that it matters.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> VOID <b><a href="CppInt.htm">int</a></b><br/>
<br/>
<a href="CppComment.htm">/*</a> Two constants <b><a href="CppFor.htm">for</a></b> <a href="CppAlgorithm.htm">algorithm</a>s based on random sampling.&nbsp;&nbsp;Both constants&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; have been chosen empirically to optimize their respective <a href="CppAlgorithm.htm">algorithm</a>s.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Used <b><a href="CppFor.htm">for</a></b> the <a href="CppPointer.htm">point</a> location scheme of Mucke, Saias, and Zhu, to decide&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; how large a random sample of triangles to inspect.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> SAMPLEFACTOR 11<br/>
<br/>
<a href="CppComment.htm">/*</a> Used in Fortune's sweepline Delaunay <a href="CppAlgorithm.htm">algorithm</a> to determine what fraction <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of boundary edges should be maintained in the splay tree <b><a href="CppFor.htm">for</a></b> <a href="CppPointer.htm">point</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; location on the front.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> SAMPLERATE 10<br/>
<br/>
<a href="CppComment.htm">/*</a> A number that speaks <b><a href="CppFor.htm">for</a></b> itself, every kissable digit.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> PI 3.141592653589793238462643383279502884197169399375105820974944592308<br/>
<br/>
<a href="CppComment.htm">/*</a> Another fave.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> SQUAREROOTTWO 1.4142135623730950488016887242096980785696718753769480732<br/>
<br/>
<a href="CppComment.htm">/*</a> And here's one <b><a href="CppFor.htm">for</a></b> those of you who are intimidated by math.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> ONETHIRD 0.333333333333333333333333333333333333333333333333333333333333<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdioH.htm">stdio.h</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStd.htm">std</a>lib.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;string.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
<a href="CppInclude.htm">#include</a> &lt;sys/<a href="CppTime.htm">time</a>.h&gt;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> CPU86<br/>
<a href="CppInclude.htm">#include</a> &lt;<b><a href="CppFloat.htm">float</a></b>.h&gt;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> CPU86 <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> LINUX<br/>
<a href="CppInclude.htm">#include</a> &lt;fpu_control.h&gt;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> LINUX <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<a href="CppInclude.htm">#include</a> "triangle.h"<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> A few <a href="CppForwardDeclaration.htm">forward declaration</a>s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<b><a href="CppChar.htm">char</a></b> *readline();<br/>
<b><a href="CppChar.htm">char</a></b> *findfield();<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Labels that signify the result of <a href="CppPointer.htm">point</a> location.&nbsp;&nbsp;The result of a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; search indicates that the <a href="CppPointer.htm">point</a> falls in the interior of a triangle, on <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; an edge, on a vertex, or outside the mesh.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> locateresult {INTRIANGLE, ONEDGE, ONVERTEX, OUTSIDE};<br/>
<br/>
<a href="CppComment.htm">/*</a> Labels that signify the result of vertex insertion.&nbsp;&nbsp;The result indicates <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; that the vertex was inserted with complete success, was inserted but&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; encroaches upon a subsegment, was not inserted because it lies on a&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; segment, or was not inserted because another vertex occupies the same&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; location.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> insertvertexresult {SUCCESSFULVERTEX, ENCROACHINGVERTEX, VIOLATINGVERTEX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DUPLICATEVERTEX};<br/>
<br/>
<a href="CppComment.htm">/*</a> Labels that signify the result of direction finding.&nbsp;&nbsp;The result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; indicates that a segment connecting the two query <a href="CppPointer.htm">point</a>s falls within&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the direction triangle, along the left edge of the direction triangle,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; or along the right edge of the direction triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> finddirectionresult {WITHIN, LEFTCOLLINEAR, RIGHTCOLLINEAR};<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The basic mesh data structures&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;There are three:&nbsp;&nbsp;vertices, triangles, and subsegments (abbreviated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`subseg').&nbsp;&nbsp;These three data structures, <a href="CppLink.htm">link</a>ed by <a href="CppPointer.htm">pointer</a>s, comprise&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the mesh.&nbsp;&nbsp;A vertex simply represents a mesh vertex and its properties.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A triangle is a triangle.&nbsp;&nbsp;A subsegment is a special data structure used <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to represent an impenetrable edge of the mesh (perhaps on the outer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;boundary, on the boundary of a hole, or part of an internal boundary&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;separating two triangulated regions).&nbsp;&nbsp;Subsegments represent boundaries, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;defined by the user, that triangles may not lie across.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A triangle consists of a list of three vertices, a list of three&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;adjoining triangles, a list of three adjoining subsegments (when&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;segments exist), an arbitrary number of optional user-defined&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;floating-<a href="CppPointer.htm">point</a> attributes, and an optional area constraint.&nbsp;&nbsp;The latter&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is an upper bound on the permissible area of each triangle in a region,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;used <b><a href="CppFor.htm">for</a></b> mesh refinement.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;For a triangle on a boundary of the mesh, some or all of the neighboring <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles may not be present.&nbsp;&nbsp;For a triangle in the interior of the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;mesh, often no neighboring subsegments are present.&nbsp;&nbsp;Such absent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles and subsegments are never represented by <a href="CppNULL.htm">NULL</a> <a href="CppPointer.htm">pointer</a>s; they&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;are represented by two special records:&nbsp;&nbsp;`dummytri', the triangle that&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;fills "outer space", and `dummysub', the omnipresent subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`dummytri' and `dummysub' are used <b><a href="CppFor.htm">for</a></b> several reasons; <b><a href="CppFor.htm">for</a></b> <a href="CppInstance.htm">instance</a>,&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;they can be dereferenced and their contents examined without violating&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b> <a href="CppMemory.htm">memory</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;However, it is important to understand that a triangle includes other&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;information as well.&nbsp;&nbsp;The <a href="CppPointer.htm">pointer</a>s to adjoining vertices, triangles, and <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegments are ordered in a way that indicates their geometric relation <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to each other.&nbsp;&nbsp;Furthermore, each of these <a href="CppPointer.htm">pointer</a>s contains orientation <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;information.&nbsp;&nbsp;Each <a href="CppPointer.htm">pointer</a> to an adjoining triangle indicates which face <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of that triangle is contacted.&nbsp;&nbsp;Similarly, each <a href="CppPointer.htm">pointer</a> to an adjoining&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegment indicates which side of that subsegment is contacted, and how <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the subsegment is oriented relative to the triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The data structure representing a subsegment may be thought to be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;abutting the edge of one or two triangle data structures:&nbsp;&nbsp;either&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;sandwiched between two triangles, or resting against one triangle on an&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;exterior boundary or hole boundary.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A subsegment consists of a list of four vertices<a href="CppOperatorDecrement.htm">--</a>the vertices of the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegment, and the vertices of the segment it is a part of<a href="CppOperatorDecrement.htm">--</a>a list of&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;two adjoining subsegments, and a list of two adjoining triangles.&nbsp;&nbsp;One&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of the two adjoining triangles may not be present (though there should&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;always be one), and neighboring subsegments might not be present.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Subsegments also store a user-defined <a href="CppInt.htm">integer</a> "boundary marker".&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Typically, <b><a href="CppThis.htm">this</a></b> <a href="CppInt.htm">integer</a> is used to indicate what boundary conditions are <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to be applied at that location in a finite element simulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Like triangles, subsegments maintain information <a href="CppAbout.htm">about</a> the relative&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;orientation of neighboring objects.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Vertices are relatively simple.&nbsp;&nbsp;A vertex is a list of floating-<a href="CppPointer.htm">point</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;numbers, starting with the x, and y coordinates, followed by an&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;arbitrary number of optional user-defined floating-<a href="CppPointer.htm">point</a> attributes,&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;followed by an <a href="CppInt.htm">integer</a> boundary marker.&nbsp;&nbsp;During the segment insertion&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;phase, there is also a <a href="CppPointer.htm">pointer</a> from each vertex to a triangle that may&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;contain it.&nbsp;&nbsp;Each <a href="CppPointer.htm">pointer</a> is not always correct, but when one is, it&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;speeds up segment insertion.&nbsp;&nbsp;These <a href="CppPointer.htm">pointer</a>s are as<b><a href="CppSigned.htm">signed</a></b> values once&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;at the beginning of the segment insertion phase, and are not used or&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;updated except during <b><a href="CppThis.htm">this</a></b> phase.&nbsp;&nbsp;Edge flipping during segment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;insertion will render some of them incorrect.&nbsp;&nbsp;Hence, don't rely upon&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;them <b><a href="CppFor.htm">for</a></b> <a href="CppAny.htm">any</a>thing.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Other than the <a href="CppException.htm">exception</a> mentioned above, vertices have no information&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppAbout.htm">about</a> what triangles, subfacets, or subsegments they are <a href="CppLink.htm">link</a>ed to.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Handles&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The oriented triangle (`otri') and oriented subsegment (`osub') data&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;structures defined below <b><a href="CppDo.htm">do</a></b> not themselves store <a href="CppAny.htm">any</a> part of the mesh.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The mesh itself is made of `triangle's, `subseg's, and `vertex's.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Oriented triangles and oriented subsegments will usually be referred to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;as "handles."&nbsp;&nbsp;A handle is essentially a <a href="CppPointer.htm">pointer</a> into the mesh; it&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;allows you to "hold" one particular part of the mesh.&nbsp;&nbsp;Handles are used&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to specify the regions in which one is traversing and modifying the mesh.<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A single `triangle' may be held by many handles, or none at all.&nbsp;&nbsp;(The&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;latter <b><a href="CppCase.htm">case</a></b> is not a <a href="CppMemory.htm">memory</a> leak, because the triangle is still&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;connected to other triangles in the mesh.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;An `otri' is a handle that holds a triangle.&nbsp;&nbsp;It holds a specific edge&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of the triangle.&nbsp;&nbsp;An `osub' is a handle that holds a subsegment.&nbsp;&nbsp;It&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;holds either the left or right side of the subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Navigation <a href="CppAbout.htm">about</a> the mesh is accomplished through a set of mesh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;manipulation primitives, further below.&nbsp;&nbsp;M<a href="CppAny.htm">any</a> of these primitives take&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;a handle and produce a <b><a href="CppNew.htm">new</a></b> handle that holds the mesh near the first&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;handle.&nbsp;&nbsp;Other primitives take two handles and glue the corresponding&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;parts of the mesh together.&nbsp;&nbsp;The orientation of the handles is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;important.&nbsp;&nbsp;For <a href="CppInstance.htm">instance</a>, when two triangles are glued together by the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;bond() primitive, they are glued at the edges on which the handles lie.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Because vertices have no information <a href="CppAbout.htm">about</a> which triangles they are&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;attached to, I commonly represent a vertex by use of a handle whose&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;origin is the vertex.&nbsp;&nbsp;A single handle can simultaneously represent a&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle, an edge, and a vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> The triangle data structure.&nbsp;&nbsp;Each triangle contains three <a href="CppPointer.htm">pointer</a>s to&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjoining triangles, plus three <a href="CppPointer.htm">pointer</a>s to vertices, plus three&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppPointer.htm">pointer</a>s to subsegments (declared below; these <a href="CppPointer.htm">pointer</a>s are usually&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; `dummysub').&nbsp;&nbsp;It may or may not also contain user-defined attributes&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and/or a floating-<a href="CppPointer.htm">point</a> "area constraint."&nbsp;&nbsp;It may also contain extra&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppPointer.htm">pointer</a>s <b><a href="CppFor.htm">for</a></b> nodes, when the user asks <b><a href="CppFor.htm">for</a></b> high-order elements.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Because the size and structure of a `triangle' is not decided until&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; run<a href="CppTime.htm">time</a>, I haven't simply declared the type `triangle' as a <b><a href="CppStruct.htm">struct</a></b>.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> REAL **triangle;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Really:&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> triangle *triangle&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> An oriented triangle:&nbsp;&nbsp;includes a <a href="CppPointer.htm">pointer</a> to a triangle and orientation.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; The orientation denotes an edge of the triangle.&nbsp;&nbsp;Hence, there are&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; three possible orientations.&nbsp;&nbsp;By convention, each edge always <a href="CppPointer.htm">point</a>s&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppCounter.htm">counter</a>clockwise <a href="CppAbout.htm">about</a> the corresponding triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> otri {<br/>
&nbsp;&nbsp;triangle *tri;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> orient;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Ranges from 0 to 2. <a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a> The subsegment data structure.&nbsp;&nbsp;Each subsegment contains two <a href="CppPointer.htm">pointer</a>s to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjoining subsegments, plus four <a href="CppPointer.htm">pointer</a>s to vertices, plus two&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppPointer.htm">pointer</a>s to adjoining triangles, plus one boundary marker, plus one&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; segment number.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> REAL **subseg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Really:&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> subseg *subseg&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> An oriented subsegment:&nbsp;&nbsp;includes a <a href="CppPointer.htm">pointer</a> to a subsegment and an&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; orientation.&nbsp;&nbsp;The orientation denotes a side of the edge.&nbsp;&nbsp;Hence, there <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; are two possible orientations.&nbsp;&nbsp;By convention, the edge is always&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; directed so that the "side" denoted is the right side of the edge.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> osub {<br/>
&nbsp;&nbsp;subseg *ss;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ssorient;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Ranges from 0 to 1. <a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a> The vertex data structure.&nbsp;&nbsp;Each vertex is actually an <a href="CppArray.htm">array</a> of REALs.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; The number of REALs is unknown until run<a href="CppTime.htm">time</a>.&nbsp;&nbsp;An <a href="CppInt.htm">integer</a> boundary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; marker, and some<a href="CppTime.htm">time</a>s a <a href="CppPointer.htm">pointer</a> to a triangle, is appended after the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; REALs.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> REAL *vertex;<br/>
<br/>
<a href="CppComment.htm">/*</a> A queue used to store encroached subsegments.&nbsp;&nbsp;Each subsegment's vertices <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; are stored so that we can check whether a subsegment is still the same. <a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> badsubseg {<br/>
&nbsp;&nbsp;subseg encsubseg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> An encroached subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vertex subsegorg, subsegdest;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Its two vertices. <a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a> A queue used to store bad triangles.&nbsp;&nbsp;The key is the square of the cosine <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of the smallest angle of the triangle.&nbsp;&nbsp;Each triangle's vertices are&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; stored so that one can check whether a triangle is still the same.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> badtriang {<br/>
&nbsp;&nbsp;triangle poortri;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> A skinny or too-large triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;REAL key;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> cos^2 of smallest (apical) angle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vertex triangorg, triangdest, triangapex;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Its three vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badtriang *nexttriang;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> <a href="CppPointer.htm">Pointer</a> to next bad triangle. <a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a> A stack of triangles flipped during the most recent vertex insertion.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; The stack is used to undo the vertex insertion <b><a href="CppIf.htm">if</a></b> the vertex encroaches <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; upon a subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> flipstacker {<br/>
&nbsp;&nbsp;triangle flippedtri;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> A recently flipped triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> flipstacker *prevflip;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Previous flip in the stack. <a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a> A node in a heap used to store events <b><a href="CppFor.htm">for</a></b> the sweepline Delaunay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppAlgorithm.htm">algorithm</a>.&nbsp;&nbsp;Nodes <b><a href="CppDo.htm">do</a></b> not <a href="CppPointer.htm">point</a> directly to their parents or children in <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the heap.&nbsp;&nbsp;Instead, each node knows its position in the heap, and can&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; look up its parent and children in a separate <a href="CppArray.htm">array</a>.&nbsp;&nbsp;The `eventptr'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppPointer.htm">point</a>s either to a `vertex' or to a triangle (in encoded format, so&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; that an orientation is included).&nbsp;&nbsp;In the latter <b><a href="CppCase.htm">case</a></b>, the origin of&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the oriented triangle is the apex of a "circle event" of the sweepline&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppAlgorithm.htm">algorithm</a>.&nbsp;&nbsp;To distinguish site events from circle events, all circle&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; events are given an invalid (smaller than `xmin') x-coordinate `xkey'.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> event {<br/>
&nbsp;&nbsp;REAL xkey, ykey;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Coordinates of the event. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;VOID *eventptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Can be a vertex or the location of a circle event. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> heapposition;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Marks <b><a href="CppThis.htm">this</a></b> event's position in the heap. <a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a> A node in the splay tree.&nbsp;&nbsp;Each node holds an oriented ghost triangle&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; that represents a boundary edge of the growing triangulation.&nbsp;&nbsp;When a&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; circle event covers two boundary edges with a triangle, so that they&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; are no longer boundary edges, those edges are not immediately deleted&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; from the tree; rather, they are lazily deleted when they are next&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; en<a href="CppCounter.htm">counter</a>ed.&nbsp;&nbsp;(Since only a random sample of boundary edges are kept&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; in the tree, lazy deletion is faster.)&nbsp;&nbsp;`keydest' is used to verify&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; that a triangle is still the same as when it entered the splay tree; <b><a href="CppIf.htm">if</a></b> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; it has been rotated (due to a circle event), it no longer represents a&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; boundary edge and should be deleted.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode {<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri keyedge;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Lprev of an edge on the front. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vertex keydest;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Used to verify that splay node is still live. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> splaynode *lchild, *rchild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Children in splay tree. <a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a> A type used to allocate <a href="CppMemory.htm">memory</a>.&nbsp;&nbsp;firstblock is the first block of items.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; nowblock is the block from which items are currently being allocated.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; nextitem <a href="CppPointer.htm">point</a>s to the next slab of free <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> an item.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; deaditemstack is the head of a <a href="CppLink.htm">link</a>ed list (stack) of deallocated items <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; that can be recycled.&nbsp;&nbsp;unallocateditems is the number of items that&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; remain to be allocated from nowblock.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> Traversal is the process of walking through the entire list of items, and <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; is separate from allocation.&nbsp;&nbsp;Note that a traversal will visit items on <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the "deaditemstack" stack as well as live items.&nbsp;&nbsp;pathblock <a href="CppPointer.htm">point</a>s to&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the block currently being traversed.&nbsp;&nbsp;pathitem <a href="CppPointer.htm">point</a>s to the next item&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to be traversed.&nbsp;&nbsp;pathitemsleft is the number of items that remain to&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; be traversed in pathblock.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> alignbytes determines how <b><a href="CppNew.htm">new</a></b> records should be aligned in <a href="CppMemory.htm">memory</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; itembytes is the length of a record in bytes (after rounding up).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; itemsperblock is the number of items allocated at once in a single&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; block.&nbsp;&nbsp;itemsfirstblock is the number of items in the first block,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; which can vary from the others.&nbsp;&nbsp;items is the number of currently&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; allocated items.&nbsp;&nbsp;maxitems is the maximum number of items that have&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; been allocated at once; it is the current number of items plus the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; number of records kept on deaditemstack.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool {<br/>
&nbsp;&nbsp;VOID **firstblock, **nowblock;<br/>
&nbsp;&nbsp;VOID *nextitem;<br/>
&nbsp;&nbsp;VOID *deaditemstack;<br/>
&nbsp;&nbsp;VOID **pathblock;<br/>
&nbsp;&nbsp;VOID *pathitem;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> alignbytes;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> itembytes;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> itemsperblock;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> itemsfirstblock;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> items, maxitems;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> unallocateditems;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> pathitemsleft;<br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">/*</a> Global constants.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
REAL splitter;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Used to split REAL factors <b><a href="CppFor.htm">for</a></b> exact multiplication. <a href="CppComment.htm">*/</a><br/>
REAL epsilon;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Floating-<a href="CppPointer.htm">point</a> machine epsilon. <a href="CppComment.htm">*/</a><br/>
REAL resulterrbound;<br/>
REAL ccwerrboundA, ccwerrboundB, ccwerrboundC;<br/>
REAL iccerrboundA, iccerrboundB, iccerrboundC;<br/>
REAL o3derrboundA, o3derrboundB, o3derrboundC;<br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppRandomNumber.htm">Random number</a> seed is not constant, but I've made it global <a href="CppAny.htm">any</a>way.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> randomseed;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Current <a href="CppRandomNumber.htm">random number</a> seed. <a href="CppComment.htm">*/</a><br/>
<br/>
<br/>
<a href="CppComment.htm">/*</a> Mesh data structure.&nbsp;&nbsp;Triangle operates on only one mesh, but the mesh&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; structure is used (instead of global variables) to allow reentrancy.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh {<br/>
<br/>
<a href="CppComment.htm">/*</a> Variables used to allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> triangles, subsegments, vertices,&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; viri (triangles being eaten), encroached segments, bad (skinny or too&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; large) triangles, and splay tree nodes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool triangles;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool subsegs;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool vertices;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool viri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool badsubsegs;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool badtriangles;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool flipstackers;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool splaynodes;<br/>
<br/>
<a href="CppComment.htm">/*</a> Variables that maintain the bad triangle queues.&nbsp;&nbsp;The queues are&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; ordered from 4095 (highest priority) to 0 (lowest priority).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badtriang *queuefront[4096];<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badtriang *queuetail[4096];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nextnonemptyq[4096];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> firstnonemptyq;<br/>
<br/>
<a href="CppComment.htm">/*</a> Variable that maintains the stack of recently flipped triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> flipstacker *lastflip;<br/>
<br/>
<a href="CppComment.htm">/*</a> Other variables. <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;REAL xmin, xmax, ymin, ymax;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> x and y bounds. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;REAL xminextreme;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Nonexistent x value used as a flag in sweepline. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> invertices;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of input vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> inelements;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of input triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> insegments;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of input segments. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> holes;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of input holes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> regions;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of input regions. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> undeads;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of input vertices that don't appear in the mesh. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> edges;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of output edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mesh_dim;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Dimension (ought to be 2). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nextras;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of attributes per vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> eextras;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of attributes per triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> hullsize;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of edges in convex hull. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> steinerleft;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of Steiner <a href="CppPointer.htm">point</a>s not yet used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vertexmarkindex;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Index to find boundary marker of a vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vertex2triindex;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Index to find a triangle adjacent to a vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> highorderindex;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Index to find extra nodes <b><a href="CppFor.htm">for</a></b> high-order elements. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> elematt<a href="CppRibi.htm">ribi</a>ndex;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Index to find attributes of a triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> areaboundindex;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Index to find area bound of a triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> checksegments;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Are there segments in the triangulation yet? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> checkquality;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Has quality triangulation begun yet? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> readnodefile;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Has a .node file been read? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> samples;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of random samples <b><a href="CppFor.htm">for</a></b> <a href="CppPointer.htm">point</a> location. <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> incirclecount;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of incircle tests performed. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> <a href="CppCounter.htm">counter</a>clockcount;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of <a href="CppCounter.htm">counter</a>clockwise tests performed. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> orient3dcount;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of 3D orientation tests performed. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> hyperbolacount;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of right-of-hyperbola tests performed. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> circumcentercount;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of circumcenter calculations performed. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> circletopcount;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Number of circle top calculations performed. <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Triangular bounding box vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;vertex infvertex1, infvertex2, infvertex3;<br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppPointer.htm">Pointer</a> to the `triangle' that occupies all of "outer space."&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;triangle *dummytri;<br/>
&nbsp;&nbsp;triangle *dummytribase;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Keep base <a href="CppAddress.htm">address</a> so we can free() it later. <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppPointer.htm">Pointer</a> to the omnipresent subsegment.&nbsp;&nbsp;Referenced by <a href="CppAny.htm">any</a> triangle or&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment that isn't really connected to a subsegment at that&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; location.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;subseg *dummysub;<br/>
&nbsp;&nbsp;subseg *dummysubbase;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Keep base <a href="CppAddress.htm">address</a> so we can free() it later. <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppPointer.htm">Pointer</a> to a recently visited triangle.&nbsp;&nbsp;Improves <a href="CppPointer.htm">point</a> location <b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; proximate vertices are inserted sequentially.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri recenttri;<br/>
<br/>
};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> End of `<b><a href="CppStruct.htm">struct</a></b> mesh'. <a href="CppComment.htm">*/</a><br/>
<br/>
<br/>
<a href="CppComment.htm">/*</a> Data structure <b><a href="CppFor.htm">for</a></b> command line <b><a href="CppSwitch.htm">switch</a></b>es and file names.&nbsp;&nbsp;This structure&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; is used (instead of global variables) to allow reentrancy.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior {<br/>
<br/>
<a href="CppComment.htm">/*</a> Switches <b><a href="CppFor.htm">for</a></b> the triangulator.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; poly: <a href="CppOperatorMinus.htm">-</a>p <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;refine: <a href="CppOperatorMinus.htm">-</a>r <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; quality: <a href="CppOperatorMinus.htm">-</a>q <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp; minangle: minimum angle bound, specified after <a href="CppOperatorMinus.htm">-</a>q <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp; goodangle: cosine squared of minangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp; offconstant: constant used to place off-center Steiner <a href="CppPointer.htm">point</a>s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vararea: <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b> without number.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; fixedarea: <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b> with number.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp; maxarea: maximum area bound, specified after <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; usertest: <a href="CppOperatorMinus.htm">-</a>u <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; regionattrib: <a href="CppOperatorMinus.htm">-</a>A <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;convex: <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; weighted: 1 <b><a href="CppFor.htm">for</a></b> <a href="CppOperatorMinus.htm">-</a>w <b><a href="CppSwitch.htm">switch</a></b>, 2 <b><a href="CppFor.htm">for</a></b> <a href="CppOperatorMinus.htm">-</a>W <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;jettison: <a href="CppOperatorMinus.htm">-</a>j <b><a href="CppSwitch.htm">switch</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; firstnumber: inverse of <a href="CppOperatorMinus.htm">-</a>z <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;All items are numbered starting&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp; from `firstnumber'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edgesout: <a href="CppOperatorMinus.htm">-</a>e <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;voronoi: <a href="CppOperatorMinus.htm">-</a>v <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; neighbors: <a href="CppOperatorMinus.htm">-</a>n <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;geomview: <a href="CppOperatorMinus.htm">-</a>g <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; nobound: <a href="CppOperatorMinus.htm">-</a>B <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;nopolywritten: <a href="CppOperatorMinus.htm">-</a>P <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; nonodewritten: <a href="CppOperatorMinus.htm">-</a>N <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;noelewritten: <a href="CppOperatorMinus.htm">-</a>E <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; noiterationnum: <a href="CppOperatorMinus.htm">-</a>I <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;noholes: <a href="CppOperatorMinus.htm">-</a>O <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; noexact: <a href="CppOperatorMinus.htm">-</a>X <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; order: element order, specified after <a href="CppOperatorMinus.htm">-</a>o <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; nobisect: count of how often <a href="CppOperatorMinus.htm">-</a>Y <b><a href="CppSwitch.htm">switch</a></b> is selected.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; steiner: maximum number of Steiner <a href="CppPointer.htm">point</a>s, specified after <a href="CppOperatorMinus.htm">-</a>S <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; incremental: <a href="CppOperatorMinus.htm">-</a>i <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;sweepline: <a href="CppOperatorMinus.htm">-</a>F <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; dwyer: inverse of <a href="CppOperatorMinus.htm">-</a>l <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; splitseg: <a href="CppOperatorMinus.htm">-</a>s <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; conformdel: <a href="CppOperatorMinus.htm">-</a>D <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;docheck: <a href="CppOperatorMinus.htm">-</a>C <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; quiet: <a href="CppOperatorMinus.htm">-</a>Q <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;verbose: count of how often <a href="CppOperatorMinus.htm">-</a>V <b><a href="CppSwitch.htm">switch</a></b> is selected.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; usesegments: <a href="CppOperatorMinus.htm">-</a>p, <a href="CppOperatorMinus.htm">-</a>r, <a href="CppOperatorMinus.htm">-</a>q, or <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>; determines whether segments are&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp; used at all.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> Read the instructions to find out the meaning of these <b><a href="CppSwitch.htm">switch</a></b>es.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> poly, refine, quality, vararea, fixedarea, usertest;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> regionattrib, convex, weighted, jettison;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> firstnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> edgesout, voronoi, neighbors, geomview;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nobound, nopolywritten, nonodewritten, noelewritten, noiterationnum;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> noholes, noexact, conformdel;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> incremental, sweepline, dwyer;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> splitseg;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> docheck;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> quiet, verbose;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> usesegments;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> order;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nobisect;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> steiner;<br/>
&nbsp;&nbsp;REAL minangle, goodangle, offconstant;<br/>
&nbsp;&nbsp;REAL maxarea;<br/>
<br/>
<a href="CppComment.htm">/*</a> Variables <b><a href="CppFor.htm">for</a></b> file names.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> innodefilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inelefilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inpolyfilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> areafilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> outnodefilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> outelefilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> outpolyfilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> edgefilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> vnodefilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> vedgefilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> neighborfilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> offfilename[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> End of `<b><a href="CppStruct.htm">struct</a></b> behavior'. <a href="CppComment.htm">*/</a><br/>
<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Mesh manipulation primitives.&nbsp;&nbsp;Each triangle contains three <a href="CppPointer.htm">pointer</a>s to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;other triangles, with orientations.&nbsp;&nbsp;Each <a href="CppPointer.htm">pointer</a> <a href="CppPointer.htm">point</a>s not to the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;first byte of a triangle, but to one of the first three bytes of a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle.&nbsp;&nbsp;It is necessary to extract both the triangle itself and the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;orientation.&nbsp;&nbsp;To save <a href="CppMemory.htm">memory</a>, I keep both pieces of information in one&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppPointer.htm">pointer</a>.&nbsp;&nbsp;To <a href="CppMake.htm">make</a> <b><a href="CppThis.htm">this</a></b> possible, I assume that all triangles are aligned <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to four-byte boundaries.&nbsp;&nbsp;The decode() routine below decodes a <a href="CppPointer.htm">pointer</a>,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;extracting an orientation (in the range 0 to 2) and a <a href="CppPointer.htm">pointer</a> to the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;beginning of a triangle.&nbsp;&nbsp;The encode() routine compresses a <a href="CppPointer.htm">pointer</a> to a <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle and an orientation into a single <a href="CppPointer.htm">pointer</a>.&nbsp;&nbsp;My assumptions that&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles are four-byte-aligned and that the `<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>' type is&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> enough to hold a <a href="CppPointer.htm">pointer</a> are two of the few kludges in <b><a href="CppThis.htm">this</a></b> program.<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Subsegments are manipulated similarly.&nbsp;&nbsp;A <a href="CppPointer.htm">pointer</a> to a subsegment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;carries both an <a href="CppAddress.htm">address</a> and an orientation in the range 0 to 1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The other primitives take an oriented triangle or oriented subsegment,&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and <b><a href="CppReturn.htm">return</a></b> an oriented triangle or oriented subsegment or vertex; or&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;they change the connections in the data structure.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Below, triangles and subsegments are denoted by their vertices.&nbsp;&nbsp;The&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle abc has origin (org) a, destination (dest) b, and apex (apex)&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;c.&nbsp;&nbsp;These vertices occur in <a href="CppCounter.htm">counter</a>clockwise order <a href="CppAbout.htm">about</a> the triangle.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The handle abc may simultaneously denote vertex a, edge ab, and triangle <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;abc.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Similarly, the subsegment ab has origin (sorg) a and destination (sdest) <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;b.&nbsp;&nbsp;If ab is thought to be directed upward (with b directly above a),&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;then the handle ab is thought to grasp the right side of ab, and may&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;simultaneously denote vertex a and edge ab.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;An asterisk (*) denotes a vertex whose identity is unknown.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Given <b><a href="CppThis.htm">this</a></b> notation, a partial list of mesh manipulation primitives&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;follows.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;For triangles:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;sym:&nbsp;&nbsp;Find the abutting triangle; same edge.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;sym(abc) <a href="CppOperatorMinus.htm">-</a>&gt; ba*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;lnext:&nbsp;&nbsp;Find the next edge (<a href="CppCounter.htm">counter</a>clockwise) of a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;lnext(abc) <a href="CppOperatorMinus.htm">-</a>&gt; bca&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;lprev:&nbsp;&nbsp;Find the previous edge (clockwise) of a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;lprev(abc) <a href="CppOperatorMinus.htm">-</a>&gt; cab&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;onext:&nbsp;&nbsp;Find the next edge <a href="CppCounter.htm">counter</a>clockwise with the same origin.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;onext(abc) <a href="CppOperatorMinus.htm">-</a>&gt; ac*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;oprev:&nbsp;&nbsp;Find the next edge clockwise with the same origin.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;oprev(abc) <a href="CppOperatorMinus.htm">-</a>&gt; a*b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;dnext:&nbsp;&nbsp;Find the next edge <a href="CppCounter.htm">counter</a>clockwise with the same destination.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;dnext(abc) <a href="CppOperatorMinus.htm">-</a>&gt; *ba&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;dprev:&nbsp;&nbsp;Find the next edge clockwise with the same destination.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;dprev(abc) <a href="CppOperatorMinus.htm">-</a>&gt; cb*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;rnext:&nbsp;&nbsp;Find the next edge (<a href="CppCounter.htm">counter</a>clockwise) of the adjacent triangle.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;rnext(abc) <a href="CppOperatorMinus.htm">-</a>&gt; *a*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;rprev:&nbsp;&nbsp;Find the previous edge (clockwise) of the adjacent triangle.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;rprev(abc) <a href="CppOperatorMinus.htm">-</a>&gt; b**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;org:&nbsp;&nbsp;Origin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest:&nbsp;&nbsp;Destination&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex:&nbsp;&nbsp;Apex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;org(abc) <a href="CppOperatorMinus.htm">-</a>&gt; a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dest(abc) <a href="CppOperatorMinus.htm">-</a>&gt; b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(abc) <a href="CppOperatorMinus.htm">-</a>&gt; c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;bond:&nbsp;&nbsp;Bond two triangles together at the resepective handles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;bond(abc, bad)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;For subsegments:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;ssym:&nbsp;&nbsp;Reverse the orientation of a subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;ssym(ab) <a href="CppOperatorMinus.htm">-</a>&gt; ba&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;spivot:&nbsp;&nbsp;Find adjoining subsegment with the same origin.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;spivot(ab) <a href="CppOperatorMinus.htm">-</a>&gt; a*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;snext:&nbsp;&nbsp;Find next subsegment in sequence.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;snext(ab) <a href="CppOperatorMinus.htm">-</a>&gt; b*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;sorg:&nbsp;&nbsp;Origin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sdest:&nbsp;&nbsp;Destination&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;sorg(ab) <a href="CppOperatorMinus.htm">-</a>&gt; a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sdest(ab) <a href="CppOperatorMinus.htm">-</a>&gt; b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;sbond:&nbsp;&nbsp;Bond two subsegments together at the respective origins.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;sbond(ab, ac)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;For interacting tetrahedra and subfacets:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;tspivot:&nbsp;&nbsp;Find a subsegment abutting a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;tspivot(abc) <a href="CppOperatorMinus.htm">-</a>&gt; ba&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;stpivot:&nbsp;&nbsp;Find a triangle abutting a subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;stpivot(ab) <a href="CppOperatorMinus.htm">-</a>&gt; ba*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;tsbond:&nbsp;&nbsp;Bond a triangle to a subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;tsbond(abc, ba)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Mesh manipulation primitives begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Fast lookup <a href="CppArray.htm">array</a>s to speed some of the mesh manipulation primitives.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppInt.htm">int</a></b> plus1mod3[3] <a href="CppOperatorAssign.htm">=</a> {1, 2, 0};<br/>
<b><a href="CppInt.htm">int</a></b> minus1mod3[3] <a href="CppOperatorAssign.htm">=</a> {2, 0, 1};<br/>
<br/>
<a href="CppComment.htm">/*</a>******** Primitives <b><a href="CppFor.htm">for</a></b> triangles&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> decode() <a href="CppConvert.htm">converts</a> a <a href="CppPointer.htm">pointer</a> to an oriented triangle.&nbsp;&nbsp;The orientation is&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; extracted from the two least significant bits of the <a href="CppPointer.htm">pointer</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> decode(ptr, otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(otri).orient <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) ((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (ptr) &amp; (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) 3l);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(otri).tri <a href="CppOperatorAssign.htm">=</a> (triangle *)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (ptr) ^ (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (otri).orient)<br/>
<br/>
<a href="CppComment.htm">/*</a> encode() compresses an oriented triangle into a single <a href="CppPointer.htm">pointer</a>.&nbsp;&nbsp;It&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; relies on the assumption that all triangles are aligned to four-byte&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; boundaries, so the two least significant bits of (otri).tri are zero.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> encode(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(triangle) ((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (otri).tri | (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (otri).orient)<br/>
<br/>
<a href="CppComment.htm">/*</a> The following handle manipulation primitives are all described by Guibas&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and Stolfi.&nbsp;&nbsp;However, Guibas and Stolfi use an edge-based data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; structure, whereas I use a triangle-based data structure.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> sym() finds the abutting triangle, on the same edge.&nbsp;&nbsp;Note that the edge&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; direction is necessarily reversed, because the handle specified by an&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; oriented triangle is directed <a href="CppCounter.htm">counter</a>clockwise around the triangle.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> sym(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;ptr <a href="CppOperatorAssign.htm">=</a> (otri1).tri[(otri1).orient];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;decode(ptr, otri2);<br/>
<br/>
<a href="CppDefine.htm">#define</a> symself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;ptr <a href="CppOperatorAssign.htm">=</a> (otri).tri[(otri).orient];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;decode(ptr, otri);<br/>
<br/>
<a href="CppComment.htm">/*</a> lnext() finds the next edge (<a href="CppCounter.htm">counter</a>clockwise) of a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> lnext(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(otri2).tri <a href="CppOperatorAssign.htm">=</a> (otri1).tri;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri2).orient <a href="CppOperatorAssign.htm">=</a> plus1mod3[(otri1).orient]<br/>
<br/>
<a href="CppDefine.htm">#define</a> lnextself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(otri).orient <a href="CppOperatorAssign.htm">=</a> plus1mod3[(otri).orient]<br/>
<br/>
<a href="CppComment.htm">/*</a> lprev() finds the previous edge (clockwise) of a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> lprev(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(otri2).tri <a href="CppOperatorAssign.htm">=</a> (otri1).tri;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri2).orient <a href="CppOperatorAssign.htm">=</a> minus1mod3[(otri1).orient]<br/>
<br/>
<a href="CppDefine.htm">#define</a> lprevself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(otri).orient <a href="CppOperatorAssign.htm">=</a> minus1mod3[(otri).orient]<br/>
<br/>
<a href="CppComment.htm">/*</a> onext() spins <a href="CppCounter.htm">counter</a>clockwise around a vertex; that is, it finds the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; next edge with the same origin in the <a href="CppCounter.htm">counter</a>clockwise direction.&nbsp;&nbsp;This <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edge is part of a different triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> onext(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;lprev(otri1, otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;symself(otri2);<br/>
<br/>
<a href="CppDefine.htm">#define</a> onextself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;lprevself(otri);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;symself(otri);<br/>
<br/>
<a href="CppComment.htm">/*</a> oprev() spins clockwise around a vertex; that is, it finds the next edge&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; with the same origin in the clockwise direction.&nbsp;&nbsp;This edge is part of&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; a different triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> oprev(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;sym(otri1, otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;lnextself(otri2);<br/>
<br/>
<a href="CppDefine.htm">#define</a> oprevself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;symself(otri);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;lnextself(otri);<br/>
<br/>
<a href="CppComment.htm">/*</a> dnext() spins <a href="CppCounter.htm">counter</a>clockwise around a vertex; that is, it finds the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; next edge with the same destination in the <a href="CppCounter.htm">counter</a>clockwise direction.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; This edge is part of a different triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> dnext(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;sym(otri1, otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;lprevself(otri2);<br/>
<br/>
<a href="CppDefine.htm">#define</a> dnextself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;symself(otri);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;lprevself(otri);<br/>
<br/>
<a href="CppComment.htm">/*</a> dprev() spins clockwise around a vertex; that is, it finds the next edge&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; with the same destination in the clockwise direction.&nbsp;&nbsp;This edge is&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; part of a different triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> dprev(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;lnext(otri1, otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;symself(otri2);<br/>
<br/>
<a href="CppDefine.htm">#define</a> dprevself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;lnextself(otri);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;symself(otri);<br/>
<br/>
<a href="CppComment.htm">/*</a> rnext() moves one edge <a href="CppCounter.htm">counter</a>clockwise <a href="CppAbout.htm">about</a> the adjacent triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; (It's best understood by reading Guibas and Stolfi.&nbsp;&nbsp;It involves&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; changing triangles twice.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> rnext(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;sym(otri1, otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;lnextself(otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;symself(otri2);<br/>
<br/>
<a href="CppDefine.htm">#define</a> rnextself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;symself(otri);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;lnextself(otri);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;symself(otri);<br/>
<br/>
<a href="CppComment.htm">/*</a> rprev() moves one edge clockwise <a href="CppAbout.htm">about</a> the adjacent triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; (It's best understood by reading Guibas and Stolfi.&nbsp;&nbsp;It involves&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; changing triangles twice.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> rprev(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;sym(otri1, otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;lprevself(otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;symself(otri2);<br/>
<br/>
<a href="CppDefine.htm">#define</a> rprevself(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;symself(otri);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;lprevself(otri);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;symself(otri);<br/>
<br/>
<a href="CppComment.htm">/*</a> These primitives determine or set the origin, destination, or apex of a&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> org(otri, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;vertexptr <a href="CppOperatorAssign.htm">=</a> (vertex) (otri).tri[plus1mod3[(otri).orient] <a href="CppOperatorPlus.htm">+</a> 3]<br/>
<br/>
<a href="CppDefine.htm">#define</a> dest(otri, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;vertexptr <a href="CppOperatorAssign.htm">=</a> (vertex) (otri).tri[minus1mod3[(otri).orient] <a href="CppOperatorPlus.htm">+</a> 3]<br/>
<br/>
<a href="CppDefine.htm">#define</a> apex(otri, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;vertexptr <a href="CppOperatorAssign.htm">=</a> (vertex) (otri).tri[(otri).orient <a href="CppOperatorPlus.htm">+</a> 3]<br/>
<br/>
<a href="CppDefine.htm">#define</a> setorg(otri, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(otri).tri[plus1mod3[(otri).orient] <a href="CppOperatorPlus.htm">+</a> 3] <a href="CppOperatorAssign.htm">=</a> (triangle) vertexptr<br/>
<br/>
<a href="CppDefine.htm">#define</a> setdest(otri, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri).tri[minus1mod3[(otri).orient] <a href="CppOperatorPlus.htm">+</a> 3] <a href="CppOperatorAssign.htm">=</a> (triangle) vertexptr<br/>
<br/>
<a href="CppDefine.htm">#define</a> setapex(otri, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri).tri[(otri).orient <a href="CppOperatorPlus.htm">+</a> 3] <a href="CppOperatorAssign.htm">=</a> (triangle) vertexptr<br/>
<br/>
<a href="CppComment.htm">/*</a> Bond two triangles together.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> bond(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri1).tri[(otri1).orient] <a href="CppOperatorAssign.htm">=</a> encode(otri2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri2).tri[(otri2).orient] <a href="CppOperatorAssign.htm">=</a> encode(otri1)<br/>
<br/>
<a href="CppComment.htm">/*</a> Dissolve a bond (from one side).&nbsp;&nbsp;Note that the other triangle will still <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; think it's connected to <b><a href="CppThis.htm">this</a></b> triangle.&nbsp;&nbsp;Usually, however, the other&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle is being deleted entirely, or bonded to another triangle, so&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; it doesn't matter.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> dissolve(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri).tri[(otri).orient] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummytri<br/>
<br/>
<a href="CppComment.htm">/*</a> Copy an oriented triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> otricopy(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri2).tri <a href="CppOperatorAssign.htm">=</a> (otri1).tri;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri2).orient <a href="CppOperatorAssign.htm">=</a> (otri1).orient<br/>
<br/>
<a href="CppComment.htm">/*</a> Test <b><a href="CppFor.htm">for</a></b> equality of oriented triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> otriequal(otri1, otri2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(((otri1).tri <a href="CppOperatorEqual.htm">==</a> (otri2).tri) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp; ((otri1).orient <a href="CppOperatorEqual.htm">==</a> (otri2).orient))<br/>
<br/>
<a href="CppComment.htm">/*</a> Primitives to infect or cure a triangle with the virus.&nbsp;&nbsp;These rely on&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the assumption that all subsegments are aligned to four-byte boundaries.<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> infect(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri).tri[6] <a href="CppOperatorAssign.htm">=</a> (triangle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (otri).tri[6] | (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) 2l)<br/>
<br/>
<a href="CppDefine.htm">#define</a> uninfect(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri).tri[6] <a href="CppOperatorAssign.htm">=</a> (triangle)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (otri).tri[6] &amp; ~ (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) 2l)<br/>
<br/>
<a href="CppComment.htm">/*</a> Test a triangle <b><a href="CppFor.htm">for</a></b> viral infection.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> infected(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (otri).tri[6] &amp; (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) 2l) <a href="CppOperatorNotEqual.htm">!=</a> 0l)<br/>
<br/>
<a href="CppComment.htm">/*</a> Check or set a triangle's attributes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> elemattribute(otri, attnum)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;((REAL *) (otri).tri)[m-&gt;elematt<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorPlus.htm">+</a> (attnum)]<br/>
<br/>
<a href="CppDefine.htm">#define</a> setelemattribute(otri, attnum, value)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;((REAL *) (otri).tri)[m-&gt;elematt<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorPlus.htm">+</a> (attnum)] <a href="CppOperatorAssign.htm">=</a> value<br/>
<br/>
<a href="CppComment.htm">/*</a> Check or set a triangle's maximum area bound.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> areabound(otri)&nbsp;&nbsp;((REAL *) (otri).tri)[m-&gt;areaboundindex]<br/>
<br/>
<a href="CppDefine.htm">#define</a> setareabound(otri, value)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;((REAL *) (otri).tri)[m-&gt;areaboundindex] <a href="CppOperatorAssign.htm">=</a> value<br/>
<br/>
<a href="CppComment.htm">/*</a> Check or set a triangle's deallocation.&nbsp;&nbsp;Its second <a href="CppPointer.htm">pointer</a> is set to&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppNULL.htm">NULL</a> to indicate that it is not allocated.&nbsp;&nbsp;(Its first <a href="CppPointer.htm">pointer</a> is used&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> the stack of dead items.)&nbsp;&nbsp;Its fourth <a href="CppPointer.htm">pointer</a> (its first vertex)&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; is set to <a href="CppNULL.htm">NULL</a> in <b><a href="CppCase.htm">case</a></b> a `badtriang' structure <a href="CppPointer.htm">point</a>s to it.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> deadtri(tria)&nbsp;&nbsp;((tria)[1] <a href="CppOperatorEqual.htm">==</a> (triangle) <a href="CppNULL.htm">NULL</a>)<br/>
<br/>
<a href="CppDefine.htm">#define</a> killtri(tria)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(tria)[1] <a href="CppOperatorAssign.htm">=</a> (triangle) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(tria)[3] <a href="CppOperatorAssign.htm">=</a> (triangle) <a href="CppNULL.htm">NULL</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Primitives <b><a href="CppFor.htm">for</a></b> subsegments&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> sdecode() <a href="CppConvert.htm">converts</a> a <a href="CppPointer.htm">pointer</a> to an oriented subsegment.&nbsp;&nbsp;The orientation&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; is extracted from the least significant bit of the <a href="CppPointer.htm">pointer</a>.&nbsp;&nbsp;The two&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; least significant bits (one <b><a href="CppFor.htm">for</a></b> orientation, one <b><a href="CppFor.htm">for</a></b> viral infection)&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; are masked out to produce the real <a href="CppPointer.htm">pointer</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> sdecode(sptr, osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(osub).ssorient <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) ((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (sptr) &amp; (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) 1l);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub).ss <a href="CppOperatorAssign.htm">=</a> (subseg *)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (sptr) &amp; ~ (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) 3l)<br/>
<br/>
<a href="CppComment.htm">/*</a> sencode() compresses an oriented subsegment into a single <a href="CppPointer.htm">pointer</a>.&nbsp;&nbsp;It&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; relies on the assumption that all subsegments are aligned to two-byte&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; boundaries, so the least significant bit of (osub).ss is zero.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> sencode(osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(subseg) ((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (osub).ss | (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (osub).ssorient)<br/>
<br/>
<a href="CppComment.htm">/*</a> ssym() toggles the orientation of a subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> ssym(osub1, osub2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub2).ss <a href="CppOperatorAssign.htm">=</a> (osub1).ss;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub2).ssorient <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorMinus.htm">-</a> (osub1).ssorient<br/>
<br/>
<a href="CppDefine.htm">#define</a> ssymself(osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub).ssorient <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorMinus.htm">-</a> (osub).ssorient<br/>
<br/>
<a href="CppComment.htm">/*</a> spivot() finds the other subsegment (from the same segment) that shares&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the same origin.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> spivot(osub1, osub2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;sptr <a href="CppOperatorAssign.htm">=</a> (osub1).ss[(osub1).ssorient];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;sdecode(sptr, osub2)<br/>
<br/>
<a href="CppDefine.htm">#define</a> spivotself(osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;sptr <a href="CppOperatorAssign.htm">=</a> (osub).ss[(osub).ssorient];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;sdecode(sptr, osub)<br/>
<br/>
<a href="CppComment.htm">/*</a> snext() finds the next subsegment (from the same segment) in sequence;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; one whose origin is the input subsegment's destination.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> snext(osub1, osub2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;sptr <a href="CppOperatorAssign.htm">=</a> (osub1).ss[1 <a href="CppOperatorMinus.htm">-</a> (osub1).ssorient];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;sdecode(sptr, osub2)<br/>
<br/>
<a href="CppDefine.htm">#define</a> snextself(osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;sptr <a href="CppOperatorAssign.htm">=</a> (osub).ss[1 <a href="CppOperatorMinus.htm">-</a> (osub).ssorient];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;sdecode(sptr, osub)<br/>
<br/>
<a href="CppComment.htm">/*</a> These primitives determine or set the origin or destination of a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment or the segment that includes it.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> sorg(osub, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;vertexptr <a href="CppOperatorAssign.htm">=</a> (vertex) (osub).ss[2 <a href="CppOperatorPlus.htm">+</a> (osub).ssorient]<br/>
<br/>
<a href="CppDefine.htm">#define</a> sdest(osub, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;vertexptr <a href="CppOperatorAssign.htm">=</a> (vertex) (osub).ss[3 <a href="CppOperatorMinus.htm">-</a> (osub).ssorient]<br/>
<br/>
<a href="CppDefine.htm">#define</a> setsorg(osub, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub).ss[2 <a href="CppOperatorPlus.htm">+</a> (osub).ssorient] <a href="CppOperatorAssign.htm">=</a> (subseg) vertexptr<br/>
<br/>
<a href="CppDefine.htm">#define</a> setsdest(osub, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(osub).ss[3 <a href="CppOperatorMinus.htm">-</a> (osub).ssorient] <a href="CppOperatorAssign.htm">=</a> (subseg) vertexptr<br/>
<br/>
<a href="CppDefine.htm">#define</a> segorg(osub, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;vertexptr <a href="CppOperatorAssign.htm">=</a> (vertex) (osub).ss[4 <a href="CppOperatorPlus.htm">+</a> (osub).ssorient]<br/>
<br/>
<a href="CppDefine.htm">#define</a> segdest(osub, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;vertexptr <a href="CppOperatorAssign.htm">=</a> (vertex) (osub).ss[5 <a href="CppOperatorMinus.htm">-</a> (osub).ssorient]<br/>
<br/>
<a href="CppDefine.htm">#define</a> setsegorg(osub, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub).ss[4 <a href="CppOperatorPlus.htm">+</a> (osub).ssorient] <a href="CppOperatorAssign.htm">=</a> (subseg) vertexptr<br/>
<br/>
<a href="CppDefine.htm">#define</a> setsegdest(osub, vertexptr)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(osub).ss[5 <a href="CppOperatorMinus.htm">-</a> (osub).ssorient] <a href="CppOperatorAssign.htm">=</a> (subseg) vertexptr<br/>
<br/>
<a href="CppComment.htm">/*</a> These primitives read or set a boundary marker.&nbsp;&nbsp;Boundary markers are&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; used to hold user-defined tags <b><a href="CppFor.htm">for</a></b> setting boundary conditions in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; finite element solvers.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> mark(osub)&nbsp;&nbsp;(* (<b><a href="CppInt.htm">int</a></b> *) ((osub).ss <a href="CppOperatorPlus.htm">+</a> 8))<br/>
<br/>
<a href="CppDefine.htm">#define</a> setmark(osub, value)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;* (<b><a href="CppInt.htm">int</a></b> *) ((osub).ss <a href="CppOperatorPlus.htm">+</a> 8) <a href="CppOperatorAssign.htm">=</a> value<br/>
<br/>
<a href="CppComment.htm">/*</a> Bond two subsegments together.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> sbond(osub1, osub2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(osub1).ss[(osub1).ssorient] <a href="CppOperatorAssign.htm">=</a> sencode(osub2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub2).ss[(osub2).ssorient] <a href="CppOperatorAssign.htm">=</a> sencode(osub1)<br/>
<br/>
<a href="CppComment.htm">/*</a> Dissolve a subsegment bond (from one side).&nbsp;&nbsp;Note that the other&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment will still think it's connected to <b><a href="CppThis.htm">this</a></b> subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> sdissolve(osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(osub).ss[(osub).ssorient] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummysub<br/>
<br/>
<a href="CppComment.htm">/*</a> Copy a subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> subsegcopy(osub1, osub2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub2).ss <a href="CppOperatorAssign.htm">=</a> (osub1).ss;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub2).ssorient <a href="CppOperatorAssign.htm">=</a> (osub1).ssorient<br/>
<br/>
<a href="CppComment.htm">/*</a> Test <b><a href="CppFor.htm">for</a></b> equality of subsegments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> subsegequal(osub1, osub2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(((osub1).ss <a href="CppOperatorEqual.htm">==</a> (osub2).ss) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp; ((osub1).ssorient <a href="CppOperatorEqual.htm">==</a> (osub2).ssorient))<br/>
<br/>
<a href="CppComment.htm">/*</a> Check or set a subsegment's deallocation.&nbsp;&nbsp;Its second <a href="CppPointer.htm">pointer</a> is set to&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppNULL.htm">NULL</a> to indicate that it is not allocated.&nbsp;&nbsp;(Its first <a href="CppPointer.htm">pointer</a> is used&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <b><a href="CppFor.htm">for</a></b> the stack of dead items.)&nbsp;&nbsp;Its third <a href="CppPointer.htm">pointer</a> (its first vertex)&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; is set to <a href="CppNULL.htm">NULL</a> in <b><a href="CppCase.htm">case</a></b> a `badsubseg' structure <a href="CppPointer.htm">point</a>s to it.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> deadsubseg(sub)&nbsp;&nbsp;((sub)[1] <a href="CppOperatorEqual.htm">==</a> (subseg) <a href="CppNULL.htm">NULL</a>)<br/>
<br/>
<a href="CppDefine.htm">#define</a> killsubseg(sub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(sub)[1] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(sub)[2] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Primitives <b><a href="CppFor.htm">for</a></b> interacting triangles and subsegments&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> tspivot() finds a subsegment abutting a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> tspivot(otri, osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;sptr <a href="CppOperatorAssign.htm">=</a> (subseg) (otri).tri[6 <a href="CppOperatorPlus.htm">+</a> (otri).orient];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;sdecode(sptr, osub)<br/>
<br/>
<a href="CppComment.htm">/*</a> stpivot() finds a triangle abutting a subsegment.&nbsp;&nbsp;It requires that the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; variable `ptr' of type `triangle' be defined.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> stpivot(osub, otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;ptr <a href="CppOperatorAssign.htm">=</a> (triangle) (osub).ss[6 <a href="CppOperatorPlus.htm">+</a> (osub).ssorient];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;decode(ptr, otri)<br/>
<br/>
<a href="CppComment.htm">/*</a> Bond a triangle to a subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> tsbond(otri, osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri).tri[6 <a href="CppOperatorPlus.htm">+</a> (otri).orient] <a href="CppOperatorAssign.htm">=</a> (triangle) sencode(osub);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;(osub).ss[6 <a href="CppOperatorPlus.htm">+</a> (osub).ssorient] <a href="CppOperatorAssign.htm">=</a> (subseg) encode(otri)<br/>
<br/>
<a href="CppComment.htm">/*</a> Dissolve a bond (from the triangle side).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> tsdissolve(otri)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(otri).tri[6 <a href="CppOperatorPlus.htm">+</a> (otri).orient] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummysub<br/>
<br/>
<a href="CppComment.htm">/*</a> Dissolve a bond (from the subsegment side).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> <a href="CppStd.htm">std</a>issolve(osub)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;(osub).ss[6 <a href="CppOperatorPlus.htm">+</a> (osub).ssorient] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummytri<br/>
<br/>
<a href="CppComment.htm">/*</a>******** Primitives <b><a href="CppFor.htm">for</a></b> vertices&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> vertexmark(vx)&nbsp;&nbsp;((<b><a href="CppInt.htm">int</a></b> *) (vx))[m-&gt;vertexmarkindex]<br/>
<br/>
<a href="CppDefine.htm">#define</a> setvertexmark(vx, value)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;((<b><a href="CppInt.htm">int</a></b> *) (vx))[m-&gt;vertexmarkindex] <a href="CppOperatorAssign.htm">=</a> value<br/>
<br/>
<a href="CppDefine.htm">#define</a> vertextype(vx)&nbsp;&nbsp;((<b><a href="CppInt.htm">int</a></b> *) (vx))[m-&gt;vertexmarkindex <a href="CppOperatorPlus.htm">+</a> 1]<br/>
<br/>
<a href="CppDefine.htm">#define</a> setvertextype(vx, value)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;((<b><a href="CppInt.htm">int</a></b> *) (vx))[m-&gt;vertexmarkindex <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorAssign.htm">=</a> value<br/>
<br/>
<a href="CppDefine.htm">#define</a> vertex2tri(vx)&nbsp;&nbsp;((triangle *) (vx))[m-&gt;vertex2triindex]<br/>
<br/>
<a href="CppDefine.htm">#define</a> setvertex2tri(vx, value)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;((triangle *) (vx))[m-&gt;vertex2triindex] <a href="CppOperatorAssign.htm">=</a> value<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Mesh manipulation primitives end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** User-defined triangle evaluation routine begins here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triunsuitable()&nbsp;&nbsp; Determine <b><a href="CppIf.htm">if</a></b> a triangle is unsuitable, and thus must&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be further refined.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;You may write your own procedure that decides whether or not a selected&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle is too big (and needs to be refined).&nbsp;&nbsp;There are two ways to <b><a href="CppDo.htm">do</a></b> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(1)&nbsp;&nbsp;Modify the procedure `triunsuitable' below, then re<a href="CppCompile.htm">compile</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(2)&nbsp;&nbsp;Define the symbol EXTERNAL_TEST (either by adding the <a href="CppDefinition.htm">definition</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to <b><a href="CppThis.htm">this</a></b> file, or by <b><a href="CppUsing.htm">using</a></b> the appropriate <a href="CppCompiler.htm">compiler</a> <b><a href="CppSwitch.htm">switch</a></b>).&nbsp;&nbsp;This way,&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;you can <a href="CppCompile.htm">compile</a> triangle.c separately from your test.&nbsp;&nbsp;Write your own&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`triunsuitable' procedure in a separate C file (<b><a href="CppUsing.htm">using</a></b> the same prototype <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;as below).&nbsp;&nbsp;<a href="CppCompile.htm">Compile</a> it and <a href="CppLink.htm">link</a> the object code with triangle.o.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This procedure <a href="CppReturn.htm">returns</a> 1 <b><a href="CppIf.htm">if</a></b> the triangle is too large and should be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;refined; 0 otherwise.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> EXTERNAL_TEST<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> triunsuitable();<br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not EXTERNAL_TEST <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppInt.htm">int</a></b> triunsuitable(vertex triorg, vertex tridest, vertex triapex, REAL area)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> triunsuitable(triorg, tridest, triapex, area)<br/>
vertex triorg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The triangle's origin vertex. <a href="CppComment.htm">*/</a><br/>
vertex tridest;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The triangle's destination vertex. <a href="CppComment.htm">*/</a><br/>
vertex triapex;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> The triangle's apex vertex. <a href="CppComment.htm">*/</a><br/>
REAL area;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The area of the triangle. <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL dxoa, dxda, dxod;<br/>
&nbsp;&nbsp;REAL dyoa, dyda, dyod;<br/>
&nbsp;&nbsp;REAL oalen, dalen, odlen;<br/>
&nbsp;&nbsp;REAL maxlen;<br/>
<br/>
&nbsp;&nbsp;dxoa <a href="CppOperatorAssign.htm">=</a> triorg[0] <a href="CppOperatorMinus.htm">-</a> triapex[0];<br/>
&nbsp;&nbsp;dyoa <a href="CppOperatorAssign.htm">=</a> triorg[1] <a href="CppOperatorMinus.htm">-</a> triapex[1];<br/>
&nbsp;&nbsp;dxda <a href="CppOperatorAssign.htm">=</a> tridest[0] <a href="CppOperatorMinus.htm">-</a> triapex[0];<br/>
&nbsp;&nbsp;dyda <a href="CppOperatorAssign.htm">=</a> tridest[1] <a href="CppOperatorMinus.htm">-</a> triapex[1];<br/>
&nbsp;&nbsp;dxod <a href="CppOperatorAssign.htm">=</a> triorg[0] <a href="CppOperatorMinus.htm">-</a> tridest[0];<br/>
&nbsp;&nbsp;dyod <a href="CppOperatorAssign.htm">=</a> triorg[1] <a href="CppOperatorMinus.htm">-</a> tridest[1];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the squares of the lengths of the triangle's three edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;oalen <a href="CppOperatorAssign.htm">=</a> dxoa * dxoa <a href="CppOperatorPlus.htm">+</a> dyoa * dyoa;<br/>
&nbsp;&nbsp;dalen <a href="CppOperatorAssign.htm">=</a> dxda * dxda <a href="CppOperatorPlus.htm">+</a> dyda * dyda;<br/>
&nbsp;&nbsp;odlen <a href="CppOperatorAssign.htm">=</a> dxod * dxod <a href="CppOperatorPlus.htm">+</a> dyod * dyod;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the square of the length of the longest edge. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;maxlen <a href="CppOperatorAssign.htm">=</a> (dalen &gt; oalen) ? dalen : oalen;<br/>
&nbsp;&nbsp;maxlen <a href="CppOperatorAssign.htm">=</a> (odlen &gt; maxlen) ? odlen : maxlen;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (maxlen &gt; 0.05 * (triorg[0] * triorg[0] <a href="CppOperatorPlus.htm">+</a> triorg[1] * triorg[1]) <a href="CppOperatorPlus.htm">+</a> 0.02) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not EXTERNAL_TEST <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** User-defined triangle evaluation routine ends here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** <a href="CppMemory.htm">Memory</a> allocation and program exit wrappers begin here&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> triexit(<b><a href="CppInt.htm">int</a></b> status)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> triexit(status)<br/>
<b><a href="CppInt.htm">int</a></b> status;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
{<br/>
&nbsp;&nbsp;exit(status);<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
VOID *trimalloc(<b><a href="CppInt.htm">int</a></b> size)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
VOID *trimalloc(size)<br/>
<b><a href="CppInt.htm">int</a></b> size;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;VOID *memptr;<br/>
<br/>
&nbsp;&nbsp;memptr <a href="CppOperatorAssign.htm">=</a> (VOID *) malloc((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>) size);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (memptr <a href="CppOperatorEqual.htm">==</a> (VOID *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Out of <a href="CppMemory.htm">memory</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> TODO_206<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Triangle: out of <a href="CppMemory.htm">memory</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(memptr);<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> trifree(VOID *memptr)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> trifree(memptr)<br/>
VOID *memptr;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;free(memptr);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** <a href="CppMemory.htm">Memory</a> allocation and program exit wrappers end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** User interaction routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;syntax()&nbsp;&nbsp; Print list of command line <b><a href="CppSwitch.htm">switch</a></b>es.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> syntax()<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> CDT_ONLY<br/>
<a href="CppIfdef.htm">#ifdef</a> REDUCED<br/>
&nbsp;&nbsp;printf("triangle [-pAcjevngBPNEIOXzo_lQVh] input_file\n");<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf("triangle [-pAcjevngBPNEIOXzo_iFlCQVh] input_file\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> REDUCED<br/>
&nbsp;&nbsp;printf("triangle [-prq__a__uAcDjevngBPNEIOXzo_YS__lQVh] input_file\n");<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf("triangle [-prq__a__uAcDjevngBPNEIOXzo_YS__iFlsCQVh] input_file\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>p&nbsp;&nbsp;Triangulates a Planar Straight Line Graph (.poly file).\n");<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>r&nbsp;&nbsp;Refines a previously generated mesh.\n");<br/>
&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>q&nbsp;&nbsp;Quality mesh generation.&nbsp;&nbsp;A minimum angle may be specified.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>a&nbsp;&nbsp;Applies a maximum triangle area constraint.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>u&nbsp;&nbsp;Applies a user-defined triangle constraint.\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>A&nbsp;&nbsp;Applies attributes to identify triangles in certain regions.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>c&nbsp;&nbsp;Encloses the convex hull with segments.\n");<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>D&nbsp;&nbsp;Conforming Delaunay:&nbsp;&nbsp;all triangles are truly Delaunay.\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>w&nbsp;&nbsp;Weighted Delaunay triangulation.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>W&nbsp;&nbsp;Regular triangulation (lower hull of a height field).\n");<br/>
<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>j&nbsp;&nbsp;Jettison unused vertices from output .node file.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>e&nbsp;&nbsp;Generates an edge list.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>v&nbsp;&nbsp;Generates a Voronoi diagram.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>n&nbsp;&nbsp;Generates a list of triangle neighbors.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>g&nbsp;&nbsp;Generates an .off file <b><a href="CppFor.htm">for</a></b> Geomview.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>B&nbsp;&nbsp;Suppresses output of boundary information.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>P&nbsp;&nbsp;Suppresses output of .poly file.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>N&nbsp;&nbsp;Suppresses output of .node file.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>E&nbsp;&nbsp;Suppresses output of .ele file.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>I&nbsp;&nbsp;Suppresses mesh iteration numbers.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>O&nbsp;&nbsp;Ignores holes in .poly file.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>X&nbsp;&nbsp;Suppresses use of exact arithmetic.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>z&nbsp;&nbsp;Numbers all items starting from zero (rather than one).\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>o2 Generates second-order subparametric elements.\n");<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>Y&nbsp;&nbsp;Suppresses boundary segment splitting.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>S&nbsp;&nbsp;Specifies maximum number of added Steiner <a href="CppPointer.htm">point</a>s.\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>i&nbsp;&nbsp;Uses incremental <a href="CppMemberFunction.htm">member function</a>, rather than divide-and-conquer.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>F&nbsp;&nbsp;Uses Fortune's sweepline <a href="CppAlgorithm.htm">algorithm</a>, rather than d-and-c.\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>l&nbsp;&nbsp;Uses vertical cuts only, rather than alternating cuts.\n");<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>s&nbsp;&nbsp;Force segments into mesh by splitting (instead of <b><a href="CppUsing.htm">using</a></b> CDT).\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>C&nbsp;&nbsp;Check consistency of <b><a href="CppFinal.htm">final</a></b> mesh.\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>Q&nbsp;&nbsp;Quiet:&nbsp;&nbsp;No terminal output except errors.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>V&nbsp;&nbsp;Verbose:&nbsp;&nbsp;Detailed information on what I'm doing.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>h&nbsp;&nbsp;Help:&nbsp;&nbsp;Detailed instructions <b><a href="CppFor.htm">for</a></b> Triangle.\n");<br/>
&nbsp;&nbsp;triexit(0);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;info()&nbsp;&nbsp; Print out complete instructions.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> info()<br/>
{<br/>
&nbsp;&nbsp;printf("Triangle\n");<br/>
&nbsp;&nbsp;printf(<br/>
"A Two-Dimensional Quality Mesh Generator and Delaunay Triangulator.\n");<br/>
&nbsp;&nbsp;printf("<a href="CppVersion.htm">Version</a> 1.6\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Copyright 1993, 1995, 1997, 1998, 2002, 2005 Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk\n");<br/>
&nbsp;&nbsp;printf("2360 Woolsey #H <a href="CppOperatorDivide.htm">/</a> Berkeley, California 94705-1927\n");<br/>
&nbsp;&nbsp;printf("<a href="CppBug.htm">Bug</a>s/comments to jrs@cs.berkeley.edu\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Created as part of the Quake project (<a href="Tools.htm">tools</a> <b><a href="CppFor.htm">for</a></b> earthquake simulation).\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Supported in part by NSF Grant CMS-9318163 and an NSERC 1967 Scholarship.\n");<br/>
&nbsp;&nbsp;printf("There is no warranty whatsoever.&nbsp;&nbsp;Use at your own risk.\n");<br/>
<a href="CppIfdef.htm">#ifdef</a> SINGLE<br/>
&nbsp;&nbsp;printf("This executable is <a href="CppCompile.htm">compile</a>d <b><a href="CppFor.htm">for</a></b> single precision arithmetic.\n\n\n");<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf("This executable is <a href="CppCompile.htm">compile</a>d <b><a href="CppFor.htm">for</a></b> <b><a href="CppDouble.htm">double</a></b> precision arithmetic.\n\n\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;printf(<br/>
"Triangle generates exact Delaunay triangulations, constrained Delaunay\n");<br/>
&nbsp;&nbsp;printf(<br/>
"triangulations, conforming Delaunay triangulations, Voronoi diagrams, and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"high-quality triangular meshes.&nbsp;&nbsp;The latter can be generated with no small\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"or large angles, and are thus suitable <b><a href="CppFor.htm">for</a></b> finite element analysis.&nbsp;&nbsp;If no\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"command line <b><a href="CppSwitch.htm">switch</a></b> is specified, your .node input file is read, and the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Delaunay triangulation is <b><a href="CppReturn.htm">return</a></b>ed in .node and .ele output files.&nbsp;&nbsp;The\n");<br/>
&nbsp;&nbsp;printf("command syntax is:\n\n");<br/>
&nbsp;&nbsp;printf("triangle [-prq__a__uAcDjevngBPNEIOXzo_YS__iFlsCQVh] input_file\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Underscores indicate that numbers may optionally follow certain <b><a href="CppSwitch.htm">switch</a></b>es.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"Do not leave <a href="CppAny.htm">any</a> space between a <b><a href="CppSwitch.htm">switch</a></b> and its numeric parameter.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"input_file must be a file with extension .node, or extension .poly <b><a href="CppIf.htm">if</a></b> the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"-p <b><a href="CppSwitch.htm">switch</a></b> is used.&nbsp;&nbsp;If <a href="CppOperatorMinus.htm">-</a>r is used, you must supply .node and .ele files,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"and possibly a .poly file and an .area file as well.&nbsp;&nbsp;The formats of these\n"<br/>
);<br/>
&nbsp;&nbsp;printf("files are described below.\n\n");<br/>
&nbsp;&nbsp;printf("Command Line Switches:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>p&nbsp;&nbsp;Reads a Planar Straight Line Graph (.poly file), which can specify\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices, segments, holes, regional attributes, and regional area\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraints.&nbsp;&nbsp;Generates a constrained Delaunay triangulation (CDT)\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fitting the input; or, <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>s, <a href="CppOperatorMinus.htm">-</a>q, <a href="CppOperatorMinus.htm">-</a>a, or <a href="CppOperatorMinus.htm">-</a>u is used, a conforming\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constrained Delaunay triangulation (CCDT).&nbsp;&nbsp;If you want a truly\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delaunay (not just constrained Delaunay) triangulation, use <a href="CppOperatorMinus.htm">-</a>D as\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;well.&nbsp;&nbsp;When <a href="CppOperatorMinus.htm">-</a>p is not used, Triangle reads a .node file by <b><a href="CppDefault.htm">default</a></b>.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>r&nbsp;&nbsp;Refines a previously generated mesh.&nbsp;&nbsp;The mesh is read from a .node\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file and an .ele file.&nbsp;&nbsp;If <a href="CppOperatorMinus.htm">-</a>p is also used, a .poly file is read\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and used to constrain segments in the mesh.&nbsp;&nbsp;If <a href="CppOperatorMinus.htm">-</a>a is also used\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(with no number following), an .area file is read and used to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;impose area constraints on the mesh.&nbsp;&nbsp;Further details on refinement\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appear below.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>q&nbsp;&nbsp;Quality mesh generation by Delaunay refinement (a hybrid of Paul\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chew's and Jim Ruppert's <a href="CppAlgorithm.htm">algorithm</a>s).&nbsp;&nbsp;<a href="CppAdd.htm">Add</a>s vertices to the mesh to\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensure that all angles are between 20 and 140 degrees.&nbsp;&nbsp;An\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alternative bound on the minimum angle, replacing 20 degrees, may\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be specified after the `q'.&nbsp;&nbsp;The specified angle may include a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decimal <a href="CppPointer.htm">point</a>, but not exponential notation.&nbsp;&nbsp;Note that a bound of\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta degrees on the smallest angle also implies a bound of\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(180 <a href="CppOperatorMinus.htm">-</a> 2 theta) on the largest angle.&nbsp;&nbsp;If the minimum angle is 28.6\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degrees or smaller, Triangle is mathematically guaranteed to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;terminate (assuming infinite precision arithmetic<a href="CppOperatorDecrement.htm">--</a>Triangle may\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail to terminate <b><a href="CppIf.htm">if</a></b> you run out of precision).&nbsp;&nbsp;In practice,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Triangle often succeeds <b><a href="CppFor.htm">for</a></b> minimum angles up to 34 degrees.&nbsp;&nbsp;For\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;some meshes, however, you might need to reduce the minimum angle to\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avoid problems associated with insufficient floating-<a href="CppPointer.htm">point</a>\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;precision.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>a&nbsp;&nbsp;Imposes a maximum triangle area.&nbsp;&nbsp;If a number follows the `a', no\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangle is generated whose area is larger than that number.&nbsp;&nbsp;If no\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number is specified, an .area file (<b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>r is used) or .poly file\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>r is not used) specifies a set of maximum area constraints.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An .area file contains a separate area constraint <b><a href="CppFor.htm">for</a></b> each\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangle, and is useful <b><a href="CppFor.htm">for</a></b> refining a finite element mesh based on\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a posteriori error estimates.&nbsp;&nbsp;A .poly file can optionally contain\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an area constraint <b><a href="CppFor.htm">for</a></b> each segment-bounded region, thereby\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controlling triangle densities in a first triangulation of a PSLG.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You can impose both a fixed area constraint and a varying area\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint by invoking the <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b> twice, once with and once\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;without a number following.&nbsp;&nbsp;Each area specified may include a\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decimal <a href="CppPointer.htm">point</a>.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>u&nbsp;&nbsp;Imposes a user-defined constraint on triangle size.&nbsp;&nbsp;There are two\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ways to use <b><a href="CppThis.htm">this</a></b> feature.&nbsp;&nbsp;One is to edit the triunsuitable()\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;procedure in triangle.c to encode <a href="CppAny.htm">any</a> constraint you like, then\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;re<a href="CppCompile.htm">compile</a> Triangle.&nbsp;&nbsp;The other is to <a href="CppCompile.htm">compile</a> triangle.c with the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EXTERNAL_TEST symbol set (<a href="CppCompiler.htm">compiler</a> <b><a href="CppSwitch.htm">switch</a></b> <a href="CppOperatorMinus.htm">-</a>DEXTERNAL_TEST), then\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLink.htm">link</a> Triangle with a separate object file that implements\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triunsuitable().&nbsp;&nbsp;In either <b><a href="CppCase.htm">case</a></b>, the <a href="CppOperatorMinus.htm">-</a>u <b><a href="CppSwitch.htm">switch</a></b> causes the user-\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defined test to be applied to every triangle.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>A&nbsp;&nbsp;Assigns an additional floating-<a href="CppPointer.htm">point</a> attribute to each triangle\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;that identifies what segment-bounded region each triangle belongs\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to.&nbsp;&nbsp;Attributes are as<b><a href="CppSigned.htm">signed</a></b> to regions by the .poly file.&nbsp;&nbsp;If a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region is not <b><a href="CppExplicit.htm">explicit</a></b>ly marked by the .poly file, triangles in\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;that region are as<b><a href="CppSigned.htm">signed</a></b> an attribute of zero.&nbsp;&nbsp;The <a href="CppOperatorMinus.htm">-</a>A <b><a href="CppSwitch.htm">switch</a></b> has\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an effect only when the <a href="CppOperatorMinus.htm">-</a>p <b><a href="CppSwitch.htm">switch</a></b> is used and the <a href="CppOperatorMinus.htm">-</a>r <b><a href="CppSwitch.htm">switch</a></b> is not.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>c&nbsp;&nbsp;Creates segments on the convex hull of the triangulation.&nbsp;&nbsp;If you\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;are triangulating a vertex set, <b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> causes a .poly file to\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be written, containing all edges of the convex hull.&nbsp;&nbsp;If you are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangulating a PSLG, <b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> specifies that the whole convex\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hull of the PSLG should be triangulated, regardless of what\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segments the PSLG has.&nbsp;&nbsp;If you <b><a href="CppDo.htm">do</a></b> not use <b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> when\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangulating a PSLG, Triangle assumes that you have identified the\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region to be triangulated by surrounding it with segments of the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input PSLG.&nbsp;&nbsp;Beware:&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> you are not careful, <b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> can cause\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the introduction of an extremely thin angle between a PSLG segment\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and a convex hull segment, which can cause overrefinement (and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possibly failure <b><a href="CppIf.htm">if</a></b> Triangle runs out of precision).&nbsp;&nbsp;If you are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;refining a mesh, the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b> works differently:&nbsp;&nbsp;it causes a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.poly file to be written containing the boundary edges of the mesh\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(useful <b><a href="CppIf.htm">if</a></b> no .poly file was read).\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>D&nbsp;&nbsp;Conforming Delaunay triangulation:&nbsp;&nbsp;use <b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> <b><a href="CppIf.htm">if</a></b> you want to\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensure that all the triangles in the mesh are Delaunay, and not\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merely constrained Delaunay; or <b><a href="CppIf.htm">if</a></b> you want to ensure that all the\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Voronoi vertices lie within the triangulation.&nbsp;&nbsp;(Some finite volume\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMemberFunction.htm">member function</a>s have <b><a href="CppThis.htm">this</a></b> requirement.)&nbsp;&nbsp;This <b><a href="CppSwitch.htm">switch</a></b> invokes Ruppert's\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;original <a href="CppAlgorithm.htm">algorithm</a>, which splits every subsegment whose diametral\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circle is encroached.&nbsp;&nbsp;It usually increases the number of vertices\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and triangles.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>j&nbsp;&nbsp;Jettisons vertices that are not part of the <b><a href="CppFinal.htm">final</a></b> triangulation\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from the output .node file.&nbsp;&nbsp;By <b><a href="CppDefault.htm">default</a></b>, Triangle copies all\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices in the input .node file to the output .node file, in the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;same order, so their indices <b><a href="CppDo.htm">do</a></b> not change.&nbsp;&nbsp;The <a href="CppOperatorMinus.htm">-</a>j <b><a href="CppSwitch.htm">switch</a></b> prevents\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;duplicated input vertices, or vertices `eaten' by holes, from\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appearing in the output .node file.&nbsp;&nbsp;Thus, <b><a href="CppIf.htm">if</a></b> two input vertices\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;have exactly the same coordinates, only the first appears in the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.&nbsp;&nbsp;If <a href="CppAny.htm">any</a> vertices are jettisoned, the vertex numbering in\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the output .node file differs from that of the input .node file.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>e&nbsp;&nbsp;Outputs (to an .edge file) a list of edges of the triangulation.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>v&nbsp;&nbsp;Outputs the Voronoi diagram associated with the triangulation.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Does not attempt to detect degeneracies, so some Voronoi vertices\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;may be duplicated.&nbsp;&nbsp;See the discussion of Voronoi diagrams below.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>n&nbsp;&nbsp;Outputs (to a .neigh file) a list of triangles neighboring each\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangle.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>g&nbsp;&nbsp;Outputs the mesh to an Object File Format (.off) file, suitable <b><a href="CppFor.htm">for</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewing with the Geometry Center's Geomview package.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>B&nbsp;&nbsp;No boundary markers in the output .node, .poly, and .edge output\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files.&nbsp;&nbsp;See the detailed discussion of boundary markers below.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>P&nbsp;&nbsp;No output .poly file.&nbsp;&nbsp;Saves disk space, but you lose the ability\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to maintain constraining segments on later refinements of the mesh.\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>N&nbsp;&nbsp;No output .node file.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>E&nbsp;&nbsp;No output .ele file.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>I&nbsp;&nbsp;No iteration numbers.&nbsp;&nbsp;Suppresses the output of .node and .poly\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files, so your input files won't be overwritten.&nbsp;&nbsp;(If your input is\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a .poly file only, a .node file is written.)&nbsp;&nbsp;Cannot be used with\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the <a href="CppOperatorMinus.htm">-</a>r <b><a href="CppSwitch.htm">switch</a></b>, because that would overwrite your input .ele file.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Shouldn't be used with the <a href="CppOperatorMinus.htm">-</a>q, <a href="CppOperatorMinus.htm">-</a>a, <a href="CppOperatorMinus.htm">-</a>u, or <a href="CppOperatorMinus.htm">-</a>s <b><a href="CppSwitch.htm">switch</a></b> <b><a href="CppIf.htm">if</a></b> you are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> a .node file <b><a href="CppFor.htm">for</a></b> input, because no .node file is written, so\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;there is no record of <a href="CppAny.htm">any</a> added Steiner <a href="CppPointer.htm">point</a>s.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>O&nbsp;&nbsp;No holes.&nbsp;&nbsp;Ignores the holes in the .poly file.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>X&nbsp;&nbsp;No exact arithmetic.&nbsp;&nbsp;Normally, Triangle uses exact floating-<a href="CppPointer.htm">point</a>\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arithmetic <b><a href="CppFor.htm">for</a></b> certain tests <b><a href="CppIf.htm">if</a></b> it thinks the inexact tests are not\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;accurate enough.&nbsp;&nbsp;Exact arithmetic ensures the robustness of the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangulation <a href="CppAlgorithm.htm">algorithm</a>s, despite floating-<a href="CppPointer.htm">point</a> roundoff error.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Disabling exact arithmetic with the <a href="CppOperatorMinus.htm">-</a>X <b><a href="CppSwitch.htm">switch</a></b> causes a small\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;improvement in speed and creates the possibility that Triangle will\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail to produce a valid mesh.&nbsp;&nbsp;Not recommended.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>z&nbsp;&nbsp;Numbers all items starting from zero (rather than one).&nbsp;&nbsp;Note that\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> is normally overridden by the value used to number the\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first vertex of the input .node or .poly file.&nbsp;&nbsp;However, <b><a href="CppThis.htm">this</a></b>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> is useful when calling Triangle from another program.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>o2 Generates second-order subparametric elements with six nodes each.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>Y&nbsp;&nbsp;No <b><a href="CppNew.htm">new</a></b> vertices on the boundary.&nbsp;&nbsp;This <b><a href="CppSwitch.htm">switch</a></b> is useful when the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mesh boundary must be preserved so that it conforms to some\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adjacent mesh.&nbsp;&nbsp;Be forewarned that you will probably sacrifice much\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of the quality of the mesh; Triangle will <b><a href="CppTry.htm">try</a></b>, but the resulting\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mesh may contain poorly <a href="CppShape.htm">shape</a>d triangles.&nbsp;&nbsp;Works well <b><a href="CppIf.htm">if</a></b> all the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundary vertices are closely spaced.&nbsp;&nbsp;Specify <b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> twice\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(`-YY') to prevent all segment splitting, including internal\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundaries.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>S&nbsp;&nbsp;Specifies the maximum number of Steiner <a href="CppPointer.htm">point</a>s (vertices that are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;not in the input, but are added to meet the constraints on minimum\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle and maximum area).&nbsp;&nbsp;The <b><a href="CppDefault.htm">default</a></b> is to allow an unlimited\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number.&nbsp;&nbsp;If you specify <b><a href="CppThis.htm">this</a></b> <b><a href="CppSwitch.htm">switch</a></b> with no number after it,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the limit is set to zero.&nbsp;&nbsp;Triangle always adds vertices at segment\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersections, even <b><a href="CppIf.htm">if</a></b> it needs to use more vertices than the limit\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;you set.&nbsp;&nbsp;When Triangle inserts segments by splitting (-s), it\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;always adds enough vertices to ensure that all the segments of the\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PLSG are recovered, ignoring the limit <b><a href="CppIf.htm">if</a></b> necessary.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>i&nbsp;&nbsp;Uses an incremental rather than a divide-and-conquer <a href="CppAlgorithm.htm">algorithm</a> to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppConstructor.htm">construct</a> a Delaunay triangulation.&nbsp;&nbsp;Try it <b><a href="CppIf.htm">if</a></b> the divide-and-\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conquer <a href="CppAlgorithm.htm">algorithm</a> fails.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>F&nbsp;&nbsp;Uses Steven Fortune's sweepline <a href="CppAlgorithm.htm">algorithm</a> to <a href="CppConstructor.htm">construct</a> a Delaunay\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangulation.&nbsp;&nbsp;Warning:&nbsp;&nbsp;does not use exact arithmetic <b><a href="CppFor.htm">for</a></b> all\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;calculations.&nbsp;&nbsp;An exact result is not guaranteed.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>l&nbsp;&nbsp;Uses only vertical cuts in the divide-and-conquer <a href="CppAlgorithm.htm">algorithm</a>.&nbsp;&nbsp;By\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>, Triangle alternates between vertical and horizontal cuts,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;which usually improve the speed except with vertex sets that are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;small or <b><a href="CppShort.htm">short</a></b> and wide.&nbsp;&nbsp;This <b><a href="CppSwitch.htm">switch</a></b> is primarily of theoretical\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interest.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>s&nbsp;&nbsp;Specifies that segments should be forced into the triangulation by\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recursively splitting them at their mid<a href="CppPointer.htm">point</a>s, rather than by\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generating a constrained Delaunay triangulation.&nbsp;&nbsp;Segment splitting\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is <b><a href="CppTrue.htm">true</a></b> to Ruppert's original <a href="CppAlgorithm.htm">algorithm</a>, but can create needlessly\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;small triangles.&nbsp;&nbsp;This <b><a href="CppSwitch.htm">switch</a></b> is primarily of theoretical interest.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>C&nbsp;&nbsp;Check the consistency of the <b><a href="CppFinal.htm">final</a></b> mesh.&nbsp;&nbsp;Uses exact arithmetic <b><a href="CppFor.htm">for</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checking, even <b><a href="CppIf.htm">if</a></b> the <a href="CppOperatorMinus.htm">-</a>X <b><a href="CppSwitch.htm">switch</a></b> is used.&nbsp;&nbsp;Useful <b><a href="CppIf.htm">if</a></b> you suspect\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Triangle is <a href="CppBug.htm">bug</a>gy.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>Q&nbsp;&nbsp;Quiet:&nbsp;&nbsp;Suppresses all explanation of what Triangle is doing,\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unless an error occurs.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>V&nbsp;&nbsp;Verbose:&nbsp;&nbsp;Gives detailed information <a href="CppAbout.htm">about</a> what Triangle is doing.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAdd.htm">Add</a> more `V's <b><a href="CppFor.htm">for</a></b> increasing amount of detail.&nbsp;&nbsp;`-V' is most\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useful; itgives information on <a href="CppAlgorithm.htm">algorithm</a>ic progress and much more\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detailed statistics.&nbsp;&nbsp;`-VV' gives vertex-by-vertex details, and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prints so much that Triangle runs much more slowly.&nbsp;&nbsp;`-VVVV' gives\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;information only a <a href="CppDebug.htm">debug</a>ger could love.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>h&nbsp;&nbsp;Help:&nbsp;&nbsp;Displays these instructions.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("<a href="CppDefinition.htm">Definitions</a>:\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;A Delaunay triangulation of a vertex set is a triangulation whose\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;vertices are the vertex set, that covers the convex hull of the vertex\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;set.&nbsp;&nbsp;A Delaunay triangulation has the property that no vertex lies\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;inside the circumsc<a href="CppRibi.htm">ribi</a>ng circle (circle that passes through all three\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;vertices) of <a href="CppAny.htm">any</a> triangle in the triangulation.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;A Voronoi diagram of a vertex set is a subdivision of the plane into\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;polygonal cells (some of which may be unbounded, meaning infinitely\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;large), where each cell is the set of <a href="CppPointer.htm">point</a>s in the plane that are closer\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;to some input vertex than to <a href="CppAny.htm">any</a> other input vertex.&nbsp;&nbsp;The Voronoi diagram\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;is a geometric dual of the Delaunay triangulation.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;A Planar Straight Line Graph (PSLG) is a set of vertices and segments.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Segments are simply edges, whose endpoints are all vertices in the PSLG.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Segments may intersect each other only at their endpoints.&nbsp;&nbsp;The file\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;format <b><a href="CppFor.htm">for</a></b> PSLGs (.poly files) is described below.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;A constrained Delaunay triangulation (CDT) of a PSLG is similar to a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Delaunay triangulation, but each PSLG segment is present as a single edge\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;of the CDT.&nbsp;&nbsp;(A constrained Delaunay triangulation is not truly a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Delaunay triangulation, because some of its triangles might not be\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Delaunay.)&nbsp;&nbsp;By <a href="CppDefinition.htm">definition</a>, a CDT does not have <a href="CppAny.htm">any</a> vertices other than\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;those specified in the input PSLG.&nbsp;&nbsp;Depending on context, a CDT might\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;cover the convex hull of the PSLG, or it might cover only a segment-\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;bounded region (e.g. a polygon).\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;A conforming Delaunay triangulation of a PSLG is a triangulation in which\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;each triangle is truly Delaunay, and each PSLG segment is represented by\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;a linear contiguous sequence of edges of the triangulation.&nbsp;&nbsp;New vertices\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;(not part of the PSLG) may appear, and each input segment may have been\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;subdivided into shorter edges (subsegments) by these additional vertices.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The <b><a href="CppNew.htm">new</a></b> vertices are frequently necessary to maintain the Delaunay\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;property <b><a href="CppWhile.htm">while</a></b> ensuring that every segment is represented.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;A conforming constrained Delaunay triangulation (CCDT) of a PSLG is a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;triangulation of a PSLG whose triangles are constrained Delaunay.&nbsp;&nbsp;New\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;vertices may appear, and input segments may be subdivided into\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;subsegments, but not to guarantee that segments are respected; rather, to\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;improve the quality of the triangles.&nbsp;&nbsp;The high-quality meshes produced\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;by the <a href="CppOperatorMinus.htm">-</a>q <b><a href="CppSwitch.htm">switch</a></b> are usually CCDTs, but can be made conforming Delaunay\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;with the <a href="CppOperatorMinus.htm">-</a>D <b><a href="CppSwitch.htm">switch</a></b>.\n\n");<br/>
&nbsp;&nbsp;printf("File Formats:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;All files may contain comments prefixed by the <a href="CppChar.htm">character</a> '#'.&nbsp;&nbsp;Vertices,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;triangles, edges, holes, and maximum area constraints must be numbered\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;consecutively, starting from either 1 or 0.&nbsp;&nbsp;Whichever you choose, all\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;input files must be consistent; <b><a href="CppIf.htm">if</a></b> the vertices are numbered from 1, so\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;must be all other objects.&nbsp;&nbsp;Triangle automatically detects your choice\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> reading the .node (or .poly) file.&nbsp;&nbsp;(When calling Triangle from\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;another program, use the <a href="CppOperatorMinus.htm">-</a>z <b><a href="CppSwitch.htm">switch</a></b> <b><a href="CppIf.htm">if</a></b> you wish to number objects from\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;zero.)&nbsp;&nbsp;Examples of these file formats are given below.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.node files:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of vertices&gt; &lt;dimension (must be 2)&gt; &lt;# of attributes&gt;\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;# of boundary markers (0 or 1)&gt;\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Remaining lines:&nbsp;&nbsp;&lt;vertex #&gt; &lt;x&gt; &lt;y&gt; [attributes] [boundary marker]\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The attributes, which are typically floating-<a href="CppPointer.htm">point</a> values of physical\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;quantities (such as mass or conductivity) associated with the nodes of\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;a finite element mesh, are copied unchanged to the output mesh.&nbsp;&nbsp;If <a href="CppOperatorMinus.htm">-</a>q,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>a, <a href="CppOperatorMinus.htm">-</a>u, <a href="CppOperatorMinus.htm">-</a>D, or <a href="CppOperatorMinus.htm">-</a>s is selected, each <b><a href="CppNew.htm">new</a></b> Steiner <a href="CppPointer.htm">point</a> added to the mesh\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;has attributes as<b><a href="CppSigned.htm">signed</a></b> to it by linear interpolation.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;If the fourth entry of the first line is `1', the last column of the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;remainder of the file is assumed to contain boundary markers.&nbsp;&nbsp;Boundary\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;markers are used to identify boundary vertices and vertices resting on\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;PSLG segments; a complete description appears in a section below.&nbsp;&nbsp;The\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;.node file produced by Triangle contains boundary markers in the last\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;column unless they are suppressed by the <a href="CppOperatorMinus.htm">-</a>B <b><a href="CppSwitch.htm">switch</a></b>.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.ele files:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of triangles&gt; &lt;nodes per triangle&gt; &lt;# of attributes&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Remaining lines:&nbsp;&nbsp;&lt;triangle #&gt; &lt;node&gt; &lt;node&gt; &lt;node&gt; ... [attributes]\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Nodes are indices into the corresponding .node file.&nbsp;&nbsp;The first three\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;nodes are the corner vertices, and are listed in <a href="CppCounter.htm">counter</a>clockwise order\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;around each triangle.&nbsp;&nbsp;(The remaining nodes, <b><a href="CppIf.htm">if</a></b> <a href="CppAny.htm">any</a>, depend on the type\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;of finite element used.)\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The attributes are just like those of .node files.&nbsp;&nbsp;Because there is no\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;simple mapping from input to output triangles, Triangle attempts to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;interpolate attributes, and may cause a lot of diffusion of attributes\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;among nearby triangles as the triangulation is refined.&nbsp;&nbsp;Attributes <b><a href="CppDo.htm">do</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;not diffuse across segments, so attributes used to identify\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;segment-bounded regions remain intact.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;In .ele files produced by Triangle, each triangular element has three\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;nodes (vertices) unless the <a href="CppOperatorMinus.htm">-</a>o2 <b><a href="CppSwitch.htm">switch</a></b> is used, in which <b><a href="CppCase.htm">case</a></b>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;subparametric quadratic elements with six nodes each are generated.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The first three nodes are the corners in <a href="CppCounter.htm">counter</a>clockwise order, and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;the fourth, fifth, and sixth nodes lie on the mid<a href="CppPointer.htm">point</a>s of the edges\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;opposite the first, second, and third vertices, respectively.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.poly files:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of vertices&gt; &lt;dimension (must be 2)&gt; &lt;# of attributes&gt;\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;# of boundary markers (0 or 1)&gt;\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;vertex #&gt; &lt;x&gt; &lt;y&gt; [attributes] [boundary marker]\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;One line:&nbsp;&nbsp;&lt;# of segments&gt; &lt;# of boundary markers (0 or 1)&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;segment #&gt; &lt;endpoint&gt; &lt;endpoint&gt; [boundary marker]\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;One line:&nbsp;&nbsp;&lt;# of holes&gt;\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;hole #&gt; &lt;x&gt; &lt;y&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Optional line:&nbsp;&nbsp;&lt;# of regional attributes and/or area constraints&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Optional following lines:&nbsp;&nbsp;&lt;region #&gt; &lt;x&gt; &lt;y&gt; &lt;attribute&gt; &lt;max area&gt;\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;A .poly file represents a PSLG, as well as some additional information.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The first section lists all the vertices, and is identical to the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;format of .node files.&nbsp;&nbsp;&lt;# of vertices&gt; may be set to zero to indicate\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;that the vertices are listed in a separate .node file; .poly files\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;produced by Triangle always have <b><a href="CppThis.htm">this</a></b> format.&nbsp;&nbsp;A vertex set represented\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b> way has the advantage that it may easily be triangulated with or\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;without segments (depending on whether the <a href="CppOperatorMinus.htm">-</a>p <b><a href="CppSwitch.htm">switch</a></b> is invoked).\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The second section lists the segments.&nbsp;&nbsp;Segments are edges whose\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;presence in the triangulation is enforced.&nbsp;&nbsp;(Depending on the choice of\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>es, segment might be subdivided into smaller edges).&nbsp;&nbsp;Each\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;segment is specified by listing the indices of its two endpoints.&nbsp;&nbsp;This\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;means that you must include its endpoints in the vertex list.&nbsp;&nbsp;Each\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;segment, like each <a href="CppPointer.htm">point</a>, may have a boundary marker.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;If <a href="CppOperatorMinus.htm">-</a>q, <a href="CppOperatorMinus.htm">-</a>a, <a href="CppOperatorMinus.htm">-</a>u, and <a href="CppOperatorMinus.htm">-</a>s are not selected, Triangle produces a constrained\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Delaunay triangulation (CDT), in which each segment appears as a single\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;edge in the triangulation.&nbsp;&nbsp;If <a href="CppOperatorMinus.htm">-</a>q, <a href="CppOperatorMinus.htm">-</a>a, <a href="CppOperatorMinus.htm">-</a>u, or <a href="CppOperatorMinus.htm">-</a>s is selected, Triangle\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;produces a conforming constrained Delaunay triangulation (CCDT), in\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;which segments may be subdivided into smaller edges.&nbsp;&nbsp;If <a href="CppOperatorMinus.htm">-</a>D is\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;selected, Triangle produces a conforming Delaunay triangulation, so\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;that every triangle is Delaunay, and not just constrained Delaunay.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The third section lists holes (and concavities, <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>c is selected) in\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;the triangulation.&nbsp;&nbsp;Holes are specified by identifying a <a href="CppPointer.htm">point</a> inside\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;each hole.&nbsp;&nbsp;After the triangulation is formed, Triangle creates holes\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;by eating triangles, spreading out from each hole <a href="CppPointer.htm">point</a> until its\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;progress is blocked by segments in the PSLG.&nbsp;&nbsp;You must be careful to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;enclose each hole in segments, or your whole triangulation might be\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;eaten away.&nbsp;&nbsp;If the two triangles abutting a segment are eaten, the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;segment itself is also eaten.&nbsp;&nbsp;Do not place a hole directly on a\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;segment; <b><a href="CppIf.htm">if</a></b> you <b><a href="CppDo.htm">do</a></b>, Triangle chooses one side of the segment\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;arbitrarily.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The optional fourth section lists regional attributes (to be as<b><a href="CppSigned.htm">signed</a></b>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;to all triangles in a region) and regional constraints on the maximum\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;triangle area.&nbsp;&nbsp;Triangle reads <b><a href="CppThis.htm">this</a></b> section only <b><a href="CppIf.htm">if</a></b> the <a href="CppOperatorMinus.htm">-</a>A <b><a href="CppSwitch.htm">switch</a></b> is\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;used or the <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b> is used without a number following it, and the <a href="CppOperatorMinus.htm">-</a>r\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> is not used.&nbsp;&nbsp;Regional attributes and area constraints are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;propagated in the same manner as holes:&nbsp;&nbsp;you specify a <a href="CppPointer.htm">point</a> <b><a href="CppFor.htm">for</a></b> each\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;attribute and/or constraint, and the attribute and/or constraint\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;affects the whole region (bounded by segments) containing the <a href="CppPointer.htm">point</a>.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;If two values are written on a line after the x and y coordinate, the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;first such value is assumed to be a regional attribute (but is only\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;applied <b><a href="CppIf.htm">if</a></b> the <a href="CppOperatorMinus.htm">-</a>A <b><a href="CppSwitch.htm">switch</a></b> is selected), and the second value is assumed\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;to be a regional area constraint (but is only applied <b><a href="CppIf.htm">if</a></b> the <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;is selected).&nbsp;&nbsp;You may specify just one value after the coordinates,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;which can serve as both an attribute and an area constraint, depending\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;on the choice of <b><a href="CppSwitch.htm">switch</a></b>es.&nbsp;&nbsp;If you are <b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>A and <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b>es\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;simultaneously and wish to assign an attribute to some region without\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;imposing an area constraint, use a negative maximum area.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;When a triangulation is created from a .poly file, you must either\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;enclose the entire region to be triangulated in PSLG segments, or\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;use the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>, which automatically creates extra segments that\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;enclose the convex hull of the PSLG.&nbsp;&nbsp;If you <b><a href="CppDo.htm">do</a></b> not use the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Triangle eats all triangles that are not enclosed by segments; <b><a href="CppIf.htm">if</a></b> you\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;are not careful, your whole triangulation may be eaten away.&nbsp;&nbsp;If you <b><a href="CppDo.htm">do</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;use the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>, you can still produce concavities by the appropriate\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;placement of holes just inside the boundary of the convex hull.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;An ideal PSLG has no intersecting segments, nor <a href="CppAny.htm">any</a> vertices that lie\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;upon segments (except, of course, the endpoints of each segment).&nbsp;&nbsp;You\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;aren't required to <a href="CppMake.htm">make</a> your .poly files ideal, but you should be aware\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;of what can go wrong.&nbsp;&nbsp;Segment intersections are relatively safe<a href="CppOperatorDecrement.htm">--</a>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Triangle calculates the intersection <a href="CppPointer.htm">point</a>s <b><a href="CppFor.htm">for</a></b> you and adds them to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;the triangulation<a href="CppOperatorDecrement.htm">--</a>as <b><a href="CppLong.htm">long</a></b> as your machine's floating-<a href="CppPointer.htm">point</a> precision\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;doesn't become a problem.&nbsp;&nbsp;You are tempting the fates <b><a href="CppIf.htm">if</a></b> you have three\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;segments that cross at the same location, and expect Triangle to figure\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;out where the intersection <a href="CppPointer.htm">point</a> is.&nbsp;&nbsp;Thanks to floating-<a href="CppPointer.htm">point</a> roundoff\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;error, Triangle will probably decide that the three segments intersect\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;at three different <a href="CppPointer.htm">point</a>s, and you will find a minuscule triangle in\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;your output<a href="CppOperatorDecrement.htm">--</a>unless Triangle tries to refine the tiny triangle, uses\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;up the last bit of machine precision, and fails to terminate at all.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;You're better off putting the intersection <a href="CppPointer.htm">point</a> in the input files,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;and manually <b><a href="CppBreak.htm">break</a></b>ing up each segment into two.&nbsp;&nbsp;Similarly, <b><a href="CppIf.htm">if</a></b> you\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;place a vertex at the middle of a segment, and hope that Triangle will\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b> up the segment at that vertex, you might get lucky.&nbsp;&nbsp;On the other\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;hand, Triangle might decide that the vertex doesn't lie precisely on\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;the segment, and you'll have a needle-sharp triangle in your output<a href="CppOperatorDecrement.htm">--</a>or\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;a lot of tiny triangles <b><a href="CppIf.htm">if</a></b> you're generating a quality mesh.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;When Triangle reads a .poly file, it also writes a .poly file, which\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;includes all the subsegments<a href="CppOperatorDecrement.htm">--</a>the edges that are parts of input\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;segments.&nbsp;&nbsp;If the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b> is used, the output .poly file also\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;includes all of the edges on the convex hull.&nbsp;&nbsp;Hence, the output .poly\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;file is useful <b><a href="CppFor.htm">for</a></b> finding edges associated with input segments and <b><a href="CppFor.htm">for</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;setting boundary conditions in finite element simulations.&nbsp;&nbsp;Moreover,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;you will need the output .poly file <b><a href="CppIf.htm">if</a></b> you plan to refine the output\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;mesh, and don't want segments to be missing in later triangulations.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.area files:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of triangles&gt;\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;triangle #&gt; &lt;maximum area&gt;\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;An .area file associates with each triangle a maximum area that is used\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> mesh refinement.&nbsp;&nbsp;As with other file formats, every triangle must\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;be represented, and the triangles must be numbered consecutively.&nbsp;&nbsp;A\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;triangle may be left unconstrained by assigning it a negative maximum\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;area.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.edge files:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of edges&gt; &lt;# of boundary markers (0 or 1)&gt;\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;edge #&gt; &lt;endpoint&gt; &lt;endpoint&gt; [boundary marker]\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;End<a href="CppPointer.htm">point</a>s are indices into the corresponding .node file.&nbsp;&nbsp;Triangle can\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;produce .edge files (use the <a href="CppOperatorMinus.htm">-</a>e <b><a href="CppSwitch.htm">switch</a></b>), but cannot read them.&nbsp;&nbsp;The\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;optional column of boundary markers is suppressed by the <a href="CppOperatorMinus.htm">-</a>B <b><a href="CppSwitch.htm">switch</a></b>.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;In Voronoi diagrams, one also finds a special kind of edge that is an\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;infinite ray with only one endpoint.&nbsp;&nbsp;For these edges, a different\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;format is used:\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;edge #&gt; &lt;endpoint&gt; <a href="CppOperatorMinus.htm">-</a>1 &lt;direction x&gt; &lt;direction y&gt;\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;The `direction' is a floating-<a href="CppPointer.htm">point</a> vector that indicates the direction\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;of the infinite ray.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;.neigh files:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;First line:&nbsp;&nbsp;&lt;# of triangles&gt; &lt;# of neighbors per triangle (always 3)&gt;\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Following lines:&nbsp;&nbsp;&lt;triangle #&gt; &lt;neighbor&gt; &lt;neighbor&gt; &lt;neighbor&gt;\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Neighbors are indices into the corresponding .ele file.&nbsp;&nbsp;An index of <a href="CppOperatorMinus.htm">-</a>1\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;indicates no neighbor (because the triangle is on an exterior\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;boundary).&nbsp;&nbsp;The first neighbor of triangle i is opposite the first\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;corner of triangle i, and so on.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Triangle can produce .neigh files (use the <a href="CppOperatorMinus.htm">-</a>n <b><a href="CppSwitch.htm">switch</a></b>), but cannot read\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;them.\n\n");<br/>
&nbsp;&nbsp;printf("Boundary Markers:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Boundary markers are tags used mainly to identify which output vertices\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;and edges are associated with which PSLG segment, and to identify which\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;vertices and edges occur on a boundary of the triangulation.&nbsp;&nbsp;A common\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;use is to determine where boundary conditions should be applied to a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;finite element mesh.&nbsp;&nbsp;You can prevent boundary markers from being written\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;into files produced by Triangle by <b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>B <b><a href="CppSwitch.htm">switch</a></b>.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The boundary marker associated with each segment in an output .poly file\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;and each edge in an output .edge file is chosen as follows:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> If an output edge is part or all of a PSLG segment with a nonzero\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundary marker, then the edge is as<b><a href="CppSigned.htm">signed</a></b> the same marker.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Otherwise, <b><a href="CppIf.htm">if</a></b> the edge lies on a boundary of the triangulation\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(even the boundary of a hole), then the edge is as<b><a href="CppSigned.htm">signed</a></b> the marker\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one (1).\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Otherwise, the edge is as<b><a href="CppSigned.htm">signed</a></b> the marker zero (0).\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The boundary marker associated with each vertex in an output .node file\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;is chosen as follows:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> If a vertex is as<b><a href="CppSigned.htm">signed</a></b> a nonzero boundary marker in the input file,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then it is as<b><a href="CppSigned.htm">signed</a></b> the same marker in the output .node file.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Otherwise, <b><a href="CppIf.htm">if</a></b> the vertex lies on a PSLG segment (even <b><a href="CppIf.htm">if</a></b> it is an\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endpoint of the segment) with a nonzero boundary marker, then the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex is as<b><a href="CppSigned.htm">signed</a></b> the same marker.&nbsp;&nbsp;If the vertex lies on several\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;such segments, one of the markers is chosen arbitrarily.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Otherwise, <b><a href="CppIf.htm">if</a></b> the vertex occurs on a boundary of the triangulation,\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then the vertex is as<b><a href="CppSigned.htm">signed</a></b> the marker one (1).\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Otherwise, the vertex is as<b><a href="CppSigned.htm">signed</a></b> the marker zero (0).\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you want Triangle to determine <b><a href="CppFor.htm">for</a></b> you which vertices and edges are on\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;the boundary, assign them the boundary marker zero (or use no markers at\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;all) in your input files.&nbsp;&nbsp;In the output files, all boundary vertices,\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;edges, and segments will be as<b><a href="CppSigned.htm">signed</a></b> the value one.\n\n");<br/>
&nbsp;&nbsp;printf("Triangulation Iteration Numbers:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Because Triangle can read and refine its own triangulations, input\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;and output files have iteration numbers.&nbsp;&nbsp;For <a href="CppInstance.htm">instance</a>, Triangle might\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;read the files mesh.3.node, mesh.3.ele, and mesh.3.poly, refine the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;triangulation, and output the files mesh.4.node, mesh.4.ele, and\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;mesh.4.poly.&nbsp;&nbsp;Files with no iteration number are treated as <b><a href="CppIf.htm">if</a></b>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;their iteration number is zero; hence, Triangle might read the file\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.node, triangulate it, and produce the files <a href="CppPointer.htm">point</a>s.1.node and\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.1.ele.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Iteration numbers allow you to create a sequence of successively finer\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;meshes suitable for multigrid <a href="CppMemberFunction.htm">member function</a>s.&nbsp;&nbsp;They also allow you to produce a\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;sequence of meshes <b><a href="CppUsing.htm">using</a></b> error estimate-driven mesh refinement.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you're not <b><a href="CppUsing.htm">using</a></b> refinement or quality meshing, and you don't like\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;iteration numbers, use the <a href="CppOperatorMinus.htm">-</a>I <b><a href="CppSwitch.htm">switch</a></b> to disable them.&nbsp;&nbsp;This <b><a href="CppSwitch.htm">switch</a></b> also\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;disables output of .node and .poly files to prevent your input files from\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;being overwritten.&nbsp;&nbsp;(If the input is a .poly file that contains its own\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s, a .node file is written.&nbsp;&nbsp;This can be quite convenient <b><a href="CppFor.htm">for</a></b>\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;computing CDTs or quality meshes.)\n\n");<br/>
&nbsp;&nbsp;printf("Examples of How to Use Triangle:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;`triangle dots' reads vertices from dots.node, and writes their Delaunay\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;triangulation to dots.1.node and dots.1.ele.&nbsp;&nbsp;(dots.1.node is identical\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;to dots.node.)&nbsp;&nbsp;`triangle <a href="CppOperatorMinus.htm">-</a>I dots' writes the triangulation to dots.ele\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;instead.&nbsp;&nbsp;(No additional .node file is needed, so none is written.)\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;`triangle <a href="CppOperatorMinus.htm">-</a>pe object.1' reads a PSLG from object.1.poly (and possibly\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;object.1.node, <b><a href="CppIf.htm">if</a></b> the vertices are omitted from object.1.poly) and writes\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;its constrained Delaunay triangulation to object.2.node and object.2.ele.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The segments are copied to object.2.poly, and all edges are written to\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;object.2.edge.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;`triangle <a href="CppOperatorMinus.htm">-</a>pq31.5a.1 object' reads a PSLG from object.poly (and possibly\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;object.node), generates a mesh whose angles are all between 31.5 and 117\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;degrees and whose triangles all have areas of 0.1 or less, and writes the\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;mesh to object.1.node and object.1.ele.&nbsp;&nbsp;Each segment may be broken up\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;into multiple subsegments; these are written to object.1.poly.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Here is a sample file `box.poly' desc<a href="CppRibi.htm">ribi</a>ng a square with a square hole:\n"<br/>
);<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;# A box with eight vertices in 2D, no attributes, one boundary marker.\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;8 2 0 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; # Outer box has these vertices:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 0 0&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 0 3&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 3 0&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp; 3 3&nbsp;&nbsp; 33&nbsp;&nbsp;&nbsp;&nbsp; # A special marker <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> vertex.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; # Inner square has these vertices:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 1 1&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp; 1 2&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp; 2 1&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp; 2 2&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Five segments with boundary markers.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;5 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1 2&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Left side of outer box.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; # Square hole has these segments:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 5 7&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 7 8&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp; 8 6&nbsp;&nbsp; 10\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 6 5&nbsp;&nbsp; 0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# One hole in the middle of the inner square.\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1.5 1.5\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Note that some segments are missing from the outer square, so you must\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;use the `-c' <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;After `triangle <a href="CppOperatorMinus.htm">-</a>pqc box.poly', here is the output\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;file `box.1.node', with twelve vertices.&nbsp;&nbsp;The last four vertices were\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;added to meet the angle constraint.&nbsp;&nbsp;Vertices 1, 2, and 9 have markers\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;from segment 1.&nbsp;&nbsp;Vertices 6 and 8 have markers from segment 4.&nbsp;&nbsp;All the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;other vertices but 4 have been marked to indicate that they lie on a\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;boundary.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;2&nbsp;&nbsp;0&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp; 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp; 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 33\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; 10\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; 10\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp; 1.5&nbsp;&nbsp;&nbsp;&nbsp;5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;1.5&nbsp;&nbsp; 0&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp; 1.5&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;&nbsp;1.5&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Generated by triangle <a href="CppOperatorMinus.htm">-</a>pqc box.poly\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Here is the output file `box.1.ele', with twelve triangles.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;3&nbsp;&nbsp;0\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 6&nbsp;&nbsp; 9\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp; 3&nbsp;&nbsp; 7\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp; 8&nbsp;&nbsp;12\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 1&nbsp;&nbsp; 5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp; 2&nbsp;&nbsp; 9\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp; 3&nbsp;&nbsp;11\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp; 4&nbsp;&nbsp; 8\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp; 5&nbsp;&nbsp;10\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp; 2&nbsp;&nbsp; 6\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp; 7&nbsp;&nbsp;11\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 1&nbsp;&nbsp;10\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp; 4&nbsp;&nbsp;12\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Generated by triangle <a href="CppOperatorMinus.htm">-</a>pqc box.poly\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Here is the output file `box.1.poly'.&nbsp;&nbsp;Note that segments have been added\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;to represent the convex hull, and some segments have been subdivided by\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;newly added vertices.&nbsp;&nbsp;Note also that &lt;# of vertices&gt; is set to zero to\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;indicate that the vertices should be read from the .node file.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;2&nbsp;&nbsp;0&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp;&nbsp; 5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp;10\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; 5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;1\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1.5 1.5\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;# Generated by triangle <a href="CppOperatorMinus.htm">-</a>pqc box.poly\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("Refinement and Area Constraints:\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The <a href="CppOperatorMinus.htm">-</a>r <b><a href="CppSwitch.htm">switch</a></b> causes a mesh (.node and .ele files) to be read and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;refined.&nbsp;&nbsp;If the <a href="CppOperatorMinus.htm">-</a>p <b><a href="CppSwitch.htm">switch</a></b> is also used, a .poly file is read and used to\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;specify edges that are constrained and cannot be eliminated (although\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;they can be subdivided into smaller edges) by the refinement process.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;When you refine a mesh, you generally want to impose tighter constraints.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;One way to accomplish <b><a href="CppThis.htm">this</a></b> is to use <a href="CppOperatorMinus.htm">-</a>q with a larger angle, or <a href="CppOperatorMinus.htm">-</a>a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;followed by a smaller area than you used to generate the mesh you are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;refining.&nbsp;&nbsp;Another way to <b><a href="CppDo.htm">do</a></b> <b><a href="CppThis.htm">this</a></b> is to create an .area file, which\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;specifies a maximum area <b><a href="CppFor.htm">for</a></b> each triangle, and use the <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;(without a number following).&nbsp;&nbsp;Each triangle's area constraint is applied\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;to that triangle.&nbsp;&nbsp;Area constraints tend to diffuse as the mesh is\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;refined, so <b><a href="CppIf.htm">if</a></b> there are large variations in area constraint between\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;adjacent triangles, you may not get the results you want.&nbsp;&nbsp;In that <b><a href="CppCase.htm">case</a></b>,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;consider instead <b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>u <b><a href="CppSwitch.htm">switch</a></b> and writing a C procedure that\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;determines which triangles are too large.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you are refining a mesh composed of linear (three-node) elements, the\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;output mesh contains all the nodes present in the input mesh, in the same\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;order, with <b><a href="CppNew.htm">new</a></b> nodes added at the end of the .node file.&nbsp;&nbsp;However, the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;refinement is not hierarchical: there is no guarantee that each output\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;element is contained in a single input element.&nbsp;&nbsp;Often, an output element\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;can overlap two or three input elements, and some input edges are not\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;present in the output mesh.&nbsp;&nbsp;Hence, a sequence of refined meshes forms a\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;hierarchy of nodes, but not a hierarchy of elements.&nbsp;&nbsp;If you refine a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;mesh of higher-order elements, the hierarchical property applies only to\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;the nodes at the corners of an element; the mid<a href="CppPointer.htm">point</a> nodes on each edge\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;are discarded before the mesh is refined.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Maximum area constraints in .poly files operate differently from those in\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;.area files.&nbsp;&nbsp;A maximum area in a .poly file applies to the whole\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;(segment-bounded) region in which a <a href="CppPointer.htm">point</a> falls, whereas a maximum area\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;in an .area file applies to only one triangle.&nbsp;&nbsp;Area constraints in .poly\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;files are used only when a mesh is first generated, whereas area\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;constraints in .area files are used only to refine an existing mesh, and\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;are typically based on a posteriori error estimates resulting from a\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;finite element simulation on that mesh.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;`triangle <a href="CppOperatorMinus.htm">-</a>rq25 object.1' reads object.1.node and object.1.ele, then\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;refines the triangulation to enforce a 25 degree minimum angle, and then\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;writes the refined triangulation to object.2.node and object.2.ele.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;`triangle <a href="CppOperatorMinus.htm">-</a>rpaa6.2 z.3' reads z.3.node, z.3.ele, z.3.poly, and z.3.area.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;After re<a href="CppConstructor.htm">construct</a>ing the mesh and its subsegments, Triangle refines the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;mesh so that no triangle has area greater than 6.2, and furthermore the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;triangles satisfy the maximum area constraints in z.3.area.&nbsp;&nbsp;No angle\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;bound is imposed at all.&nbsp;&nbsp;The output is written to z.4.node, z.4.ele, and\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;z.4.poly.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The sequence `triangle <a href="CppOperatorMinus.htm">-</a>qa1 x', `triangle <a href="CppOperatorMinus.htm">-</a>rqa.3 x.1', `triangle <a href="CppOperatorMinus.htm">-</a>rqa.1\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;x.2' creates a sequence of successively finer meshes x.1, x.2, and x.3,\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;suitable for multigrid.\n\n");<br/>
&nbsp;&nbsp;printf("Convex Hulls and Mesh Boundaries:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If the input is a vertex set (not a PSLG), Triangle produces its convex\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;hull as a by-product in the output .poly file <b><a href="CppIf.htm">if</a></b> you use the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;There are faster <a href="CppAlgorithm.htm">algorithm</a>s <b><a href="CppFor.htm">for</a></b> finding a two-dimensional convex hull\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;than triangulation, of course, but <b><a href="CppThis.htm">this</a></b> one comes <b><a href="CppFor.htm">for</a></b> free.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If the input is an unconstrained mesh (you are <b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>r <b><a href="CppSwitch.htm">switch</a></b> but\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;not the <a href="CppOperatorMinus.htm">-</a>p <b><a href="CppSwitch.htm">switch</a></b>), Triangle produces a list of its boundary edges\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;(including hole boundaries) as a by-product when you use the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you also use the <a href="CppOperatorMinus.htm">-</a>p <b><a href="CppSwitch.htm">switch</a></b>, the output .poly file contains all the\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;segments from the input .poly file as well.\n\n");<br/>
&nbsp;&nbsp;printf("Voronoi Diagrams:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The <a href="CppOperatorMinus.htm">-</a>v <b><a href="CppSwitch.htm">switch</a></b> produces a Voronoi diagram, in files suffixed .v.node and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;.v.edge.&nbsp;&nbsp;For example, `triangle <a href="CppOperatorMinus.htm">-</a>v <a href="CppPointer.htm">point</a>s' reads <a href="CppPointer.htm">point</a>s.node, produces\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;its Delaunay triangulation in <a href="CppPointer.htm">point</a>s.1.node and <a href="CppPointer.htm">point</a>s.1.ele, and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;produces its Voronoi diagram in <a href="CppPointer.htm">point</a>s.1.v.node and <a href="CppPointer.htm">point</a>s.1.v.edge.&nbsp;&nbsp;The\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;.v.node file contains a list of all Voronoi vertices, and the .v.edge\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;file contains a list of all Voronoi edges, some of which may be infinite\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;rays.&nbsp;&nbsp;(The choice of filenames <a href="CppMake.htm">make</a>s it easy to run the set of Voronoi\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;vertices through Triangle, <b><a href="CppIf.htm">if</a></b> so desired.)\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;This implementation does not use exact arithmetic to compute the Voronoi\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;vertices, and does not check whether neighboring vertices are identical.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Be forewarned that <b><a href="CppIf.htm">if</a></b> the Delaunay triangulation is degenerate or\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;near-degenerate, the Voronoi diagram may have duplicate vertices or\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;crossing edges.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The result is a valid Voronoi diagram only <b><a href="CppIf.htm">if</a></b> Triangle's output is a <b><a href="CppTrue.htm">true</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Delaunay triangulation.&nbsp;&nbsp;The Voronoi output is usually meaningless (and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;may contain crossing edges and other pathology) <b><a href="CppIf.htm">if</a></b> the output is a CDT or\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;CCDT, or <b><a href="CppIf.htm">if</a></b> it has holes or concavities.&nbsp;&nbsp;If the triangulated domain is\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;convex and has no holes, you can use <a href="CppOperatorMinus.htm">-</a>D <b><a href="CppSwitch.htm">switch</a></b> to force Triangle to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<a href="CppConstructor.htm">construct</a> a conforming Delaunay triangulation instead of a CCDT, so the\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Voronoi diagram will be valid.\n\n");<br/>
&nbsp;&nbsp;printf("Mesh Topology:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;You may wish to know which triangles are adjacent to a certain Delaunay\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;edge in an .edge file, which Voronoi cells are adjacent to a certain\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Voronoi edge in a .v.edge file, or which Voronoi cells are adjacent to\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;each other.&nbsp;&nbsp;All of <b><a href="CppThis.htm">this</a></b> information can be found by cross-referencing\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;output files with the recollection that the Delaunay triangulation and\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;the Voronoi diagram are planar duals.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Specifically, edge i of an .edge file is the dual of Voronoi edge i of\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;the corresponding .v.edge file, and is rotated 90 degrees <a href="CppCounter.htm">counter</a>clock-\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;wise from the Voronoi edge.&nbsp;&nbsp;Triangle j of an .ele file is the dual of\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;vertex j of the corresponding .v.node file.&nbsp;&nbsp;Voronoi cell k is the dual\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;of vertex k of the corresponding .node file.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Hence, to find the triangles adjacent to a Delaunay edge, look at the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;vertices of the corresponding Voronoi edge.&nbsp;&nbsp;If the endpoints of a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Voronoi edge are Voronoi vertices 2 and 6 respectively, then triangles 2\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;and 6 adjoin the left and right sides of the corresponding Delaunay edge,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;respectively.&nbsp;&nbsp;To find the Voronoi cells adjacent to a Voronoi edge, look\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;at the endpoints of the corresponding Delaunay edge.&nbsp;&nbsp;If the endpoints of\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;a Delaunay edge are input vertices 7 and 12, then Voronoi cells 7 and 12\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;adjoin the right and left sides of the corresponding Voronoi edge,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;respectively.&nbsp;&nbsp;To find which Voronoi cells are adjacent to each other,\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;just read the list of Delaunay edges.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Triangle does not write a list of the edges adjoining each Voronoi cell,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;but you can re<a href="CppConstructor.htm">construct</a>ed it straightforwardly.&nbsp;&nbsp;For <a href="CppInstance.htm">instance</a>, to find\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;all the edges of Voronoi cell 1, search the output .edge file <b><a href="CppFor.htm">for</a></b> every\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;edge that has input vertex 1 as an endpoint.&nbsp;&nbsp;The corresponding dual\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;edges in the output .v.edge file form the boundary of Voronoi cell 1.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;For each Voronoi vertex, the .neigh file gives a list of the three\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Voronoi vertices attached to it.&nbsp;&nbsp;You might find <b><a href="CppThis.htm">this</a></b> more convenient\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;than the .v.edge file.\n\n");<br/>
&nbsp;&nbsp;printf("Quadratic Elements:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Triangle generates meshes with subparametric quadratic elements <b><a href="CppIf.htm">if</a></b> the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>o2 <b><a href="CppSwitch.htm">switch</a></b> is specified.&nbsp;&nbsp;Quadratic elements have six nodes per element,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;rather than three.&nbsp;&nbsp;`Subparametric' means that the edges of the triangles\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;are always straight, so that subparametric quadratic elements are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;geometrically identical to linear elements, even though they can be used\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;with quadratic interpolating <a href="CppFunction.htm">function</a>s.&nbsp;&nbsp;The three extra nodes of an\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;element fall at the mid<a href="CppPointer.htm">point</a>s of the three edges, with the fourth, fifth,\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;and sixth nodes appearing opposite the first, second, and third corners\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;respectively.\n\n");<br/>
&nbsp;&nbsp;printf("Domains with Small Angles:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If two input segments adjoin each other at a small angle, clearly the <a href="CppOperatorMinus.htm">-</a>q\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> cannot remove the small angle.&nbsp;&nbsp;Moreover, Triangle may have no\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;choice but to generate additional triangles whose smallest angles are\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;smaller than the specified bound.&nbsp;&nbsp;However, these triangles only appear\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;between input segments separated by small angles.&nbsp;&nbsp;Moreover, <b><a href="CppIf.htm">if</a></b> you\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;request a minimum angle of theta degrees, Triangle will generally produce\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;no angle larger than 180 <a href="CppOperatorMinus.htm">-</a> 2 theta, even <b><a href="CppIf.htm">if</a></b> it is forced to compromise on\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;the minimum angle.\n\n");<br/>
&nbsp;&nbsp;printf("Statistics:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;After generating a mesh, Triangle prints a count of entities in the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;output mesh, including the number of vertices, triangles, edges, exterior\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;boundary edges (i.e. subsegments on the boundary of the triangulation,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;including hole boundaries), interior boundary edges (i.e. subsegments of\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;input segments not on the boundary), and total subsegments.&nbsp;&nbsp;If you've\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;forgotten the statistics <b><a href="CppFor.htm">for</a></b> an existing mesh, run Triangle on that mesh\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;with the <a href="CppOperatorMinus.htm">-</a>rNEP <b><a href="CppSwitch.htm">switch</a></b>es to read the mesh and print the statistics without\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;writing <a href="CppAny.htm">any</a> files.&nbsp;&nbsp;Use <a href="CppOperatorMinus.htm">-</a>rpNEP <b><a href="CppIf.htm">if</a></b> you've got a .poly file <b><a href="CppFor.htm">for</a></b> the mesh.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The <a href="CppOperatorMinus.htm">-</a>V <b><a href="CppSwitch.htm">switch</a></b> produces extended statistics, including a rough estimate\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;of <a href="CppMemory.htm">memory</a> use, the number of calls to geometric <a href="CppPredicate.htm">predicate</a>s, and\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;histograms of the angles and the aspect ratios of the triangles in the\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;mesh.\n\n");<br/>
&nbsp;&nbsp;printf("Exact Arithmetic:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Triangle uses adaptive exact arithmetic to perform what computational\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;geometers call the `orientation' and `incircle' tests.&nbsp;&nbsp;If the floating-\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<a href="CppPointer.htm">point</a> arithmetic of your machine conforms to the IEEE 754 standard (as\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;most workstations <b><a href="CppDo.htm">do</a></b>), and does not use extended precision internal\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;floating-<a href="CppPointer.htm">point</a> <b><a href="CppRegister.htm">register</a></b>s, then your output is guaranteed to be an\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;absolutely <b><a href="CppTrue.htm">true</a></b> Delaunay or constrained Delaunay triangulation, roundoff\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;error notwithstanding.&nbsp;&nbsp;The word `adaptive' implies that these arithmetic\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;routines compute the result only to the precision necessary to guarantee\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;correctness, so they are usually nearly as fast as their approximate\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppCounter.htm">counter</a>parts.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;May CPUs, including Intel x86 processors, have extended precision\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;floating-<a href="CppPointer.htm">point</a> <b><a href="CppRegister.htm">register</a></b>s.&nbsp;&nbsp;These must be reconfigured so their precision\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;is reduced to <a href="CppMemory.htm">memory</a> precision.&nbsp;&nbsp;Triangle does <b><a href="CppThis.htm">this</a></b> <b><a href="CppIf.htm">if</a></b> it is <a href="CppCompile.htm">compile</a>d\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;correctly.&nbsp;&nbsp;See the <a href="CppMakefile.htm">makefile</a> <b><a href="CppFor.htm">for</a></b> details.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;The exact tests can be disabled with the <a href="CppOperatorMinus.htm">-</a>X <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;On most inputs, <b><a href="CppThis.htm">this</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> reduces the computation <a href="CppTime.htm">time</a> by <a href="CppAbout.htm">about</a> eight percent<a href="CppOperatorDecrement.htm">--</a>it's not\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;worth the risk.&nbsp;&nbsp;There are rare difficult inputs (having many collinear\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;and cocircular vertices), however, <b><a href="CppFor.htm">for</a></b> which the difference in speed\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;could be a factor of two.&nbsp;&nbsp;Be forewarned that these are precisely the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;inputs most likely to cause errors <b><a href="CppIf.htm">if</a></b> you use the <a href="CppOperatorMinus.htm">-</a>X <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;Hence, the\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>X <b><a href="CppSwitch.htm">switch</a></b> is not recommended.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Unfortunately, the exact tests don't solve every numerical problem.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Exact arithmetic is not used to compute the positions of <b><a href="CppNew.htm">new</a></b> vertices,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;because the bit complexity of vertex coordinates would grow without\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;bound.&nbsp;&nbsp;Hence, segment intersections aren't computed exactly; in very\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;unusual <b><a href="CppCase.htm">case</a></b>s, roundoff error in computing an intersection <a href="CppPointer.htm">point</a> might\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;actually lead to an inverted triangle and an invalid triangulation.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;(This is one reason to specify your own intersection <a href="CppPointer.htm">point</a>s in your .poly\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;files.)&nbsp;&nbsp;Similarly, exact arithmetic is not used to compute the vertices\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;of the Voronoi diagram.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Another pair of problems not solved by the exact arithmetic routines is\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;underflow and overflow.&nbsp;&nbsp;If Triangle is <a href="CppCompile.htm">compile</a>d <b><a href="CppFor.htm">for</a></b> <b><a href="CppDouble.htm">double</a></b> precision\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;arithmetic, I believe that Triangle's geometric <a href="CppPredicate.htm">predicate</a>s work correctly\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> the exponent of every input coordinate falls in the range [-148, 201].\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Underflow can silently prevent the orientation and incircle tests from\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;being performed exactly, <b><a href="CppWhile.htm">while</a></b> overflow typically causes a floating\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppException.htm">exception</a>.\n\n");<br/>
&nbsp;&nbsp;printf("Calling Triangle from Another Program:\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Read the file triangle.h <b><a href="CppFor.htm">for</a></b> details.\n\n");<br/>
&nbsp;&nbsp;printf("Troubleshooting:\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Please read <b><a href="CppThis.htm">this</a></b> section before mailing me <a href="CppBug.htm">bug</a>s.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;`My output mesh has no triangles!'\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;If you're <b><a href="CppUsing.htm">using</a></b> a PSLG, you've probably failed to specify a proper set\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;of bounding segments, or forgotten to use the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;Or you may\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;have placed a hole badly, thereby eating all your triangles.&nbsp;&nbsp;To test\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;these possibilities, <b><a href="CppTry.htm">try</a></b> again with the <a href="CppOperatorMinus.htm">-</a>c and <a href="CppOperatorMinus.htm">-</a>O <b><a href="CppSwitch.htm">switch</a></b>es.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Alternatively, all your input vertices may be collinear, in which <b><a href="CppCase.htm">case</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;you can hardly expect to triangulate them.\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;`Triangle doesn't terminate, or just crashes.'\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Bad things can happen when triangles get so small that the distance\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;between their vertices isn't much larger than the precision of your\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;machine's arithmetic.&nbsp;&nbsp;If you've <a href="CppCompile.htm">compile</a>d Triangle <b><a href="CppFor.htm">for</a></b> single-precision\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;arithmetic, you might <b><a href="CppDo.htm">do</a></b> better by recompiling it <b><a href="CppFor.htm">for</a></b> <b><a href="CppDouble.htm">double</a></b>-precision.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Then again, you might just have to settle for more lenient constraints\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;on the minimum angle and the maximum area than you had planned.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;You can minimize precision problems by ensuring that the origin lies\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;inside your vertex set, or even inside the densest part of your\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;mesh.&nbsp;&nbsp;If you're triangulating an object whose x-coordinates all fall\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;between 6247133 and 6247134, you're not leaving much floating-<a href="CppPointer.htm">point</a>\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;precision <b><a href="CppFor.htm">for</a></b> Triangle to work with.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Precision problems can occur covertly <b><a href="CppIf.htm">if</a></b> the input PSLG contains two\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;segments that meet (or intersect) at an extremely small angle, or <b><a href="CppIf.htm">if</a></b>\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;such an angle is introduced by the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;If you don't realize\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;that a tiny angle is being formed, you might never discover why\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Triangle is crashing.&nbsp;&nbsp;To check <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> possibility, use the <a href="CppOperatorMinus.htm">-</a>S <b><a href="CppSwitch.htm">switch</a></b>\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;(with an appropriate limit on the number of Steiner <a href="CppPointer.htm">point</a>s, found by\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;trial-and-error) to stop Triangle early, and view the output .poly file\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;with Show Me (described below).&nbsp;&nbsp;Look carefully <b><a href="CppFor.htm">for</a></b> regions where dense\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;clusters of vertices are forming and <b><a href="CppFor.htm">for</a></b> small angles between segments.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Zoom in closely, as such segments might look like a single segment from\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;a distance.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;If some of the input values are too large, Triangle may suffer a\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;floating <a href="CppException.htm">exception</a> due to overflow when attempting to perform an\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;orientation or incircle test.&nbsp;&nbsp;(Read the section on exact arithmetic\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;above.)&nbsp;&nbsp;Again, I recommend compiling Triangle <b><a href="CppFor.htm">for</a></b> <b><a href="CppDouble.htm">double</a></b> (rather\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;than single) precision arithmetic.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;Unexpected problems can arise <b><a href="CppIf.htm">if</a></b> you use quality meshing (-q, <a href="CppOperatorMinus.htm">-</a>a, or\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>u) with an input that is not segment-bounded<a href="CppOperatorDecrement.htm">--</a>that is, <b><a href="CppIf.htm">if</a></b> your input\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;is a vertex set, or you're <b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;If the convex hull of\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;your input vertices has collinear vertices on its boundary, an input\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;vertex that you think lies on the convex hull might actually lie just\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;inside the convex hull.&nbsp;&nbsp;If so, the vertex and the nearby convex hull\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;edge form an extremely thin triangle.&nbsp;&nbsp;When Triangle tries to refine\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;the mesh to enforce angle and area constraints, Triangle might generate\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;extremely tiny triangles, or it might fail because of insufficient\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;floating-<a href="CppPointer.htm">point</a> precision.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;`The numbering of the output vertices doesn't match the input vertices.'\n"<br/>
);<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;You may have had duplicate input vertices, or you may have eaten some\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;of your input vertices with a hole, or by placing them outside the area\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;enclosed by segments.&nbsp;&nbsp;In <a href="CppAny.htm">any</a> <b><a href="CppCase.htm">case</a></b>, you can solve the problem by not\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>j <b><a href="CppSwitch.htm">switch</a></b>.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;`Triangle executes without incident, but when I look at the resulting\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;mesh, it has overlapping triangles or other geometric inconsistencies.'\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;If you select the <a href="CppOperatorMinus.htm">-</a>X <b><a href="CppSwitch.htm">switch</a></b>, Triangle occasionally <a href="CppMake.htm">make</a>s mistakes due\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;to floating-<a href="CppPointer.htm">point</a> roundoff error.&nbsp;&nbsp;Although these errors are rare,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;don't use the <a href="CppOperatorMinus.htm">-</a>X <b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;If you still have problems, please report the\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBug.htm">bug</a>.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;`Triangle executes without incident, but when I look at the resulting\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Voronoi diagram, it has overlapping edges or other geometric\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;inconsistencies.'\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;If your input is a PSLG (-p), you can only expect a meaningful Voronoi\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;diagram <b><a href="CppIf.htm">if</a></b> the domain you are triangulating is convex and free of\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;&nbsp;&nbsp;holes, and you use the <a href="CppOperatorMinus.htm">-</a>D <b><a href="CppSwitch.htm">switch</a></b> to <a href="CppConstructor.htm">construct</a> a conforming Delaunay\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;triangulation (instead of a CDT or CCDT).\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Strange things can happen <b><a href="CppIf.htm">if</a></b> you've taken liberties with your PSLG.&nbsp;&nbsp;Do\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;you have a vertex lying in the middle of a segment?&nbsp;&nbsp;Triangle some<a href="CppTime.htm">time</a>s\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;copes poorly with that sort of thing.&nbsp;&nbsp;Do you want to lay out a collinear\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;row of evenly spaced, segment-connected vertices?&nbsp;&nbsp;Have you simply\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;defined one <b><a href="CppLong.htm">long</a></b> segment connecting the leftmost vertex to the rightmost\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;vertex, and a bunch of vertices lying along it?&nbsp;&nbsp;This <a href="CppMemberFunction.htm">member function</a> occasionally\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;works, especially with horizontal and vertical lines, but often it\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;doesn't, and you'll have to connect each adjacent pair of vertices with a\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;separate segment.&nbsp;&nbsp;If you don't like it, tough.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Furthermore, <b><a href="CppIf.htm">if</a></b> you have segments that intersect other than at their\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;endpoints, <b><a href="CppTry.htm">try</a></b> not to let the intersections fall extremely close to PSLG\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;vertices or each other.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you have problems refining a triangulation not produced by Triangle:\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Are you sure the triangulation is geometrically valid?&nbsp;&nbsp;Is it formatted\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;correctly <b><a href="CppFor.htm">for</a></b> Triangle?&nbsp;&nbsp;Are the triangles all listed so the first three\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;vertices are their corners in <a href="CppCounter.htm">counter</a>clockwise order?&nbsp;&nbsp;Are all of the\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;triangles constrained Delaunay?&nbsp;&nbsp;Triangle's Delaunay refinement <a href="CppAlgorithm.htm">algorithm</a>\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;assumes that it starts with a CDT.\n\n");<br/>
&nbsp;&nbsp;printf("Show Me:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Triangle comes with a separate program named `Show Me', whose primary\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;purpose is to draw meshes on your screen or in PostScript.&nbsp;&nbsp;Its secondary\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;purpose is to check the validity of your input files, and <b><a href="CppDo.htm">do</a></b> so more\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;thoroughly than Triangle does.&nbsp;&nbsp;Unlike Triangle, Show Me requires that\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;you have the X <a href="CppWindows.htm">Windows</a> system.&nbsp;&nbsp;Sorry, Microsoft <a href="CppWindows.htm">Windows</a> users.\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("Triangle on the Web:\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;To see an illustrated <a href="CppVersion.htm">version</a> of these instructions, check out\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;http://www.cs.cmu.edu/~quake/triangle.html\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf("A Brief Plea:\n");<br/>
&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you use Triangle, and especially <b><a href="CppIf.htm">if</a></b> you use it to accomplish real\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;work, I would like very much to hear from you.&nbsp;&nbsp;A <b><a href="CppShort.htm">short</a></b> letter or email\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;(to jrs@cs.berkeley.edu) desc<a href="CppRibi.htm">ribi</a>ng how you use Triangle will mean a lot\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;to me.&nbsp;&nbsp;The more people I know are <b><a href="CppUsing.htm">using</a></b> <b><a href="CppThis.htm">this</a></b> program, the more easily I\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;can justify spending <a href="CppTime.htm">time</a> on improvements, which in turn will benefit\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;you.&nbsp;&nbsp;Also, I can put you on a list to receive email whenever a <b><a href="CppNew.htm">new</a></b>\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppVersion.htm">version</a> of Triangle is available.\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you use a mesh generated by Triangle in a <b><a href="CppPublic.htm">public</a></b>ation, please include\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;an acknowledgment as well.&nbsp;&nbsp;And please spell Triangle with a capital `T'!\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;If you want to include a citation, use `Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;``Triangle: Engineering a 2D Quality Mesh Generator and Delaunay\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Triangulator,'' in Applied Computational Geometry:&nbsp;&nbsp;Towards Geometric\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Engineering (Ming C. Lin and Dinesh Manocha, editors), volume 1148 of\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Lecture Notes in Computer Science, pages 203-222, Springer-Verlag,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Berlin, May 1996.&nbsp;&nbsp;(From the First ACM Workshop on Applied Computational\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Geometry.)'\n\n");<br/>
&nbsp;&nbsp;printf("Research credit:\n\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Of course, I can take credit <b><a href="CppFor.htm">for</a></b> only a fraction of the ideas that made\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b> mesh generator possible.&nbsp;&nbsp;Triangle owes its existence to the efforts\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;of many fine computational geometers and other researchers, including\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Marshall Bern, L. Paul Chew, Kenneth L. Clarkson, Boris Delaunay, Rex A.\n"<br/>
);<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Dwyer, David Eppstein, Steven Fortune, Leonidas J. Guibas, Donald E.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Knuth, Charles L. Lawson, Der-Tsai Lee, Gary L. Miller, Ernst P. Mucke,\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Steven E. Pav, Douglas M. Priest, Jim Ruppert, Isaac Saias, Bruce J.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Schachter, Micha Sharir, Peter W. Shor, Daniel D. Sleator, Jorge Stolfi,\n"<br/>
);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Robert E. Tarjan, Alper Ungor, Christopher J. Van Wyk, Noel J.\n");<br/>
&nbsp;&nbsp;printf(<br/>
"&nbsp;&nbsp;Walkington, and Binhai Zhu.&nbsp;&nbsp;See the comments at the beginning of the\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;source code <b><a href="CppFor.htm">for</a></b> references.\n\n");<br/>
&nbsp;&nbsp;triexit(0);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;internalerror()&nbsp;&nbsp; Ask the user to send me the defective product.&nbsp;&nbsp;Exit.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> internalerror()<br/>
{<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Please report <b><a href="CppThis.htm">this</a></b> <a href="CppBug.htm">bug</a> to jrs@cs.berkeley.edu\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Include the message above, your input data set, and the exact\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;command line you used to run Triangle.\n");<br/>
&nbsp;&nbsp;triexit(1);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;parsecommandline()&nbsp;&nbsp; Read the command line, identify <b><a href="CppSwitch.htm">switch</a></b>es, and set&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; up options and file names.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> parsecommandline(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> parsecommandline(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>, b)<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<a href="CppDefine.htm">#define</a> STARTINDEX 0<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> STARTINDEX 1<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> increment;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> meshnumber;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j, k;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> workstring[<a href="CppCfile.htm">FILE</a>NAMESIZE];<br/>
<br/>
&nbsp;&nbsp;b-&gt;poly <a href="CppOperatorAssign.htm">=</a> b-&gt;refine <a href="CppOperatorAssign.htm">=</a> b-&gt;quality <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;vararea <a href="CppOperatorAssign.htm">=</a> b-&gt;fixedarea <a href="CppOperatorAssign.htm">=</a> b-&gt;usertest <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;regionattrib <a href="CppOperatorAssign.htm">=</a> b-&gt;convex <a href="CppOperatorAssign.htm">=</a> b-&gt;weighted <a href="CppOperatorAssign.htm">=</a> b-&gt;jettison <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;firstnumber <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;b-&gt;edgesout <a href="CppOperatorAssign.htm">=</a> b-&gt;voronoi <a href="CppOperatorAssign.htm">=</a> b-&gt;neighbors <a href="CppOperatorAssign.htm">=</a> b-&gt;geomview <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;nobound <a href="CppOperatorAssign.htm">=</a> b-&gt;nopolywritten <a href="CppOperatorAssign.htm">=</a> b-&gt;nonodewritten <a href="CppOperatorAssign.htm">=</a> b-&gt;noelewritten <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;noiterationnum <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;noholes <a href="CppOperatorAssign.htm">=</a> b-&gt;noexact <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;incremental <a href="CppOperatorAssign.htm">=</a> b-&gt;sweepline <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;dwyer <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;b-&gt;splitseg <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;docheck <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;nobisect <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;conformdel <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;b-&gt;steiner <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;b-&gt;order <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;b-&gt;minangle <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;b-&gt;maxarea <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
&nbsp;&nbsp;b-&gt;quiet <a href="CppOperatorAssign.htm">=</a> b-&gt;verbose <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;b-&gt;innodefilename[0] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> STARTINDEX; i &lt; <a href="CppArgc.htm">argc</a>; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][0] <a href="CppOperatorEqual.htm">==</a> '-') {<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> STARTINDEX; <a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorNotEqual.htm">!=</a> '\0'; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'p') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;poly <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'r') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;refine <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'q') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;quality <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorEqual.htm">==</a> '.')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (((<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorEqual.htm">==</a> '.')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;workstring[k] <a href="CppOperatorAssign.htm">=</a> <a href="CppArgc.htm">argv</a>[i][j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;workstring[k] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;minangle <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(workstring, (<b><a href="CppChar.htm">char</a></b> **) <a href="CppNULL.htm">NULL</a>);<br/>
	&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;minangle <a href="CppOperatorAssign.htm">=</a> 20.0;<br/>
	&nbsp;&nbsp;}<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'a') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;quality <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorEqual.htm">==</a> '.')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;fixedarea <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (((<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorEqual.htm">==</a> '.')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;workstring[k] <a href="CppOperatorAssign.htm">=</a> <a href="CppArgc.htm">argv</a>[i][j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;workstring[k] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;maxarea <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(workstring, (<b><a href="CppChar.htm">char</a></b> **) <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;maxarea <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Maximum area must be greater than zero.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;vararea <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	&nbsp;&nbsp;}<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'u') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;quality <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;usertest <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'A') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;regionattrib <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'c') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;convex <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'w') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;weighted <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'W') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;weighted <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'j') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;jettison <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'z') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;firstnumber <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'e') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;edgesout <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'v') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;voronoi <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'n') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;neighbors <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'g') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;geomview <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'B') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;nobound <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'P') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;nopolywritten <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'N') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;nonodewritten <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'E') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;noelewritten <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'I') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;noiterationnum <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'O') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;noholes <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'X') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;noexact <a href="CppOperatorAssign.htm">=</a> 1;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'o') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorEqual.htm">==</a> '2') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;order <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	}<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'Y') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;nobisect<a href="CppOperatorIncrement.htm">++</a>;<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'S') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;steiner <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppArgc.htm">argv</a>[i][j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;steiner <a href="CppOperatorAssign.htm">=</a> b-&gt;steiner * 10 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppInt.htm">int</a></b>) (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorMinus.htm">-</a> '0');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'i') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;incremental <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'F') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;sweepline <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'l') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;dwyer <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 's') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;splitseg <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'D') <a href="CppOperatorLogicalOr.htm">||</a> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'L')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;quality <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;conformdel <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'C') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;docheck <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'Q') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;quiet <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'V') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;verbose<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'h') <a href="CppOperatorLogicalOr.htm">||</a> (<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> 'H') <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppArgc.htm">argv</a>[i][j] <a href="CppOperatorEqual.htm">==</a> '?')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info();<br/>
	}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppArgc.htm">argc</a>); <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strncpy(b-&gt;innodefilename, <a href="CppArgc.htm">argv</a>[i], <a href="CppCfile.htm">FILE</a>NAMESIZE <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;innodefilename[<a href="CppCfile.htm">FILE</a>NAMESIZE <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;innodefilename[0] <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;syntax();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;b-&gt;innodefilename[<a href="CppStrlen.htm">strlen</a>(b-&gt;innodefilename) <a href="CppOperatorMinus.htm">-</a> 5], ".node")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;innodefilename[<a href="CppStrlen.htm">strlen</a>(b-&gt;innodefilename) <a href="CppOperatorMinus.htm">-</a> 5] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;b-&gt;innodefilename[<a href="CppStrlen.htm">strlen</a>(b-&gt;innodefilename) <a href="CppOperatorMinus.htm">-</a> 5], ".poly")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;innodefilename[<a href="CppStrlen.htm">strlen</a>(b-&gt;innodefilename) <a href="CppOperatorMinus.htm">-</a> 5] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;poly <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;}<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;b-&gt;innodefilename[<a href="CppStrlen.htm">strlen</a>(b-&gt;innodefilename) <a href="CppOperatorMinus.htm">-</a> 4], ".ele")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;innodefilename[<a href="CppStrlen.htm">strlen</a>(b-&gt;innodefilename) <a href="CppOperatorMinus.htm">-</a> 4] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;refine <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!strcmp(&amp;b-&gt;innodefilename[<a href="CppStrlen.htm">strlen</a>(b-&gt;innodefilename) <a href="CppOperatorMinus.htm">-</a> 5], ".area")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;innodefilename[<a href="CppStrlen.htm">strlen</a>(b-&gt;innodefilename) <a href="CppOperatorMinus.htm">-</a> 5] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;refine <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;quality <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;vararea <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;b-&gt;usesegments <a href="CppOperatorAssign.htm">=</a> b-&gt;poly <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;refine <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;quality <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;convex;<br/>
&nbsp;&nbsp;b-&gt;goodangle <a href="CppOperatorAssign.htm">=</a> cos(b-&gt;minangle * PI <a href="CppOperatorDivide.htm">/</a> 180.0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;goodangle <a href="CppOperatorEqual.htm">==</a> 1.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;offconstant <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;offconstant <a href="CppOperatorAssign.htm">=</a> 0.475 * sqrt((1.0 <a href="CppOperatorPlus.htm">+</a> b-&gt;goodangle) <a href="CppOperatorDivide.htm">/</a> (1.0 <a href="CppOperatorMinus.htm">-</a> b-&gt;goodangle));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;b-&gt;goodangle <a href="CppOperatorMultiplyAssign.htm">*=</a> b-&gt;goodangle;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;refine <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> b-&gt;noiterationnum) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Error:&nbsp;&nbsp;You cannot use the <a href="CppOperatorMinus.htm">-</a>I <b><a href="CppSwitch.htm">switch</a></b> when refining a triangulation.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Be careful not to allocate space <b><a href="CppFor.htm">for</a></b> element area constraints that <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; will never be as<b><a href="CppSigned.htm">signed</a></b> <a href="CppAny.htm">any</a> value (other than the <b><a href="CppDefault.htm">default</a></b> <a href="CppOperatorMinus.htm">-</a>1.0).&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;refine <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;vararea <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Be careful not to add an extra attribute to each element unless the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; input supports it (PSLG in, but not refining a preexisting mesh). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;refine <a href="CppOperatorLogicalOr.htm">||</a> !b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;regionattrib <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Regular/weighted triangulations are incompatible with PSLGs <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and meshing.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;weighted <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (b-&gt;poly <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;quality)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;weighted <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Warning:&nbsp;&nbsp;weighted triangulations (-w, <a href="CppOperatorMinus.htm">-</a>W) are incompatible\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;with PSLGs (-p) and meshing (-q, <a href="CppOperatorMinus.htm">-</a>a, <a href="CppOperatorMinus.htm">-</a>u).&nbsp;&nbsp;Weights ignored.\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;jettison <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> b-&gt;nonodewritten <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Warning:&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>j and <a href="CppOperatorMinus.htm">-</a>N <b><a href="CppSwitch.htm">switch</a></b>es are somewhat incompatible.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;If <a href="CppAny.htm">any</a> vertices are jettisoned, you will need the output\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;.node file to re<a href="CppConstructor.htm">construct</a> the <b><a href="CppNew.htm">new</a></b> node indices.");<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;strcpy(b-&gt;inpolyfilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;strcpy(b-&gt;inelefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;strcpy(b-&gt;areafilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;increment <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;strcpy(workstring, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;j <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (workstring[j] <a href="CppOperatorNotEqual.htm">!=</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((workstring[j] <a href="CppOperatorEqual.htm">==</a> '.') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (workstring[j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorNotEqual.htm">!=</a> '\0')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment <a href="CppOperatorAssign.htm">=</a> j <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;meshnumber <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (increment &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j <a href="CppOperatorAssign.htm">=</a> increment;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((workstring[j] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (workstring[j] <a href="CppOperatorLessEqual.htm">&lt;=</a> '9')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;meshnumber <a href="CppOperatorAssign.htm">=</a> meshnumber * 10 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppInt.htm">int</a></b>) (workstring[j] <a href="CppOperatorMinus.htm">-</a> '0');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (workstring[j] <a href="CppOperatorNotEqual.htm">!=</a> '\0');<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;noiterationnum) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;outnodefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;outelefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;edgefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;vnodefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;vedgefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;neighborfilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;offfilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;outnodefilename, ".node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;outelefilename, ".ele");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;edgefilename, ".edge");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;vnodefilename, ".v.node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;vedgefilename, ".v.edge");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;neighborfilename, ".neigh");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;offfilename, ".off");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (increment <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;outnodefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;outpolyfilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;outelefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;edgefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;vnodefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;vedgefilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;neighborfilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;offfilename, b-&gt;innodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;outnodefilename, ".1.node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;outpolyfilename, ".1.poly");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;outelefilename, ".1.ele");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;edgefilename, ".1.edge");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;vnodefilename, ".1.v.node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;vedgefilename, ".1.v.edge");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;neighborfilename, ".1.neigh");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;offfilename, ".1.off");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;workstring[increment] <a href="CppOperatorAssign.htm">=</a> '%';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;workstring[increment <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorAssign.htm">=</a> 'd';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;workstring[increment <a href="CppOperatorPlus.htm">+</a> 2] <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSprintf.htm">sprintf</a>(b-&gt;outnodefilename, workstring, meshnumber <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;outpolyfilename, b-&gt;outnodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;outelefilename, b-&gt;outnodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;edgefilename, b-&gt;outnodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;vnodefilename, b-&gt;outnodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;vedgefilename, b-&gt;outnodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;neighborfilename, b-&gt;outnodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(b-&gt;offfilename, b-&gt;outnodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;outnodefilename, ".node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;outpolyfilename, ".poly");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;outelefilename, ".ele");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;edgefilename, ".edge");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;vnodefilename, ".v.node");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;vedgefilename, ".v.edge");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;neighborfilename, ".neigh");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcat(b-&gt;offfilename, ".off");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;strcat(b-&gt;innodefilename, ".node");<br/>
&nbsp;&nbsp;strcat(b-&gt;inpolyfilename, ".poly");<br/>
&nbsp;&nbsp;strcat(b-&gt;inelefilename, ".ele");<br/>
&nbsp;&nbsp;strcat(b-&gt;areafilename, ".area");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** User interaction routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** <a href="CppDebug.htm">Debugging</a> routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;printtriangle()&nbsp;&nbsp; Print out the details of an oriented triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;I originally wrote <b><a href="CppThis.htm">this</a></b> procedure to simplify <a href="CppDebug.htm">debugging</a>; it can be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;called directly from the <a href="CppDebug.htm">debug</a>ger, and presents information <a href="CppAbout.htm">about</a> an&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;oriented triangle in digestible form.&nbsp;&nbsp;It's also used when the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;highest level of verbosity (`-VVV') is specified.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> ANSI_DECLARATORS<br/>
<a href="CppIfdef.htm">#ifdef</a>&nbsp;&nbsp;ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> printtriangle(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *t)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> printtriangle(m, b, t)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *t;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri printtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub printsh;<br/>
&nbsp;&nbsp;vertex printvertex;<br/>
<br/>
&nbsp;&nbsp;printf("triangle x%lx with orientation <a href="CppOperatorModulus.htm">%</a>d:\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) t-&gt;tri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t-&gt;orient);<br/>
&nbsp;&nbsp;decode(t-&gt;tri[0], printtri);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printtri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[0] <a href="CppOperatorAssign.htm">=</a> Outer space\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[0] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printtri.tri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printtri.orient);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;decode(t-&gt;tri[1], printtri);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printtri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[1] <a href="CppOperatorAssign.htm">=</a> Outer space\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[1] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printtri.tri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printtri.orient);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;decode(t-&gt;tri[2], printtri);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printtri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[2] <a href="CppOperatorAssign.htm">=</a> Outer space\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[2] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printtri.tri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printtri.orient);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;org(*t, printvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printvertex <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Origin[%d] <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>\n", (t-&gt;orient <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3 <a href="CppOperatorPlus.htm">+</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Origin[%d] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (t-&gt;orient <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 3 <a href="CppOperatorPlus.htm">+</a> 3, (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printvertex[0], printvertex[1]);<br/>
&nbsp;&nbsp;dest(*t, printvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printvertex <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Dest&nbsp;&nbsp;[%d] <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>\n", (t-&gt;orient <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3 <a href="CppOperatorPlus.htm">+</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Dest&nbsp;&nbsp;[%d] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (t-&gt;orient <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorModulus.htm">%</a> 3 <a href="CppOperatorPlus.htm">+</a> 3, (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printvertex[0], printvertex[1]);<br/>
&nbsp;&nbsp;apex(*t, printvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printvertex <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Apex&nbsp;&nbsp;[%d] <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>\n", t-&gt;orient <a href="CppOperatorPlus.htm">+</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Apex&nbsp;&nbsp;[%d] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t-&gt;orient <a href="CppOperatorPlus.htm">+</a> 3, (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printvertex[0], printvertex[1]);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sdecode(t-&gt;tri[6], printsh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printsh.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[6] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printsh.ss,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printsh.ssorient);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sdecode(t-&gt;tri[7], printsh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printsh.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[7] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printsh.ss,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printsh.ssorient);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sdecode(t-&gt;tri[8], printsh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printsh.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[8] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printsh.ss,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printsh.ssorient);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Area constraint:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.4g\n", areabound(*t));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;printsubseg()&nbsp;&nbsp; Print out the details of an oriented subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;I originally wrote <b><a href="CppThis.htm">this</a></b> procedure to simplify <a href="CppDebug.htm">debugging</a>; it can be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;called directly from the <a href="CppDebug.htm">debug</a>ger, and presents information <a href="CppAbout.htm">about</a> an&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;oriented subsegment in digestible form.&nbsp;&nbsp;It's also used when the highest <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;level of verbosity (`-VVV') is specified.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> printsubseg(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> osub *s)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> printsubseg(m, b, s)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> osub *s;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub printsh;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri printtri;<br/>
&nbsp;&nbsp;vertex printvertex;<br/>
<br/>
&nbsp;&nbsp;printf("subsegment x%lx with orientation <a href="CppOperatorModulus.htm">%</a>d and mark <a href="CppOperatorModulus.htm">%</a>d:\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) s-&gt;ss, s-&gt;ssorient, mark(*s));<br/>
&nbsp;&nbsp;sdecode(s-&gt;ss[0], printsh);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printsh.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[0] <a href="CppOperatorAssign.htm">=</a> No subsegment\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[0] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printsh.ss,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printsh.ssorient);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;sdecode(s-&gt;ss[1], printsh);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printsh.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[1] <a href="CppOperatorAssign.htm">=</a> No subsegment\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[1] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printsh.ss,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printsh.ssorient);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;sorg(*s, printvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printvertex <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Origin[%d] <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>\n", 2 <a href="CppOperatorPlus.htm">+</a> s-&gt;ssorient);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Origin[%d] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2 <a href="CppOperatorPlus.htm">+</a> s-&gt;ssorient, (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printvertex[0], printvertex[1]);<br/>
&nbsp;&nbsp;sdest(*s, printvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printvertex <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Dest&nbsp;&nbsp;[%d] <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>\n", 3 <a href="CppOperatorMinus.htm">-</a> s-&gt;ssorient);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Dest&nbsp;&nbsp;[%d] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3 <a href="CppOperatorMinus.htm">-</a> s-&gt;ssorient, (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printvertex[0], printvertex[1]);<br/>
<br/>
&nbsp;&nbsp;decode(s-&gt;ss[6], printtri);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printtri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[6] <a href="CppOperatorAssign.htm">=</a> Outer space\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[6] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printtri.tri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printtri.orient);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;decode(s-&gt;ss[7], printtri);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printtri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[7] <a href="CppOperatorAssign.htm">=</a> Outer space\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;[7] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printtri.tri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printtri.orient);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;segorg(*s, printvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printvertex <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Segment origin[%d] <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>\n", 4 <a href="CppOperatorPlus.htm">+</a> s-&gt;ssorient);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Segment origin[%d] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4 <a href="CppOperatorPlus.htm">+</a> s-&gt;ssorient, (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printvertex[0], printvertex[1]);<br/>
&nbsp;&nbsp;segdest(*s, printvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (printvertex <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Segment dest&nbsp;&nbsp;[%d] <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>\n", 5 <a href="CppOperatorMinus.htm">-</a> s-&gt;ssorient);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Segment dest&nbsp;&nbsp;[%d] <a href="CppOperatorAssign.htm">=</a> x%lx&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5 <a href="CppOperatorMinus.htm">-</a> s-&gt;ssorient, (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) printvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printvertex[0], printvertex[1]);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** <a href="CppDebug.htm">Debugging</a> routines end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** <a href="CppMemory.htm">Memory</a> management routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;poolzero()&nbsp;&nbsp; Set all of a pool's fields to zero.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This procedure should never be called on a pool that has <a href="CppAny.htm">any</a> <a href="CppMemory.htm">memory</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;allocated to it, as that <a href="CppMemory.htm">memory</a> would leak.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> poolzero(<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> poolzero(pool)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;pool-&gt;firstblock <a href="CppOperatorAssign.htm">=</a> (VOID **) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;pool-&gt;nowblock <a href="CppOperatorAssign.htm">=</a> (VOID **) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;pool-&gt;nextitem <a href="CppOperatorAssign.htm">=</a> (VOID *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;pool-&gt;deaditemstack <a href="CppOperatorAssign.htm">=</a> (VOID *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;pool-&gt;pathblock <a href="CppOperatorAssign.htm">=</a> (VOID **) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;pool-&gt;pathitem <a href="CppOperatorAssign.htm">=</a> (VOID *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;pool-&gt;alignbytes <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;pool-&gt;itembytes <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;pool-&gt;itemsperblock <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;pool-&gt;itemsfirstblock <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;pool-&gt;items <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;pool-&gt;maxitems <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;pool-&gt;unallocateditems <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;pool-&gt;pathitemsleft <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;poolrestart()&nbsp;&nbsp; Deallocate all items in a pool.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The pool is <b><a href="CppReturn.htm">return</a></b>ed to its starting state, except that no <a href="CppMemory.htm">memory</a> is&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;freed to the operating system.&nbsp;&nbsp;Rather, the previously allocated blocks&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;are ready to be reused.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> poolrestart(<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> poolrestart(pool)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> alignptr;<br/>
<br/>
&nbsp;&nbsp;pool-&gt;items <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;pool-&gt;maxitems <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the currently active block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;nowblock <a href="CppOperatorAssign.htm">=</a> pool-&gt;firstblock;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the first item in the pool.&nbsp;&nbsp;Increment by the size of (VOID *). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;alignptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (pool-&gt;nowblock <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Align the item on an `alignbytes'-byte boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;nextitem <a href="CppOperatorAssign.htm">=</a> (VOID *)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(alignptr <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) pool-&gt;alignbytes <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (alignptr <a href="CppOperatorModulus.htm">%</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) pool-&gt;alignbytes));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There are lots of unallocated items left in <b><a href="CppThis.htm">this</a></b> block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;unallocateditems <a href="CppOperatorAssign.htm">=</a> pool-&gt;itemsfirstblock;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The stack of deallocated items is empty. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;deaditemstack <a href="CppOperatorAssign.htm">=</a> (VOID *) <a href="CppNULL.htm">NULL</a>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;poolinit()&nbsp;&nbsp; <a href="CppInitialize.htm">Initialize</a> a pool of <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> allocation of items.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This routine <a href="CppInitialize.htm">initialize</a>s the machinery <b><a href="CppFor.htm">for</a></b> allocating items.&nbsp;&nbsp;A `pool'&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is created whose records have size at least `bytecount'.&nbsp;&nbsp;Items will be&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;allocated in `itemcount'-item blocks.&nbsp;&nbsp;Each item is assumed to be a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;collection of words, and either <a href="CppPointer.htm">pointer</a>s or floating-<a href="CppPointer.htm">point</a> values are&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;assumed to be the "primary" word type.&nbsp;&nbsp;(The "primary" word type is used <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to determine alignment of items.)&nbsp;&nbsp;If `alignment' isn't zero, all items&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;will be `alignment'-byte aligned in <a href="CppMemory.htm">memory</a>.&nbsp;&nbsp;`alignment' must be either&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;a multiple or a factor of the primary word size; powers of two are safe. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`alignment' is normally used to create a few unused bits at the bottom&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of each item's <a href="CppPointer.htm">pointer</a>, in which information may be stored.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Don't change <b><a href="CppThis.htm">this</a></b> routine unless you understand it.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> poolinit(<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool, <b><a href="CppInt.htm">int</a></b> bytecount, <b><a href="CppInt.htm">int</a></b> itemcount,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> firstitemcount, <b><a href="CppInt.htm">int</a></b> alignment)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> poolinit(pool, bytecount, itemcount, firstitemcount, alignment)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool;<br/>
<b><a href="CppInt.htm">int</a></b> bytecount;<br/>
<b><a href="CppInt.htm">int</a></b> itemcount;<br/>
<b><a href="CppInt.htm">int</a></b> firstitemcount;<br/>
<b><a href="CppInt.htm">int</a></b> alignment;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the proper alignment, which must be at least as large as:&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> The parameter `alignment'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> <b><a href="CppSizeof.htm">sizeof</a></b>(VOID *), so the stack of dead items can be maintained <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; without unaligned accesses.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (alignment &gt; <b><a href="CppSizeof.htm">sizeof</a></b>(VOID *)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;alignbytes <a href="CppOperatorAssign.htm">=</a> alignment;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;alignbytes <a href="CppOperatorAssign.htm">=</a> <b><a href="CppSizeof.htm">sizeof</a></b>(VOID *);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pool-&gt;itembytes <a href="CppOperatorAssign.htm">=</a> ((bytecount <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorDivide.htm">/</a> pool-&gt;alignbytes <a href="CppOperatorPlus.htm">+</a> 1) *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;alignbytes;<br/>
&nbsp;&nbsp;pool-&gt;itemsperblock <a href="CppOperatorAssign.htm">=</a> itemcount;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (firstitemcount <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;itemsfirstblock <a href="CppOperatorAssign.htm">=</a> itemcount;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;itemsfirstblock <a href="CppOperatorAssign.htm">=</a> firstitemcount;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate a block of items.&nbsp;&nbsp;Space <b><a href="CppFor.htm">for</a></b> `itemsfirstblock' items and one&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppPointer.htm">pointer</a> (to <a href="CppPointer.htm">point</a> to the next block) are allocated, as well as space <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to ensure alignment of the items.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;firstblock <a href="CppOperatorAssign.htm">=</a> (VOID **)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trimalloc(pool-&gt;itemsfirstblock * pool-&gt;itembytes <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(VOID *) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;alignbytes);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the next block <a href="CppPointer.htm">pointer</a> to <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;*(pool-&gt;firstblock) <a href="CppOperatorAssign.htm">=</a> (VOID *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;poolrestart(pool);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;pooldeinit()&nbsp;&nbsp; Free to the operating system all <a href="CppMemory.htm">memory</a> taken by a pool.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> pooldeinit(<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> pooldeinit(pool)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (pool-&gt;firstblock <a href="CppOperatorNotEqual.htm">!=</a> (VOID **) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;nowblock <a href="CppOperatorAssign.htm">=</a> (VOID **) *(pool-&gt;firstblock);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trifree((VOID *) pool-&gt;firstblock);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;firstblock <a href="CppOperatorAssign.htm">=</a> pool-&gt;nowblock;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;poolalloc()&nbsp;&nbsp; Allocate space <b><a href="CppFor.htm">for</a></b> an item.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
VOID *poolalloc(<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
VOID *poolalloc(pool)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;VOID *newitem;<br/>
&nbsp;&nbsp;VOID **newblock;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> alignptr;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> First check the <a href="CppLink.htm">link</a>ed list of dead items.&nbsp;&nbsp;If the list is not&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; empty, allocate an item from the list rather than a fresh one. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pool-&gt;deaditemstack <a href="CppOperatorNotEqual.htm">!=</a> (VOID *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newitem <a href="CppOperatorAssign.htm">=</a> pool-&gt;deaditemstack;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Take first item in list. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;deaditemstack <a href="CppOperatorAssign.htm">=</a> * (VOID **) pool-&gt;deaditemstack;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> there are <a href="CppAny.htm">any</a> free items left in the current block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pool-&gt;unallocateditems <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> another block must be allocated. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*(pool-&gt;nowblock) <a href="CppOperatorEqual.htm">==</a> (VOID *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate a <b><a href="CppNew.htm">new</a></b> block of items, <a href="CppPointer.htm">point</a>ed to by the previous block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newblock <a href="CppOperatorAssign.htm">=</a> (VOID **) trimalloc(pool-&gt;itemsperblock * pool-&gt;itembytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(VOID *) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pool-&gt;alignbytes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*(pool-&gt;nowblock) <a href="CppOperatorAssign.htm">=</a> (VOID *) newblock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The next block <a href="CppPointer.htm">pointer</a> is <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*newblock <a href="CppOperatorAssign.htm">=</a> (VOID *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Move to the <b><a href="CppNew.htm">new</a></b> block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;nowblock <a href="CppOperatorAssign.htm">=</a> (VOID **) *(pool-&gt;nowblock);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the first item in the block.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Increment by the size of (VOID *). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alignptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (pool-&gt;nowblock <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Align the item on an `alignbytes'-byte boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;nextitem <a href="CppOperatorAssign.htm">=</a> (VOID *)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(alignptr <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) pool-&gt;alignbytes <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (alignptr <a href="CppOperatorModulus.htm">%</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) pool-&gt;alignbytes));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There are lots of unallocated items left in <b><a href="CppThis.htm">this</a></b> block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;unallocateditems <a href="CppOperatorAssign.htm">=</a> pool-&gt;itemsperblock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate a <b><a href="CppNew.htm">new</a></b> item. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;newitem <a href="CppOperatorAssign.htm">=</a> pool-&gt;nextitem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Advance `nextitem' <a href="CppPointer.htm">pointer</a> to next free item in block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;nextitem <a href="CppOperatorAssign.htm">=</a> (VOID *) ((<b><a href="CppChar.htm">char</a></b> *) pool-&gt;nextitem <a href="CppOperatorPlus.htm">+</a> pool-&gt;itembytes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;unallocateditems<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;maxitems<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pool-&gt;items<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> newitem;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;pooldealloc()&nbsp;&nbsp; Deallocate space <b><a href="CppFor.htm">for</a></b> an item.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The deallocated space is stored in a queue <b><a href="CppFor.htm">for</a></b> later reuse.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> pooldealloc(<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool, VOID *dyingitem)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> pooldealloc(pool, dyingitem)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool;<br/>
VOID *dyingitem;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Push freshly killed item onto stack. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;*((VOID **) dyingitem) <a href="CppOperatorAssign.htm">=</a> pool-&gt;deaditemstack;<br/>
&nbsp;&nbsp;pool-&gt;deaditemstack <a href="CppOperatorAssign.htm">=</a> dyingitem;<br/>
&nbsp;&nbsp;pool-&gt;items<a href="CppOperatorDecrement.htm">--</a>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;traversalinit()&nbsp;&nbsp; Prepare to traverse the entire list of items.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This routine is used in conjunction with traverse().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> traversalinit(<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> traversalinit(pool)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> alignptr;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Begin the traversal in the first block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;pathblock <a href="CppOperatorAssign.htm">=</a> pool-&gt;firstblock;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the first item in the block.&nbsp;&nbsp;Increment by the size of (VOID *). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;alignptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (pool-&gt;pathblock <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Align with item on an `alignbytes'-byte boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;pathitem <a href="CppOperatorAssign.htm">=</a> (VOID *)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(alignptr <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) pool-&gt;alignbytes <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (alignptr <a href="CppOperatorModulus.htm">%</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) pool-&gt;alignbytes));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the number of items left in the current block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;pathitemsleft <a href="CppOperatorAssign.htm">=</a> pool-&gt;itemsfirstblock;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;traverse()&nbsp;&nbsp; Find the next item in the list.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This routine is used in conjunction with traversalinit().&nbsp;&nbsp;Be forewarned <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;that <b><a href="CppThis.htm">this</a></b> routine successively <a href="CppReturn.htm">returns</a> all items in the list, including&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;deallocated ones on the deaditemqueue.&nbsp;&nbsp;It's up to you to figure out&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;which ones are actually dead.&nbsp;&nbsp;Why?&nbsp;&nbsp;I don't want to allocate extra&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;space just to demarcate dead items.&nbsp;&nbsp;It can usually be done more&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;space-efficiently by a routine that knows something <a href="CppAbout.htm">about</a> the structure&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of the item.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
VOID *traverse(<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
VOID *traverse(pool)<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMemory.htm">memory</a>pool *pool;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;VOID *newitem;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> alignptr;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Stop upon exhausting the list of items. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pool-&gt;pathitem <a href="CppOperatorEqual.htm">==</a> pool-&gt;nextitem) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (VOID *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether <a href="CppAny.htm">any</a> untraversed items remain in the current block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pool-&gt;pathitemsleft <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the next block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;pathblock <a href="CppOperatorAssign.htm">=</a> (VOID **) *(pool-&gt;pathblock);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the first item in the block.&nbsp;&nbsp;Increment by the size of (VOID *). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;alignptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (pool-&gt;pathblock <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Align with item on an `alignbytes'-byte boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;pathitem <a href="CppOperatorAssign.htm">=</a> (VOID *)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(alignptr <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) pool-&gt;alignbytes <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (alignptr <a href="CppOperatorModulus.htm">%</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) pool-&gt;alignbytes));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the number of items left in the current block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;pool-&gt;pathitemsleft <a href="CppOperatorAssign.htm">=</a> pool-&gt;itemsperblock;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;newitem <a href="CppOperatorAssign.htm">=</a> pool-&gt;pathitem;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the next item in the block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pool-&gt;pathitem <a href="CppOperatorAssign.htm">=</a> (VOID *) ((<b><a href="CppChar.htm">char</a></b> *) pool-&gt;pathitem <a href="CppOperatorPlus.htm">+</a> pool-&gt;itembytes);<br/>
&nbsp;&nbsp;pool-&gt;pathitemsleft<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> newitem;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;dummyinit()&nbsp;&nbsp; <a href="CppInitialize.htm">Initialize</a> the triangle that fills "outer space" and the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;omnipresent subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The triangle that fills "outer space," called `dummytri', is <a href="CppPointer.htm">point</a>ed to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;by every triangle and subsegment on a boundary (be it outer or inner) of <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the triangulation.&nbsp;&nbsp;Also, `dummytri' <a href="CppPointer.htm">point</a>s to one of the triangles on&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the convex hull (until the holes and concavities are carved), making it&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;possible to find a starting triangle <b><a href="CppFor.htm">for</a></b> <a href="CppPointer.htm">point</a> location.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The omnipresent subsegment, `dummysub', is <a href="CppPointer.htm">point</a>ed to by every triangle&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;or subsegment that doesn't have a full complement of real subsegments&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to <a href="CppPointer.htm">point</a> to.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`dummytri' and `dummysub' are generally required to fulfill only a few&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppInvariant.htm">invariant</a>s:&nbsp;&nbsp;their vertices must remain <a href="CppNULL.htm">NULL</a> and `dummytri' must always&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;be bonded (at offset zero) to some triangle on the convex hull of the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;mesh, via a boundary edge.&nbsp;&nbsp;Otherwise, the connections of `dummytri' and <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`dummysub' may change willy-nilly.&nbsp;&nbsp;This <a href="CppMake.htm">make</a>s it possible to avoid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;writing a good deal of special-<b><a href="CppCase.htm">case</a></b> code (in the edge flip, <b><a href="CppFor.htm">for</a></b> example) <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> dealing with the boundary of the mesh, places where no subsegment is <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;present, and so forth.&nbsp;&nbsp;Other entities are frequently bonded to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`dummytri' and `dummysub' as <b><a href="CppIf.htm">if</a></b> they were real mesh entities, with no&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;harm done.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> dummyinit(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppInt.htm">int</a></b> trianglebytes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> subsegbytes)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> dummyinit(m, b, trianglebytes, subsegbytes)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> trianglebytes;<br/>
<b><a href="CppInt.htm">int</a></b> subsegbytes;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> alignptr;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set up `dummytri', the `triangle' that occupies "outer space." <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;dummytribase <a href="CppOperatorAssign.htm">=</a> (triangle *) trimalloc(trianglebytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;triangles.alignbytes);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Align `dummytri' on a `triangles.alignbytes'-byte boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;alignptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;dummytribase;<br/>
&nbsp;&nbsp;m-&gt;dummytri <a href="CppOperatorAssign.htm">=</a> (triangle *)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(alignptr <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;triangles.alignbytes <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp; (alignptr <a href="CppOperatorModulus.htm">%</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;triangles.alignbytes));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the three adjoining triangles to be "outer space."&nbsp;&nbsp;These&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; will eventually be changed by various bonding operations, but their <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; values don't really matter, as <b><a href="CppLong.htm">long</a></b> as they can legally be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; dereferenced.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;dummytri[0] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummytri;<br/>
&nbsp;&nbsp;m-&gt;dummytri[1] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummytri;<br/>
&nbsp;&nbsp;m-&gt;dummytri[2] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummytri;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Three <a href="CppNULL.htm">NULL</a> vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;dummytri[3] <a href="CppOperatorAssign.htm">=</a> (triangle) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;m-&gt;dummytri[4] <a href="CppOperatorAssign.htm">=</a> (triangle) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;m-&gt;dummytri[5] <a href="CppOperatorAssign.htm">=</a> (triangle) <a href="CppNULL.htm">NULL</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set up `dummysub', the omnipresent subsegment <a href="CppPointer.htm">point</a>ed to by <a href="CppAny.htm">any</a> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle side or subsegment end that isn't attached to a real <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysubbase <a href="CppOperatorAssign.htm">=</a> (subseg *) trimalloc(subsegbytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;subsegs.alignbytes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Align `dummysub' on a `subsegs.alignbytes'-byte boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;alignptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;dummysubbase;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub <a href="CppOperatorAssign.htm">=</a> (subseg *)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(alignptr <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;subsegs.alignbytes <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (alignptr <a href="CppOperatorModulus.htm">%</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;subsegs.alignbytes));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the two adjoining subsegments to be the omnipresent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment.&nbsp;&nbsp;These will eventually be changed by various bonding&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; operations, but their values don't really matter, as <b><a href="CppLong.htm">long</a></b> as they <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; can legally be dereferenced.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub[0] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub[1] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Four <a href="CppNULL.htm">NULL</a> vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub[2] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub[3] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub[4] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub[5] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the two adjoining triangles to be "outer space." <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub[6] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummysub[7] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the boundary marker to zero. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (<b><a href="CppInt.htm">int</a></b> *) (m-&gt;dummysub <a href="CppOperatorPlus.htm">+</a> 8) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the three adjoining subsegments of `dummytri' to be <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the omnipresent subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummytri[6] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummytri[7] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;dummytri[8] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummysub;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>vertexpool()&nbsp;&nbsp; Calculate the size of the vertex data structure <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and <a href="CppInitialize.htm">initialize</a> its <a href="CppMemory.htm">memory</a> pool.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This routine also computes the `vertexmarkindex' and `vertex2triindex'&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;indices used to find values within each vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppInitialize.htm">initialize</a>vertexpool(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppInitialize.htm">initialize</a>vertexpool(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vertexsize;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The index within each vertex at which the boundary marker is found,&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; followed by the vertex type.&nbsp;&nbsp;Ensure the vertex marker is aligned to <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; a <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)-byte <a href="CppAddress.htm">address</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;vertexmarkindex <a href="CppOperatorAssign.htm">=</a> ((m-&gt;mesh_dim <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras) * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>) <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>);<br/>
&nbsp;&nbsp;vertexsize <a href="CppOperatorAssign.htm">=</a> (m-&gt;vertexmarkindex <a href="CppOperatorPlus.htm">+</a> 2) * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The index within each vertex at which a triangle <a href="CppPointer.htm">pointer</a> is found.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Ensure the <a href="CppPointer.htm">pointer</a> is aligned to a <b><a href="CppSizeof.htm">sizeof</a></b>(triangle)-byte <a href="CppAddress.htm">address</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;vertex2triindex <a href="CppOperatorAssign.htm">=</a> (vertexsize <a href="CppOperatorPlus.htm">+</a> <b><a href="CppSizeof.htm">sizeof</a></b>(triangle) <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppSizeof.htm">sizeof</a></b>(triangle);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexsize <a href="CppOperatorAssign.htm">=</a> (m-&gt;vertex2triindex <a href="CppOperatorPlus.htm">+</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(triangle);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the pool of vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;poolinit(&amp;m-&gt;vertices, vertexsize, VERTEXPERBLOCK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;invertices &gt; VERTEXPERBLOCK ? m-&gt;invertices : VERTEXPERBLOCK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>trisubpools()&nbsp;&nbsp; Calculate the sizes of the triangle and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subsegment data structures and <a href="CppInitialize.htm">initialize</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;their <a href="CppMemory.htm">memory</a> pools.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This routine also computes the `highorderindex', `elematt<a href="CppRibi.htm">ribi</a>ndex', and&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`areaboundindex' indices used to find values within each triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppInitialize.htm">initialize</a>trisubpools(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppInitialize.htm">initialize</a>trisubpools(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> trisize;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The index within each triangle at which the extra nodes (above three)&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; associated with high order elements are found.&nbsp;&nbsp;There are three&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppPointer.htm">pointer</a>s to other triangles, three <a href="CppPointer.htm">pointer</a>s to corners, and possibly <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; three <a href="CppPointer.htm">pointer</a>s to subsegments before the extra nodes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;highorderindex <a href="CppOperatorAssign.htm">=</a> 6 <a href="CppOperatorPlus.htm">+</a> (b-&gt;usesegments * 3);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The number of bytes occupied by a triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;trisize <a href="CppOperatorAssign.htm">=</a> ((b-&gt;order <a href="CppOperatorPlus.htm">+</a> 1) * (b-&gt;order <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorDivide.htm">/</a> 2 <a href="CppOperatorPlus.htm">+</a> (m-&gt;highorderindex <a href="CppOperatorMinus.htm">-</a> 3)) *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSizeof.htm">sizeof</a></b>(triangle);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The index within each triangle at which its attributes are found, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; where the index is measured in REALs.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;elematt<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorAssign.htm">=</a> (trisize <a href="CppOperatorPlus.htm">+</a> <b><a href="CppSizeof.htm">sizeof</a></b>(REAL) <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppSizeof.htm">sizeof</a></b>(REAL);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The index within each triangle at which the maximum area constraint&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; is found, where the index is measured in REALs.&nbsp;&nbsp;Note that <b><a href="CppIf.htm">if</a></b> the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; `regionattrib' flag is set, an additional attribute will be added. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;areaboundindex <a href="CppOperatorAssign.htm">=</a> m-&gt;elematt<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorPlus.htm">+</a> m-&gt;eextras <a href="CppOperatorPlus.htm">+</a> b-&gt;regionattrib;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If triangle attributes or an area bound are needed, increase the number <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of bytes occupied by a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trisize <a href="CppOperatorAssign.htm">=</a> (m-&gt;areaboundindex <a href="CppOperatorPlus.htm">+</a> 1) * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (m-&gt;eextras <a href="CppOperatorPlus.htm">+</a> b-&gt;regionattrib &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trisize <a href="CppOperatorAssign.htm">=</a> m-&gt;areaboundindex * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If a Voronoi diagram or triangle neighbor graph is requested, <a href="CppMake.htm">make</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; sure there's room to store an <a href="CppInt.htm">integer</a> index in each triangle.&nbsp;&nbsp;This <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppInt.htm">integer</a> index can occupy the same space as the subsegment <a href="CppPointer.htm">pointer</a>s&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; or attributes or area constraint or extra nodes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((b-&gt;voronoi <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;neighbors) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(trisize &lt; 6 * <b><a href="CppSizeof.htm">sizeof</a></b>(triangle) <a href="CppOperatorPlus.htm">+</a> <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trisize <a href="CppOperatorAssign.htm">=</a> 6 * <b><a href="CppSizeof.htm">sizeof</a></b>(triangle) <a href="CppOperatorPlus.htm">+</a> <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Having determined the <a href="CppMemory.htm">memory</a> size of a triangle, <a href="CppInitialize.htm">initialize</a> the pool. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;poolinit(&amp;m-&gt;triangles, trisize, TRIPERBLOCK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2 * m-&gt;invertices <a href="CppOperatorMinus.htm">-</a> 2) &gt; TRIPERBLOCK ? (2 * m-&gt;invertices <a href="CppOperatorMinus.htm">-</a> 2) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRIPERBLOCK, 4);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the pool of subsegments.&nbsp;&nbsp;Take into account all eight <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppPointer.htm">pointer</a>s and one boundary marker.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;poolinit(&amp;m-&gt;subsegs, 8 * <b><a href="CppSizeof.htm">sizeof</a></b>(triangle) <a href="CppOperatorPlus.htm">+</a> <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUBSEGPERBLOCK, SUBSEGPERBLOCK, 4);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the "outer space" triangle and omnipresent subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;dummyinit(m, b, m-&gt;triangles.itembytes, m-&gt;subsegs.itembytes);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the "outer space" triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;dummyinit(m, b, m-&gt;triangles.itembytes, 0);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangledealloc()&nbsp;&nbsp; Deallocate space <b><a href="CppFor.htm">for</a></b> a triangle, marking it dead.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> triangledealloc(<b><a href="CppStruct.htm">struct</a></b> mesh *m, triangle *dyingtriangle)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> triangledealloc(m, dyingtriangle)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
triangle *dyingtriangle;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the triangle as dead.&nbsp;&nbsp;This <a href="CppMake.htm">make</a>s it possible to detect dead <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangles when traversing the list of all triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;killtri(dyingtriangle);<br/>
&nbsp;&nbsp;pooldealloc(&amp;m-&gt;triangles, (VOID *) dyingtriangle);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangletraverse()&nbsp;&nbsp; Traverse the triangles, skipping dead ones.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
triangle *triangletraverse(<b><a href="CppStruct.htm">struct</a></b> mesh *m)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
triangle *triangletraverse(m)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;triangle *newtriangle;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newtriangle <a href="CppOperatorAssign.htm">=</a> (triangle *) traverse(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newtriangle <a href="CppOperatorEqual.htm">==</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (triangle *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (deadtri(newtriangle));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Skip dead ones. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> newtriangle;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegdealloc()&nbsp;&nbsp; Deallocate space <b><a href="CppFor.htm">for</a></b> a subsegment, marking it dead.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> subsegdealloc(<b><a href="CppStruct.htm">struct</a></b> mesh *m, subseg *dyingsubseg)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> subsegdealloc(m, dyingsubseg)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
subseg *dyingsubseg;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the subsegment as dead.&nbsp;&nbsp;This <a href="CppMake.htm">make</a>s it possible to detect dead <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegments when traversing the list of all subsegments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;killsubseg(dyingsubseg);<br/>
&nbsp;&nbsp;pooldealloc(&amp;m-&gt;subsegs, (VOID *) dyingsubseg);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegtraverse()&nbsp;&nbsp; Traverse the subsegments, skipping dead ones.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
subseg *subsegtraverse(<b><a href="CppStruct.htm">struct</a></b> mesh *m)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
subseg *subsegtraverse(m)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;subseg *newsubseg;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newsubseg <a href="CppOperatorAssign.htm">=</a> (subseg *) traverse(&amp;m-&gt;subsegs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newsubseg <a href="CppOperatorEqual.htm">==</a> (subseg *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (subseg *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (deadsubseg(newsubseg));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Skip dead ones. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> newsubseg;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertexdealloc()&nbsp;&nbsp; Deallocate space <b><a href="CppFor.htm">for</a></b> a vertex, marking it dead.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> vertexdealloc(<b><a href="CppStruct.htm">struct</a></b> mesh *m, vertex dyingvertex)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> vertexdealloc(m, dyingvertex)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
vertex dyingvertex;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the vertex as dead.&nbsp;&nbsp;This <a href="CppMake.htm">make</a>s it possible to detect dead <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vertices when traversing the list of all vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;setvertextype(dyingvertex, DEADVERTEX);<br/>
&nbsp;&nbsp;pooldealloc(&amp;m-&gt;vertices, (VOID *) dyingvertex);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertextraverse()&nbsp;&nbsp; Traverse the vertices, skipping dead ones.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
vertex vertextraverse(<b><a href="CppStruct.htm">struct</a></b> mesh *m)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
vertex vertextraverse(m)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;vertex newvertex;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newvertex <a href="CppOperatorAssign.htm">=</a> (vertex) traverse(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newvertex <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (vertex) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (vertextype(newvertex) <a href="CppOperatorEqual.htm">==</a> DEADVERTEX);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Skip dead ones. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> newvertex;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;badsubsegdealloc()&nbsp;&nbsp; Deallocate space <b><a href="CppFor.htm">for</a></b> a bad subsegment, marking it&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dead.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> badsubsegdealloc(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> badsubseg *dyingseg)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> badsubsegdealloc(m, dyingseg)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> badsubseg *dyingseg;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set subsegment's origin to <a href="CppNULL.htm">NULL</a>.&nbsp;&nbsp;This <a href="CppMake.htm">make</a>s it possible to detect dead <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; badsubsegs when traversing the list of all badsubsegs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;dyingseg-&gt;subsegorg <a href="CppOperatorAssign.htm">=</a> (vertex) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;pooldealloc(&amp;m-&gt;badsubsegs, (VOID *) dyingseg);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;badsubsegtraverse()&nbsp;&nbsp; Traverse the bad subsegments, skipping dead ones.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppStruct.htm">struct</a></b> badsubseg *badsubsegtraverse(<b><a href="CppStruct.htm">struct</a></b> mesh *m)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> badsubseg *badsubsegtraverse(m)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badsubseg *newseg;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newseg <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> badsubseg *) traverse(&amp;m-&gt;badsubsegs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newseg <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> badsubseg *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppStruct.htm">struct</a></b> badsubseg *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (newseg-&gt;subsegorg <a href="CppOperatorEqual.htm">==</a> (vertex) <a href="CppNULL.htm">NULL</a>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Skip dead ones. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> newseg;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;getvertex()&nbsp;&nbsp; Get a specific vertex, by number, from the list.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The first vertex is number 'firstnumber'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Note that <b><a href="CppThis.htm">this</a></b> takes O(n) <a href="CppTime.htm">time</a> (with a small constant, <b><a href="CppIf.htm">if</a></b> VERTEXPERBLOCK <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is large).&nbsp;&nbsp;I don't care to take the trouble to <a href="CppMake.htm">make</a> it work in constant <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppTime.htm">time</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
vertex getvertex(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppInt.htm">int</a></b> number)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
vertex getvertex(m, b, number)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> number;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;VOID **getblock;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *foundvertex;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> alignptr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> current;<br/>
<br/>
&nbsp;&nbsp;getblock <a href="CppOperatorAssign.htm">=</a> m-&gt;vertices.firstblock;<br/>
&nbsp;&nbsp;current <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the right block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (current <a href="CppOperatorPlus.htm">+</a> m-&gt;vertices.itemsfirstblock <a href="CppOperatorLessEqual.htm">&lt;=</a> number) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;getblock <a href="CppOperatorAssign.htm">=</a> (VOID **) *getblock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;current <a href="CppOperatorPlusAssign.htm">+=</a> m-&gt;vertices.itemsfirstblock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (current <a href="CppOperatorPlus.htm">+</a> m-&gt;vertices.itemsperblock <a href="CppOperatorLessEqual.htm">&lt;=</a> number) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getblock <a href="CppOperatorAssign.htm">=</a> (VOID **) *getblock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current <a href="CppOperatorPlusAssign.htm">+=</a> m-&gt;vertices.itemsperblock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Now find the right vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;alignptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (getblock <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;foundvertex <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppChar.htm">char</a></b> *) (alignptr <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;vertices.alignbytes <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(alignptr <a href="CppOperatorModulus.htm">%</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;vertices.alignbytes));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (vertex) (foundvertex <a href="CppOperatorPlus.htm">+</a> m-&gt;vertices.itembytes * (number <a href="CppOperatorMinus.htm">-</a> current));<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangledeinit()&nbsp;&nbsp; Free all remaining allocated <a href="CppMemory.htm">memory</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> triangledeinit(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> triangledeinit(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;pooldeinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;trifree((VOID *) m-&gt;dummytribase);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pooldeinit(&amp;m-&gt;subsegs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trifree((VOID *) m-&gt;dummysubbase);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;pooldeinit(&amp;m-&gt;vertices);<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;quality) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pooldeinit(&amp;m-&gt;badsubsegs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((b-&gt;minangle &gt; 0.0) <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;vararea <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;fixedarea <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;usertest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pooldeinit(&amp;m-&gt;badtriangles);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pooldeinit(&amp;m-&gt;flipstackers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** <a href="CppMemory.htm">Memory</a> management routines end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** <a href="CppConstructor.htm">Constructor</a>s begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle()&nbsp;&nbsp; Create a <b><a href="CppNew.htm">new</a></b> triangle with orientation zero.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>triangle(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *newotri)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>triangle(m, b, newotri)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *newotri;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;newotri-&gt;tri <a href="CppOperatorAssign.htm">=</a> (triangle *) poolalloc(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the three adjoining triangles to be "outer space". <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;newotri-&gt;tri[0] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummytri;<br/>
&nbsp;&nbsp;newotri-&gt;tri[1] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummytri;<br/>
&nbsp;&nbsp;newotri-&gt;tri[2] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummytri;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Three <a href="CppNULL.htm">NULL</a> vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;newotri-&gt;tri[3] <a href="CppOperatorAssign.htm">=</a> (triangle) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;newotri-&gt;tri[4] <a href="CppOperatorAssign.htm">=</a> (triangle) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;newotri-&gt;tri[5] <a href="CppOperatorAssign.htm">=</a> (triangle) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the three adjoining subsegments to be the omnipresent <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;newotri-&gt;tri[6] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newotri-&gt;tri[7] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newotri-&gt;tri[8] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummysub;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;eextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(*newotri, i, 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setareabound(*newotri, <a href="CppOperatorMinus.htm">-</a>1.0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;newotri-&gt;orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppMake.htm">make</a>subseg()&nbsp;&nbsp; Create a <b><a href="CppNew.htm">new</a></b> subsegment with orientation zero.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>subseg(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> osub *newsubseg)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>subseg(m, newsubseg)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> osub *newsubseg;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;newsubseg-&gt;ss <a href="CppOperatorAssign.htm">=</a> (subseg *) poolalloc(&amp;m-&gt;subsegs);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the two adjoining subsegments to be the omnipresent <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;newsubseg-&gt;ss[0] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummysub;<br/>
&nbsp;&nbsp;newsubseg-&gt;ss[1] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummysub;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Four <a href="CppNULL.htm">NULL</a> vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;newsubseg-&gt;ss[2] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;newsubseg-&gt;ss[3] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;newsubseg-&gt;ss[4] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;newsubseg-&gt;ss[5] <a href="CppOperatorAssign.htm">=</a> (subseg) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the two adjoining triangles to be "outer space." <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;newsubseg-&gt;ss[6] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummytri;<br/>
&nbsp;&nbsp;newsubseg-&gt;ss[7] <a href="CppOperatorAssign.htm">=</a> (subseg) m-&gt;dummytri;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the boundary marker to zero. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;setmark(*newsubseg, 0);<br/>
<br/>
&nbsp;&nbsp;newsubseg-&gt;ssorient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** <a href="CppConstructor.htm">Constructor</a>s end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Geometric primitives begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> The adaptive exact arithmetic geometric <a href="CppPredicate.htm">predicate</a>s implemented herein are <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; described in detail in my paper, "Adaptive Precision Floating-<a href="CppPoint.htm">Point</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Arithmetic and Fast Robust Geometric <a href="CppPredicate.htm">Predicate</a>s."&nbsp;&nbsp;See the header <b><a href="CppFor.htm">for</a></b> a <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; full citation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Which of the following two <a href="CppMemberFunction.htm">member function</a>s of finding the absolute values is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; fastest is <a href="CppCompiler.htm">compiler</a>-dependent.&nbsp;&nbsp;A few <a href="CppCompiler.htm">compilers</a> can <b><a href="CppInline.htm">inline</a></b> and optimize <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the fabs() call; but most will incur the overhead of a <a href="CppFunction.htm">function</a> call,&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; which is disastrously slow.&nbsp;&nbsp;A faster way on IEEE machines might be to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; mask the appropriate bit, but that's difficult to <b><a href="CppDo.htm">do</a></b> in C without&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; forcing the value to be stored to <a href="CppMemory.htm">memory</a> (rather than be kept in the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <b><a href="CppRegister.htm">register</a></b> to which the optimizer as<b><a href="CppSigned.htm">signed</a></b> it).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> Absolute(a)&nbsp;&nbsp;((a) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 ? (a) : <a href="CppOperatorMinus.htm">-</a>(a))<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> Absolute(a)&nbsp;&nbsp;fabs(a) <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> M<a href="CppAny.htm">any</a> of the operations are broken up into two pieces, a <a href="CppMain.htm">main</a> part that&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; performs an approximate operation, and a "tail" that computes the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; roundoff error of that operation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a> The operations Fast_Two_Sum(), Fast_Two_Diff(), Two_Sum(), Two_Diff(),&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Split(), and Two_<a href="CppProduct.htm">Product</a>() are all implemented as described in the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; reference.&nbsp;&nbsp;Each of these macros requires certain variables to be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; defined in the calling routine.&nbsp;&nbsp;The variables `bvirt', `c', `abig',&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; `_i', `_j', `_k', `_l', `_m', and `_n' are declared `INEXACT' because&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; they store the result of an operation that may incur roundoff error.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; The input parameter `x' (or the highest numbered `x_' parameter) must&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; also be declared `INEXACT'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> Fast_Two_Sum_Tail(a, b, x, y) \<br/>
&nbsp;&nbsp;bvirt <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorMinus.htm">-</a> a; \<br/>
&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> b <a href="CppOperatorMinus.htm">-</a> bvirt<br/>
<br/>
<a href="CppDefine.htm">#define</a> Fast_Two_Sum(a, b, x, y) \<br/>
&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (REAL) (a <a href="CppOperatorPlus.htm">+</a> b); \<br/>
&nbsp;&nbsp;Fast_Two_Sum_Tail(a, b, x, y)<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_Sum_Tail(a, b, x, y) \<br/>
&nbsp;&nbsp;bvirt <a href="CppOperatorAssign.htm">=</a> (REAL) (x <a href="CppOperatorMinus.htm">-</a> a); \<br/>
&nbsp;&nbsp;avirt <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorMinus.htm">-</a> bvirt; \<br/>
&nbsp;&nbsp;bround <a href="CppOperatorAssign.htm">=</a> b <a href="CppOperatorMinus.htm">-</a> bvirt; \<br/>
&nbsp;&nbsp;around <a href="CppOperatorAssign.htm">=</a> a <a href="CppOperatorMinus.htm">-</a> avirt; \<br/>
&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> around <a href="CppOperatorPlus.htm">+</a> bround<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_Sum(a, b, x, y) \<br/>
&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (REAL) (a <a href="CppOperatorPlus.htm">+</a> b); \<br/>
&nbsp;&nbsp;Two_Sum_Tail(a, b, x, y)<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_Diff_Tail(a, b, x, y) \<br/>
&nbsp;&nbsp;bvirt <a href="CppOperatorAssign.htm">=</a> (REAL) (a <a href="CppOperatorMinus.htm">-</a> x); \<br/>
&nbsp;&nbsp;avirt <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorPlus.htm">+</a> bvirt; \<br/>
&nbsp;&nbsp;bround <a href="CppOperatorAssign.htm">=</a> bvirt <a href="CppOperatorMinus.htm">-</a> b; \<br/>
&nbsp;&nbsp;around <a href="CppOperatorAssign.htm">=</a> a <a href="CppOperatorMinus.htm">-</a> avirt; \<br/>
&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> around <a href="CppOperatorPlus.htm">+</a> bround<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_Diff(a, b, x, y) \<br/>
&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (REAL) (a <a href="CppOperatorMinus.htm">-</a> b); \<br/>
&nbsp;&nbsp;Two_Diff_Tail(a, b, x, y)<br/>
<br/>
<a href="CppDefine.htm">#define</a> Split(a, ahi, alo) \<br/>
&nbsp;&nbsp;c <a href="CppOperatorAssign.htm">=</a> (REAL) (splitter * a); \<br/>
&nbsp;&nbsp;abig <a href="CppOperatorAssign.htm">=</a> (REAL) (c <a href="CppOperatorMinus.htm">-</a> a); \<br/>
&nbsp;&nbsp;ahi <a href="CppOperatorAssign.htm">=</a> c <a href="CppOperatorMinus.htm">-</a> abig; \<br/>
&nbsp;&nbsp;alo <a href="CppOperatorAssign.htm">=</a> a <a href="CppOperatorMinus.htm">-</a> ahi<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_<a href="CppProduct.htm">Product</a>_Tail(a, b, x, y) \<br/>
&nbsp;&nbsp;Split(a, ahi, alo); \<br/>
&nbsp;&nbsp;Split(b, bhi, blo); \<br/>
&nbsp;&nbsp;err1 <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorMinus.htm">-</a> (ahi * bhi); \<br/>
&nbsp;&nbsp;err2 <a href="CppOperatorAssign.htm">=</a> err1 <a href="CppOperatorMinus.htm">-</a> (alo * bhi); \<br/>
&nbsp;&nbsp;err3 <a href="CppOperatorAssign.htm">=</a> err2 <a href="CppOperatorMinus.htm">-</a> (ahi * blo); \<br/>
&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> (alo * blo) <a href="CppOperatorMinus.htm">-</a> err3<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_<a href="CppProduct.htm">Product</a>(a, b, x, y) \<br/>
&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (REAL) (a * b); \<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>_Tail(a, b, x, y)<br/>
<br/>
<a href="CppComment.htm">/*</a> Two_<a href="CppProduct.htm">Product</a>_Presplit() is Two_<a href="CppProduct.htm">Product</a>() where one of the inputs has&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; already been split.&nbsp;&nbsp;Avoids redundant splitting.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_<a href="CppProduct.htm">Product</a>_Presplit(a, b, bhi, blo, x, y) \<br/>
&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (REAL) (a * b); \<br/>
&nbsp;&nbsp;Split(a, ahi, alo); \<br/>
&nbsp;&nbsp;err1 <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorMinus.htm">-</a> (ahi * bhi); \<br/>
&nbsp;&nbsp;err2 <a href="CppOperatorAssign.htm">=</a> err1 <a href="CppOperatorMinus.htm">-</a> (alo * bhi); \<br/>
&nbsp;&nbsp;err3 <a href="CppOperatorAssign.htm">=</a> err2 <a href="CppOperatorMinus.htm">-</a> (ahi * blo); \<br/>
&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> (alo * blo) <a href="CppOperatorMinus.htm">-</a> err3<br/>
<br/>
<a href="CppComment.htm">/*</a> Square() can be done more quickly than Two_<a href="CppProduct.htm">Product</a>().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> Square_Tail(a, x, y) \<br/>
&nbsp;&nbsp;Split(a, ahi, alo); \<br/>
&nbsp;&nbsp;err1 <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorMinus.htm">-</a> (ahi * ahi); \<br/>
&nbsp;&nbsp;err3 <a href="CppOperatorAssign.htm">=</a> err1 <a href="CppOperatorMinus.htm">-</a> ((ahi <a href="CppOperatorPlus.htm">+</a> ahi) * alo); \<br/>
&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> (alo * alo) <a href="CppOperatorMinus.htm">-</a> err3<br/>
<br/>
<a href="CppDefine.htm">#define</a> Square(a, x, y) \<br/>
&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (REAL) (a * a); \<br/>
&nbsp;&nbsp;Square_Tail(a, x, y)<br/>
<br/>
<a href="CppComment.htm">/*</a> Macros <b><a href="CppFor.htm">for</a></b> summing expansions of various fixed lengths.&nbsp;&nbsp;These are all&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; unrolled <a href="CppVersion.htm">version</a>s of Expansion_Sum().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_One_Sum(a1, a0, b, x2, x1, x0) \<br/>
&nbsp;&nbsp;Two_Sum(a0, b , _i, x0); \<br/>
&nbsp;&nbsp;Two_Sum(a1, _i, x2, x1)<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_One_Diff(a1, a0, b, x2, x1, x0) \<br/>
&nbsp;&nbsp;Two_Diff(a0, b , _i, x0); \<br/>
&nbsp;&nbsp;Two_Sum( a1, _i, x2, x1)<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_Two_Sum(a1, a0, b1, b0, x3, x2, x1, x0) \<br/>
&nbsp;&nbsp;Two_One_Sum(a1, a0, b0, _j, _0, x0); \<br/>
&nbsp;&nbsp;Two_One_Sum(_j, _0, b1, x3, x2, x1)<br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_Two_Diff(a1, a0, b1, b0, x3, x2, x1, x0) \<br/>
&nbsp;&nbsp;Two_One_Diff(a1, a0, b0, _j, _0, x0); \<br/>
&nbsp;&nbsp;Two_One_Diff(_j, _0, b1, x3, x2, x1)<br/>
<br/>
<a href="CppComment.htm">/*</a> Macro <b><a href="CppFor.htm">for</a></b> multiplying a two-<a href="CppComponent.htm">component</a> expansion by a single <a href="CppComponent.htm">component</a>.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> Two_One_<a href="CppProduct.htm">Product</a>(a1, a0, b, x3, x2, x1, x0) \<br/>
&nbsp;&nbsp;Split(b, bhi, blo); \<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>_Presplit(a0, b, bhi, blo, _i, x0); \<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>_Presplit(a1, b, bhi, blo, _j, _0); \<br/>
&nbsp;&nbsp;Two_Sum(_i, _0, _k, x1); \<br/>
&nbsp;&nbsp;Fast_Two_Sum(_j, _k, x3, x2)<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;exactinit()&nbsp;&nbsp; <a href="CppInitialize.htm">Initialize</a> the variables used <b><a href="CppFor.htm">for</a></b> exact arithmetic.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`epsilon' is the largest power of two such that 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon <a href="CppOperatorAssign.htm">=</a> 1.0 in&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;floating-<a href="CppPointer.htm">point</a> arithmetic.&nbsp;&nbsp;`epsilon' bounds the relative roundoff&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;error.&nbsp;&nbsp;It is used <b><a href="CppFor.htm">for</a></b> floating-<a href="CppPointer.htm">point</a> error analysis.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`splitter' is used to split floating-<a href="CppPointer.htm">point</a> numbers into two half<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;length significands <b><a href="CppFor.htm">for</a></b> exact multiplication.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;I imagine that a highly optimizing <a href="CppCompiler.htm">compiler</a> might be too smart <b><a href="CppFor.htm">for</a></b> its&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;own good, and somehow cause <b><a href="CppThis.htm">this</a></b> routine to fail, <b><a href="CppIf.htm">if</a></b> it pretends that&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;floating-<a href="CppPointer.htm">point</a> arithmetic is too much like real arithmetic.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Don't change <b><a href="CppThis.htm">this</a></b> routine unless you fully understand it.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> exactinit()<br/>
{<br/>
&nbsp;&nbsp;REAL half;<br/>
&nbsp;&nbsp;REAL check, lastcheck;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> every_other;<br/>
<a href="CppIfdef.htm">#ifdef</a> LINUX<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cword;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> LINUX <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> CPU86<br/>
<a href="CppIfdef.htm">#ifdef</a> SINGLE<br/>
&nbsp;&nbsp;_control87(_PC_24, _MCW_PC); <a href="CppComment.htm">/*</a> Set FPU control word <b><a href="CppFor.htm">for</a></b> single precision. <a href="CppComment.htm">*/</a><br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;_control87(_PC_53, _MCW_PC); <a href="CppComment.htm">/*</a> Set FPU control word <b><a href="CppFor.htm">for</a></b> <b><a href="CppDouble.htm">double</a></b> precision. <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> CPU86 <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> LINUX<br/>
<a href="CppIfdef.htm">#ifdef</a> SINGLE<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp;cword <a href="CppOperatorAssign.htm">=</a> 4223; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;cword <a href="CppOperatorAssign.htm">=</a> 4210;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> set FPU control word <b><a href="CppFor.htm">for</a></b> single precision <a href="CppComment.htm">*/</a><br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp;cword <a href="CppOperatorAssign.htm">=</a> 4735; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;cword <a href="CppOperatorAssign.htm">=</a> 4722;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> set FPU control word <b><a href="CppFor.htm">for</a></b> <b><a href="CppDouble.htm">double</a></b> precision <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;_FPU_SETCW(cword);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> LINUX <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;every_other <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;half <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
&nbsp;&nbsp;epsilon <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;splitter <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Repeatedly divide `epsilon' by two until it is too small to add to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; one without ca<b><a href="CppUsing.htm">using</a></b> roundoff.&nbsp;&nbsp;(Also check <b><a href="CppIf.htm">if</a></b> the sum is equal to&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the previous sum, <b><a href="CppFor.htm">for</a></b> machines that round up instead of <b><a href="CppUsing.htm">using</a></b> exact&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; rounding.&nbsp;&nbsp;Not that these routines will work on such machines.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lastcheck <a href="CppOperatorAssign.htm">=</a> check;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon <a href="CppOperatorMultiplyAssign.htm">*=</a> half;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (every_other) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splitter <a href="CppOperatorMultiplyAssign.htm">*=</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;every_other <a href="CppOperatorAssign.htm">=</a> !every_other;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;check <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon;<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((check <a href="CppOperatorNotEqual.htm">!=</a> 1.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (check <a href="CppOperatorNotEqual.htm">!=</a> lastcheck));<br/>
&nbsp;&nbsp;splitter <a href="CppOperatorPlusAssign.htm">+=</a> 1.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Error bounds <b><a href="CppFor.htm">for</a></b> orientation and incircle tests. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;resulterrbound <a href="CppOperatorAssign.htm">=</a> (3.0 <a href="CppOperatorPlus.htm">+</a> 8.0 * epsilon) * epsilon;<br/>
&nbsp;&nbsp;ccwerrboundA <a href="CppOperatorAssign.htm">=</a> (3.0 <a href="CppOperatorPlus.htm">+</a> 16.0 * epsilon) * epsilon;<br/>
&nbsp;&nbsp;ccwerrboundB <a href="CppOperatorAssign.htm">=</a> (2.0 <a href="CppOperatorPlus.htm">+</a> 12.0 * epsilon) * epsilon;<br/>
&nbsp;&nbsp;ccwerrboundC <a href="CppOperatorAssign.htm">=</a> (9.0 <a href="CppOperatorPlus.htm">+</a> 64.0 * epsilon) * epsilon * epsilon;<br/>
&nbsp;&nbsp;iccerrboundA <a href="CppOperatorAssign.htm">=</a> (10.0 <a href="CppOperatorPlus.htm">+</a> 96.0 * epsilon) * epsilon;<br/>
&nbsp;&nbsp;iccerrboundB <a href="CppOperatorAssign.htm">=</a> (4.0 <a href="CppOperatorPlus.htm">+</a> 48.0 * epsilon) * epsilon;<br/>
&nbsp;&nbsp;iccerrboundC <a href="CppOperatorAssign.htm">=</a> (44.0 <a href="CppOperatorPlus.htm">+</a> 576.0 * epsilon) * epsilon * epsilon;<br/>
&nbsp;&nbsp;o3derrboundA <a href="CppOperatorAssign.htm">=</a> (7.0 <a href="CppOperatorPlus.htm">+</a> 56.0 * epsilon) * epsilon;<br/>
&nbsp;&nbsp;o3derrboundB <a href="CppOperatorAssign.htm">=</a> (3.0 <a href="CppOperatorPlus.htm">+</a> 28.0 * epsilon) * epsilon;<br/>
&nbsp;&nbsp;o3derrboundC <a href="CppOperatorAssign.htm">=</a> (26.0 <a href="CppOperatorPlus.htm">+</a> 288.0 * epsilon) * epsilon * epsilon;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;fast_expansion_sum_zeroelim()&nbsp;&nbsp; Sum two expansions, eliminating zero&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComponent.htm">component</a>s from the output expansion.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Sets h <a href="CppOperatorAssign.htm">=</a> e <a href="CppOperatorPlus.htm">+</a> f.&nbsp;&nbsp;See my Robust <a href="CppPredicate.htm">Predicate</a>s paper <b><a href="CppFor.htm">for</a></b> details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If round-to-even is used (as with IEEE 754), maintains the s<a href="GameTronCollection.htm">tron</a>gly&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;nonoverlapping property.&nbsp;&nbsp;(That is, <b><a href="CppIf.htm">if</a></b> e is s<a href="GameTronCollection.htm">tron</a>gly nonoverlapping, h&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;will be also.)&nbsp;&nbsp;Does NOT maintain the nonoverlapping or nonadjacent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;properties.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppInt.htm">int</a></b> fast_expansion_sum_zeroelim(<b><a href="CppInt.htm">int</a></b> elen, REAL *e, <b><a href="CppInt.htm">int</a></b> flen, REAL *f, REAL *h)<br/>
{<br/>
&nbsp;&nbsp;REAL Q;<br/>
&nbsp;&nbsp;REAL Q<b><a href="CppNew.htm">new</a></b>;<br/>
&nbsp;&nbsp;REAL hh;<br/>
&nbsp;&nbsp;REAL bvirt;<br/>
&nbsp;&nbsp;REAL avirt, bround, around;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> eindex, findex, hindex;<br/>
&nbsp;&nbsp;REAL enow, fnow;<br/>
<br/>
&nbsp;&nbsp;enow <a href="CppOperatorAssign.htm">=</a> e[0];<br/>
&nbsp;&nbsp;fnow <a href="CppOperatorAssign.htm">=</a> f[0];<br/>
&nbsp;&nbsp;eindex <a href="CppOperatorAssign.htm">=</a> findex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((fnow &gt; enow) <a href="CppOperatorEqual.htm">==</a> (fnow &gt; <a href="CppOperatorMinus.htm">-</a>enow)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Q <a href="CppOperatorAssign.htm">=</a> enow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;enow <a href="CppOperatorAssign.htm">=</a> e[<a href="CppOperatorIncrement.htm">++</a>eindex];<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Q <a href="CppOperatorAssign.htm">=</a> fnow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fnow <a href="CppOperatorAssign.htm">=</a> f[<a href="CppOperatorIncrement.htm">++</a>findex];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;hindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((eindex &lt; elen) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (findex &lt; flen)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((fnow &gt; enow) <a href="CppOperatorEqual.htm">==</a> (fnow &gt; <a href="CppOperatorMinus.htm">-</a>enow)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fast_Two_Sum(enow, Q, Q<b><a href="CppNew.htm">new</a></b>, hh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enow <a href="CppOperatorAssign.htm">=</a> e[<a href="CppOperatorIncrement.htm">++</a>eindex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fast_Two_Sum(fnow, Q, Q<b><a href="CppNew.htm">new</a></b>, hh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fnow <a href="CppOperatorAssign.htm">=</a> f[<a href="CppOperatorIncrement.htm">++</a>findex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Q <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppNew.htm">new</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hh <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> hh;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((eindex &lt; elen) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (findex &lt; flen)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((fnow &gt; enow) <a href="CppOperatorEqual.htm">==</a> (fnow &gt; <a href="CppOperatorMinus.htm">-</a>enow)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Sum(Q, enow, Q<b><a href="CppNew.htm">new</a></b>, hh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enow <a href="CppOperatorAssign.htm">=</a> e[<a href="CppOperatorIncrement.htm">++</a>eindex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Sum(Q, fnow, Q<b><a href="CppNew.htm">new</a></b>, hh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fnow <a href="CppOperatorAssign.htm">=</a> f[<a href="CppOperatorIncrement.htm">++</a>findex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppNew.htm">new</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hh <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> hh;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (eindex &lt; elen) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Two_Sum(Q, enow, Q<b><a href="CppNew.htm">new</a></b>, hh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;enow <a href="CppOperatorAssign.htm">=</a> e[<a href="CppOperatorIncrement.htm">++</a>eindex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Q <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppNew.htm">new</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hh <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> hh;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (findex &lt; flen) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Two_Sum(Q, fnow, Q<b><a href="CppNew.htm">new</a></b>, hh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fnow <a href="CppOperatorAssign.htm">=</a> f[<a href="CppOperatorIncrement.htm">++</a>findex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Q <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppNew.htm">new</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hh <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> hh;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((Q <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (hindex <a href="CppOperatorEqual.htm">==</a> 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> Q;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hindex;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;scale_expansion_zeroelim()&nbsp;&nbsp; <a href="CppMultiply.htm">Multiply</a> an expansion by a scalar,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eliminating zero <a href="CppComponent.htm">component</a>s from the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; output expansion.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Sets h <a href="CppOperatorAssign.htm">=</a> be.&nbsp;&nbsp;See my Robust <a href="CppPredicate.htm">Predicate</a>s paper <b><a href="CppFor.htm">for</a></b> details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Maintains the nonoverlapping property.&nbsp;&nbsp;If round-to-even is used (as&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;with IEEE 754), maintains the s<a href="GameTronCollection.htm">tron</a>gly nonoverlapping and nonadjacent&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;properties as well.&nbsp;&nbsp;(That is, <b><a href="CppIf.htm">if</a></b> e has one of these properties, so&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;will h.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> scale_expansion_zeroelim(<b><a href="CppInt.htm">int</a></b> elen, REAL *e, REAL b, REAL *h)<br/>
{<br/>
&nbsp;&nbsp;REAL Q, sum;<br/>
&nbsp;&nbsp;REAL hh;<br/>
&nbsp;&nbsp;REAL product1;<br/>
&nbsp;&nbsp;REAL product0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> eindex, hindex;<br/>
&nbsp;&nbsp;REAL enow;<br/>
&nbsp;&nbsp;REAL bvirt;<br/>
&nbsp;&nbsp;REAL avirt, bround, around;<br/>
&nbsp;&nbsp;REAL c;<br/>
&nbsp;&nbsp;REAL abig;<br/>
&nbsp;&nbsp;REAL ahi, alo, bhi, blo;<br/>
&nbsp;&nbsp;REAL err1, err2, err3;<br/>
<br/>
&nbsp;&nbsp;Split(b, bhi, blo);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>_Presplit(e[0], b, bhi, blo, Q, hh);<br/>
&nbsp;&nbsp;hindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hh <a href="CppOperatorNotEqual.htm">!=</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> hh;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (eindex <a href="CppOperatorAssign.htm">=</a> 1; eindex &lt; elen; eindex<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;enow <a href="CppOperatorAssign.htm">=</a> e[eindex];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>_Presplit(enow, b, bhi, blo, product1, product0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Two_Sum(Q, product0, sum, hh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hh <a href="CppOperatorNotEqual.htm">!=</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> hh;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Fast_Two_Sum(product1, sum, Q, hh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hh <a href="CppOperatorNotEqual.htm">!=</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> hh;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((Q <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (hindex <a href="CppOperatorEqual.htm">==</a> 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;h[hindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> Q;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hindex;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;estimate()&nbsp;&nbsp; Produce a one-word estimate of an expansion's value.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;See my Robust <a href="CppPredicate.htm">Predicate</a>s paper <b><a href="CppFor.htm">for</a></b> details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL estimate(<b><a href="CppInt.htm">int</a></b> elen, REAL *e)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL estimate(elen, e)<br/>
<b><a href="CppInt.htm">int</a></b> elen;<br/>
REAL *e;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL Q;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> eindex;<br/>
<br/>
&nbsp;&nbsp;Q <a href="CppOperatorAssign.htm">=</a> e[0];<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (eindex <a href="CppOperatorAssign.htm">=</a> 1; eindex &lt; elen; eindex<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Q <a href="CppOperatorPlusAssign.htm">+=</a> e[eindex];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Q;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppCounter.htm">counter</a>clockwise()&nbsp;&nbsp; Return a positive value <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a>s pa, pb, and&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pc occur in <a href="CppCounter.htm">counter</a>clockwise order; a negative&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value <b><a href="CppIf.htm">if</a></b> they occur in clockwise order; and zero&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> they are collinear.&nbsp;&nbsp;The result is also a rough&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; approximation of twice the <b><a href="CppSigned.htm">signed</a></b> area of the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangle defined by the three <a href="CppPointer.htm">point</a>s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Uses exact arithmetic <b><a href="CppIf.htm">if</a></b> necessary to ensure a correct answer.&nbsp;&nbsp;The&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;result <b><a href="CppReturn.htm">return</a></b>ed is the determinant of a <a href="CppMatrix.htm">matrix</a>.&nbsp;&nbsp;This determinant is&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;computed adaptively, in the sense that exact arithmetic is used only to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the degree it is needed to ensure that the <b><a href="CppReturn.htm">return</a></b>ed value has the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;correct sign.&nbsp;&nbsp;Hence, <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> is usually quite fast, but will run&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;more slowly when the input <a href="CppPointer.htm">point</a>s are collinear or nearly so.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;See my Robust <a href="CppPredicate.htm">Predicate</a>s paper <b><a href="CppFor.htm">for</a></b> details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL <a href="CppCounter.htm">counter</a>clockwiseadapt(vertex pa, vertex pb, vertex pc, REAL detsum)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL <a href="CppCounter.htm">counter</a>clockwiseadapt(pa, pb, pc, detsum)<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
REAL detsum;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL acx, acy, bcx, bcy;<br/>
&nbsp;&nbsp;REAL acxtail, acytail, bcxtail, bcytail;<br/>
&nbsp;&nbsp;REAL detleft, detright;<br/>
&nbsp;&nbsp;REAL detlefttail, detrighttail;<br/>
&nbsp;&nbsp;REAL det, errbound;<br/>
&nbsp;&nbsp;REAL B[4], C1[8], C2[12], D[16];<br/>
&nbsp;&nbsp;REAL B3;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> C1length, C2length, Dlength;<br/>
&nbsp;&nbsp;REAL u[4];<br/>
&nbsp;&nbsp;REAL u3;<br/>
&nbsp;&nbsp;REAL s1, t1;<br/>
&nbsp;&nbsp;REAL s0, t0;<br/>
<br/>
&nbsp;&nbsp;REAL bvirt;<br/>
&nbsp;&nbsp;REAL avirt, bround, around;<br/>
&nbsp;&nbsp;REAL c;<br/>
&nbsp;&nbsp;REAL abig;<br/>
&nbsp;&nbsp;REAL ahi, alo, bhi, blo;<br/>
&nbsp;&nbsp;REAL err1, err2, err3;<br/>
&nbsp;&nbsp;REAL _i, _j;<br/>
&nbsp;&nbsp;REAL _0;<br/>
<br/>
&nbsp;&nbsp;acx <a href="CppOperatorAssign.htm">=</a> (REAL) (pa[0] <a href="CppOperatorMinus.htm">-</a> pc[0]);<br/>
&nbsp;&nbsp;bcx <a href="CppOperatorAssign.htm">=</a> (REAL) (pb[0] <a href="CppOperatorMinus.htm">-</a> pc[0]);<br/>
&nbsp;&nbsp;acy <a href="CppOperatorAssign.htm">=</a> (REAL) (pa[1] <a href="CppOperatorMinus.htm">-</a> pc[1]);<br/>
&nbsp;&nbsp;bcy <a href="CppOperatorAssign.htm">=</a> (REAL) (pb[1] <a href="CppOperatorMinus.htm">-</a> pc[1]);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(acx, bcy, detleft, detlefttail);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(acy, bcx, detright, detrighttail);<br/>
<br/>
&nbsp;&nbsp;Two_Two_Diff(detleft, detlefttail, detright, detrighttail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B3, B[2], B[1], B[0]);<br/>
&nbsp;&nbsp;B[3] <a href="CppOperatorAssign.htm">=</a> B3;<br/>
<br/>
&nbsp;&nbsp;det <a href="CppOperatorAssign.htm">=</a> estimate(4, B);<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> ccwerrboundB * detsum;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Two_Diff_Tail(pa[0], pc[0], acx, acxtail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pb[0], pc[0], bcx, bcxtail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pa[1], pc[1], acy, acytail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pb[1], pc[1], bcy, bcytail);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((acxtail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (acytail <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (bcxtail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (bcytail <a href="CppOperatorEqual.htm">==</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> ccwerrboundC * detsum <a href="CppOperatorPlus.htm">+</a> resulterrbound * Absolute(det);<br/>
&nbsp;&nbsp;det <a href="CppOperatorPlusAssign.htm">+=</a> (acx * bcytail <a href="CppOperatorPlus.htm">+</a> bcy * acxtail)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> (acy * bcxtail <a href="CppOperatorPlus.htm">+</a> bcx * acytail);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(acxtail, bcy, s1, s0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(acytail, bcx, t1, t0);<br/>
&nbsp;&nbsp;Two_Two_Diff(s1, s0, t1, t0, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;C1length <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(4, B, 4, u, C1);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(acx, bcytail, s1, s0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(acy, bcxtail, t1, t0);<br/>
&nbsp;&nbsp;Two_Two_Diff(s1, s0, t1, t0, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;C2length <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(C1length, C1, 4, u, C2);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(acxtail, bcytail, s1, s0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(acytail, bcxtail, t1, t0);<br/>
&nbsp;&nbsp;Two_Two_Diff(s1, s0, t1, t0, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;Dlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(C2length, C2, 4, u, D);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(D[Dlength <a href="CppOperatorMinus.htm">-</a> 1]);<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL <a href="CppCounter.htm">counter</a>clockwise(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex pa, vertex pb, vertex pc)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL <a href="CppCounter.htm">counter</a>clockwise(m, b, pa, pb, pc)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL detleft, detright, det;<br/>
&nbsp;&nbsp;REAL detsum, errbound;<br/>
<br/>
&nbsp;&nbsp;m-&gt;<a href="CppCounter.htm">counter</a>clockcount<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;detleft <a href="CppOperatorAssign.htm">=</a> (pa[0] <a href="CppOperatorMinus.htm">-</a> pc[0]) * (pb[1] <a href="CppOperatorMinus.htm">-</a> pc[1]);<br/>
&nbsp;&nbsp;detright <a href="CppOperatorAssign.htm">=</a> (pa[1] <a href="CppOperatorMinus.htm">-</a> pc[1]) * (pb[0] <a href="CppOperatorMinus.htm">-</a> pc[0]);<br/>
&nbsp;&nbsp;det <a href="CppOperatorAssign.htm">=</a> detleft <a href="CppOperatorMinus.htm">-</a> detright;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;noexact) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (detleft &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (detright <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detsum <a href="CppOperatorAssign.htm">=</a> detleft <a href="CppOperatorPlus.htm">+</a> detright;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (detleft &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (detright <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detsum <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>detleft <a href="CppOperatorMinus.htm">-</a> detright;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> ccwerrboundA * detsum;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppCounter.htm">counter</a>clockwiseadapt(pa, pb, pc, detsum);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;incircle()&nbsp;&nbsp; Return a positive value <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> pd lies inside the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; circle passing through pa, pb, and pc; a negative value <b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it lies outside; and zero <b><a href="CppIf.htm">if</a></b> the four <a href="CppPointer.htm">point</a>s are cocircular.<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The <a href="CppPointer.htm">point</a>s pa, pb, and pc must be in <a href="CppCounter.htm">counter</a>clockwise&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; order, or the sign of the result will be reversed.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Uses exact arithmetic <b><a href="CppIf.htm">if</a></b> necessary to ensure a correct answer.&nbsp;&nbsp;The&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;result <b><a href="CppReturn.htm">return</a></b>ed is the determinant of a <a href="CppMatrix.htm">matrix</a>.&nbsp;&nbsp;This determinant is&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;computed adaptively, in the sense that exact arithmetic is used only to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the degree it is needed to ensure that the <b><a href="CppReturn.htm">return</a></b>ed value has the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;correct sign.&nbsp;&nbsp;Hence, <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> is usually quite fast, but will run&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;more slowly when the input <a href="CppPointer.htm">point</a>s are cocircular or nearly so.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;See my Robust <a href="CppPredicate.htm">Predicate</a>s paper <b><a href="CppFor.htm">for</a></b> details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL incircleadapt(vertex pa, vertex pb, vertex pc, vertex pd, REAL permanent)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL incircleadapt(pa, pb, pc, pd, permanent)<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
vertex pd;<br/>
REAL permanent;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL adx, bdx, cdx, ady, bdy, cdy;<br/>
&nbsp;&nbsp;REAL det, errbound;<br/>
<br/>
&nbsp;&nbsp;REAL bdxcdy1, cdxbdy1, cdxady1, adxcdy1, adxbdy1, bdxady1;<br/>
&nbsp;&nbsp;REAL bdxcdy0, cdxbdy0, cdxady0, adxcdy0, adxbdy0, bdxady0;<br/>
&nbsp;&nbsp;REAL bc[4], ca[4], ab[4];<br/>
&nbsp;&nbsp;REAL bc3, ca3, ab3;<br/>
&nbsp;&nbsp;REAL axbc[8], axxbc[16], aybc[8], ayybc[16], adet[32];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> axbclen, axxbclen, aybclen, ayybclen, alen;<br/>
&nbsp;&nbsp;REAL bxca[8], bxxca[16], byca[8], byyca[16], bdet[32];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> bxcalen, bxxcalen, bycalen, byycalen, blen;<br/>
&nbsp;&nbsp;REAL cxab[8], cxxab[16], cyab[8], cyyab[16], cdet[32];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cxablen, cxxablen, cyablen, cyyablen, clen;<br/>
&nbsp;&nbsp;REAL abdet[64];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ablen;<br/>
&nbsp;&nbsp;REAL fin1[1152], fin2[1152];<br/>
&nbsp;&nbsp;REAL *finnow, *finother, *finswap;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> finlength;<br/>
<br/>
&nbsp;&nbsp;REAL adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;<br/>
&nbsp;&nbsp;REAL adxadx1, adyady1, bdxbdx1, bdybdy1, cdxcdx1, cdycdy1;<br/>
&nbsp;&nbsp;REAL adxadx0, adyady0, bdxbdx0, bdybdy0, cdxcdx0, cdycdy0;<br/>
&nbsp;&nbsp;REAL aa[4], bb[4], cc[4];<br/>
&nbsp;&nbsp;REAL aa3, bb3, cc3;<br/>
&nbsp;&nbsp;REAL ti1, tj1;<br/>
&nbsp;&nbsp;REAL ti0, tj0;<br/>
&nbsp;&nbsp;REAL u[4], v[4];<br/>
&nbsp;&nbsp;REAL u3, v3;<br/>
&nbsp;&nbsp;REAL temp8[8], temp16a[16], temp16b[16], temp16c[16];<br/>
&nbsp;&nbsp;REAL temp32a[32], temp32b[32], temp48[48], temp64[64];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> temp8len, temp16alen, temp16blen, temp16clen;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> temp32alen, temp32blen, temp48len, temp64len;<br/>
&nbsp;&nbsp;REAL axtbb[8], axtcc[8], aytbb[8], aytcc[8];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> axtbblen, axtcclen, aytbblen, aytcclen;<br/>
&nbsp;&nbsp;REAL bxtaa[8], bxtcc[8], bytaa[8], bytcc[8];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> bxtaalen, bxtcclen, bytaalen, bytcclen;<br/>
&nbsp;&nbsp;REAL cxtaa[8], cxtbb[8], cytaa[8], cytbb[8];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> cxtaalen, cxtbblen, cytaalen, cytbblen;<br/>
&nbsp;&nbsp;REAL axtbc[8], aytbc[8], bxtca[8], bytca[8], cxtab[8], cytab[8];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;<br/>
&nbsp;&nbsp;REAL axtbct[16], aytbct[16], bxtcat[16], bytcat[16], cxtabt[16], cytabt[16];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> axtbctlen, aytbctlen, bxtcatlen, bytcatlen, cxtabtlen, cytabtlen;<br/>
&nbsp;&nbsp;REAL axtbctt[8], aytbctt[8], bxtcatt[8];<br/>
&nbsp;&nbsp;REAL bytcatt[8], cxtabtt[8], cytabtt[8];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> axtbcttlen, aytbcttlen, bxtcattlen, bytcattlen, cxtabttlen, cytabttlen;<br/>
&nbsp;&nbsp;REAL abt[8], bct[8], cat[8];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> abtlen, bctlen, catlen;<br/>
&nbsp;&nbsp;REAL abtt[4], bctt[4], catt[4];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> abttlen, bcttlen, cattlen;<br/>
&nbsp;&nbsp;REAL abtt3, bctt3, catt3;<br/>
&nbsp;&nbsp;REAL negate;<br/>
<br/>
&nbsp;&nbsp;REAL bvirt;<br/>
&nbsp;&nbsp;REAL avirt, bround, around;<br/>
&nbsp;&nbsp;REAL c;<br/>
&nbsp;&nbsp;REAL abig;<br/>
&nbsp;&nbsp;REAL ahi, alo, bhi, blo;<br/>
&nbsp;&nbsp;REAL err1, err2, err3;<br/>
&nbsp;&nbsp;REAL _i, _j;<br/>
&nbsp;&nbsp;REAL _0;<br/>
<br/>
&nbsp;&nbsp;adx <a href="CppOperatorAssign.htm">=</a> (REAL) (pa[0] <a href="CppOperatorMinus.htm">-</a> pd[0]);<br/>
&nbsp;&nbsp;bdx <a href="CppOperatorAssign.htm">=</a> (REAL) (pb[0] <a href="CppOperatorMinus.htm">-</a> pd[0]);<br/>
&nbsp;&nbsp;cdx <a href="CppOperatorAssign.htm">=</a> (REAL) (pc[0] <a href="CppOperatorMinus.htm">-</a> pd[0]);<br/>
&nbsp;&nbsp;ady <a href="CppOperatorAssign.htm">=</a> (REAL) (pa[1] <a href="CppOperatorMinus.htm">-</a> pd[1]);<br/>
&nbsp;&nbsp;bdy <a href="CppOperatorAssign.htm">=</a> (REAL) (pb[1] <a href="CppOperatorMinus.htm">-</a> pd[1]);<br/>
&nbsp;&nbsp;cdy <a href="CppOperatorAssign.htm">=</a> (REAL) (pc[1] <a href="CppOperatorMinus.htm">-</a> pd[1]);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdx, cdy, bdxcdy1, bdxcdy0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdx, bdy, cdxbdy1, cdxbdy0);<br/>
&nbsp;&nbsp;Two_Two_Diff(bdxcdy1, bdxcdy0, cdxbdy1, cdxbdy0, bc3, bc[2], bc[1], bc[0]);<br/>
&nbsp;&nbsp;bc[3] <a href="CppOperatorAssign.htm">=</a> bc3;<br/>
&nbsp;&nbsp;axbclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bc, adx, axbc);<br/>
&nbsp;&nbsp;axxbclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axbclen, axbc, adx, axxbc);<br/>
&nbsp;&nbsp;aybclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bc, ady, aybc);<br/>
&nbsp;&nbsp;ayybclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aybclen, aybc, ady, ayybc);<br/>
&nbsp;&nbsp;alen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(axxbclen, axxbc, ayybclen, ayybc, adet);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdx, ady, cdxady1, cdxady0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adx, cdy, adxcdy1, adxcdy0);<br/>
&nbsp;&nbsp;Two_Two_Diff(cdxady1, cdxady0, adxcdy1, adxcdy0, ca3, ca[2], ca[1], ca[0]);<br/>
&nbsp;&nbsp;ca[3] <a href="CppOperatorAssign.htm">=</a> ca3;<br/>
&nbsp;&nbsp;bxcalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ca, bdx, bxca);<br/>
&nbsp;&nbsp;bxxcalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxcalen, bxca, bdx, bxxca);<br/>
&nbsp;&nbsp;bycalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ca, bdy, byca);<br/>
&nbsp;&nbsp;byycalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bycalen, byca, bdy, byyca);<br/>
&nbsp;&nbsp;blen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(bxxcalen, bxxca, byycalen, byyca, bdet);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adx, bdy, adxbdy1, adxbdy0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdx, ady, bdxady1, bdxady0);<br/>
&nbsp;&nbsp;Two_Two_Diff(adxbdy1, adxbdy0, bdxady1, bdxady0, ab3, ab[2], ab[1], ab[0]);<br/>
&nbsp;&nbsp;ab[3] <a href="CppOperatorAssign.htm">=</a> ab3;<br/>
&nbsp;&nbsp;cxablen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ab, cdx, cxab);<br/>
&nbsp;&nbsp;cxxablen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxablen, cxab, cdx, cxxab);<br/>
&nbsp;&nbsp;cyablen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ab, cdy, cyab);<br/>
&nbsp;&nbsp;cyyablen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cyablen, cyab, cdy, cyyab);<br/>
&nbsp;&nbsp;clen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(cxxablen, cxxab, cyyablen, cyyab, cdet);<br/>
<br/>
&nbsp;&nbsp;ablen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(alen, adet, blen, bdet, abdet);<br/>
&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(ablen, abdet, clen, cdet, fin1);<br/>
<br/>
&nbsp;&nbsp;det <a href="CppOperatorAssign.htm">=</a> estimate(finlength, fin1);<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> iccerrboundB * permanent;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Two_Diff_Tail(pa[0], pd[0], adx, adxtail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pa[1], pd[1], ady, adytail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pb[0], pd[0], bdx, bdxtail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pb[1], pd[1], bdy, bdytail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pc[0], pd[0], cdx, cdxtail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pc[1], pd[1], cdy, cdytail);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((adxtail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (bdxtail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (cdxtail <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (adytail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (bdytail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (cdytail <a href="CppOperatorEqual.htm">==</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> iccerrboundC * permanent <a href="CppOperatorPlus.htm">+</a> resulterrbound * Absolute(det);<br/>
&nbsp;&nbsp;det <a href="CppOperatorPlusAssign.htm">+=</a> ((adx * adx <a href="CppOperatorPlus.htm">+</a> ady * ady) * ((bdx * cdytail <a href="CppOperatorPlus.htm">+</a> cdy * bdxtail)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> (bdy * cdxtail <a href="CppOperatorPlus.htm">+</a> cdx * bdytail))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> 2.0 * (adx * adxtail <a href="CppOperatorPlus.htm">+</a> ady * adytail) * (bdx * cdy <a href="CppOperatorMinus.htm">-</a> bdy * cdx))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> ((bdx * bdx <a href="CppOperatorPlus.htm">+</a> bdy * bdy) * ((cdx * adytail <a href="CppOperatorPlus.htm">+</a> ady * cdxtail)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> (cdy * adxtail <a href="CppOperatorPlus.htm">+</a> adx * cdytail))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> 2.0 * (bdx * bdxtail <a href="CppOperatorPlus.htm">+</a> bdy * bdytail) * (cdx * ady <a href="CppOperatorMinus.htm">-</a> cdy * adx))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> ((cdx * cdx <a href="CppOperatorPlus.htm">+</a> cdy * cdy) * ((adx * bdytail <a href="CppOperatorPlus.htm">+</a> bdy * adxtail)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> (ady * bdxtail <a href="CppOperatorPlus.htm">+</a> bdx * adytail))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> 2.0 * (cdx * cdxtail <a href="CppOperatorPlus.htm">+</a> cdy * cdytail) * (adx * bdy <a href="CppOperatorMinus.htm">-</a> ady * bdx));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;finnow <a href="CppOperatorAssign.htm">=</a> fin1;<br/>
&nbsp;&nbsp;finother <a href="CppOperatorAssign.htm">=</a> fin2;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((bdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (cdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square(adx, adxadx1, adxadx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square(ady, adyady1, adyady0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(adxadx1, adxadx0, adyady1, adyady0, aa3, aa[2], aa[1], aa[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;aa[3] <a href="CppOperatorAssign.htm">=</a> aa3;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((cdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (adxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square(bdx, bdxbdx1, bdxbdx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square(bdy, bdybdy1, bdybdy0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(bdxbdx1, bdxbdx0, bdybdy1, bdybdy0, bb3, bb[2], bb[1], bb[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bb[3] <a href="CppOperatorAssign.htm">=</a> bb3;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((adxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (bdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square(cdx, cdxcdx1, cdxcdx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Square(cdy, cdycdy1, cdycdy0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(cdxcdx1, cdxcdx0, cdycdy1, cdycdy0, cc3, cc[2], cc[1], cc[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cc[3] <a href="CppOperatorAssign.htm">=</a> cc3;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;axtbclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bc, adxtail, axtbc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axtbclen, axtbc, 2.0 * adx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;axtcclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, cc, adxtail, axtcc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axtcclen, axtcc, bdy, temp16b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;axtbblen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bb, adxtail, axtbb);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16clen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axtbblen, axtbb, <a href="CppOperatorMinus.htm">-</a>cdy, temp16c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16clen, temp16c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;aytbclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bc, adytail, aytbc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aytbclen, aytbc, 2.0 * ady,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;aytbblen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bb, adytail, aytbb);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aytbblen, aytbb, cdx, temp16b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;aytcclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, cc, adytail, aytcc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16clen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aytcclen, aytcc, <a href="CppOperatorMinus.htm">-</a>bdx, temp16c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16clen, temp16c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bxtcalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ca, bdxtail, bxtca);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxtcalen, bxtca, 2.0 * bdx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bxtaalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, aa, bdxtail, bxtaa);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxtaalen, bxtaa, cdy, temp16b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bxtcclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, cc, bdxtail, bxtcc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16clen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxtcclen, bxtcc, <a href="CppOperatorMinus.htm">-</a>ady, temp16c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16clen, temp16c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bytcalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ca, bdytail, bytca);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bytcalen, bytca, 2.0 * bdy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bytcclen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, cc, bdytail, bytcc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bytcclen, bytcc, adx, temp16b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bytaalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, aa, bdytail, bytaa);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16clen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bytaalen, bytaa, <a href="CppOperatorMinus.htm">-</a>cdx, temp16c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16clen, temp16c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cxtablen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ab, cdxtail, cxtab);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxtablen, cxtab, 2.0 * cdx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cxtbblen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bb, cdxtail, cxtbb);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxtbblen, cxtbb, ady, temp16b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cxtaalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, aa, cdxtail, cxtaa);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16clen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxtaalen, cxtaa, <a href="CppOperatorMinus.htm">-</a>bdy, temp16c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16clen, temp16c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cytablen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ab, cdytail, cytab);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cytablen, cytab, 2.0 * cdy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cytaalen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, aa, cdytail, cytaa);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cytaalen, cytaa, bdx, temp16b);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cytbblen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bb, cdytail, cytbb);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp16clen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cytbblen, cytbb, <a href="CppOperatorMinus.htm">-</a>adx, temp16c);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16clen, temp16c,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((adxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((bdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (cdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdxtail, cdy, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdx, cdytail, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(ti1, ti0, tj1, tj0, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>bdy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdxtail, negate, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>bdytail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdx, negate, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(ti1, ti0, tj1, tj0, v3, v[2], v[1], v[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a> v3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bctlen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(4, u, 4, v, bct);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdxtail, cdytail, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdxtail, bdytail, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(ti1, ti0, tj1, tj0, bctt3, bctt[2], bctt[1], bctt[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bctt[3] <a href="CppOperatorAssign.htm">=</a> bctt3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bcttlen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bct[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bctlen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bctt[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bcttlen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axtbclen, axtbc, adxtail, temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axtbctlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bctlen, bct, adxtail, axtbct);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axtbctlen, axtbct, 2.0 * adx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp8len <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, cc, adxtail, temp8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(temp8len, temp8, bdytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp16alen,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp8len <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bb, <a href="CppOperatorMinus.htm">-</a>adxtail, temp8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(temp8len, temp8, cdytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp16alen,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axtbctlen, axtbct, adxtail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axtbcttlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bcttlen, bctt, adxtail, axtbctt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axtbcttlen, axtbctt, 2.0 * adx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(axtbcttlen, axtbctt, adxtail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp32alen, temp32a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen, temp32b, temp64);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp64len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aytbclen, aytbc, adytail, temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aytbctlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bctlen, bct, adytail, aytbct);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aytbctlen, aytbct, 2.0 * ady,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aytbctlen, aytbct, adytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aytbcttlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bcttlen, bctt, adytail, aytbctt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aytbcttlen, aytbctt, 2.0 * ady,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(aytbcttlen, aytbctt, adytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp32alen, temp32a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen, temp32b, temp64);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp64len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((bdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((cdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (adxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdxtail, ady, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdx, adytail, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(ti1, ti0, tj1, tj0, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>cdy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adxtail, negate, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>cdytail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adx, negate, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(ti1, ti0, tj1, tj0, v3, v[2], v[1], v[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a> v3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catlen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(4, u, 4, v, cat);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdxtail, adytail, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adxtail, cdytail, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(ti1, ti0, tj1, tj0, catt3, catt[2], catt[1], catt[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catt[3] <a href="CppOperatorAssign.htm">=</a> catt3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cattlen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catlen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catt[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cattlen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxtcalen, bxtca, bdxtail, temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bxtcatlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(catlen, cat, bdxtail, bxtcat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxtcatlen, bxtcat, 2.0 * bdx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp8len <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, aa, bdxtail, temp8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(temp8len, temp8, cdytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp16alen,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp8len <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, cc, <a href="CppOperatorMinus.htm">-</a>bdxtail, temp8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(temp8len, temp8, adytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp16alen,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxtcatlen, bxtcat, bdxtail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bxtcattlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cattlen, catt, bdxtail, bxtcatt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxtcattlen, bxtcatt, 2.0 * bdx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bxtcattlen, bxtcatt, bdxtail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp32alen, temp32a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen, temp32b, temp64);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp64len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bytcalen, bytca, bdytail, temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bytcatlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(catlen, cat, bdytail, bytcat);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bytcatlen, bytcat, 2.0 * bdy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bytcatlen, bytcat, bdytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bytcattlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cattlen, catt, bdytail, bytcatt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bytcattlen, bytcatt, 2.0 * bdy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bytcattlen, bytcatt, bdytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp32alen, temp32a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen, temp32b, temp64);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp64len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((cdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((adxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (bdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adxtail, bdy, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adx, bdytail, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(ti1, ti0, tj1, tj0, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>ady;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdxtail, negate, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>adytail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdx, negate, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Sum(ti1, ti0, tj1, tj0, v3, v[2], v[1], v[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a> v3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abtlen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(4, u, 4, v, abt);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adxtail, bdytail, ti1, ti0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdxtail, adytail, tj1, tj0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(ti1, ti0, tj1, tj0, abtt3, abtt[2], abtt[1], abtt[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abtt[3] <a href="CppOperatorAssign.htm">=</a> abtt3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abttlen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abt[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abtlen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abtt[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abttlen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxtablen, cxtab, cdxtail, temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cxtabtlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(abtlen, abt, cdxtail, cxtabt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxtabtlen, cxtabt, 2.0 * cdx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp8len <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bb, cdxtail, temp8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(temp8len, temp8, adytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp16alen,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp8len <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, aa, <a href="CppOperatorMinus.htm">-</a>cdxtail, temp8);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(temp8len, temp8, bdytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp16alen,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxtabtlen, cxtabt, cdxtail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cxtabttlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(abttlen, abtt, cdxtail, cxtabtt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxtabttlen, cxtabtt, 2.0 * cdx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cxtabttlen, cxtabtt, cdxtail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp32alen, temp32a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen, temp32b, temp64);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp64len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cytablen, cytab, cdytail, temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cytabtlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(abtlen, abt, cdytail, cytabt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cytabtlen, cytabt, 2.0 * cdy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen, temp32a, temp48);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp48len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp48, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cytabtlen, cytabt, cdytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cytabttlen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(abttlen, abtt, cdytail, cytabtt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cytabttlen, cytabtt, 2.0 * cdy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(cytabttlen, cytabtt, cdytail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp16alen, temp16a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp16blen, temp16b, temp32b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64len <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(temp32alen, temp32a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp32blen, temp32b, temp64);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, temp64len,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp64, finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> finnow[finlength <a href="CppOperatorMinus.htm">-</a> 1];<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL incircle(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex pa, vertex pb, vertex pc, vertex pd)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL incircle(m, b, pa, pb, pc, pd)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
vertex pd;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL adx, bdx, cdx, ady, bdy, cdy;<br/>
&nbsp;&nbsp;REAL bdxcdy, cdxbdy, cdxady, adxcdy, adxbdy, bdxady;<br/>
&nbsp;&nbsp;REAL alift, blift, clift;<br/>
&nbsp;&nbsp;REAL det;<br/>
&nbsp;&nbsp;REAL permanent, errbound;<br/>
<br/>
&nbsp;&nbsp;m-&gt;incirclecount<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;adx <a href="CppOperatorAssign.htm">=</a> pa[0] <a href="CppOperatorMinus.htm">-</a> pd[0];<br/>
&nbsp;&nbsp;bdx <a href="CppOperatorAssign.htm">=</a> pb[0] <a href="CppOperatorMinus.htm">-</a> pd[0];<br/>
&nbsp;&nbsp;cdx <a href="CppOperatorAssign.htm">=</a> pc[0] <a href="CppOperatorMinus.htm">-</a> pd[0];<br/>
&nbsp;&nbsp;ady <a href="CppOperatorAssign.htm">=</a> pa[1] <a href="CppOperatorMinus.htm">-</a> pd[1];<br/>
&nbsp;&nbsp;bdy <a href="CppOperatorAssign.htm">=</a> pb[1] <a href="CppOperatorMinus.htm">-</a> pd[1];<br/>
&nbsp;&nbsp;cdy <a href="CppOperatorAssign.htm">=</a> pc[1] <a href="CppOperatorMinus.htm">-</a> pd[1];<br/>
<br/>
&nbsp;&nbsp;bdxcdy <a href="CppOperatorAssign.htm">=</a> bdx * cdy;<br/>
&nbsp;&nbsp;cdxbdy <a href="CppOperatorAssign.htm">=</a> cdx * bdy;<br/>
&nbsp;&nbsp;alift <a href="CppOperatorAssign.htm">=</a> adx * adx <a href="CppOperatorPlus.htm">+</a> ady * ady;<br/>
<br/>
&nbsp;&nbsp;cdxady <a href="CppOperatorAssign.htm">=</a> cdx * ady;<br/>
&nbsp;&nbsp;adxcdy <a href="CppOperatorAssign.htm">=</a> adx * cdy;<br/>
&nbsp;&nbsp;blift <a href="CppOperatorAssign.htm">=</a> bdx * bdx <a href="CppOperatorPlus.htm">+</a> bdy * bdy;<br/>
<br/>
&nbsp;&nbsp;adxbdy <a href="CppOperatorAssign.htm">=</a> adx * bdy;<br/>
&nbsp;&nbsp;bdxady <a href="CppOperatorAssign.htm">=</a> bdx * ady;<br/>
&nbsp;&nbsp;clift <a href="CppOperatorAssign.htm">=</a> cdx * cdx <a href="CppOperatorPlus.htm">+</a> cdy * cdy;<br/>
<br/>
&nbsp;&nbsp;det <a href="CppOperatorAssign.htm">=</a> alift * (bdxcdy <a href="CppOperatorMinus.htm">-</a> cdxbdy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> blift * (cdxady <a href="CppOperatorMinus.htm">-</a> adxcdy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> clift * (adxbdy <a href="CppOperatorMinus.htm">-</a> bdxady);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;noexact) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;permanent <a href="CppOperatorAssign.htm">=</a> (Absolute(bdxcdy) <a href="CppOperatorPlus.htm">+</a> Absolute(cdxbdy)) * alift<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (Absolute(cdxady) <a href="CppOperatorPlus.htm">+</a> Absolute(adxcdy)) * blift<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (Absolute(adxbdy) <a href="CppOperatorPlus.htm">+</a> Absolute(bdxady)) * clift;<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> iccerrboundA * permanent;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det &gt; errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det &gt; errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> incircleadapt(pa, pb, pc, pd, permanent);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;orient3d()&nbsp;&nbsp; Return a positive value <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> pd lies below the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plane passing through pa, pb, and pc; "below" is defined so <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; that pa, pb, and pc appear in <a href="CppCounter.htm">counter</a>clockwise order when&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; viewed from above the plane.&nbsp;&nbsp;Returns a negative value <b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pd lies above the plane.&nbsp;&nbsp;Returns zero <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a>s are&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; coplanar.&nbsp;&nbsp;The result is also a rough approximation of six&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppTime.htm">time</a>s the <b><a href="CppSigned.htm">signed</a></b> volume of the tetrahedron defined by the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; four <a href="CppPointer.htm">point</a>s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Uses exact arithmetic <b><a href="CppIf.htm">if</a></b> necessary to ensure a correct answer.&nbsp;&nbsp;The&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;result <b><a href="CppReturn.htm">return</a></b>ed is the determinant of a <a href="CppMatrix.htm">matrix</a>.&nbsp;&nbsp;This determinant is&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;computed adaptively, in the sense that exact arithmetic is used only to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the degree it is needed to ensure that the <b><a href="CppReturn.htm">return</a></b>ed value has the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;correct sign.&nbsp;&nbsp;Hence, <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> is usually quite fast, but will run&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;more slowly when the input <a href="CppPointer.htm">point</a>s are coplanar or nearly so.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;See my Robust <a href="CppPredicate.htm">Predicate</a>s paper <b><a href="CppFor.htm">for</a></b> details.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL orient3dadapt(vertex pa, vertex pb, vertex pc, vertex pd,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REAL aheight, REAL bheight, REAL cheight, REAL dheight,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REAL permanent)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL orient3dadapt(pa, pb, pc, pd,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aheight, bheight, cheight, dheight, permanent)<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
vertex pd;<br/>
REAL aheight;<br/>
REAL bheight;<br/>
REAL cheight;<br/>
REAL dheight;<br/>
REAL permanent;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL adx, bdx, cdx, ady, bdy, cdy, adheight, bdheight, cdheight;<br/>
&nbsp;&nbsp;REAL det, errbound;<br/>
<br/>
&nbsp;&nbsp;REAL bdxcdy1, cdxbdy1, cdxady1, adxcdy1, adxbdy1, bdxady1;<br/>
&nbsp;&nbsp;REAL bdxcdy0, cdxbdy0, cdxady0, adxcdy0, adxbdy0, bdxady0;<br/>
&nbsp;&nbsp;REAL bc[4], ca[4], ab[4];<br/>
&nbsp;&nbsp;REAL bc3, ca3, ab3;<br/>
&nbsp;&nbsp;REAL adet[8], bdet[8], cdet[8];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> alen, blen, clen;<br/>
&nbsp;&nbsp;REAL abdet[16];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ablen;<br/>
&nbsp;&nbsp;REAL *finnow, *finother, *finswap;<br/>
&nbsp;&nbsp;REAL fin1[192], fin2[192];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> finlength;<br/>
<br/>
&nbsp;&nbsp;REAL adxtail, bdxtail, cdxtail;<br/>
&nbsp;&nbsp;REAL adytail, bdytail, cdytail;<br/>
&nbsp;&nbsp;REAL adheighttail, bdheighttail, cdheighttail;<br/>
&nbsp;&nbsp;REAL at_blarge, at_clarge;<br/>
&nbsp;&nbsp;REAL bt_clarge, bt_alarge;<br/>
&nbsp;&nbsp;REAL ct_alarge, ct_blarge;<br/>
&nbsp;&nbsp;REAL at_b[4], at_c[4], bt_c[4], bt_a[4], ct_a[4], ct_b[4];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> at_blen, at_clen, bt_clen, bt_alen, ct_alen, ct_blen;<br/>
&nbsp;&nbsp;REAL bdxt_cdy1, cdxt_bdy1, cdxt_ady1;<br/>
&nbsp;&nbsp;REAL adxt_cdy1, adxt_bdy1, bdxt_ady1;<br/>
&nbsp;&nbsp;REAL bdxt_cdy0, cdxt_bdy0, cdxt_ady0;<br/>
&nbsp;&nbsp;REAL adxt_cdy0, adxt_bdy0, bdxt_ady0;<br/>
&nbsp;&nbsp;REAL bdyt_cdx1, cdyt_bdx1, cdyt_adx1;<br/>
&nbsp;&nbsp;REAL adyt_cdx1, adyt_bdx1, bdyt_adx1;<br/>
&nbsp;&nbsp;REAL bdyt_cdx0, cdyt_bdx0, cdyt_adx0;<br/>
&nbsp;&nbsp;REAL adyt_cdx0, adyt_bdx0, bdyt_adx0;<br/>
&nbsp;&nbsp;REAL bct[8], cat[8], abt[8];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> bctlen, catlen, abtlen;<br/>
&nbsp;&nbsp;REAL bdxt_cdyt1, cdxt_bdyt1, cdxt_adyt1;<br/>
&nbsp;&nbsp;REAL adxt_cdyt1, adxt_bdyt1, bdxt_adyt1;<br/>
&nbsp;&nbsp;REAL bdxt_cdyt0, cdxt_bdyt0, cdxt_adyt0;<br/>
&nbsp;&nbsp;REAL adxt_cdyt0, adxt_bdyt0, bdxt_adyt0;<br/>
&nbsp;&nbsp;REAL u[4], v[12], w[16];<br/>
&nbsp;&nbsp;REAL u3;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vlength, wlength;<br/>
&nbsp;&nbsp;REAL negate;<br/>
<br/>
&nbsp;&nbsp;REAL bvirt;<br/>
&nbsp;&nbsp;REAL avirt, bround, around;<br/>
&nbsp;&nbsp;REAL c;<br/>
&nbsp;&nbsp;REAL abig;<br/>
&nbsp;&nbsp;REAL ahi, alo, bhi, blo;<br/>
&nbsp;&nbsp;REAL err1, err2, err3;<br/>
&nbsp;&nbsp;REAL _i, _j, _k;<br/>
&nbsp;&nbsp;REAL _0;<br/>
<br/>
&nbsp;&nbsp;adx <a href="CppOperatorAssign.htm">=</a> (REAL) (pa[0] <a href="CppOperatorMinus.htm">-</a> pd[0]);<br/>
&nbsp;&nbsp;bdx <a href="CppOperatorAssign.htm">=</a> (REAL) (pb[0] <a href="CppOperatorMinus.htm">-</a> pd[0]);<br/>
&nbsp;&nbsp;cdx <a href="CppOperatorAssign.htm">=</a> (REAL) (pc[0] <a href="CppOperatorMinus.htm">-</a> pd[0]);<br/>
&nbsp;&nbsp;ady <a href="CppOperatorAssign.htm">=</a> (REAL) (pa[1] <a href="CppOperatorMinus.htm">-</a> pd[1]);<br/>
&nbsp;&nbsp;bdy <a href="CppOperatorAssign.htm">=</a> (REAL) (pb[1] <a href="CppOperatorMinus.htm">-</a> pd[1]);<br/>
&nbsp;&nbsp;cdy <a href="CppOperatorAssign.htm">=</a> (REAL) (pc[1] <a href="CppOperatorMinus.htm">-</a> pd[1]);<br/>
&nbsp;&nbsp;adheight <a href="CppOperatorAssign.htm">=</a> (REAL) (aheight <a href="CppOperatorMinus.htm">-</a> dheight);<br/>
&nbsp;&nbsp;bdheight <a href="CppOperatorAssign.htm">=</a> (REAL) (bheight <a href="CppOperatorMinus.htm">-</a> dheight);<br/>
&nbsp;&nbsp;cdheight <a href="CppOperatorAssign.htm">=</a> (REAL) (cheight <a href="CppOperatorMinus.htm">-</a> dheight);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdx, cdy, bdxcdy1, bdxcdy0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdx, bdy, cdxbdy1, cdxbdy0);<br/>
&nbsp;&nbsp;Two_Two_Diff(bdxcdy1, bdxcdy0, cdxbdy1, cdxbdy0, bc3, bc[2], bc[1], bc[0]);<br/>
&nbsp;&nbsp;bc[3] <a href="CppOperatorAssign.htm">=</a> bc3;<br/>
&nbsp;&nbsp;alen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bc, adheight, adet);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdx, ady, cdxady1, cdxady0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adx, cdy, adxcdy1, adxcdy0);<br/>
&nbsp;&nbsp;Two_Two_Diff(cdxady1, cdxady0, adxcdy1, adxcdy0, ca3, ca[2], ca[1], ca[0]);<br/>
&nbsp;&nbsp;ca[3] <a href="CppOperatorAssign.htm">=</a> ca3;<br/>
&nbsp;&nbsp;blen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ca, bdheight, bdet);<br/>
<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adx, bdy, adxbdy1, adxbdy0);<br/>
&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdx, ady, bdxady1, bdxady0);<br/>
&nbsp;&nbsp;Two_Two_Diff(adxbdy1, adxbdy0, bdxady1, bdxady0, ab3, ab[2], ab[1], ab[0]);<br/>
&nbsp;&nbsp;ab[3] <a href="CppOperatorAssign.htm">=</a> ab3;<br/>
&nbsp;&nbsp;clen <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ab, cdheight, cdet);<br/>
<br/>
&nbsp;&nbsp;ablen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(alen, adet, blen, bdet, abdet);<br/>
&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(ablen, abdet, clen, cdet, fin1);<br/>
<br/>
&nbsp;&nbsp;det <a href="CppOperatorAssign.htm">=</a> estimate(finlength, fin1);<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> o3derrboundB * permanent;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Two_Diff_Tail(pa[0], pd[0], adx, adxtail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pb[0], pd[0], bdx, bdxtail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pc[0], pd[0], cdx, cdxtail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pa[1], pd[1], ady, adytail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pb[1], pd[1], bdy, bdytail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(pc[1], pd[1], cdy, cdytail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(aheight, dheight, adheight, adheighttail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(bheight, dheight, bdheight, bdheighttail);<br/>
&nbsp;&nbsp;Two_Diff_Tail(cheight, dheight, cdheight, cdheighttail);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((adxtail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (bdxtail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (cdxtail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(adytail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (bdytail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (cdytail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(adheighttail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(bdheighttail <a href="CppOperatorEqual.htm">==</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cdheighttail <a href="CppOperatorEqual.htm">==</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> o3derrboundC * permanent <a href="CppOperatorPlus.htm">+</a> resulterrbound * Absolute(det);<br/>
&nbsp;&nbsp;det <a href="CppOperatorPlusAssign.htm">+=</a> (adheight * ((bdx * cdytail <a href="CppOperatorPlus.htm">+</a> cdy * bdxtail) <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(bdy * cdxtail <a href="CppOperatorPlus.htm">+</a> cdx * bdytail)) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adheighttail * (bdx * cdy <a href="CppOperatorMinus.htm">-</a> bdy * cdx)) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (bdheight * ((cdx * adytail <a href="CppOperatorPlus.htm">+</a> ady * cdxtail) <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cdy * adxtail <a href="CppOperatorPlus.htm">+</a> adx * cdytail)) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdheighttail * (cdx * ady <a href="CppOperatorMinus.htm">-</a> cdy * adx)) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (cdheight * ((adx * bdytail <a href="CppOperatorPlus.htm">+</a> bdy * adxtail) <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ady * bdxtail <a href="CppOperatorPlus.htm">+</a> bdx * adytail)) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cdheighttail * (adx * bdy <a href="CppOperatorMinus.htm">-</a> ady * bdx));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det <a href="CppOperatorGreaterEqual.htm">&gt;=</a> errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;finnow <a href="CppOperatorAssign.htm">=</a> fin1;<br/>
&nbsp;&nbsp;finother <a href="CppOperatorAssign.htm">=</a> fin2;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adxtail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adytail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_b[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_blen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_c[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_clen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>adytail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, bdx, at_blarge, at_b[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_b[1] <a href="CppOperatorAssign.htm">=</a> at_blarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_blen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adytail, cdx, at_clarge, at_c[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_c[1] <a href="CppOperatorAssign.htm">=</a> at_clarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_clen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adytail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adxtail, bdy, at_blarge, at_b[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_b[1] <a href="CppOperatorAssign.htm">=</a> at_blarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_blen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>adxtail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, cdy, at_clarge, at_c[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_c[1] <a href="CppOperatorAssign.htm">=</a> at_clarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_clen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adxtail, bdy, adxt_bdy1, adxt_bdy0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adytail, bdx, adyt_bdx1, adyt_bdx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(adxt_bdy1, adxt_bdy0, adyt_bdx1, adyt_bdx0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at_blarge, at_b[2], at_b[1], at_b[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_b[3] <a href="CppOperatorAssign.htm">=</a> at_blarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_blen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adytail, cdx, adyt_cdx1, adyt_cdx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adxtail, cdy, adxt_cdy1, adxt_cdy0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(adyt_cdx1, adyt_cdx0, adxt_cdy1, adxt_cdy0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at_clarge, at_c[2], at_c[1], at_c[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_c[3] <a href="CppOperatorAssign.htm">=</a> at_clarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at_clen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdxtail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdytail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_c[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_clen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_a[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_alen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>bdytail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, cdx, bt_clarge, bt_c[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_c[1] <a href="CppOperatorAssign.htm">=</a> bt_clarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_clen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdytail, adx, bt_alarge, bt_a[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_a[1] <a href="CppOperatorAssign.htm">=</a> bt_alarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_alen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdytail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdxtail, cdy, bt_clarge, bt_c[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_c[1] <a href="CppOperatorAssign.htm">=</a> bt_clarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_clen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>bdxtail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, ady, bt_alarge, bt_a[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_a[1] <a href="CppOperatorAssign.htm">=</a> bt_alarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_alen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdxtail, cdy, bdxt_cdy1, bdxt_cdy0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdytail, cdx, bdyt_cdx1, bdyt_cdx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(bdxt_cdy1, bdxt_cdy0, bdyt_cdx1, bdyt_cdx0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bt_clarge, bt_c[2], bt_c[1], bt_c[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_c[3] <a href="CppOperatorAssign.htm">=</a> bt_clarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_clen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdytail, adx, bdyt_adx1, bdyt_adx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdxtail, ady, bdxt_ady1, bdxt_ady0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(bdyt_adx1, bdyt_adx0, bdxt_ady1, bdxt_ady0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_alarge, bt_a[2], bt_a[1], bt_a[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_a[3] <a href="CppOperatorAssign.htm">=</a> bt_alarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_alen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdxtail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdytail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_a[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_alen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_b[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_blen <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>cdytail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, adx, ct_alarge, ct_a[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_a[1] <a href="CppOperatorAssign.htm">=</a> ct_alarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_alen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdytail, bdx, ct_blarge, ct_b[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_b[1] <a href="CppOperatorAssign.htm">=</a> ct_blarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_blen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdytail <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdxtail, ady, ct_alarge, ct_a[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_a[1] <a href="CppOperatorAssign.htm">=</a> ct_alarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_alen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>cdxtail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, bdy, ct_blarge, ct_b[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_b[1] <a href="CppOperatorAssign.htm">=</a> ct_blarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_blen <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdxtail, ady, cdxt_ady1, cdxt_ady0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdytail, adx, cdyt_adx1, cdyt_adx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(cdxt_ady1, cdxt_ady0, cdyt_adx1, cdyt_adx0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ct_alarge, ct_a[2], ct_a[1], ct_a[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_a[3] <a href="CppOperatorAssign.htm">=</a> ct_alarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_alen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdytail, bdx, cdyt_bdx1, cdyt_bdx0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdxtail, bdy, cdxt_bdy1, cdxt_bdy0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_Two_Diff(cdyt_bdx1, cdyt_bdx0, cdxt_bdy1, cdxt_bdy0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ct_blarge, ct_b[2], ct_b[1], ct_b[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_b[3] <a href="CppOperatorAssign.htm">=</a> ct_blarge;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ct_blen <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;bctlen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(bt_clen, bt_c, ct_blen, ct_b, bct);<br/>
&nbsp;&nbsp;wlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bctlen, bct, adheight, w);<br/>
&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, wlength, w,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
<br/>
&nbsp;&nbsp;catlen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(ct_alen, ct_a, at_clen, at_c, cat);<br/>
&nbsp;&nbsp;wlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(catlen, cat, bdheight, w);<br/>
&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, wlength, w,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
<br/>
&nbsp;&nbsp;abtlen <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(at_blen, at_b, bt_alen, bt_a, abt);<br/>
&nbsp;&nbsp;wlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(abtlen, abt, cdheight, w);<br/>
&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, wlength, w,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, bc, adheighttail, v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, vlength, v,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ca, bdheighttail, v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, vlength, v,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(4, ab, cdheighttail, v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, vlength, v,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(adxtail, bdytail, adxt_bdyt1, adxt_bdyt0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(adxt_bdyt1, adxt_bdyt0, cdheight, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(adxt_bdyt1, adxt_bdyt0, cdheighttail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>adxtail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, cdytail, adxt_cdyt1, adxt_cdyt0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(adxt_cdyt1, adxt_cdyt0, bdheight, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(adxt_cdyt1, adxt_cdyt0, bdheighttail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(bdxtail, cdytail, bdxt_cdyt1, bdxt_cdyt0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(bdxt_cdyt1, bdxt_cdyt0, adheight, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(bdxt_cdyt1, bdxt_cdyt0, adheighttail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>bdxtail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, adytail, bdxt_adyt1, bdxt_adyt0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(bdxt_adyt1, bdxt_adyt0, cdheight, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(bdxt_adyt1, bdxt_adyt0, cdheighttail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdxtail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(cdxtail, adytail, cdxt_adyt1, cdxt_adyt0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(cdxt_adyt1, cdxt_adyt0, bdheight, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(cdxt_adyt1, cdxt_adyt0, bdheighttail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdytail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;negate <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>cdxtail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_<a href="CppProduct.htm">Product</a>(negate, bdytail, cdxt_bdyt1, cdxt_bdyt0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(cdxt_bdyt1, cdxt_bdyt0, adheight, u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two_One_<a href="CppProduct.htm">Product</a>(cdxt_bdyt1, cdxt_bdyt0, adheighttail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u3, u[2], u[1], u[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[3] <a href="CppOperatorAssign.htm">=</a> u3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, 4, u,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (adheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;wlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(bctlen, bct, adheighttail, w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, wlength, w,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bdheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;wlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(catlen, cat, bdheighttail, w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, wlength, w,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cdheighttail <a href="CppOperatorNotEqual.htm">!=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;wlength <a href="CppOperatorAssign.htm">=</a> scale_expansion_zeroelim(abtlen, abt, cdheighttail, w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finlength <a href="CppOperatorAssign.htm">=</a> fast_expansion_sum_zeroelim(finlength, finnow, wlength, w,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finother);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;finswap <a href="CppOperatorAssign.htm">=</a> finnow; finnow <a href="CppOperatorAssign.htm">=</a> finother; finother <a href="CppOperatorAssign.htm">=</a> finswap;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> finnow[finlength <a href="CppOperatorMinus.htm">-</a> 1];<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL orient3d(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex pa, vertex pb, vertex pc, vertex pd,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REAL aheight, REAL bheight, REAL cheight, REAL dheight)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL orient3d(m, b, pa, pb, pc, pd, aheight, bheight, cheight, dheight)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
vertex pd;<br/>
REAL aheight;<br/>
REAL bheight;<br/>
REAL cheight;<br/>
REAL dheight;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL adx, bdx, cdx, ady, bdy, cdy, adheight, bdheight, cdheight;<br/>
&nbsp;&nbsp;REAL bdxcdy, cdxbdy, cdxady, adxcdy, adxbdy, bdxady;<br/>
&nbsp;&nbsp;REAL det;<br/>
&nbsp;&nbsp;REAL permanent, errbound;<br/>
<br/>
&nbsp;&nbsp;m-&gt;orient3dcount<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;adx <a href="CppOperatorAssign.htm">=</a> pa[0] <a href="CppOperatorMinus.htm">-</a> pd[0];<br/>
&nbsp;&nbsp;bdx <a href="CppOperatorAssign.htm">=</a> pb[0] <a href="CppOperatorMinus.htm">-</a> pd[0];<br/>
&nbsp;&nbsp;cdx <a href="CppOperatorAssign.htm">=</a> pc[0] <a href="CppOperatorMinus.htm">-</a> pd[0];<br/>
&nbsp;&nbsp;ady <a href="CppOperatorAssign.htm">=</a> pa[1] <a href="CppOperatorMinus.htm">-</a> pd[1];<br/>
&nbsp;&nbsp;bdy <a href="CppOperatorAssign.htm">=</a> pb[1] <a href="CppOperatorMinus.htm">-</a> pd[1];<br/>
&nbsp;&nbsp;cdy <a href="CppOperatorAssign.htm">=</a> pc[1] <a href="CppOperatorMinus.htm">-</a> pd[1];<br/>
&nbsp;&nbsp;adheight <a href="CppOperatorAssign.htm">=</a> aheight <a href="CppOperatorMinus.htm">-</a> dheight;<br/>
&nbsp;&nbsp;bdheight <a href="CppOperatorAssign.htm">=</a> bheight <a href="CppOperatorMinus.htm">-</a> dheight;<br/>
&nbsp;&nbsp;cdheight <a href="CppOperatorAssign.htm">=</a> cheight <a href="CppOperatorMinus.htm">-</a> dheight;<br/>
<br/>
&nbsp;&nbsp;bdxcdy <a href="CppOperatorAssign.htm">=</a> bdx * cdy;<br/>
&nbsp;&nbsp;cdxbdy <a href="CppOperatorAssign.htm">=</a> cdx * bdy;<br/>
<br/>
&nbsp;&nbsp;cdxady <a href="CppOperatorAssign.htm">=</a> cdx * ady;<br/>
&nbsp;&nbsp;adxcdy <a href="CppOperatorAssign.htm">=</a> adx * cdy;<br/>
<br/>
&nbsp;&nbsp;adxbdy <a href="CppOperatorAssign.htm">=</a> adx * bdy;<br/>
&nbsp;&nbsp;bdxady <a href="CppOperatorAssign.htm">=</a> bdx * ady;<br/>
<br/>
&nbsp;&nbsp;det <a href="CppOperatorAssign.htm">=</a> adheight * (bdxcdy <a href="CppOperatorMinus.htm">-</a> cdxbdy) <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> bdheight * (cdxady <a href="CppOperatorMinus.htm">-</a> adxcdy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> cdheight * (adxbdy <a href="CppOperatorMinus.htm">-</a> bdxady);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;noexact) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;permanent <a href="CppOperatorAssign.htm">=</a> (Absolute(bdxcdy) <a href="CppOperatorPlus.htm">+</a> Absolute(cdxbdy)) * Absolute(adheight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (Absolute(cdxady) <a href="CppOperatorPlus.htm">+</a> Absolute(adxcdy)) * Absolute(bdheight)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (Absolute(adxbdy) <a href="CppOperatorPlus.htm">+</a> Absolute(bdxady)) * Absolute(cdheight);<br/>
&nbsp;&nbsp;errbound <a href="CppOperatorAssign.htm">=</a> o3derrboundA * permanent;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((det &gt; errbound) <a href="CppOperatorLogicalOr.htm">||</a> (-det &gt; errbound)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> det;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> orient3dadapt(pa, pb, pc, pd, aheight, bheight, cheight, dheight,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; permanent);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;nonregular()&nbsp;&nbsp; Return a positive value <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> pd is incompatible&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with the circle or plane passing through pa, pb, and pc&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (meaning that pd is inside the circle or below the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plane); a negative value <b><a href="CppIf.htm">if</a></b> it is compatible; and zero <b><a href="CppIf.htm">if</a></b> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the four <a href="CppPointer.htm">point</a>s are cocircular/coplanar.&nbsp;&nbsp;The <a href="CppPointer.htm">point</a>s pa,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb, and pc must be in <a href="CppCounter.htm">counter</a>clockwise order, or the sign <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; of the result will be reversed.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If the <a href="CppOperatorMinus.htm">-</a>w <b><a href="CppSwitch.htm">switch</a></b> is used, the <a href="CppPointer.htm">point</a>s are lifted onto the parabolic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;lifting map, then they are dropped according to their weights, then the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;3D orientation test is applied.&nbsp;&nbsp;If the <a href="CppOperatorMinus.htm">-</a>W <b><a href="CppSwitch.htm">switch</a></b> is used, the <a href="CppPointer.htm">point</a>s'&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;heights are already provided, so the 3D orientation test is applied&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;directly.&nbsp;&nbsp;If neither <b><a href="CppSwitch.htm">switch</a></b> is used, the incircle test is applied.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL nonregular(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex pa, vertex pb, vertex pc, vertex pd)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL nonregular(m, b, pa, pb, pc, pd)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
vertex pd;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;weighted <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> incircle(m, b, pa, pb, pc, pd);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (b-&gt;weighted <a href="CppOperatorEqual.htm">==</a> 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> orient3d(m, b, pa, pb, pc, pd,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pa[0] * pa[0] <a href="CppOperatorPlus.htm">+</a> pa[1] * pa[1] <a href="CppOperatorMinus.htm">-</a> pa[2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pb[0] * pb[0] <a href="CppOperatorPlus.htm">+</a> pb[1] * pb[1] <a href="CppOperatorMinus.htm">-</a> pb[2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pc[0] * pc[0] <a href="CppOperatorPlus.htm">+</a> pc[1] * pc[1] <a href="CppOperatorMinus.htm">-</a> pc[2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pd[0] * pd[0] <a href="CppOperatorPlus.htm">+</a> pd[1] * pd[1] <a href="CppOperatorMinus.htm">-</a> pd[2]);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> orient3d(m, b, pa, pb, pc, pd, pa[2], pb[2], pc[2], pd[2]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;findcircumcenter()&nbsp;&nbsp; Find the circumcenter of a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The result is <b><a href="CppReturn.htm">return</a></b>ed both in terms of x-y coordinates and xi-eta&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(barycentric) coordinates.&nbsp;&nbsp;The xi-eta coordinate system is defined in&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;terms of the triangle:&nbsp;&nbsp;the origin of the triangle is the origin of the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;coordinate system; the destination of the triangle is one unit along the <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;xi axis; and the apex of the triangle is one unit along the eta axis.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This procedure also <a href="CppReturn.htm">returns</a> the square of the length of the triangle's&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;shortest edge.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> findcircumcenter(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex torg, vertex tdest, vertex tapex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex circumcenter, REAL *xi, REAL *eta, <b><a href="CppInt.htm">int</a></b> offcenter)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> findcircumcenter(m, b, torg, tdest, tapex, circumcenter, xi, eta,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offcenter)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex torg;<br/>
vertex tdest;<br/>
vertex tapex;<br/>
vertex circumcenter;<br/>
REAL *xi;<br/>
REAL *eta;<br/>
<b><a href="CppInt.htm">int</a></b> offcenter;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL xdo, ydo, xao, yao;<br/>
&nbsp;&nbsp;REAL dodist, aodist, dadist;<br/>
&nbsp;&nbsp;REAL denominator;<br/>
&nbsp;&nbsp;REAL dx, dy, dxoff, dyoff;<br/>
<br/>
&nbsp;&nbsp;m-&gt;circumcentercount<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Compute the circumcenter of the triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;xdo <a href="CppOperatorAssign.htm">=</a> tdest[0] <a href="CppOperatorMinus.htm">-</a> torg[0];<br/>
&nbsp;&nbsp;ydo <a href="CppOperatorAssign.htm">=</a> tdest[1] <a href="CppOperatorMinus.htm">-</a> torg[1];<br/>
&nbsp;&nbsp;xao <a href="CppOperatorAssign.htm">=</a> tapex[0] <a href="CppOperatorMinus.htm">-</a> torg[0];<br/>
&nbsp;&nbsp;yao <a href="CppOperatorAssign.htm">=</a> tapex[1] <a href="CppOperatorMinus.htm">-</a> torg[1];<br/>
&nbsp;&nbsp;dodist <a href="CppOperatorAssign.htm">=</a> xdo * xdo <a href="CppOperatorPlus.htm">+</a> ydo * ydo;<br/>
&nbsp;&nbsp;aodist <a href="CppOperatorAssign.htm">=</a> xao * xao <a href="CppOperatorPlus.htm">+</a> yao * yao;<br/>
&nbsp;&nbsp;dadist <a href="CppOperatorAssign.htm">=</a> (tdest[0] <a href="CppOperatorMinus.htm">-</a> tapex[0]) * (tdest[0] <a href="CppOperatorMinus.htm">-</a> tapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (tdest[1] <a href="CppOperatorMinus.htm">-</a> tapex[1]) * (tdest[1] <a href="CppOperatorMinus.htm">-</a> tapex[1]);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;noexact) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;denominator <a href="CppOperatorAssign.htm">=</a> 0.5 <a href="CppOperatorDivide.htm">/</a> (xdo * yao <a href="CppOperatorMinus.htm">-</a> xao * ydo);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Use the <a href="CppCounter.htm">counter</a>clockwise() routine to ensure a positive (and <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; reasonably accurate) result, avoiding <a href="CppAny.htm">any</a> possibility of&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; division by zero.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;denominator <a href="CppOperatorAssign.htm">=</a> 0.5 <a href="CppOperatorDivide.htm">/</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, tdest, tapex, torg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Don't count the above as an orientation test. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;<a href="CppCounter.htm">counter</a>clockcount<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;dx <a href="CppOperatorAssign.htm">=</a> (yao * dodist <a href="CppOperatorMinus.htm">-</a> ydo * aodist) * denominator;<br/>
&nbsp;&nbsp;dy <a href="CppOperatorAssign.htm">=</a> (xdo * aodist <a href="CppOperatorMinus.htm">-</a> xao * dodist) * denominator;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the (squared) length of the triangle's shortest edge.&nbsp;&nbsp;This&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; serves as a conservative estimate of the insertion radius of the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; circumcenter's parent.&nbsp;&nbsp;The estimate is used to ensure that&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the <a href="CppAlgorithm.htm">algorithm</a> terminates even <b><a href="CppIf.htm">if</a></b> very small angles appear in&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the input PSLG.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((dodist &lt; aodist) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (dodist &lt; dadist)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (offcenter <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (b-&gt;offconstant &gt; 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the position of the off-center, as described by Alper Ungor. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dxoff <a href="CppOperatorAssign.htm">=</a> 0.5 * xdo <a href="CppOperatorMinus.htm">-</a> b-&gt;offconstant * ydo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dyoff <a href="CppOperatorAssign.htm">=</a> 0.5 * ydo <a href="CppOperatorPlus.htm">+</a> b-&gt;offconstant * xdo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the off-center is closer to the origin than the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; circumcenter, use the off-center instead.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dxoff * dxoff <a href="CppOperatorPlus.htm">+</a> dyoff * dyoff &lt; dx * dx <a href="CppOperatorPlus.htm">+</a> dy * dy) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx <a href="CppOperatorAssign.htm">=</a> dxoff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy <a href="CppOperatorAssign.htm">=</a> dyoff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (aodist &lt; dadist) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (offcenter <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (b-&gt;offconstant &gt; 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dxoff <a href="CppOperatorAssign.htm">=</a> 0.5 * xao <a href="CppOperatorPlus.htm">+</a> b-&gt;offconstant * yao;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dyoff <a href="CppOperatorAssign.htm">=</a> 0.5 * yao <a href="CppOperatorMinus.htm">-</a> b-&gt;offconstant * xao;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the off-center is closer to the origin than the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; circumcenter, use the off-center instead.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dxoff * dxoff <a href="CppOperatorPlus.htm">+</a> dyoff * dyoff &lt; dx * dx <a href="CppOperatorPlus.htm">+</a> dy * dy) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx <a href="CppOperatorAssign.htm">=</a> dxoff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy <a href="CppOperatorAssign.htm">=</a> dyoff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (offcenter <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (b-&gt;offconstant &gt; 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dxoff <a href="CppOperatorAssign.htm">=</a> 0.5 * (tapex[0] <a href="CppOperatorMinus.htm">-</a> tdest[0]) <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;offconstant * (tapex[1] <a href="CppOperatorMinus.htm">-</a> tdest[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dyoff <a href="CppOperatorAssign.htm">=</a> 0.5 * (tapex[1] <a href="CppOperatorMinus.htm">-</a> tdest[1]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;offconstant * (tapex[0] <a href="CppOperatorMinus.htm">-</a> tdest[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the off-center is closer to the destination than the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; circumcenter, use the off-center instead.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dxoff * dxoff <a href="CppOperatorPlus.htm">+</a> dyoff * dyoff &lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(dx <a href="CppOperatorMinus.htm">-</a> xdo) * (dx <a href="CppOperatorMinus.htm">-</a> xdo) <a href="CppOperatorPlus.htm">+</a> (dy <a href="CppOperatorMinus.htm">-</a> ydo) * (dy <a href="CppOperatorMinus.htm">-</a> ydo)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx <a href="CppOperatorAssign.htm">=</a> xdo <a href="CppOperatorPlus.htm">+</a> dxoff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy <a href="CppOperatorAssign.htm">=</a> ydo <a href="CppOperatorPlus.htm">+</a> dyoff;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;circumcenter[0] <a href="CppOperatorAssign.htm">=</a> torg[0] <a href="CppOperatorPlus.htm">+</a> dx;<br/>
&nbsp;&nbsp;circumcenter[1] <a href="CppOperatorAssign.htm">=</a> torg[1] <a href="CppOperatorPlus.htm">+</a> dy;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> To interpolate vertex attributes <b><a href="CppFor.htm">for</a></b> the <b><a href="CppNew.htm">new</a></b> vertex inserted at <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the circumcenter, define a coordinate system with a xi-axis,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; directed from the triangle's origin to its destination, and&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; an eta-axis, directed from its origin to its apex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Calculate the xi and eta coordinates of the circumcenter.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;*xi <a href="CppOperatorAssign.htm">=</a> (yao * dx <a href="CppOperatorMinus.htm">-</a> xao * dy) * (2.0 * denominator);<br/>
&nbsp;&nbsp;*eta <a href="CppOperatorAssign.htm">=</a> (xdo * dy <a href="CppOperatorMinus.htm">-</a> ydo * dx) * (2.0 * denominator);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Geometric primitives end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangleinit()&nbsp;&nbsp; <a href="CppInitialize.htm">Initialize</a> some variables.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> triangleinit(<b><a href="CppStruct.htm">struct</a></b> mesh *m)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> triangleinit(m)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;poolzero(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;poolzero(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;poolzero(&amp;m-&gt;subsegs);<br/>
&nbsp;&nbsp;poolzero(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;poolzero(&amp;m-&gt;badsubsegs);<br/>
&nbsp;&nbsp;poolzero(&amp;m-&gt;badtriangles);<br/>
&nbsp;&nbsp;poolzero(&amp;m-&gt;flipstackers);<br/>
&nbsp;&nbsp;poolzero(&amp;m-&gt;splaynodes);<br/>
<br/>
&nbsp;&nbsp;m-&gt;recenttri.tri <a href="CppOperatorAssign.htm">=</a> (triangle *) <a href="CppNULL.htm">NULL</a>; <a href="CppComment.htm">/*</a> No triangle has been visited yet. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;undeads <a href="CppOperatorAssign.htm">=</a> 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> No eliminated input vertices yet. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;samples <a href="CppOperatorAssign.htm">=</a> 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> <a href="CppPoint.htm">Point</a> location should take at least one sample. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;checksegments <a href="CppOperatorAssign.htm">=</a> 0;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> There are no segments in the triangulation yet. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;checkquality <a href="CppOperatorAssign.htm">=</a> 0;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> The quality triangulation stage has not begun. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;incirclecount <a href="CppOperatorAssign.htm">=</a> m-&gt;<a href="CppCounter.htm">counter</a>clockcount <a href="CppOperatorAssign.htm">=</a> m-&gt;orient3dcount <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;m-&gt;hyperbolacount <a href="CppOperatorAssign.htm">=</a> m-&gt;circletopcount <a href="CppOperatorAssign.htm">=</a> m-&gt;circumcentercount <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;randomseed <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<br/>
&nbsp;&nbsp;exactinit();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> exact arithmetic constants. <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;randomnation()&nbsp;&nbsp; Generate a <a href="CppRandomNumber.htm">random number</a> between 0 and `choices' <a href="CppOperatorMinus.htm">-</a> 1.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This is a simple linear congruential <a href="CppRandomNumber.htm">random number</a> generator.&nbsp;&nbsp;Hence, it <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is a bad <a href="CppRandomNumber.htm">random number</a> generator, but good enough <b><a href="CppFor.htm">for</a></b> most randomized&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;geometric <a href="CppAlgorithm.htm">algorithm</a>s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> randomnation(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> choices)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> randomnation(choices)<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> choices;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;randomseed <a href="CppOperatorAssign.htm">=</a> (randomseed * 1366l <a href="CppOperatorPlus.htm">+</a> 150889l) <a href="CppOperatorModulus.htm">%</a> 714025l;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> randomseed <a href="CppOperatorDivide.htm">/</a> (714025l <a href="CppOperatorDivide.htm">/</a> choices <a href="CppOperatorPlus.htm">+</a> 1);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>******** Mesh quality testing routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;checkmesh()&nbsp;&nbsp; Test the mesh <b><a href="CppFor.htm">for</a></b> topological consistency.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> checkmesh(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> checkmesh(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri oppotri, oppooppotri;<br/>
&nbsp;&nbsp;vertex triorg, tridest, triapex;<br/>
&nbsp;&nbsp;vertex oppoorg, oppodest;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> horrors;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> saveexact;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporarily turn on exact arithmetic <b><a href="CppIf.htm">if</a></b> it's off. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;saveexact <a href="CppOperatorAssign.htm">=</a> b-&gt;noexact;<br/>
&nbsp;&nbsp;b-&gt;noexact <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Checking consistency of mesh...\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;horrors <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Run through the list of triangles, checking each one. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check all three edges of the triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0; triangleloop.orient &lt; 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleloop.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, triorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, tridest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triangleloop.orient <a href="CppOperatorEqual.htm">==</a> 0) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Only test <b><a href="CppFor.htm">for</a></b> in<a href="CppVersion.htm">version</a> once. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Test <b><a href="CppIf.htm">if</a></b> the triangle is flat or inverted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(triangleloop, triapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, triorg, tridest, triapex) <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;!! !! Inverted ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;triangleloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horrors<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the neighboring triangle on <b><a href="CppThis.htm">this</a></b> edge. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(triangleloop, oppotri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (oppotri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check that the triangle's neighbor knows it's a neighbor. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(oppotri, oppooppotri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> oppooppotri.tri)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (triangleloop.orient <a href="CppOperatorNotEqual.htm">!=</a> oppooppotri.orient)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;!! !! Asymmetric triangle-triangle bond:\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triangleloop.tri <a href="CppOperatorEqual.htm">==</a> oppooppotri.tri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp; (Right triangle, wrong orientation)\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;triangleloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Second (nonreciprocating) ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;oppotri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horrors<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check that both triangles agree on the identities <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of their shared vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(oppotri, oppoorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(oppotri, oppodest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((triorg <a href="CppOperatorNotEqual.htm">!=</a> oppodest) <a href="CppOperatorLogicalOr.htm">||</a> (tridest <a href="CppOperatorNotEqual.htm">!=</a> oppoorg)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;!! !! Mismatched edge coordinates between two triangles:\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First mismatched ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;triangleloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Second mismatched ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;oppotri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horrors<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (horrors <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;In my studied opinion, the mesh appears to be consistent.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (horrors <a href="CppOperatorEqual.htm">==</a> 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;!! !! !! !! Precisely one festering wound discovered.\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;!! !! !! !! <a href="CppOperatorModulus.htm">%</a>d abominations witnessed.\n", horrors);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Restore the status of exact arithmetic. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;b-&gt;noexact <a href="CppOperatorAssign.htm">=</a> saveexact;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;checkdelaunay()&nbsp;&nbsp; Ensure that the mesh is (constrained) Delaunay.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> checkdelaunay(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> checkdelaunay(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri oppotri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub opposubseg;<br/>
&nbsp;&nbsp;vertex triorg, tridest, triapex;<br/>
&nbsp;&nbsp;vertex oppoapex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> shouldbedelaunay;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> horrors;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> saveexact;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporarily turn on exact arithmetic <b><a href="CppIf.htm">if</a></b> it's off. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;saveexact <a href="CppOperatorAssign.htm">=</a> b-&gt;noexact;<br/>
&nbsp;&nbsp;b-&gt;noexact <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Checking Delaunay property of mesh...\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;horrors <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Run through the list of triangles, checking each one. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check all three edges of the triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0; triangleloop.orient &lt; 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleloop.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, triorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, tridest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(triangleloop, triapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(triangleloop, oppotri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(oppotri, oppoapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Only test that the edge is locally Delaunay <b><a href="CppIf.htm">if</a></b> there is an&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjoining triangle whose <a href="CppPointer.htm">pointer</a> is larger (to ensure that <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; each pair isn't tested twice).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shouldbedelaunay <a href="CppOperatorAssign.htm">=</a> (oppotri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!deadtri(oppotri.tri) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (triangleloop.tri &lt; oppotri.tri) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(triorg <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (triorg <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex2) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(triorg <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex3) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(tridest <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (tridest <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex2) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(tridest <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex3) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(triapex <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (triapex <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex2) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(triapex <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex3) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(oppoapex <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (oppoapex <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex2) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(oppoapex <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;infvertex3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> shouldbedelaunay) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If a subsegment separates the triangles, then the edge is <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; constrained, so no local Delaunay test should be done.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(triangleloop, opposubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (opposubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub){<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shouldbedelaunay <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (shouldbedelaunay) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nonregular(m, b, triorg, tridest, triapex, oppoapex) &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;weighted) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;!! !! Non-Delaunay pair of triangles:\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First non-Delaunay ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;triangleloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Second non-Delaunay ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;!! !! Non-regular pair of triangles:\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;First non-regular ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;triangleloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Second non-regular ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;oppotri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horrors<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (horrors <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;By virtue of my perceptive intelligence, I declare the mesh Delaunay.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (horrors <a href="CppOperatorEqual.htm">==</a> 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;!! !! !! !! Precisely one terrifying transgression identified.\n");<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;!! !! !! !! <a href="CppOperatorModulus.htm">%</a>d obscenities viewed with horror.\n", horrors);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Restore the status of exact arithmetic. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;b-&gt;noexact <a href="CppOperatorAssign.htm">=</a> saveexact;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;enqueuebadtriang()&nbsp;&nbsp; <a href="CppAdd.htm">Add</a> a bad triangle data structure to the end of a&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; queue.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The queue is actually a set of 4096 queues.&nbsp;&nbsp;I use multiple queues to&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;give priority to smaller angles.&nbsp;&nbsp;I originally implemented a heap, but&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the queues are faster by a larger margin than I'd suspected.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> enqueuebadtriang(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badtriang *badtri)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> enqueuebadtriang(m, b, badtri)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> badtriang *badtri;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL length, multiplier;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> exponent, expincrement;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> queu<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> posexponent;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Queueing bad triangle:\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; badtri-&gt;triangorg[0], badtri-&gt;triangorg[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; badtri-&gt;triangdest[0], badtri-&gt;triangdest[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; badtri-&gt;triangapex[0], badtri-&gt;triangapex[1]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Determine the appropriate queue to put the bad triangle into.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Recall that the key is the square of its shortest edge length. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (badtri-&gt;key <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;length <a href="CppOperatorAssign.htm">=</a> badtri-&gt;key;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;posexponent <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `badtri-&gt;key' is 2.0 to a negative exponent, so we'll record that <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; fact and use the reciprocal of `badtri-&gt;key', which is &gt; 1.0.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;length <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorDivide.htm">/</a> badtri-&gt;key;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;posexponent <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `length' is approximately 2.0 to what exponent?&nbsp;&nbsp;The following code <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; determines the answer in <a href="CppTime.htm">time</a> logarithmic in the exponent.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;exponent <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (length &gt; 2.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find an approximation by repeated squaring of two. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;expincrement <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;multiplier <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (length * multiplier * multiplier &gt; 1.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expincrement <a href="CppOperatorMultiplyAssign.htm">*=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;multiplier <a href="CppOperatorMultiplyAssign.htm">*=</a> multiplier;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Reduce the value of `length', then <a href="CppIterator.htm">iterate</a> <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;exponent <a href="CppOperatorPlusAssign.htm">+=</a> expincrement;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;length <a href="CppOperatorMultiplyAssign.htm">*=</a> multiplier;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `length' is approximately squareroot(2.0) to what exponent? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;exponent <a href="CppOperatorAssign.htm">=</a> 2.0 * exponent <a href="CppOperatorPlus.htm">+</a> (length &gt; SQUAREROOTTWO);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `exponent' is now in the range 0...2047 <b><a href="CppFor.htm">for</a></b> IEEE <b><a href="CppDouble.htm">double</a></b> precision.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Choose a queue in the range 0...4095.&nbsp;&nbsp;The shortest edges have the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; highest priority (queue 4095).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (posexponent) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;queu<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> 2047 <a href="CppOperatorMinus.htm">-</a> exponent;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;queu<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> 2048 <a href="CppOperatorPlus.htm">+</a> exponent;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Are we inserting into an empty queue? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;queuefront[queu<b><a href="CppEnum.htm">enum</a></b>ber] <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> badtriang *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Yes, we are inserting into an empty queue.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Will <b><a href="CppThis.htm">this</a></b> become the highest-priority queue? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (queu<b><a href="CppEnum.htm">enum</a></b>ber &gt; m-&gt;firstnonemptyq) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Yes, <b><a href="CppThis.htm">this</a></b> is the highest-priority queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextnonemptyq[queu<b><a href="CppEnum.htm">enum</a></b>ber] <a href="CppOperatorAssign.htm">=</a> m-&gt;firstnonemptyq;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;firstnonemptyq <a href="CppOperatorAssign.htm">=</a> queu<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> No, <b><a href="CppThis.htm">this</a></b> is not the highest-priority queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Find the queue with next higher priority. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> queu<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (m-&gt;queuefront[i] <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> badtriang *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the newly nonempty queue as following a higher-priority queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextnonemptyq[queu<b><a href="CppEnum.htm">enum</a></b>ber] <a href="CppOperatorAssign.htm">=</a> m-&gt;nextnonemptyq[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextnonemptyq[i] <a href="CppOperatorAssign.htm">=</a> queu<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Put the bad triangle at the beginning of the (empty) queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;queuefront[queu<b><a href="CppEnum.htm">enum</a></b>ber] <a href="CppOperatorAssign.htm">=</a> badtri;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppAdd.htm">Add</a> the bad triangle to the end of an already nonempty queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;queuetail[queu<b><a href="CppEnum.htm">enum</a></b>ber]-&gt;nexttriang <a href="CppOperatorAssign.htm">=</a> badtri;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Maintain a <a href="CppPointer.htm">pointer</a> to the last triangle of the queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;queuetail[queu<b><a href="CppEnum.htm">enum</a></b>ber] <a href="CppOperatorAssign.htm">=</a> badtri;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Newly enqueued bad triangle has no successor in the queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;badtri-&gt;nexttriang <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> badtriang *) <a href="CppNULL.htm">NULL</a>;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;enqueuebadtri()&nbsp;&nbsp; <a href="CppAdd.htm">Add</a> a bad triangle to the end of a queue.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Allocates a badtriang data structure <b><a href="CppFor.htm">for</a></b> the triangle, then passes it to <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;enqueuebadtriang().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> enqueuebadtri(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *enqtri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REAL minedge, vertex enqapex, vertex enqorg, vertex enqdest)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> enqueuebadtri(m, b, enqtri, minedge, enqapex, enqorg, enqdest)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *enqtri;<br/>
REAL minedge;<br/>
vertex enqapex;<br/>
vertex enqorg;<br/>
vertex enqdest;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badtriang *newbad;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate space <b><a href="CppFor.htm">for</a></b> the bad triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;newbad <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> badtriang *) poolalloc(&amp;m-&gt;badtriangles);<br/>
&nbsp;&nbsp;newbad-&gt;poortri <a href="CppOperatorAssign.htm">=</a> encode(*enqtri);<br/>
&nbsp;&nbsp;newbad-&gt;key <a href="CppOperatorAssign.htm">=</a> minedge;<br/>
&nbsp;&nbsp;newbad-&gt;triangapex <a href="CppOperatorAssign.htm">=</a> enqapex;<br/>
&nbsp;&nbsp;newbad-&gt;triangorg <a href="CppOperatorAssign.htm">=</a> enqorg;<br/>
&nbsp;&nbsp;newbad-&gt;triangdest <a href="CppOperatorAssign.htm">=</a> enqdest;<br/>
&nbsp;&nbsp;enqueuebadtriang(m, b, newbad);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;dequeuebadtriang()&nbsp;&nbsp; Remove a triangle from the front of the queue.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppStruct.htm">struct</a></b> badtriang *dequeuebadtriang(<b><a href="CppStruct.htm">struct</a></b> mesh *m)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> badtriang *dequeuebadtriang(m)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badtriang *result;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If no queues are nonempty, <b><a href="CppReturn.htm">return</a></b> <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;firstnonemptyq &lt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppStruct.htm">struct</a></b> badtriang *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the first triangle of the highest-priority queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;result <a href="CppOperatorAssign.htm">=</a> m-&gt;queuefront[m-&gt;firstnonemptyq];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remove the triangle from the queue. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;queuefront[m-&gt;firstnonemptyq] <a href="CppOperatorAssign.htm">=</a> result-&gt;nexttriang;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If <b><a href="CppThis.htm">this</a></b> queue is now empty, note the <b><a href="CppNew.htm">new</a></b> highest-priority <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; nonempty queue.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (result <a href="CppOperatorEqual.htm">==</a> m-&gt;queuetail[m-&gt;firstnonemptyq]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;firstnonemptyq <a href="CppOperatorAssign.htm">=</a> m-&gt;nextnonemptyq[m-&gt;firstnonemptyq];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;checkseg4encroach()&nbsp;&nbsp; Check a subsegment to see <b><a href="CppIf.htm">if</a></b> it is encroached; add <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it to the list <b><a href="CppIf.htm">if</a></b> it is.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A subsegment is encroached <b><a href="CppIf.htm">if</a></b> there is a vertex in its diametral lens.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;For Ruppert's <a href="CppAlgorithm.htm">algorithm</a> (-D <b><a href="CppSwitch.htm">switch</a></b>), the "diametral lens" is the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;diametral circle.&nbsp;&nbsp;For Chew's <a href="CppAlgorithm.htm">algorithm</a> (<b><a href="CppDefault.htm">default</a></b>), the diametral lens is <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;just big enough to enclose two isosceles triangles whose bases are the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegment.&nbsp;&nbsp;Each of the two isosceles triangles has two angles equal&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to `b-&gt;minangle'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Chew's <a href="CppAlgorithm.htm">algorithm</a> does not require diametral lenses at all<a href="CppOperatorDecrement.htm">--</a>but they save <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppTime.htm">time</a>.&nbsp;&nbsp;Any vertex inside a subsegment's diametral lens implies that the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle adjoining the subsegment will be too skinny, so it's only a&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;matter of <a href="CppTime.htm">time</a> before the encroaching vertex is deleted by Chew's&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppAlgorithm.htm">algorithm</a>.&nbsp;&nbsp;It's faster to simply not insert the doomed vertex in the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;first place, which is why I use diametral lenses with Chew's <a href="CppAlgorithm.htm">algorithm</a>.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns a nonzero value <b><a href="CppIf.htm">if</a></b> the subsegment is encroached.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppInt.htm">int</a></b> checkseg4encroach(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub *testsubseg)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> checkseg4encroach(m, b, testsubseg)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> osub *testsubseg;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri neighbortri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub testsym;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badsubseg *encroachedseg;<br/>
&nbsp;&nbsp;REAL dotproduct;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> encroached;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> sides;<br/>
&nbsp;&nbsp;vertex eorg, edest, eapex;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by stpivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;encroached <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;sides <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;sorg(*testsubseg, eorg);<br/>
&nbsp;&nbsp;sdest(*testsubseg, edest);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check one neighbor of the subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;stpivot(*testsubseg, neighbortri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Does the neighbor exist, or is <b><a href="CppThis.htm">this</a></b> a boundary edge? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (neighbortri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sides<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a vertex opposite <b><a href="CppThis.htm">this</a></b> subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(neighbortri, eapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the apex is in the diametral lens of the subsegment <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; (the diametral circle <b><a href="CppIf.htm">if</a></b> `conformdel' is set).&nbsp;&nbsp;A dot product&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of two sides of the triangle is used to check whether the angle <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; at the apex is greater than (180 <a href="CppOperatorMinus.htm">-</a> 2 `minangle') degrees (<b><a href="CppFor.htm">for</a></b>&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; lenses; 90 degrees <b><a href="CppFor.htm">for</a></b> diametral circles).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;dotproduct <a href="CppOperatorAssign.htm">=</a> (eorg[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) * (edest[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (eorg[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) * (edest[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dotproduct &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;conformdel <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(dotproduct * dotproduct <a href="CppOperatorGreaterEqual.htm">&gt;=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2.0 * b-&gt;goodangle <a href="CppOperatorMinus.htm">-</a> 1.0) * (2.0 * b-&gt;goodangle <a href="CppOperatorMinus.htm">-</a> 1.0) *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((eorg[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) * (eorg[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(eorg[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) * (eorg[1] <a href="CppOperatorMinus.htm">-</a> eapex[1])) *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((edest[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) * (edest[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(edest[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) * (edest[1] <a href="CppOperatorMinus.htm">-</a> eapex[1])))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroached <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check the other neighbor of the subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;ssym(*testsubseg, testsym);<br/>
&nbsp;&nbsp;stpivot(testsym, neighbortri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Does the neighbor exist, or is <b><a href="CppThis.htm">this</a></b> a boundary edge? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (neighbortri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sides<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the other vertex opposite <b><a href="CppThis.htm">this</a></b> subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(neighbortri, eapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the apex is in the diametral lens of the subsegment <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; (or the diametral circle, <b><a href="CppIf.htm">if</a></b> `conformdel' is set).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;dotproduct <a href="CppOperatorAssign.htm">=</a> (eorg[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) * (edest[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (eorg[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) * (edest[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dotproduct &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;conformdel <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(dotproduct * dotproduct <a href="CppOperatorGreaterEqual.htm">&gt;=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2.0 * b-&gt;goodangle <a href="CppOperatorMinus.htm">-</a> 1.0) * (2.0 * b-&gt;goodangle <a href="CppOperatorMinus.htm">-</a> 1.0) *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((eorg[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) * (eorg[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(eorg[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) * (eorg[1] <a href="CppOperatorMinus.htm">-</a> eapex[1])) *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((edest[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) * (edest[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(edest[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) * (edest[1] <a href="CppOperatorMinus.htm">-</a> eapex[1])))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroached <a href="CppOperatorPlusAssign.htm">+=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (encroached <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (!b-&gt;nobisect <a href="CppOperatorLogicalOr.htm">||</a> ((b-&gt;nobisect <a href="CppOperatorEqual.htm">==</a> 1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (sides <a href="CppOperatorEqual.htm">==</a> 2)))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;Queueing encroached subsegment (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eorg[0], eorg[1], edest[0], edest[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppAdd.htm">Add</a> the subsegment to the list of encroached subsegments. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Be sure to get the orientation right.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;encroachedseg <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> badsubseg *) poolalloc(&amp;m-&gt;badsubsegs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (encroached <a href="CppOperatorEqual.htm">==</a> 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroachedseg-&gt;encsubseg <a href="CppOperatorAssign.htm">=</a> sencode(*testsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroachedseg-&gt;subsegorg <a href="CppOperatorAssign.htm">=</a> eorg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroachedseg-&gt;subsegdest <a href="CppOperatorAssign.htm">=</a> edest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroachedseg-&gt;encsubseg <a href="CppOperatorAssign.htm">=</a> sencode(testsym);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroachedseg-&gt;subsegorg <a href="CppOperatorAssign.htm">=</a> edest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroachedseg-&gt;subsegdest <a href="CppOperatorAssign.htm">=</a> eorg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> encroached;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;testtriangle()&nbsp;&nbsp; Test a triangle <b><a href="CppFor.htm">for</a></b> quality and size.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Tests a triangle to see <b><a href="CppIf.htm">if</a></b> it satisfies the minimum angle condition and&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the maximum area condition.&nbsp;&nbsp;Triangles that aren't up to spec are added&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to the bad triangle queue.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> testtriangle(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *testtri)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> testtriangle(m, b, testtri)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *testtri;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri tri1, tri2;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub testsub;<br/>
&nbsp;&nbsp;vertex torg, tdest, tapex;<br/>
&nbsp;&nbsp;vertex base1, base2;<br/>
&nbsp;&nbsp;vertex org1, dest1, org2, dest2;<br/>
&nbsp;&nbsp;vertex joinvertex;<br/>
&nbsp;&nbsp;REAL dxod, dyod, dxda, dyda, dxao, dyao;<br/>
&nbsp;&nbsp;REAL dxod2, dyod2, dxda2, dyda2, dxao2, dyao2;<br/>
&nbsp;&nbsp;REAL apexlen, orglen, destlen, minedge;<br/>
&nbsp;&nbsp;REAL angle;<br/>
&nbsp;&nbsp;REAL area;<br/>
&nbsp;&nbsp;REAL dist1, dist2;<br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by oprev() and dnext(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;org(*testtri, torg);<br/>
&nbsp;&nbsp;dest(*testtri, tdest);<br/>
&nbsp;&nbsp;apex(*testtri, tapex);<br/>
&nbsp;&nbsp;dxod <a href="CppOperatorAssign.htm">=</a> torg[0] <a href="CppOperatorMinus.htm">-</a> tdest[0];<br/>
&nbsp;&nbsp;dyod <a href="CppOperatorAssign.htm">=</a> torg[1] <a href="CppOperatorMinus.htm">-</a> tdest[1];<br/>
&nbsp;&nbsp;dxda <a href="CppOperatorAssign.htm">=</a> tdest[0] <a href="CppOperatorMinus.htm">-</a> tapex[0];<br/>
&nbsp;&nbsp;dyda <a href="CppOperatorAssign.htm">=</a> tdest[1] <a href="CppOperatorMinus.htm">-</a> tapex[1];<br/>
&nbsp;&nbsp;dxao <a href="CppOperatorAssign.htm">=</a> tapex[0] <a href="CppOperatorMinus.htm">-</a> torg[0];<br/>
&nbsp;&nbsp;dyao <a href="CppOperatorAssign.htm">=</a> tapex[1] <a href="CppOperatorMinus.htm">-</a> torg[1];<br/>
&nbsp;&nbsp;dxod2 <a href="CppOperatorAssign.htm">=</a> dxod * dxod;<br/>
&nbsp;&nbsp;dyod2 <a href="CppOperatorAssign.htm">=</a> dyod * dyod;<br/>
&nbsp;&nbsp;dxda2 <a href="CppOperatorAssign.htm">=</a> dxda * dxda;<br/>
&nbsp;&nbsp;dyda2 <a href="CppOperatorAssign.htm">=</a> dyda * dyda;<br/>
&nbsp;&nbsp;dxao2 <a href="CppOperatorAssign.htm">=</a> dxao * dxao;<br/>
&nbsp;&nbsp;dyao2 <a href="CppOperatorAssign.htm">=</a> dyao * dyao;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the lengths of the triangle's three edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;apexlen <a href="CppOperatorAssign.htm">=</a> dxod2 <a href="CppOperatorPlus.htm">+</a> dyod2;<br/>
&nbsp;&nbsp;orglen <a href="CppOperatorAssign.htm">=</a> dxda2 <a href="CppOperatorPlus.htm">+</a> dyda2;<br/>
&nbsp;&nbsp;destlen <a href="CppOperatorAssign.htm">=</a> dxao2 <a href="CppOperatorPlus.htm">+</a> dyao2;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((apexlen &lt; orglen) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (apexlen &lt; destlen)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The edge opposite the apex is shortest. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;minedge <a href="CppOperatorAssign.htm">=</a> apexlen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the square of the cosine of the angle at the apex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorAssign.htm">=</a> dxda * dxao <a href="CppOperatorPlus.htm">+</a> dyda * dyao;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorAssign.htm">=</a> angle * angle <a href="CppOperatorDivide.htm">/</a> (orglen * destlen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;base1 <a href="CppOperatorAssign.htm">=</a> torg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;base2 <a href="CppOperatorAssign.htm">=</a> tdest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;otricopy(*testtri, tri1);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (orglen &lt; destlen) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The edge opposite the origin is shortest. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;minedge <a href="CppOperatorAssign.htm">=</a> orglen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the square of the cosine of the angle at the origin. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorAssign.htm">=</a> dxod * dxao <a href="CppOperatorPlus.htm">+</a> dyod * dyao;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorAssign.htm">=</a> angle * angle <a href="CppOperatorDivide.htm">/</a> (apexlen * destlen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;base1 <a href="CppOperatorAssign.htm">=</a> tdest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;base2 <a href="CppOperatorAssign.htm">=</a> tapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnext(*testtri, tri1);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The edge opposite the destination is shortest. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;minedge <a href="CppOperatorAssign.htm">=</a> destlen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the square of the cosine of the angle at the destination. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorAssign.htm">=</a> dxod * dxda <a href="CppOperatorPlus.htm">+</a> dyod * dyda;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorAssign.htm">=</a> angle * angle <a href="CppOperatorDivide.htm">/</a> (apexlen * orglen);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;base1 <a href="CppOperatorAssign.htm">=</a> tapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;base2 <a href="CppOperatorAssign.htm">=</a> torg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprev(*testtri, tri1);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;fixedarea <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;usertest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the area is larger than permitted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> 0.5 * (dxod * dyda <a href="CppOperatorMinus.htm">-</a> dyod * dxda);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;fixedarea <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (area &gt; b-&gt;maxarea)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppAdd.htm">Add</a> <b><a href="CppThis.htm">this</a></b> triangle to the list of bad triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueuebadtri(m, b, testtri, minedge, tapex, torg, tdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Nonpositive area constraints are treated as unconstrained. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((b-&gt;vararea) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (area &gt; areabound(*testtri)) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(areabound(*testtri) &gt; 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppAdd.htm">Add</a> <b><a href="CppThis.htm">this</a></b> triangle to the list of bad triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueuebadtri(m, b, testtri, minedge, tapex, torg, tdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;usertest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the user thinks <b><a href="CppThis.htm">this</a></b> triangle is too large. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triunsuitable(torg, tdest, tapex, area)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueuebadtri(m, b, testtri, minedge, tapex, torg, tdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the angle is smaller than permitted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (angle &gt; b-&gt;goodangle) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Use the rules of Miller, Pav, and Walkington to decide that certain <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangles should not be split, even <b><a href="CppIf.htm">if</a></b> they have bad angles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; A skinny triangle is not split <b><a href="CppIf.htm">if</a></b> its shortest edge subtends a&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; small input angle, and both endpoints of the edge lie on a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; concentric circular shell.&nbsp;&nbsp;For convenience, I <a href="CppMake.htm">make</a> a small&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjustment to that rule:&nbsp;&nbsp;I check <b><a href="CppIf.htm">if</a></b> the endpoints of the edge&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; both lie in segment interiors, equidistant from the apex where&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the two segments meet.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> First, check <b><a href="CppIf.htm">if</a></b> both <a href="CppPointer.htm">point</a>s lie in segment interiors.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((vertextype(base1) <a href="CppOperatorEqual.htm">==</a> SEGMENTVERTEX) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(vertextype(base2) <a href="CppOperatorEqual.htm">==</a> SEGMENTVERTEX)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> both <a href="CppPointer.htm">point</a>s lie in a common segment.&nbsp;&nbsp;If they <b><a href="CppDo.htm">do</a></b>, the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; skinny triangle is enqueued to be split as usual.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(tri1, testsub);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (testsub.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> No common segment.&nbsp;&nbsp;Find a subsegment that contains `torg'. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(tri1, tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprevself(tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(tri1, testsub);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (testsub.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the endpoints of the containing segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segorg(testsub, org1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segdest(testsub, dest1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a subsegment that contains `tdest'. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dnextself(tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(tri2, testsub);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (testsub.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the endpoints of the containing segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segorg(testsub, org2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segdest(testsub, dest2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> the two containing segments have an endpoint in common. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;joinvertex <a href="CppOperatorAssign.htm">=</a> (vertex) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((dest1[0] <a href="CppOperatorEqual.htm">==</a> org2[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (dest1[1] <a href="CppOperatorEqual.htm">==</a> org2[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;joinvertex <a href="CppOperatorAssign.htm">=</a> dest1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((org1[0] <a href="CppOperatorEqual.htm">==</a> dest2[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (org1[1] <a href="CppOperatorEqual.htm">==</a> dest2[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;joinvertex <a href="CppOperatorAssign.htm">=</a> org1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (joinvertex <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Compute the distance from the common endpoint (of the two&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; segments) to each of the endpoints of the shortest edge. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist1 <a href="CppOperatorAssign.htm">=</a> ((base1[0] <a href="CppOperatorMinus.htm">-</a> joinvertex[0]) * (base1[0] <a href="CppOperatorMinus.htm">-</a> joinvertex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (base1[1] <a href="CppOperatorMinus.htm">-</a> joinvertex[1]) * (base1[1] <a href="CppOperatorMinus.htm">-</a> joinvertex[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist2 <a href="CppOperatorAssign.htm">=</a> ((base2[0] <a href="CppOperatorMinus.htm">-</a> joinvertex[0]) * (base2[0] <a href="CppOperatorMinus.htm">-</a> joinvertex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (base2[1] <a href="CppOperatorMinus.htm">-</a> joinvertex[1]) * (base2[1] <a href="CppOperatorMinus.htm">-</a> joinvertex[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the two distances are equal, don't split the triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((dist1 &lt; 1.001 * dist2) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (dist1 &gt; 0.999 * dist2)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Return now to avoid enqueueing the bad triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppAdd.htm">Add</a> <b><a href="CppThis.htm">this</a></b> triangle to the list of bad triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;enqueuebadtri(m, b, testtri, minedge, tapex, torg, tdest);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Mesh quality testing routines end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** <a href="CppPoint.htm">Point</a> location routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppMake.htm">make</a>vertexmap()&nbsp;&nbsp; <a href="CppConstructor.htm">Construct</a> a mapping from vertices to triangles to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;improve the speed of <a href="CppPointer.htm">point</a> location <b><a href="CppFor.htm">for</a></b> segment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertion.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Traverses all the triangles, and provides each corner of each triangle&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;with a <a href="CppPointer.htm">pointer</a> to that triangle.&nbsp;&nbsp;Of course, <a href="CppPointer.htm">pointer</a>s will be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;overwritten by other <a href="CppPointer.htm">pointer</a>s because (almost) each vertex is a corner&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of several triangles, but in the end every vertex will <a href="CppPointer.htm">point</a> to some&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle that contains it.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>vertexmap(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMake.htm">make</a>vertexmap(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
&nbsp;&nbsp;vertex triorg;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppConstructor.htm">Construct</a>ing mapping from vertices to triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check all three vertices of the triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0; triangleloop.orient &lt; 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleloop.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, triorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertex2tri(triorg, encode(triangleloop));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;preciselocate()&nbsp;&nbsp; Find a triangle or edge containing a given <a href="CppPointer.htm">point</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Begins its search from `searchtri'.&nbsp;&nbsp;It is important that `searchtri'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;be a handle with the property that `search<a href="CppPointer.htm">point</a>' is strictly to the left <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of the edge denoted by `searchtri', or is collinear with that edge and&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;does not intersect that edge.&nbsp;&nbsp;(In particular, `search<a href="CppPointer.htm">point</a>' should not&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;be the origin or destination of that edge.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;These conditions are imposed because preciselocate() is normally used in <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;one of two situations:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(1)&nbsp;&nbsp;To <b><a href="CppTry.htm">try</a></b> to find the location to insert a <b><a href="CppNew.htm">new</a></b> <a href="CppPointer.htm">point</a>.&nbsp;&nbsp;Normally, we&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; know an edge that the <a href="CppPointer.htm">point</a> is strictly to the left of.&nbsp;&nbsp;In the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; incremental Delaunay <a href="CppAlgorithm.htm">algorithm</a>, that edge is a bounding box edge.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In Ruppert's Delaunay refinement <a href="CppAlgorithm.htm">algorithm</a> <b><a href="CppFor.htm">for</a></b> quality meshing,&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; that edge is the shortest edge of the triangle whose circumcenter&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is being inserted.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(2)&nbsp;&nbsp;To <b><a href="CppTry.htm">try</a></b> to find an existing <a href="CppPointer.htm">point</a>.&nbsp;&nbsp;In <b><a href="CppThis.htm">this</a></b> <b><a href="CppCase.htm">case</a></b>, <a href="CppAny.htm">any</a> edge on the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; convex hull is a good starting edge.&nbsp;&nbsp;You must screen out the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; possibility that the vertex sought is an endpoint of the starting&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edge before you call preciselocate().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;On completion, `searchtri' is a triangle that contains `search<a href="CppPointer.htm">point</a>'.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This implementation differs from that given by Guibas and Stolfi.&nbsp;&nbsp;It&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;walks from triangle to triangle, crossing an edge only <b><a href="CppIf.htm">if</a></b> `search<a href="CppPointer.htm">point</a>'&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is on the other side of the line containing that edge.&nbsp;&nbsp;After entering&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;a triangle, there are two edges by which one can leave that triangle.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If both edges are valid (`search<a href="CppPointer.htm">point</a>' is on the other side of both&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;edges), one of the two is chosen by drawing a line perpendicular to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the entry edge (whose endpoints are `forg' and `fdest') passing through&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`fapex'.&nbsp;&nbsp;Depending on which side of <b><a href="CppThis.htm">this</a></b> perpendicular `search<a href="CppPointer.htm">point</a>'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;falls on, an exit edge is chosen.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This implementation is empirically faster than the Guibas and Stolfi&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppPointer.htm">point</a> location routine (which I originally used), which tends to spiral&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;in toward its target.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns ONVERTEX <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> lies on an existing vertex.&nbsp;&nbsp;`searchtri'&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is a handle whose origin is the existing vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns ONEDGE <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> lies on a mesh edge.&nbsp;&nbsp;`searchtri' is a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;handle whose primary edge is the edge on which the <a href="CppPointer.htm">point</a> lies.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns INTRIANGLE <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> lies strictly within a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`searchtri' is a handle on the triangle that contains the <a href="CppPointer.htm">point</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns OUTSIDE <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> lies outside the mesh.&nbsp;&nbsp;`searchtri' is a&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;handle whose primary edge the <a href="CppPointer.htm">point</a> is to the right of.&nbsp;&nbsp;This might&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;occur when the circumcenter of a triangle falls just slightly outside&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the mesh due to floating-<a href="CppPointer.htm">point</a> roundoff error.&nbsp;&nbsp;It also occurs when&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;seeking a hole or region <a href="CppPointer.htm">point</a> that a foolish user has placed outside&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the mesh.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If `stopatsubsegment' is nonzero, the search will stop <b><a href="CppIf.htm">if</a></b> it tries to&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;walk through a subsegment, and will <b><a href="CppReturn.htm">return</a></b> OUTSIDE.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;WARNING:&nbsp;&nbsp;This routine is de<b><a href="CppSigned.htm">signed</a></b> <b><a href="CppFor.htm">for</a></b> convex triangulations, and will&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;not generally work after the holes and concavities have been carved.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;However, it can still be used to find the circumcenter of a triangle, as <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> as the search is begun from the triangle in <a href="CppQuestion.htm">question</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppEnum.htm">enum</a></b> locateresult preciselocate(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex search<a href="CppPointer.htm">point</a>, <b><a href="CppStruct.htm">struct</a></b> otri *searchtri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> stopatsubsegment)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppEnum.htm">enum</a></b> locateresult preciselocate(m, b, search<a href="CppPointer.htm">point</a>, searchtri, stopatsubsegment)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex search<a href="CppPointer.htm">point</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *searchtri;<br/>
<b><a href="CppInt.htm">int</a></b> stopatsubsegment;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri backtracktri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub checkedge;<br/>
&nbsp;&nbsp;vertex forg, fdest, fapex;<br/>
&nbsp;&nbsp;REAL orgorient, destorient;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> moveleft;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Searching <b><a href="CppFor.htm">for</a></b> <a href="CppPointer.htm">point</a> (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; search<a href="CppPointer.htm">point</a>[0], search<a href="CppPointer.htm">point</a>[1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Where are we? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(*searchtri, forg);<br/>
&nbsp;&nbsp;dest(*searchtri, fdest);<br/>
&nbsp;&nbsp;apex(*searchtri, fapex);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;At (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; forg[0], forg[1], fdest[0], fdest[1], fapex[0], fapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the apex is the <a href="CppPointer.htm">point</a> we seek. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((fapex[0] <a href="CppOperatorEqual.htm">==</a> search<a href="CppPointer.htm">point</a>[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (fapex[1] <a href="CppOperatorEqual.htm">==</a> search<a href="CppPointer.htm">point</a>[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ONVERTEX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Does the <a href="CppPointer.htm">point</a> lie on the other side of the line defined by the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle edge opposite the triangle's destination?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;destorient <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, forg, fapex, search<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Does the <a href="CppPointer.htm">point</a> lie on the other side of the line defined by the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle edge opposite the triangle's origin?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;orgorient <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, fapex, fdest, search<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (destorient &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orgorient &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Move left <b><a href="CppIf.htm">if</a></b> the inner product of (fapex <a href="CppOperatorMinus.htm">-</a> search<a href="CppPointer.htm">point</a>) and&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; (fdest <a href="CppOperatorMinus.htm">-</a> forg) is positive.&nbsp;&nbsp;This is equivalent to drawing <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; a line perpendicular to the line (forg, fdest) and passing <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; through `fapex', and determining which side of <b><a href="CppThis.htm">this</a></b> line&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; `search<a href="CppPointer.htm">point</a>' falls on.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveleft <a href="CppOperatorAssign.htm">=</a> (fapex[0] <a href="CppOperatorMinus.htm">-</a> search<a href="CppPointer.htm">point</a>[0]) * (fdest[0] <a href="CppOperatorMinus.htm">-</a> forg[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (fapex[1] <a href="CppOperatorMinus.htm">-</a> search<a href="CppPointer.htm">point</a>[1]) * (fdest[1] <a href="CppOperatorMinus.htm">-</a> forg[1]) &gt; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveleft <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orgorient &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveleft <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The <a href="CppPointer.htm">point</a> we seek must be on the boundary of or inside <b><a href="CppThis.htm">this</a></b> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (destorient <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ONEDGE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (orgorient <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ONEDGE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> INTRIANGLE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Move to another triangle.&nbsp;&nbsp;Leave a <a href="CppTrace.htm">trace</a> `backtracktri' in <b><a href="CppCase.htm">case</a></b> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; floating-<a href="CppPointer.htm">point</a> roundoff or some such bogey causes us to walk&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; off a boundary of the triangulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (moveleft) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(*searchtri, backtracktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fdest <a href="CppOperatorAssign.htm">=</a> fapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(*searchtri, backtracktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forg <a href="CppOperatorAssign.htm">=</a> fapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(backtracktri, *searchtri);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> stopatsubsegment) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> walking through a subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(backtracktri, checkedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkedge.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Go back to the last triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(backtracktri, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> OUTSIDE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> walking right out of the triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (searchtri-&gt;tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Go back to the last triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(backtracktri, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> OUTSIDE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(*searchtri, fapex);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;locate()&nbsp;&nbsp; Find a triangle or edge containing a given <a href="CppPointer.htm">point</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Searching begins from one of:&nbsp;&nbsp;the input `searchtri', a recently&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;en<a href="CppCounter.htm">counter</a>ed triangle `recenttri', or from a triangle chosen from a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;random sample.&nbsp;&nbsp;The choice is made by determining which triangle's&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;origin is closest to the <a href="CppPointer.htm">point</a> we are searching <b><a href="CppFor.htm">for</a></b>.&nbsp;&nbsp;Normally,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`searchtri' should be a handle on the convex hull of the triangulation.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Details on the random sampling <a href="CppMemberFunction.htm">member function</a> can be found in the Mucke, Saias,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and Zhu paper cited in the header of <b><a href="CppThis.htm">this</a></b> code.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;On completion, `searchtri' is a triangle that contains `search<a href="CppPointer.htm">point</a>'.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns ONVERTEX <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> lies on an existing vertex.&nbsp;&nbsp;`searchtri'&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is a handle whose origin is the existing vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns ONEDGE <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> lies on a mesh edge.&nbsp;&nbsp;`searchtri' is a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;handle whose primary edge is the edge on which the <a href="CppPointer.htm">point</a> lies.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns INTRIANGLE <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> lies strictly within a triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`searchtri' is a handle on the triangle that contains the <a href="CppPointer.htm">point</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns OUTSIDE <b><a href="CppIf.htm">if</a></b> the <a href="CppPointer.htm">point</a> lies outside the mesh.&nbsp;&nbsp;`searchtri' is a&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;handle whose primary edge the <a href="CppPointer.htm">point</a> is to the right of.&nbsp;&nbsp;This might&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;occur when the circumcenter of a triangle falls just slightly outside&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the mesh due to floating-<a href="CppPointer.htm">point</a> roundoff error.&nbsp;&nbsp;It also occurs when&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;seeking a hole or region <a href="CppPointer.htm">point</a> that a foolish user has placed outside&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the mesh.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;WARNING:&nbsp;&nbsp;This routine is de<b><a href="CppSigned.htm">signed</a></b> <b><a href="CppFor.htm">for</a></b> convex triangulations, and will&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;not generally work after the holes and concavities have been carved.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppEnum.htm">enum</a></b> locateresult locate(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertex search<a href="CppPointer.htm">point</a>, <b><a href="CppStruct.htm">struct</a></b> otri *searchtri)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppEnum.htm">enum</a></b> locateresult locate(m, b, search<a href="CppPointer.htm">point</a>, searchtri)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex search<a href="CppPointer.htm">point</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *searchtri;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;VOID **sampleblock;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *firsttri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri sampletri;<br/>
&nbsp;&nbsp;vertex torg, tdest;<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b> alignptr;<br/>
&nbsp;&nbsp;REAL searchdist, dist;<br/>
&nbsp;&nbsp;REAL ahead;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> samplesperblock, totalsamplesleft, samplesleft;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> population, totalpopulation;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Randomly sampling <b><a href="CppFor.htm">for</a></b> a triangle near <a href="CppPointer.htm">point</a> (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; search<a href="CppPointer.htm">point</a>[0], search<a href="CppPointer.htm">point</a>[1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Record the distance from the suggested starting triangle to the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <a href="CppPointer.htm">point</a> we seek.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(*searchtri, torg);<br/>
&nbsp;&nbsp;searchdist <a href="CppOperatorAssign.htm">=</a> (search<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorMinus.htm">-</a> torg[0]) * (search<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorMinus.htm">-</a> torg[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (search<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorMinus.htm">-</a> torg[1]) * (search<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorMinus.htm">-</a> torg[1]);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Boundary triangle has origin (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; torg[0], torg[1]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If a recently en<a href="CppCounter.htm">counter</a>ed triangle has been recorded and has not been <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; deallocated, test it as a good starting <a href="CppPointer.htm">point</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;recenttri.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!deadtri(m-&gt;recenttri.tri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(m-&gt;recenttri, torg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((torg[0] <a href="CppOperatorEqual.htm">==</a> search<a href="CppPointer.htm">point</a>[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (torg[1] <a href="CppOperatorEqual.htm">==</a> search<a href="CppPointer.htm">point</a>[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(m-&gt;recenttri, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ONVERTEX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist <a href="CppOperatorAssign.htm">=</a> (search<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorMinus.htm">-</a> torg[0]) * (search<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorMinus.htm">-</a> torg[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (search<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorMinus.htm">-</a> torg[1]) * (search<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorMinus.htm">-</a> torg[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist &lt; searchdist) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(m-&gt;recenttri, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchdist <a href="CppOperatorAssign.htm">=</a> dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Choosing recent triangle with origin (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; torg[0], torg[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The number of random samples taken is proportional to the cube root of <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the number of triangles in the mesh.&nbsp;&nbsp;The next bit of code assumes&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; that the number of triangles increases monotonically (or at least&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; doesn't decrease enough to matter).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (SAMPLEFACTOR * m-&gt;samples * m-&gt;samples * m-&gt;samples &lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;triangles.items) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;samples<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We'll draw ceiling(samples * TRIPERBLOCK <a href="CppOperatorDivide.htm">/</a> maxitems) random samples&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; from each block of triangles (except the first)<a href="CppOperatorDecrement.htm">--</a>until we meet the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; sample quota.&nbsp;&nbsp;The ceiling means that blocks at the end might be&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; neglected, but I don't care.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;samplesperblock <a href="CppOperatorAssign.htm">=</a> (m-&gt;samples * TRIPERBLOCK <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorDivide.htm">/</a> m-&gt;triangles.maxitems <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We'll draw ceiling(samples * itemsfirstblock <a href="CppOperatorDivide.htm">/</a> maxitems) random samples <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; from the first block of triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;samplesleft <a href="CppOperatorAssign.htm">=</a> (m-&gt;samples * m-&gt;triangles.itemsfirstblock <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;triangles.maxitems <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;totalsamplesleft <a href="CppOperatorAssign.htm">=</a> m-&gt;samples;<br/>
&nbsp;&nbsp;population <a href="CppOperatorAssign.htm">=</a> m-&gt;triangles.itemsfirstblock;<br/>
&nbsp;&nbsp;totalpopulation <a href="CppOperatorAssign.htm">=</a> m-&gt;triangles.maxitems;<br/>
&nbsp;&nbsp;sampleblock <a href="CppOperatorAssign.htm">=</a> m-&gt;triangles.firstblock;<br/>
&nbsp;&nbsp;sampletri.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (totalsamplesleft &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If we're in the last block, `population' needs to be corrected. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (population &gt; totalpopulation) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;population <a href="CppOperatorAssign.htm">=</a> totalpopulation;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a <a href="CppPointer.htm">pointer</a> to the first triangle in the block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;alignptr <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) (sampleblock <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;firsttri <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppChar.htm">char</a></b> *) (alignptr <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;triangles.alignbytes <a href="CppOperatorMinus.htm">-</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (alignptr <a href="CppOperatorModulus.htm">%</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppLong.htm">long</a></b>) m-&gt;triangles.alignbytes));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Choose `samplesleft' randomly sampled triangles in <b><a href="CppThis.htm">this</a></b> block. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sampletri.tri <a href="CppOperatorAssign.htm">=</a> (triangle *) (firsttri <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(randomnation((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>) population) *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;triangles.itembytes));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!deadtri(sampletri.tri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(sampletri, torg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist <a href="CppOperatorAssign.htm">=</a> (search<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorMinus.htm">-</a> torg[0]) * (search<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorMinus.htm">-</a> torg[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (search<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorMinus.htm">-</a> torg[1]) * (search<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorMinus.htm">-</a> torg[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dist &lt; searchdist) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(sampletri, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchdist <a href="CppOperatorAssign.htm">=</a> dist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Choosing triangle with origin (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; torg[0], torg[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;samplesleft<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalsamplesleft<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((samplesleft &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (totalsamplesleft &gt; 0));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (totalsamplesleft &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sampleblock <a href="CppOperatorAssign.htm">=</a> (VOID **) *sampleblock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;samplesleft <a href="CppOperatorAssign.htm">=</a> samplesperblock;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalpopulation <a href="CppOperatorMinusAssign.htm">-=</a> population;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;population <a href="CppOperatorAssign.htm">=</a> TRIPERBLOCK;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Where are we? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(*searchtri, torg);<br/>
&nbsp;&nbsp;dest(*searchtri, tdest);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check the starting triangle's vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((torg[0] <a href="CppOperatorEqual.htm">==</a> search<a href="CppPointer.htm">point</a>[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (torg[1] <a href="CppOperatorEqual.htm">==</a> search<a href="CppPointer.htm">point</a>[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ONVERTEX;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((tdest[0] <a href="CppOperatorEqual.htm">==</a> search<a href="CppPointer.htm">point</a>[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (tdest[1] <a href="CppOperatorEqual.htm">==</a> search<a href="CppPointer.htm">point</a>[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ONVERTEX;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Orient `searchtri' to fit the preconditions of calling preciselocate(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;ahead <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, torg, tdest, search<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ahead &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Turn around so that `search<a href="CppPointer.htm">point</a>' is to the left of the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edge specified by `searchtri'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;symself(*searchtri);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (ahead <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> `search<a href="CppPointer.htm">point</a>' is between `torg' and `tdest'. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((torg[0] &lt; search<a href="CppPointer.htm">point</a>[0]) <a href="CppOperatorEqual.htm">==</a> (search<a href="CppPointer.htm">point</a>[0] &lt; tdest[0])) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((torg[1] &lt; search<a href="CppPointer.htm">point</a>[1]) <a href="CppOperatorEqual.htm">==</a> (search<a href="CppPointer.htm">point</a>[1] &lt; tdest[1]))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ONEDGE;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> preciselocate(m, b, search<a href="CppPointer.htm">point</a>, searchtri, 0);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** <a href="CppPoint.htm">Point</a> location routines end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Mesh transformation routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;insertsubseg()&nbsp;&nbsp; Create a <b><a href="CppNew.htm">new</a></b> subsegment and insert it between two&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <b><a href="CppNew.htm">new</a></b> subsegment is inserted at the edge described by the handle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`tri'.&nbsp;&nbsp;Its vertices are properly <a href="CppInitialize.htm">initialize</a>d.&nbsp;&nbsp;The marker `subsegmark'&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is applied to the subsegment and, <b><a href="CppIf.htm">if</a></b> appropriate, its vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> insertsubseg(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *tri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> subsegmark)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> insertsubseg(m, b, tri, subsegmark)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *tri;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Edge at which to insert the <b><a href="CppNew.htm">new</a></b> subsegment. <a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> subsegmark;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Marker <b><a href="CppFor.htm">for</a></b> the <b><a href="CppNew.htm">new</a></b> subsegment. <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri oppotri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub newsubseg;<br/>
&nbsp;&nbsp;vertex triorg, tridest;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;org(*tri, triorg);<br/>
&nbsp;&nbsp;dest(*tri, tridest);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark vertices <b><a href="CppIf.htm">if</a></b> possible. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(triorg) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(triorg, subsegmark);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(tridest) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(tridest, subsegmark);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> there's already a subsegment here. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;tspivot(*tri, newsubseg);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make <b><a href="CppNew.htm">new</a></b> subsegment and <a href="CppInitialize.htm">initialize</a> its vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>subseg(m, &amp;newsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setsorg(newsubseg, tridest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setsdest(newsubseg, triorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setsegorg(newsubseg, tridest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setsegdest(newsubseg, triorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Bond <b><a href="CppNew.htm">new</a></b> subsegment to the two triangles it is sandwiched between. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Note that the facing triangle `oppotri' might be equal to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; `dummytri' (outer space), but the <b><a href="CppNew.htm">new</a></b> subsegment is bonded to it <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; all the same.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;tsbond(*tri, newsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(*tri, oppotri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ssymself(newsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tsbond(oppotri, newsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setmark(newsubseg, subsegmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Inserting <b><a href="CppNew.htm">new</a></b> ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printsubseg(m, b, &amp;newsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mark(newsubseg) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setmark(newsubseg, subsegmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Terminology&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A "local transformation" replaces a small set of triangles with another&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;set of triangles.&nbsp;&nbsp;This may or may not involve inserting or deleting a&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The term "casing" is used to describe the set of triangles that are&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;attached to the triangles being transformed, but are not transformed&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;themselves.&nbsp;&nbsp;Think of the casing as a fixed hollow structure inside&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;which all the action happens.&nbsp;&nbsp;A "casing" is only defined relative to&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;a single transformation; each occurrence of a transformation will&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;involve a different casing.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;flip()&nbsp;&nbsp; Transform two triangles to two different triangles by flipping&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; an edge <a href="CppCounter.htm">counter</a>clockwise within a quadrilateral.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Imagine the original triangles, abc and bad, oriented so that the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;shared edge ab lies in a horizontal plane, with the vertex b on the left <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and the vertex a on the right.&nbsp;&nbsp;The vertex c lies below the edge, and&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the vertex d lies above the edge.&nbsp;&nbsp;The `flipedge' handle holds the edge&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;ab of triangle abc, and is directed left, from vertex a to vertex b.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The triangles abc and bad are deleted and replaced by the triangles cdb&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and dca.&nbsp;&nbsp;The triangles that represent abc and bad are NOT deallocated;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;they are reused <b><a href="CppFor.htm">for</a></b> dca and cdb, respectively.&nbsp;&nbsp;Hence, <a href="CppAny.htm">any</a> handles that&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;may have held the original triangles are still valid, although not&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;directed as they were before.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Upon completion of <b><a href="CppThis.htm">this</a></b> routine, the `flipedge' handle holds the edge&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;dc of triangle dca, and is directed down, from vertex d to vertex c.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(Hence, the two triangles have rotated <a href="CppCounter.htm">counter</a>clockwise.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;WARNING:&nbsp;&nbsp;This transformation is geometrically valid only <b><a href="CppIf.htm">if</a></b> the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;quadrilateral adbc is convex.&nbsp;&nbsp;Furthermore, <b><a href="CppThis.htm">this</a></b> transformation is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;valid only <b><a href="CppIf.htm">if</a></b> there is not a subsegment between the triangles abc and&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;bad.&nbsp;&nbsp;This routine does not check either of these preconditions, and&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;it is the responsibility of the calling routine to ensure that they are&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;met.&nbsp;&nbsp;If they are not, the streets shall be filled with wailing and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;gnashing of teeth.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> flip(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *flipedge)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> flip(m, b, flipedge)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *flipedge;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Handle <b><a href="CppFor.htm">for</a></b> the triangle abc. <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri botleft, botright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri topleft, topright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri top;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri botlcasing, botrcasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri toplcasing, toprcasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub botlsubseg, botrsubseg;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub toplsubseg, toprsubseg;<br/>
&nbsp;&nbsp;vertex leftvertex, rightvertex, botvertex;<br/>
&nbsp;&nbsp;vertex farvertex;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Identify the vertices of the quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(*flipedge, rightvertex);<br/>
&nbsp;&nbsp;dest(*flipedge, leftvertex);<br/>
&nbsp;&nbsp;apex(*flipedge, botvertex);<br/>
&nbsp;&nbsp;sym(*flipedge, top);<br/>
<a href="CppIfdef.htm">#ifdef</a> SELF_CHECK<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (top.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in flip():&nbsp;&nbsp;Attempt to flip on boundary.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*flipedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(*flipedge, toplsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toplsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in flip():&nbsp;&nbsp;Attempt to flip a segment.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*flipedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> SELF_CHECK <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;apex(top, farvertex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Identify the casing of the quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;lprev(top, topleft);<br/>
&nbsp;&nbsp;sym(topleft, toplcasing);<br/>
&nbsp;&nbsp;lnext(top, topright);<br/>
&nbsp;&nbsp;sym(topright, toprcasing);<br/>
&nbsp;&nbsp;lnext(*flipedge, botleft);<br/>
&nbsp;&nbsp;sym(botleft, botlcasing);<br/>
&nbsp;&nbsp;lprev(*flipedge, botright);<br/>
&nbsp;&nbsp;sym(botright, botrcasing);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppRotate.htm">Rotate</a> the quadrilateral one-quarter turn <a href="CppCounter.htm">counter</a>clockwise. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;bond(topleft, botlcasing);<br/>
&nbsp;&nbsp;bond(botleft, botrcasing);<br/>
&nbsp;&nbsp;bond(botright, toprcasing);<br/>
&nbsp;&nbsp;bond(topright, toplcasing);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> subsegments and rebond them to the quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(topleft, toplsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botleft, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(topright, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toplsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(topright, toplsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botlsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(topleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(topleft, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botrsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(botleft, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toprsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(botright, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> New vertex assignments <b><a href="CppFor.htm">for</a></b> the rotated quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;setorg(*flipedge, farvertex);<br/>
&nbsp;&nbsp;setdest(*flipedge, botvertex);<br/>
&nbsp;&nbsp;setapex(*flipedge, rightvertex);<br/>
&nbsp;&nbsp;setorg(top, botvertex);<br/>
&nbsp;&nbsp;setdest(top, farvertex);<br/>
&nbsp;&nbsp;setapex(top, leftvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Edge flip results in left ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;and right ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, flipedge);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;unflip()&nbsp;&nbsp; Transform two triangles to two different triangles by&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flipping an edge clockwise within a quadrilateral.&nbsp;&nbsp;Reverses&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the flip() operation so that the data structures representing <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the triangles are back where they were before the flip().&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Imagine the original triangles, abc and bad, oriented so that the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;shared edge ab lies in a horizontal plane, with the vertex b on the left <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and the vertex a on the right.&nbsp;&nbsp;The vertex c lies below the edge, and&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the vertex d lies above the edge.&nbsp;&nbsp;The `flipedge' handle holds the edge&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;ab of triangle abc, and is directed left, from vertex a to vertex b.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The triangles abc and bad are deleted and replaced by the triangles cdb&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and dca.&nbsp;&nbsp;The triangles that represent abc and bad are NOT deallocated;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;they are reused <b><a href="CppFor.htm">for</a></b> cdb and dca, respectively.&nbsp;&nbsp;Hence, <a href="CppAny.htm">any</a> handles that&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;may have held the original triangles are still valid, although not&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;directed as they were before.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Upon completion of <b><a href="CppThis.htm">this</a></b> routine, the `flipedge' handle holds the edge&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;cd of triangle cdb, and is directed up, from vertex c to vertex d.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(Hence, the two triangles have rotated clockwise.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;WARNING:&nbsp;&nbsp;This transformation is geometrically valid only <b><a href="CppIf.htm">if</a></b> the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;quadrilateral adbc is convex.&nbsp;&nbsp;Furthermore, <b><a href="CppThis.htm">this</a></b> transformation is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;valid only <b><a href="CppIf.htm">if</a></b> there is not a subsegment between the triangles abc and&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;bad.&nbsp;&nbsp;This routine does not check either of these preconditions, and&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;it is the responsibility of the calling routine to ensure that they are&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;met.&nbsp;&nbsp;If they are not, the streets shall be filled with wailing and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;gnashing of teeth.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> unflip(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *flipedge)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> unflip(m, b, flipedge)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *flipedge;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Handle <b><a href="CppFor.htm">for</a></b> the triangle abc. <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri botleft, botright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri topleft, topright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri top;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri botlcasing, botrcasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri toplcasing, toprcasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub botlsubseg, botrsubseg;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub toplsubseg, toprsubseg;<br/>
&nbsp;&nbsp;vertex leftvertex, rightvertex, botvertex;<br/>
&nbsp;&nbsp;vertex farvertex;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Identify the vertices of the quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(*flipedge, rightvertex);<br/>
&nbsp;&nbsp;dest(*flipedge, leftvertex);<br/>
&nbsp;&nbsp;apex(*flipedge, botvertex);<br/>
&nbsp;&nbsp;sym(*flipedge, top);<br/>
<a href="CppIfdef.htm">#ifdef</a> SELF_CHECK<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (top.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in unflip():&nbsp;&nbsp;Attempt to flip on boundary.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*flipedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(*flipedge, toplsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toplsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in unflip():&nbsp;&nbsp;Attempt to flip a subsegment.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*flipedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> SELF_CHECK <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;apex(top, farvertex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Identify the casing of the quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;lprev(top, topleft);<br/>
&nbsp;&nbsp;sym(topleft, toplcasing);<br/>
&nbsp;&nbsp;lnext(top, topright);<br/>
&nbsp;&nbsp;sym(topright, toprcasing);<br/>
&nbsp;&nbsp;lnext(*flipedge, botleft);<br/>
&nbsp;&nbsp;sym(botleft, botlcasing);<br/>
&nbsp;&nbsp;lprev(*flipedge, botright);<br/>
&nbsp;&nbsp;sym(botright, botrcasing);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppRotate.htm">Rotate</a> the quadrilateral one-quarter turn clockwise. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;bond(topleft, toprcasing);<br/>
&nbsp;&nbsp;bond(botleft, toplcasing);<br/>
&nbsp;&nbsp;bond(botright, botlcasing);<br/>
&nbsp;&nbsp;bond(topright, botrcasing);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> subsegments and rebond them to the quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(topleft, toplsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botleft, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(topright, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toplsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(botleft, toplsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botlsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(botright, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botrsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(topright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toprsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(topleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(topleft, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> New vertex assignments <b><a href="CppFor.htm">for</a></b> the rotated quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;setorg(*flipedge, botvertex);<br/>
&nbsp;&nbsp;setdest(*flipedge, farvertex);<br/>
&nbsp;&nbsp;setapex(*flipedge, leftvertex);<br/>
&nbsp;&nbsp;setorg(top, farvertex);<br/>
&nbsp;&nbsp;setdest(top, botvertex);<br/>
&nbsp;&nbsp;setapex(top, rightvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Edge unflip results in left ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, flipedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;and right ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;top);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;insertvertex()&nbsp;&nbsp; Insert a vertex into a Delaunay triangulation,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; performing flips as necessary to maintain the Delaunay&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; property.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <a href="CppPointer.htm">point</a> `insertvertex' is located.&nbsp;&nbsp;If `searchtri.tri' is not <a href="CppNULL.htm">NULL</a>,&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the search <b><a href="CppFor.htm">for</a></b> the containing triangle begins from `searchtri'.&nbsp;&nbsp;If&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`searchtri.tri' is <a href="CppNULL.htm">NULL</a>, a full <a href="CppPointer.htm">point</a> location procedure is called.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If `insertvertex' is found inside a triangle, the triangle is split into <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;three; <b><a href="CppIf.htm">if</a></b> `insertvertex' lies on an edge, the edge is split in two,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;thereby splitting the two adjacent triangles into four.&nbsp;&nbsp;Edge flips are&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;used to restore the Delaunay property.&nbsp;&nbsp;If `insertvertex' lies on an&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;existing vertex, no action is taken, and the value DUPLICATEVERTEX is&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>ed.&nbsp;&nbsp;On <b><a href="CppReturn.htm">return</a></b>, `searchtri' is set to a handle whose origin is the <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;existing vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Normally, the parameter `splitseg' is set to <a href="CppNULL.htm">NULL</a>, implying that no&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegment should be split.&nbsp;&nbsp;In <b><a href="CppThis.htm">this</a></b> <b><a href="CppCase.htm">case</a></b>, <b><a href="CppIf.htm">if</a></b> `insertvertex' is found to <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;lie on a segment, no action is taken, and the value VIOLATINGVERTEX is&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>ed.&nbsp;&nbsp;On <b><a href="CppReturn.htm">return</a></b>, `searchtri' is set to a handle whose primary edge&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is the violated subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If the calling routine wishes to split a subsegment by inserting a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex in it, the parameter `splitseg' should be that subsegment.&nbsp;&nbsp;In&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b> <b><a href="CppCase.htm">case</a></b>, `searchtri' MUST be the triangle handle reached by pivoting&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;from that subsegment; no <a href="CppPointer.htm">point</a> location is done.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`segmentflaws' and `triflaws' are flags that indicate whether or not&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;there should be checks <b><a href="CppFor.htm">for</a></b> the creation of encroached subsegments or bad <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;quality triangles.&nbsp;&nbsp;If a newly inserted vertex encroaches upon&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegments, these subsegments are added to the list of subsegments to&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;be split <b><a href="CppIf.htm">if</a></b> `segmentflaws' is set.&nbsp;&nbsp;If bad triangles are created, these&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;are added to the queue <b><a href="CppIf.htm">if</a></b> `triflaws' is set.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If a duplicate vertex or violated segment does not prevent the vertex&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;from being inserted, the <b><a href="CppReturn.htm">return</a></b> value will be ENCROACHINGVERTEX <b><a href="CppIf.htm">if</a></b> the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex encroaches upon a subsegment (and checking is enabled), or&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;SUCCESSFULVERTEX otherwise.&nbsp;&nbsp;In either <b><a href="CppCase.htm">case</a></b>, `searchtri' is set to a&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;handle whose origin is the newly inserted vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;insertvertex() does not use flip() <b><a href="CppFor.htm">for</a></b> reasons of speed; some&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;information can be reused from edge flip to edge flip, like the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;locations of subsegments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppEnum.htm">enum</a></b> insertvertexresult insertvertex(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertex newvertex, <b><a href="CppStruct.htm">struct</a></b> otri *searchtri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> osub *splitseg,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> segmentflaws, <b><a href="CppInt.htm">int</a></b> triflaws)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppEnum.htm">enum</a></b> insertvertexresult insertvertex(m, b, newvertex, searchtri, splitseg,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; segmentflaws, triflaws)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex newvertex;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *searchtri;<br/>
<b><a href="CppStruct.htm">struct</a></b> osub *splitseg;<br/>
<b><a href="CppInt.htm">int</a></b> segmentflaws;<br/>
<b><a href="CppInt.htm">int</a></b> triflaws;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri horiz;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri top;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri botleft, botright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri topleft, topright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri newbotleft, newbotright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri newtopright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri botlcasing, botrcasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri toplcasing, toprcasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri testtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub botlsubseg, botrsubseg;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub toplsubseg, toprsubseg;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub brokensubseg;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub checksubseg;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub rightsubseg;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub newsubseg;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badsubseg *encroached;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> flipstacker *newflip;<br/>
&nbsp;&nbsp;vertex first;<br/>
&nbsp;&nbsp;vertex leftvertex, rightvertex, botvertex, topvertex, farvertex;<br/>
&nbsp;&nbsp;vertex segmentorg, segmentdest;<br/>
&nbsp;&nbsp;REAL attrib;<br/>
&nbsp;&nbsp;REAL area;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> insertvertexresult success;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> locateresult intersect;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> doflip;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mirrorflag;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> enq;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by spivot() and tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Inserting (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n", newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (splitseg <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> osub *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the location of the vertex to be inserted.&nbsp;&nbsp;Check <b><a href="CppIf.htm">if</a></b> a good <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; starting triangle has already been provided by the caller.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (searchtri-&gt;tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a boundary triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horiz.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horiz.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search <b><a href="CppFor.htm">for</a></b> a triangle containing `newvertex'. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersect <a href="CppOperatorAssign.htm">=</a> locate(m, b, newvertex, &amp;horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Start searching from the triangle provided by the caller. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(*searchtri, horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersect <a href="CppOperatorAssign.htm">=</a> preciselocate(m, b, newvertex, &amp;horiz, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The calling routine provides the subsegment in which <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the vertex is inserted.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;otricopy(*searchtri, horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;intersect <a href="CppOperatorAssign.htm">=</a> ONEDGE;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (intersect <a href="CppOperatorEqual.htm">==</a> ONVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There's already a vertex there.&nbsp;&nbsp;Return in `searchtri' a triangle <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; whose origin is the existing vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;otricopy(horiz, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;otricopy(horiz, m-&gt;recenttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> DUPLICATEVERTEX;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((intersect <a href="CppOperatorEqual.htm">==</a> ONEDGE) <a href="CppOperatorLogicalOr.htm">||</a> (intersect <a href="CppOperatorEqual.htm">==</a> OUTSIDE)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The vertex falls on an edge or boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (splitseg <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> osub *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the vertex falls on a subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(horiz, brokensubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (brokensubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The vertex falls on a subsegment, and hence will not be inserted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (segmentflaws) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enq <a href="CppOperatorAssign.htm">=</a> b-&gt;nobisect <a href="CppOperatorNotEqual.htm">!=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (enq <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (b-&gt;nobisect <a href="CppOperatorEqual.htm">==</a> 1)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> This subsegment may be split only <b><a href="CppIf.htm">if</a></b> it is an <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; internal boundary.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(horiz, testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enq <a href="CppOperatorAssign.htm">=</a> testtri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (enq) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppAdd.htm">Add</a> the subsegment to the list of encroached subsegments. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroached <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> badsubseg *) poolalloc(&amp;m-&gt;badsubsegs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encroached-&gt;encsubseg <a href="CppOperatorAssign.htm">=</a> sencode(brokensubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sorg(brokensubseg, encroached-&gt;subsegorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sdest(brokensubseg, encroached-&gt;subsegdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;Queueing encroached subsegment (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encroached-&gt;subsegorg[0], encroached-&gt;subsegorg[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encroached-&gt;subsegdest[0], encroached-&gt;subsegdest[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Return a handle whose primary edge contains the vertex, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; which has not been inserted.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(horiz, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(horiz, m-&gt;recenttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> VIOLATINGVERTEX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the vertex on an edge, dividing one triangle into two (<b><a href="CppIf.htm">if</a></b> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the edge lies on a boundary) or two triangles into four.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprev(horiz, botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(botright, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(horiz, topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is there a second triangle?&nbsp;&nbsp;(Or does <b><a href="CppThis.htm">this</a></b> edge lie on a boundary?) <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;mirrorflag <a href="CppOperatorAssign.htm">=</a> topright.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mirrorflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(topright, toprcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;newtopright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Splitting a boundary edge increases the number of boundary edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;hullsize<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;newbotright);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the vertices of changed and <b><a href="CppNew.htm">new</a></b> triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(horiz, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(horiz, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(horiz, botvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setorg(newbotright, botvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setdest(newbotright, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setapex(newbotright, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setorg(horiz, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;eextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the element attributes of a <b><a href="CppNew.htm">new</a></b> triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(newbotright, i, elemattribute(botright, i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the area constraint of a <b><a href="CppNew.htm">new</a></b> triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setareabound(newbotright, areabound(botright));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mirrorflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(topright, topvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(newtopright, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(newtopright, topvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(newtopright, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(topright, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;eextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the element attributes of another <b><a href="CppNew.htm">new</a></b> triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(newtopright, i, elemattribute(topright, i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the area constraint of another <b><a href="CppNew.htm">new</a></b> triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setareabound(newtopright, areabound(topright));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There may be subsegments that need to be bonded <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to the <b><a href="CppNew.htm">new</a></b> triangle(s).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botrsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(newbotright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mirrorflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(topright, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toprsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(newtopright, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Bond the <b><a href="CppNew.htm">new</a></b> triangle(s) to the surrounding triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(newbotright, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(newbotright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(newbotright, botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(newbotright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mirrorflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(newtopright, toprcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(newtopright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(newtopright, topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(newtopright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(newtopright, newbotright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (splitseg <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppStruct.htm">struct</a></b> osub *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Split the subsegment into two. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setsdest(*splitseg, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segorg(*splitseg, segmentorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segdest(*splitseg, segmentdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssymself(*splitseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spivot(*splitseg, rightsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertsubseg(m, b, &amp;newbotright, mark(*splitseg));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(newbotright, newsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setsegorg(newsubseg, segmentorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setsegdest(newsubseg, segmentdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sbond(*splitseg, newsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssymself(newsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sbond(newsubseg, rightsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssymself(*splitseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Transfer the subsegment's boundary marker to the vertex <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> required.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(newvertex) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(newvertex, mark(*splitseg));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checkquality) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poolrestart(&amp;m-&gt;flipstackers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) poolalloc(&amp;m-&gt;flipstackers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip-&gt;flippedtri <a href="CppOperatorAssign.htm">=</a> encode(horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip-&gt;prevflip <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) &amp;insertvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> SELF_CHECK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, rightvertex, leftvertex, botvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;Clockwise triangle prior to edge vertex insertion (bottom).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mirrorflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, leftvertex, rightvertex, topvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle prior to edge vertex insertion (top).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, rightvertex, topvertex, newvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;Clockwise triangle after edge vertex insertion (top right).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, topvertex, leftvertex, newvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;Clockwise triangle after edge vertex insertion (top left).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, leftvertex, botvertex, newvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;Clockwise triangle after edge vertex insertion (bottom left).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, botvertex, rightvertex, newvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;Clockwise triangle after edge vertex insertion (bottom right).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> SELF_CHECK <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Updating bottom left ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mirrorflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Updating top left ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating top right ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;newtopright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating bottom right ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;newbotright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Position `horiz' on the first edge to check <b><a href="CppFor.htm">for</a></b> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the Delaunay property.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(horiz);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the vertex in a triangle, splitting it into three. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnext(horiz, botleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprev(horiz, botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(botleft, botlcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(botright, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;newbotleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;newbotright);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the vertices of changed and <b><a href="CppNew.htm">new</a></b> triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(horiz, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(horiz, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(horiz, botvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setorg(newbotleft, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setdest(newbotleft, botvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setapex(newbotleft, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setorg(newbotright, botvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setdest(newbotright, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setapex(newbotright, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setapex(horiz, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;eextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the element attributes of the <b><a href="CppNew.htm">new</a></b> triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attrib <a href="CppOperatorAssign.htm">=</a> elemattribute(horiz, i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(newbotleft, i, attrib);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(newbotright, i, attrib);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the area constraint of the <b><a href="CppNew.htm">new</a></b> triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> areabound(horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setareabound(newbotleft, area);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setareabound(newbotright, area);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There may be subsegments that need to be bonded <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to the <b><a href="CppNew.htm">new</a></b> triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botleft, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botlsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(newbotleft, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botrsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(newbotright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Bond the <b><a href="CppNew.htm">new</a></b> triangles to the surrounding triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(newbotleft, botlcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(newbotright, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(newbotleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(newbotright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(newbotleft, newbotright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(newbotleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(botleft, newbotleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(newbotright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(botright, newbotright);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checkquality) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poolrestart(&amp;m-&gt;flipstackers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) poolalloc(&amp;m-&gt;flipstackers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip-&gt;flippedtri <a href="CppOperatorAssign.htm">=</a> encode(horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip-&gt;prevflip <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> SELF_CHECK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, rightvertex, leftvertex, botvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle prior to vertex insertion.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, rightvertex, leftvertex, newvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle after vertex insertion (top).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, leftvertex, botvertex, newvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle after vertex insertion (left).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, botvertex, rightvertex, newvertex) &lt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle after vertex insertion (right).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> SELF_CHECK <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Updating top ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating left ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;newbotleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating right ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;newbotright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The insertion is successful by <b><a href="CppDefault.htm">default</a></b>, unless an encroached <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment is found.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;success <a href="CppOperatorAssign.htm">=</a> SUCCESSFULVERTEX;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Circle around the newly inserted vertex, checking each edge opposite <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; it <b><a href="CppFor.htm">for</a></b> the Delaunay property.&nbsp;&nbsp;Non-Delaunay edges are flipped.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; `horiz' is always the edge being checked.&nbsp;&nbsp;`first' marks where to&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; stop circling.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(horiz, first);<br/>
&nbsp;&nbsp;rightvertex <a href="CppOperatorAssign.htm">=</a> first;<br/>
&nbsp;&nbsp;dest(horiz, leftvertex);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Circle until finished. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> By <b><a href="CppDefault.htm">default</a></b>, the edge will be flipped. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;doflip <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> a subsegment, which cannot be flipped. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(horiz, checksubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checksubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The edge is a subsegment and cannot be flipped. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doflip <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (segmentflaws) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Does the <b><a href="CppNew.htm">new</a></b> vertex encroach upon <b><a href="CppThis.htm">this</a></b> subsegment? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkseg4encroach(m, b, &amp;checksubseg)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success <a href="CppOperatorAssign.htm">=</a> ENCROACHINGVERTEX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (doflip) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> the edge is a boundary edge. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(horiz, top);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (top.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The edge is a boundary edge and cannot be flipped. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doflip <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the vertex on the other side of the edge. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(top, farvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In the incremental Delaunay triangulation <a href="CppAlgorithm.htm">algorithm</a>, <a href="CppAny.htm">any</a> of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; `leftvertex', `rightvertex', and `farvertex' could be vertices <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of the triangular bounding box.&nbsp;&nbsp;These vertices must be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; treated as <b><a href="CppIf.htm">if</a></b> they are infinitely distant, even though their&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; "coordinates" are not.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((leftvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex1) <a href="CppOperatorLogicalOr.htm">||</a> (leftvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex2) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(leftvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex3)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `leftvertex' is infinitely distant.&nbsp;&nbsp;Check the convexity of&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the boundary of the triangulation.&nbsp;&nbsp;'farvertex' might be&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; infinite as well, but trust me, <b><a href="CppThis.htm">this</a></b> same condition should <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; be applied.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doflip <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, newvertex, rightvertex, farvertex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((rightvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex1) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (rightvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex2) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (rightvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex3)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `rightvertex' is infinitely distant.&nbsp;&nbsp;Check the convexity of <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the boundary of the triangulation.&nbsp;&nbsp;'farvertex' might be&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; infinite as well, but trust me, <b><a href="CppThis.htm">this</a></b> same condition should <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; be applied.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doflip <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, farvertex, leftvertex, newvertex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((farvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex1) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (farvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex2) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (farvertex <a href="CppOperatorEqual.htm">==</a> m-&gt;infvertex3)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `farvertex' is infinitely distant and cannot be inside <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the circumcircle of the triangle `horiz'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doflip <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Test whether the edge is locally Delaunay. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doflip <a href="CppOperatorAssign.htm">=</a> incircle(m, b, leftvertex, newvertex, rightvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farvertex) &gt; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (doflip) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We made it!&nbsp;&nbsp;Flip the edge `horiz' by rotating its containing <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; quadrilateral (the two triangles adjacent to `horiz').&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Identify the casing of the quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(top, topleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(topleft, toplcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(top, topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(topright, toprcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(horiz, botleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(botleft, botlcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(horiz, botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(botright, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppRotate.htm">Rotate</a> the quadrilateral one-quarter turn <a href="CppCounter.htm">counter</a>clockwise. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(topleft, botlcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(botleft, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(botright, toprcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(topright, toplcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checksegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> subsegments and rebond them to the quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(topleft, toplsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botleft, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(topright, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toplsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(topright, toplsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botlsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(topleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(topleft, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (botrsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(botleft, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (toprsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(botright, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> New vertex assignments <b><a href="CppFor.htm">for</a></b> the rotated quadrilateral. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(horiz, farvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(horiz, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(horiz, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(top, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(top, farvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(top, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;eextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Take the average of the two triangles' attributes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attrib <a href="CppOperatorAssign.htm">=</a> 0.5 * (elemattribute(top, i) <a href="CppOperatorPlus.htm">+</a> elemattribute(horiz, i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(top, i, attrib);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(horiz, i, attrib);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((areabound(top) <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) <a href="CppOperatorLogicalOr.htm">||</a> (areabound(horiz) <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Take the average of the two triangles' area constraints.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; This prevents small area constraints from migrating a&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <b><a href="CppLong.htm">long</a></b>, <b><a href="CppLong.htm">long</a></b> way from their original location due to flips. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> 0.5 * (areabound(top) <a href="CppOperatorPlus.htm">+</a> areabound(horiz));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setareabound(top, area);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setareabound(horiz, area);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;checkquality) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newflip <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) poolalloc(&amp;m-&gt;flipstackers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newflip-&gt;flippedtri <a href="CppOperatorAssign.htm">=</a> encode(horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newflip-&gt;prevflip <a href="CppOperatorAssign.htm">=</a> m-&gt;lastflip;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip <a href="CppOperatorAssign.htm">=</a> newflip;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> SELF_CHECK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newvertex <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, leftvertex, newvertex, rightvertex) &lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle prior to edge flip (bottom).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The following test has been removed because constrainededge() <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; some<a href="CppTime.htm">time</a>s generates inverted triangles that insertvertex()&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; removes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, rightvertex, farvertex, leftvertex) &lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle prior to edge flip (top).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, farvertex, leftvertex, newvertex) &lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle after edge flip (left).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, newvertex, rightvertex, farvertex) &lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in insertvertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Clockwise triangle after edge flip (right).\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> SELF_CHECK <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Edge flip results in left ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(topleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;topleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;and right ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> On the next iterations, consider the two edges that were&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; exposed (<b><a href="CppThis.htm">this</a></b> is, are now visible to the newly inserted <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vertex) by the edge flip.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftvertex <a href="CppOperatorAssign.htm">=</a> farvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!doflip) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The handle `horiz' is accepted as locally Delaunay. <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triflaws) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check the triangle `horiz' <b><a href="CppFor.htm">for</a></b> quality. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testtriangle(m, b, &amp;horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Look <b><a href="CppFor.htm">for</a></b> the next edge around the newly inserted vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(horiz, testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> finishing a complete revolution <a href="CppAbout.htm">about</a> the <b><a href="CppNew.htm">new</a></b> vertex, or <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; falling outside&nbsp;&nbsp;of the triangulation.&nbsp;&nbsp;The latter will happen&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; when a vertex is inserted at a boundary.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((leftvertex <a href="CppOperatorEqual.htm">==</a> first) <a href="CppOperatorLogicalOr.htm">||</a> (testtri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We're done.&nbsp;&nbsp;Return a triangle whose origin is the <b><a href="CppNew.htm">new</a></b> vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(horiz, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(horiz, m-&gt;recenttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> success;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Finish finding the next edge around the newly inserted vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(testtri, horiz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rightvertex <a href="CppOperatorAssign.htm">=</a> leftvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(horiz, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangulatepolygon()&nbsp;&nbsp; Find the Delaunay triangulation of a polygon that <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has a certain "nice" <a href="CppShape.htm">shape</a>.&nbsp;&nbsp;This includes the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polygons that result from deletion of a vertex or <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; insertion of a segment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This is a conceptually difficult routine.&nbsp;&nbsp;The starting assumption is&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;that we have a polygon with n sides.&nbsp;&nbsp;n <a href="CppOperatorMinus.htm">-</a> 1 of these sides are currently <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;represented as edges in the mesh.&nbsp;&nbsp;One side, called the "base", need not <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;be.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Inside the polygon is a structure I call a "fan", consisting of n <a href="CppOperatorMinus.htm">-</a> 1&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles that share a common origin.&nbsp;&nbsp;For each of these triangles, the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;edge opposite the origin is one of the sides of the polygon.&nbsp;&nbsp;The&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;primary edge of each triangle is the edge directed from the origin to&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the destination; note that <b><a href="CppThis.htm">this</a></b> is not the same edge that is a side of&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the polygon.&nbsp;&nbsp;`firstedge' is the primary edge of the first triangle.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;From there, the triangles follow in <a href="CppCounter.htm">counter</a>clockwise order <a href="CppAbout.htm">about</a> the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;polygon, until `lastedge', the primary edge of the last triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`firstedge' and `lastedge' are probably connected to other triangles&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;beyond the extremes of the fan, but their identity is not important, as&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> as the fan remains connected to them.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Imagine the polygon oriented so that its base is at the bottom.&nbsp;&nbsp;This&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;puts `firstedge' on the far right, and `lastedge' on the far left.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The right vertex of the base is the destination of `firstedge', and the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;left vertex of the base is the apex of `lastedge'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The challenge now is to find the right sequence of edge flips to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;transform the fan into a Delaunay triangulation of the polygon.&nbsp;&nbsp;Each&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;edge flip effectively removes one triangle from the fan, committing it&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to the polygon.&nbsp;&nbsp;The resulting polygon has one fewer edge.&nbsp;&nbsp;If `doflip'&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is set, the <b><a href="CppFinal.htm">final</a></b> flip will be performed, resulting in a fan of one&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(useless?) triangle.&nbsp;&nbsp;If `doflip' is not set, the <b><a href="CppFinal.htm">final</a></b> flip is not&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;performed, resulting in a fan of two triangles, and an unfinished&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangular polygon that is not yet filled out with a single triangle.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;On completion of the routine, `lastedge' is the last remaining triangle, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;or the leftmost of the last two.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Although the flips are performed in the order described above, the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;decisions <a href="CppAbout.htm">about</a> what flips to perform are made in precisely the reverse&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;order.&nbsp;&nbsp;The recursive triangulatepolygon() procedure <a href="CppMake.htm">make</a>s a decision,&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;uses up to two recursive calls to triangulate the "subproblems"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(polygons with fewer edges), and then performs an edge flip.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The "decision" it <a href="CppMake.htm">make</a>s is which vertex of the polygon should be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;connected to the base.&nbsp;&nbsp;This decision is made by testing every possible&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex.&nbsp;&nbsp;Once the best vertex is found, the two edges that connect <b><a href="CppThis.htm">this</a></b>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex to the base become the bases <b><a href="CppFor.htm">for</a></b> two smaller polygons.&nbsp;&nbsp;These&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;are triangulated recursively.&nbsp;&nbsp;Unfortunately, <b><a href="CppThis.htm">this</a></b> approach can take&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;O(n^2) <a href="CppTime.htm">time</a> not only in the worst <b><a href="CppCase.htm">case</a></b>, but in many common <b><a href="CppCase.htm">case</a></b>s.&nbsp;&nbsp;It's&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;rarely a big deal <b><a href="CppFor.htm">for</a></b> vertex deletion, where n is rarely larger than&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;ten, but it could be a big deal <b><a href="CppFor.htm">for</a></b> segment insertion, especially <b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;there's a lot of <b><a href="CppLong.htm">long</a></b> segments that each cut many triangles.&nbsp;&nbsp;I ought to <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;code a faster <a href="CppAlgorithm.htm">algorithm</a> some day.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The `edgecount' parameter is the number of sides of the polygon,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;including its base.&nbsp;&nbsp;`triflaws' is a flag that determines whether the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> triangles should be tested <b><a href="CppFor.htm">for</a></b> quality, and enqueued <b><a href="CppIf.htm">if</a></b> they are&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;bad.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> triangulatepolygon(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *firstedge, <b><a href="CppStruct.htm">struct</a></b> otri *lastedge,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> edgecount, <b><a href="CppInt.htm">int</a></b> doflip, <b><a href="CppInt.htm">int</a></b> triflaws)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> triangulatepolygon(m, b, firstedge, lastedge, edgecount, doflip, triflaws)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *firstedge;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *lastedge;<br/>
<b><a href="CppInt.htm">int</a></b> edgecount;<br/>
<b><a href="CppInt.htm">int</a></b> doflip;<br/>
<b><a href="CppInt.htm">int</a></b> triflaws;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri testtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri besttri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri tempedge;<br/>
&nbsp;&nbsp;vertex leftbasevertex, rightbasevertex;<br/>
&nbsp;&nbsp;vertex testvertex;<br/>
&nbsp;&nbsp;vertex bestvertex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> bestnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(), onext(), and oprev(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Identify the base vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;apex(*lastedge, leftbasevertex);<br/>
&nbsp;&nbsp;dest(*firstedge, rightbasevertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Triangulating interior polygon at edge\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n", leftbasevertex[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftbasevertex[1], rightbasevertex[0], rightbasevertex[1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the best vertex to connect the base to. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;onext(*firstedge, besttri);<br/>
&nbsp;&nbsp;dest(besttri, bestvertex);<br/>
&nbsp;&nbsp;otricopy(besttri, testtri);<br/>
&nbsp;&nbsp;bestnumber <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 2; i <a href="CppOperatorLessEqual.htm">&lt;=</a> edgecount <a href="CppOperatorMinus.htm">-</a> 2; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;onextself(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(testtri, testvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is <b><a href="CppThis.htm">this</a></b> a better vertex? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (incircle(m, b, leftbasevertex, rightbasevertex, bestvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; testvertex) &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(testtri, besttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestvertex <a href="CppOperatorAssign.htm">=</a> testvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestnumber <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Connecting edge to (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n", bestvertex[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bestvertex[1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bestnumber &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively triangulate the smaller polygon on the right. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;oprev(besttri, tempedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangulatepolygon(m, b, firstedge, &amp;tempedge, bestnumber <a href="CppOperatorPlus.htm">+</a> 1, 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triflaws);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (bestnumber &lt; edgecount <a href="CppOperatorMinus.htm">-</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively triangulate the smaller polygon on the left. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(besttri, tempedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangulatepolygon(m, b, &amp;besttri, lastedge, edgecount <a href="CppOperatorMinus.htm">-</a> bestnumber, 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triflaws);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find `besttri' again; it may have been lost to edge flips. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(tempedge, besttri);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (doflip) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Do one <b><a href="CppFinal.htm">final</a></b> edge flip. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;flip(m, b, &amp;besttri);<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triflaws) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check the quality of the newly committed triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(besttri, testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testtriangle(m, b, &amp;testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Return the base triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;otricopy(besttri, *lastedge);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;deletevertex()&nbsp;&nbsp; Delete a vertex from a Delaunay triangulation, ensuring <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; that the triangulation remains Delaunay.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The origin of `deltri' is deleted.&nbsp;&nbsp;The <b><a href="CppUnion.htm">union</a></b> of the triangles adjacent&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to <b><a href="CppThis.htm">this</a></b> vertex is a polygon, <b><a href="CppFor.htm">for</a></b> which the Delaunay triangulation is&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;found.&nbsp;&nbsp;Two triangles are removed from the mesh.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Only interior vertices that <b><a href="CppDo.htm">do</a></b> not lie on segments or boundaries may be&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;deleted.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> deletevertex(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *deltri)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> deletevertex(m, b, deltri)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *deltri;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri countingtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri firstedge, lastedge;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri deltriright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri lefttri, righttri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri leftcasing, rightcasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub leftsubseg, rightsubseg;<br/>
&nbsp;&nbsp;vertex delvertex;<br/>
&nbsp;&nbsp;vertex neworg;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> edgecount;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(), onext(), and oprev(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;org(*deltri, delvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Deleting (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n", delvertex[0], delvertex[1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;vertexdealloc(m, delvertex);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Count the degree of the vertex being deleted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;onext(*deltri, countingtri);<br/>
&nbsp;&nbsp;edgecount <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!otriequal(*deltri, countingtri)) {<br/>
<a href="CppIfdef.htm">#ifdef</a> SELF_CHECK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (countingtri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in deletevertex():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Attempt to <b><a href="CppDelete.htm">delete</a></b> boundary vertex.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> SELF_CHECK <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;edgecount<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;onextself(countingtri);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> SELF_CHECK<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgecount &lt; 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in deletevertex():\n&nbsp;&nbsp;Vertex has degree <a href="CppOperatorModulus.htm">%</a>d.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edgecount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> SELF_CHECK <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgecount &gt; 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Triangulate the polygon defined by the <b><a href="CppUnion.htm">union</a></b> of all triangles <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent to the vertex being deleted.&nbsp;&nbsp;Check the quality of <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the resulting triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;onext(*deltri, firstedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;oprev(*deltri, lastedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangulatepolygon(m, b, &amp;firstedge, &amp;lastedge, edgecount, 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !b-&gt;nobisect);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Splice out two triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;lprev(*deltri, deltriright);<br/>
&nbsp;&nbsp;dnext(*deltri, lefttri);<br/>
&nbsp;&nbsp;sym(lefttri, leftcasing);<br/>
&nbsp;&nbsp;oprev(deltriright, righttri);<br/>
&nbsp;&nbsp;sym(righttri, rightcasing);<br/>
&nbsp;&nbsp;bond(*deltri, leftcasing);<br/>
&nbsp;&nbsp;bond(deltriright, rightcasing);<br/>
&nbsp;&nbsp;tspivot(lefttri, leftsubseg);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (leftsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tsbond(*deltri, leftsubseg);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;tspivot(righttri, rightsubseg);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tsbond(deltriright, rightsubseg);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the <b><a href="CppNew.htm">new</a></b> origin of `deltri' and check its quality. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(lefttri, neworg);<br/>
&nbsp;&nbsp;setorg(*deltri, neworg);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;nobisect) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;testtriangle(m, b, deltri);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Delete the two spliced-out triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;triangledealloc(m, lefttri.tri);<br/>
&nbsp;&nbsp;triangledealloc(m, righttri.tri);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;undovertex()&nbsp;&nbsp; Undo the most recent vertex insertion.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Walks through the list of transformations (flips and a vertex insertion) <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;in the reverse of the order in which they were done, and undoes them.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The inserted vertex is removed from the triangulation and deallocated.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Two triangles (possibly just one) are also deallocated.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> undovertex(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> undovertex(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri fliptri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri botleft, botright, topright;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri botlcasing, botrcasing, toprcasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri gluetri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub botlsubseg, botrsubseg, toprsubseg;<br/>
&nbsp;&nbsp;vertex botvertex, rightvertex;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Walk through the list of transformations (flips and a vertex insertion) <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; in the reverse of the order in which they were done, and undo them.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (m-&gt;lastflip <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a triangle involved in the last unreversed transformation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;decode(m-&gt;lastflip-&gt;flippedtri, fliptri);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We are <a href="GameReversi.htm">reversi</a>ng one of three transformations:&nbsp;&nbsp;a trisection of one <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle into three (by inserting a vertex in the triangle), a&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; bisection of two triangles into four (by inserting a vertex in an <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edge), or an edge flip.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;lastflip-&gt;prevflip <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Restore a triangle that was split into three triangles, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; so it is again one triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dprev(fliptri, botleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(botleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onext(fliptri, botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(botleft, botlcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(botright, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(botleft, botvertex);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(fliptri, botvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(fliptri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(fliptri, botlcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botleft, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(fliptri, botlsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(fliptri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(fliptri, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(fliptri, botrsubseg);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Delete the two spliced-out triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangledealloc(m, botleft.tri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangledealloc(m, botright.tri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (m-&gt;lastflip-&gt;prevflip <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) &amp;insertvertex) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Restore two triangles that were split into four triangles, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; so they are again two triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(fliptri, gluetri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(gluetri, botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(botright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(botright, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(botright, rightvertex);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(fliptri, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(gluetri, botrcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(botright, botrsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(gluetri, botrsubseg);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Delete the spliced-out triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangledealloc(m, botright.tri);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(fliptri, gluetri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (gluetri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(gluetri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dnext(gluetri, topright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(topright, toprcasing);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(gluetri, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(gluetri, toprcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(topright, toprsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(gluetri, toprsubseg);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Delete the spliced-out triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangledealloc(m, topright.tri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> This is the end of the list, sneakily encoded. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip-&gt;prevflip <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> flipstacker *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Undo an edge flip. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unflip(m, b, &amp;fliptri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Go on and process the next transformation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;lastflip <a href="CppOperatorAssign.htm">=</a> m-&gt;lastflip-&gt;prevflip;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Mesh transformation routines end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Divide-and-conquer Delaunay triangulation begins here&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The divide-and-conquer bounding box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;I originally implemented the divide-and-conquer and incremental Delaunay <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangulations <b><a href="CppUsing.htm">using</a></b> the edge-based data structure presented by Guibas&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and Stolfi.&nbsp;&nbsp;Switching to a triangle-based data structure <b><a href="CppDouble.htm">double</a></b>d the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;speed.&nbsp;&nbsp;However, I had to think of a few extra tricks to maintain the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;elegance of the original <a href="CppAlgorithm.htm">algorithm</a>s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The "bounding box" used by my variant of the divide-and-conquer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppAlgorithm.htm">algorithm</a> uses one triangle <b><a href="CppFor.htm">for</a></b> each edge of the convex hull of the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangulation.&nbsp;&nbsp;These bounding triangles all share a common apical&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex, which is represented by <a href="CppNULL.htm">NULL</a> and which represents nothing.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The bounding triangles are <a href="CppLink.htm">link</a>ed in a circular fan <a href="CppAbout.htm">about</a> <b><a href="CppThis.htm">this</a></b> <a href="CppNULL.htm">NULL</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex, and the edges on the convex hull of the triangulation appear&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;opposite the <a href="CppNULL.htm">NULL</a> vertex.&nbsp;&nbsp;You might find it easiest to imagine that&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the <a href="CppNULL.htm">NULL</a> vertex is a <a href="CppPointer.htm">point</a> in 3D space behind the center of the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangulation, and that the bounding triangles form a sort of cone.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This bounding box <a href="CppMake.htm">make</a>s it easy to represent degenerate <b><a href="CppCase.htm">case</a></b>s.&nbsp;&nbsp;For&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppInstance.htm">instance</a>, the triangulation of two vertices is a single edge.&nbsp;&nbsp;This edge <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is represented by two bounding box triangles, one on each "side" of the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;edge.&nbsp;&nbsp;These triangles are also <a href="CppLink.htm">link</a>ed together in a fan <a href="CppAbout.htm">about</a> the <a href="CppNULL.htm">NULL</a>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The bounding box also <a href="CppMake.htm">make</a>s it easy to traverse the convex hull, as the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;divide-and-conquer <a href="CppAlgorithm.htm">algorithm</a> needs to <b><a href="CppDo.htm">do</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertexsort()&nbsp;&nbsp; Sort an <a href="CppArray.htm">array</a> of vertices by x-coordinate, <b><a href="CppUsing.htm">using</a></b> the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y-coordinate as a secondary key.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Uses <a href="CppQuickSort.htm">quicksort</a>.&nbsp;&nbsp;Randomized O(n log n) <a href="CppTime.htm">time</a>.&nbsp;&nbsp;No, I did not <a href="CppMake.htm">make</a> <a href="CppAny.htm">any</a> of&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the usual <a href="CppQuickSort.htm">quicksort</a> mistakes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> vertexsort(vertex *sort<a href="CppArray.htm">array</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> vertexsort(sort<a href="CppArray.htm">array</a>, <a href="CppArray.htm">array</a>size)<br/>
vertex *sort<a href="CppArray.htm">array</a>;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> left, right;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> pivot;<br/>
&nbsp;&nbsp;REAL pivotx, pivoty;<br/>
&nbsp;&nbsp;vertex temp;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size <a href="CppOperatorEqual.htm">==</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursive base <b><a href="CppCase.htm">case</a></b>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((sort<a href="CppArray.htm">array</a>[0][0] &gt; sort<a href="CppArray.htm">array</a>[1][0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((sort<a href="CppArray.htm">array</a>[0][0] <a href="CppOperatorEqual.htm">==</a> sort<a href="CppArray.htm">array</a>[1][0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (sort<a href="CppArray.htm">array</a>[0][1] &gt; sort<a href="CppArray.htm">array</a>[1][1]))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[1] <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[0] <a href="CppOperatorAssign.htm">=</a> temp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Choose a random pivot to split the <a href="CppArray.htm">array</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pivot <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) randomnation((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>) <a href="CppArray.htm">array</a>size);<br/>
&nbsp;&nbsp;pivotx <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[pivot][0];<br/>
&nbsp;&nbsp;pivoty <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[pivot][1];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Split the <a href="CppArray.htm">array</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;left <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;right <a href="CppOperatorAssign.htm">=</a> <a href="CppArray.htm">array</a>size;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (left &lt; right) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search <b><a href="CppFor.htm">for</a></b> a vertex whose x-coordinate is too large <b><a href="CppFor.htm">for</a></b> the left. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((left <a href="CppOperatorLessEqual.htm">&lt;=</a> right) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((sort<a href="CppArray.htm">array</a>[left][0] &lt; pivotx) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((sort<a href="CppArray.htm">array</a>[left][0] <a href="CppOperatorEqual.htm">==</a> pivotx) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(sort<a href="CppArray.htm">array</a>[left][1] &lt; pivoty))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search <b><a href="CppFor.htm">for</a></b> a vertex whose x-coordinate is too small <b><a href="CppFor.htm">for</a></b> the right. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((left <a href="CppOperatorLessEqual.htm">&lt;=</a> right) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((sort<a href="CppArray.htm">array</a>[right][0] &gt; pivotx) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((sort<a href="CppArray.htm">array</a>[right][0] <a href="CppOperatorEqual.htm">==</a> pivotx) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(sort<a href="CppArray.htm">array</a>[right][1] &gt; pivoty))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (left &lt; right) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Swap the left and right vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[left];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[left] <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[right];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[right] <a href="CppOperatorAssign.htm">=</a> temp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (left &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively sort the left subset. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexsort(sort<a href="CppArray.htm">array</a>, left);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (right &lt; <a href="CppArray.htm">array</a>size <a href="CppOperatorMinus.htm">-</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively sort the right subset. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexsort(&amp;sort<a href="CppArray.htm">array</a>[right <a href="CppOperatorPlus.htm">+</a> 1], <a href="CppArray.htm">array</a>size <a href="CppOperatorMinus.htm">-</a> right <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertexmedian()&nbsp;&nbsp; An order statistic <a href="CppAlgorithm.htm">algorithm</a>, almost.&nbsp;&nbsp;Shuffles an&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppArray.htm">array</a> of vertices so that the first `median' vertices&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; occur lexicographically before the remaining vertices.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Uses the x-coordinate as the primary key <b><a href="CppIf.htm">if</a></b> axis <a href="CppOperatorEqual.htm">==</a> 0; the y-coordinate&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> axis <a href="CppOperatorEqual.htm">==</a> 1.&nbsp;&nbsp;Very similar to the vertexsort() procedure, but runs in&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;randomized linear <a href="CppTime.htm">time</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> vertexmedian(vertex *sort<a href="CppArray.htm">array</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, <b><a href="CppInt.htm">int</a></b> median, <b><a href="CppInt.htm">int</a></b> axis)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> vertexmedian(sort<a href="CppArray.htm">array</a>, <a href="CppArray.htm">array</a>size, median, axis)<br/>
vertex *sort<a href="CppArray.htm">array</a>;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size;<br/>
<b><a href="CppInt.htm">int</a></b> median;<br/>
<b><a href="CppInt.htm">int</a></b> axis;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> left, right;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> pivot;<br/>
&nbsp;&nbsp;REAL pivot1, pivot2;<br/>
&nbsp;&nbsp;vertex temp;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size <a href="CppOperatorEqual.htm">==</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursive base <b><a href="CppCase.htm">case</a></b>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((sort<a href="CppArray.htm">array</a>[0][axis] &gt; sort<a href="CppArray.htm">array</a>[1][axis]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((sort<a href="CppArray.htm">array</a>[0][axis] <a href="CppOperatorEqual.htm">==</a> sort<a href="CppArray.htm">array</a>[1][axis]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (sort<a href="CppArray.htm">array</a>[0][1 <a href="CppOperatorMinus.htm">-</a> axis] &gt; sort<a href="CppArray.htm">array</a>[1][1 <a href="CppOperatorMinus.htm">-</a> axis]))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[1] <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[0] <a href="CppOperatorAssign.htm">=</a> temp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Choose a random pivot to split the <a href="CppArray.htm">array</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;pivot <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) randomnation((<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>) <a href="CppArray.htm">array</a>size);<br/>
&nbsp;&nbsp;pivot1 <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[pivot][axis];<br/>
&nbsp;&nbsp;pivot2 <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[pivot][1 <a href="CppOperatorMinus.htm">-</a> axis];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Split the <a href="CppArray.htm">array</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;left <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;right <a href="CppOperatorAssign.htm">=</a> <a href="CppArray.htm">array</a>size;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (left &lt; right) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search <b><a href="CppFor.htm">for</a></b> a vertex whose x-coordinate is too large <b><a href="CppFor.htm">for</a></b> the left. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((left <a href="CppOperatorLessEqual.htm">&lt;=</a> right) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((sort<a href="CppArray.htm">array</a>[left][axis] &lt; pivot1) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((sort<a href="CppArray.htm">array</a>[left][axis] <a href="CppOperatorEqual.htm">==</a> pivot1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(sort<a href="CppArray.htm">array</a>[left][1 <a href="CppOperatorMinus.htm">-</a> axis] &lt; pivot2))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search <b><a href="CppFor.htm">for</a></b> a vertex whose x-coordinate is too small <b><a href="CppFor.htm">for</a></b> the right. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((left <a href="CppOperatorLessEqual.htm">&lt;=</a> right) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((sort<a href="CppArray.htm">array</a>[right][axis] &gt; pivot1) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((sort<a href="CppArray.htm">array</a>[right][axis] <a href="CppOperatorEqual.htm">==</a> pivot1) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(sort<a href="CppArray.htm">array</a>[right][1 <a href="CppOperatorMinus.htm">-</a> axis] &gt; pivot2))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (left &lt; right) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Swap the left and right vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[left];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[left] <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[right];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[right] <a href="CppOperatorAssign.htm">=</a> temp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Unlike in vertexsort(), at most one of the following <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; conditionals is <b><a href="CppTrue.htm">true</a></b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (left &gt; median) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively shuffle the left subset. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexmedian(sort<a href="CppArray.htm">array</a>, left, median, axis);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (right &lt; median <a href="CppOperatorMinus.htm">-</a> 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively shuffle the right subset. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexmedian(&amp;sort<a href="CppArray.htm">array</a>[right <a href="CppOperatorPlus.htm">+</a> 1], <a href="CppArray.htm">array</a>size <a href="CppOperatorMinus.htm">-</a> right <a href="CppOperatorMinus.htm">-</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; median <a href="CppOperatorMinus.htm">-</a> right <a href="CppOperatorMinus.htm">-</a> 1, axis);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;alternateaxes()&nbsp;&nbsp; Sorts the vertices as appropriate <b><a href="CppFor.htm">for</a></b> the divide-and<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conquer <a href="CppAlgorithm.htm">algorithm</a> with alternating cuts.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Partitions by x-coordinate <b><a href="CppIf.htm">if</a></b> axis <a href="CppOperatorEqual.htm">==</a> 0; by y-coordinate <b><a href="CppIf.htm">if</a></b> axis <a href="CppOperatorEqual.htm">==</a> 1.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;For the base <b><a href="CppCase.htm">case</a></b>, subsets containing only two or three vertices are&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;always sorted by x-coordinate.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> alternateaxes(vertex *sort<a href="CppArray.htm">array</a>, <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size, <b><a href="CppInt.htm">int</a></b> axis)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> alternateaxes(sort<a href="CppArray.htm">array</a>, <a href="CppArray.htm">array</a>size, axis)<br/>
vertex *sort<a href="CppArray.htm">array</a>;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size;<br/>
<b><a href="CppInt.htm">int</a></b> axis;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> divider;<br/>
<br/>
&nbsp;&nbsp;divider <a href="CppOperatorAssign.htm">=</a> <a href="CppArray.htm">array</a>size <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size <a href="CppOperatorLessEqual.htm">&lt;=</a> 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursive base <b><a href="CppCase.htm">case</a></b>:&nbsp;&nbsp;subsets of two or three vertices will be&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; handled specially, and should always be sorted by x-coordinate. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;axis <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Partition with a horizontal or vertical cut. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vertexmedian(sort<a href="CppArray.htm">array</a>, <a href="CppArray.htm">array</a>size, divider, axis);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively partition the subsets with a cross cut. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size <a href="CppOperatorMinus.htm">-</a> divider <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (divider <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alternateaxes(sort<a href="CppArray.htm">array</a>, divider, 1 <a href="CppOperatorMinus.htm">-</a> axis);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;alternateaxes(&amp;sort<a href="CppArray.htm">array</a>[divider], <a href="CppArray.htm">array</a>size <a href="CppOperatorMinus.htm">-</a> divider, 1 <a href="CppOperatorMinus.htm">-</a> axis);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;mergehulls()&nbsp;&nbsp; Merge two adjacent Delaunay triangulations into a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; single Delaunay triangulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This is similar to the <a href="CppAlgorithm.htm">algorithm</a> given by Guibas and Stolfi, but uses&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;a triangle-based, rather than edge-based, data structure.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <a href="CppAlgorithm.htm">algorithm</a> walks up the gap between the two triangulations, knitting&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;them together.&nbsp;&nbsp;As they are merged, some of their bounding triangles&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;are <a href="CppConvert.htm">convert</a>ed into real triangles of the triangulation.&nbsp;&nbsp;The procedure&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;pulls each hull's bounding triangles apart, then knits them together&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;like the teeth of two gears.&nbsp;&nbsp;The Delaunay property determines, at each&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;step, whether the next "tooth" is a bounding triangle of the left hull&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;or the right.&nbsp;&nbsp;When a bounding triangle becomes real, its apex is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;changed from <a href="CppNULL.htm">NULL</a> to a real vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Only two <b><a href="CppNew.htm">new</a></b> triangles need to be allocated.&nbsp;&nbsp;These become <b><a href="CppNew.htm">new</a></b> bounding&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles at the top and bottom of the seam.&nbsp;&nbsp;They are used to connect&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the remaining bounding triangles (those that have not been <a href="CppConvert.htm">convert</a>ed&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;into real triangles) into a single fan.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;On entry, `farleft' and `innerleft' are bounding triangles of the left&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangulation.&nbsp;&nbsp;The origin of `farleft' is the leftmost vertex, and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the destination of `innerleft' is the rightmost vertex of the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangulation.&nbsp;&nbsp;Similarly, `innerright' and `farright' are bounding&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles of the right triangulation.&nbsp;&nbsp;The origin of `innerright' and&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;destination of `farright' are the leftmost and rightmost vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;On completion, the origin of `farleft' is the leftmost vertex of the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;merged triangulation, and the destination of `farright' is the rightmost <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> mergehulls(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *farleft,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *innerleft, <b><a href="CppStruct.htm">struct</a></b> otri *innerright,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *farright, <b><a href="CppInt.htm">int</a></b> axis)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> mergehulls(m, b, farleft, innerleft, innerright, farright, axis)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *farleft;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *innerleft;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *innerright;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *farright;<br/>
<b><a href="CppInt.htm">int</a></b> axis;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri leftcand, rightcand;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri baseedge;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri nextedge;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri sidecasing, topcasing, outercasing;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri checkedge;<br/>
&nbsp;&nbsp;vertex innerleftdest;<br/>
&nbsp;&nbsp;vertex innerrightorg;<br/>
&nbsp;&nbsp;vertex innerleftapex, innerrightapex;<br/>
&nbsp;&nbsp;vertex farleftpt, farrightpt;<br/>
&nbsp;&nbsp;vertex farleftapex, farrightapex;<br/>
&nbsp;&nbsp;vertex lowerleft, lowerright;<br/>
&nbsp;&nbsp;vertex upperleft, upperright;<br/>
&nbsp;&nbsp;vertex nextapex;<br/>
&nbsp;&nbsp;vertex checkvertex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> changemade;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> badedge;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> leftfinished, rightfinished;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;dest(*innerleft, innerleftdest);<br/>
&nbsp;&nbsp;apex(*innerleft, innerleftapex);<br/>
&nbsp;&nbsp;org(*innerright, innerrightorg);<br/>
&nbsp;&nbsp;apex(*innerright, innerrightapex);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Special treatment <b><a href="CppFor.htm">for</a></b> horizontal cuts. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;dwyer <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (axis <a href="CppOperatorEqual.htm">==</a> 1)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(*farleft, farleftpt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(*farleft, farleftapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(*farright, farrightpt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(*farright, farrightapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The <a href="CppPointer.htm">pointer</a>s to the extremal vertices are shifted to <a href="CppPointer.htm">point</a> to the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; topmost and bottommost vertex of each hull, rather than the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; leftmost and rightmost vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (farleftapex[1] &lt; farleftpt[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(*farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farleftpt <a href="CppOperatorAssign.htm">=</a> farleftapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(*farleft, farleftapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(*innerleft, checkedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(checkedge, checkvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (checkvertex[1] &gt; innerleftdest[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(checkedge, *innerleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerleftapex <a href="CppOperatorAssign.htm">=</a> innerleftdest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerleftdest <a href="CppOperatorAssign.htm">=</a> checkvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(*innerleft, checkedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(checkedge, checkvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (innerrightapex[1] &lt; innerrightorg[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*innerright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(*innerright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerrightorg <a href="CppOperatorAssign.htm">=</a> innerrightapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(*innerright, innerrightapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(*farright, checkedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(checkedge, checkvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (checkvertex[1] &gt; farrightpt[1]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(checkedge, *farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farrightapex <a href="CppOperatorAssign.htm">=</a> farrightpt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farrightpt <a href="CppOperatorAssign.htm">=</a> checkvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(*farright, checkedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(checkedge, checkvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a line tangent to and below both hulls. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;changemade <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make innerleftdest the "bottommost" vertex of the left hull. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, innerleftdest, innerleftapex, innerrightorg) &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(*innerleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(*innerleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerleftdest <a href="CppOperatorAssign.htm">=</a> innerleftapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(*innerleft, innerleftapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changemade <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make innerrightorg the "bottommost" vertex of the right hull. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, innerrightapex, innerrightorg, innerleftdest) &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*innerright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(*innerright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerrightorg <a href="CppOperatorAssign.htm">=</a> innerrightapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(*innerright, innerrightapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changemade <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (changemade);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the two candidates to be the next "gear tooth." <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;sym(*innerleft, leftcand);<br/>
&nbsp;&nbsp;sym(*innerright, rightcand);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create the bottom <b><a href="CppNew.htm">new</a></b> bounding triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;baseedge);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Connect it to the bounding boxes of the left and right triangulations. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;bond(baseedge, *innerleft);<br/>
&nbsp;&nbsp;lnextself(baseedge);<br/>
&nbsp;&nbsp;bond(baseedge, *innerright);<br/>
&nbsp;&nbsp;lnextself(baseedge);<br/>
&nbsp;&nbsp;setorg(baseedge, innerrightorg);<br/>
&nbsp;&nbsp;setdest(baseedge, innerleftdest);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Apex is intentionally left <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating base bounding ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;baseedge);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Fix the extreme triangles <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(*farleft, farleftpt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (innerleftdest <a href="CppOperatorEqual.htm">==</a> farleftpt) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnext(baseedge, *farleft);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;dest(*farright, farrightpt);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (innerrightorg <a href="CppOperatorEqual.htm">==</a> farrightpt) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprev(baseedge, *farright);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The vertices of the current knitting edge. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;lowerleft <a href="CppOperatorAssign.htm">=</a> innerleftdest;<br/>
&nbsp;&nbsp;lowerright <a href="CppOperatorAssign.htm">=</a> innerrightorg;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The candidate vertices <b><a href="CppFor.htm">for</a></b> knitting. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;apex(leftcand, upperleft);<br/>
&nbsp;&nbsp;apex(rightcand, upperright);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Walk up the gap between the two triangulations, knitting them together. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Have we reached the top?&nbsp;&nbsp;(This isn't quite the right <a href="CppQuestion.htm">question</a>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; because even though the left triangulation might seem finished now, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; moving up on the right triangulation might reveal a <b><a href="CppNew.htm">new</a></b> vertex of&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the left triangulation.&nbsp;&nbsp;And vice-versa.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;leftfinished <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, upperleft, lowerleft, lowerright) <a href="CppOperatorLessEqual.htm">&lt;=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rightfinished <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, upperright, lowerleft, lowerright)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (leftfinished <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rightfinished) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create the top <b><a href="CppNew.htm">new</a></b> bounding triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(nextedge, lowerleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(nextedge, lowerright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Apex is intentionally left <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Connect it to the bounding boxes of the two triangulations. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(nextedge, baseedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(nextedge, rightcand);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(nextedge, leftcand);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating top bounding ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Special treatment <b><a href="CppFor.htm">for</a></b> horizontal cuts. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;dwyer <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (axis <a href="CppOperatorEqual.htm">==</a> 1)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(*farleft, farleftpt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(*farleft, farleftapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(*farright, farrightpt);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(*farright, farrightapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(*farleft, checkedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(checkedge, checkvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The <a href="CppPointer.htm">pointer</a>s to the extremal vertices are restored to the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; leftmost and rightmost vertices (rather than topmost and <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; bottommost).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (checkvertex[0] &lt; farleftpt[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(checkedge, *farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farleftapex <a href="CppOperatorAssign.htm">=</a> farleftpt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farleftpt <a href="CppOperatorAssign.htm">=</a> checkvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(*farleft, checkedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(checkedge, checkvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (farrightapex[0] &gt; farrightpt[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(*farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(*farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farrightpt <a href="CppOperatorAssign.htm">=</a> farrightapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(*farright, farrightapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Consider eliminating edges from the left triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!leftfinished) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> What vertex would be exposed <b><a href="CppIf.htm">if</a></b> an edge were deleted? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(leftcand, nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(nextedge, nextapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If nextapex is <a href="CppNULL.htm">NULL</a>, then no vertex would be exposed; the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangulation would have been eaten right through.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nextapex <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the edge is Delaunay. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;badedge <a href="CppOperatorAssign.htm">=</a> incircle(m, b, lowerleft, lowerright, upperleft, nextapex) &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (badedge) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Eliminate the edge with an edge flip.&nbsp;&nbsp;As a result, the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; left triangulation will have one more boundary triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(nextedge, topcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(nextedge, sidecasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(nextedge, topcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(leftcand, sidecasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(leftcand);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(leftcand, outercasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(nextedge, outercasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Correct the vertices to reflect the edge flip. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(leftcand, lowerleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(leftcand, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(leftcand, nextapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(nextedge, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(nextedge, upperleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(nextedge, nextapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Consider the newly exposed vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upperleft <a href="CppOperatorAssign.htm">=</a> nextapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> What vertex would be exposed <b><a href="CppIf.htm">if</a></b> another edge were deleted? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(sidecasing, nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(nextedge, nextapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nextapex <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the edge is Delaunay. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;badedge <a href="CppOperatorAssign.htm">=</a> incircle(m, b, lowerleft, lowerright, upperleft,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nextapex) &gt; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Avoid eating right through the triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;badedge <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Consider eliminating edges from the right triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!rightfinished) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> What vertex would be exposed <b><a href="CppIf.htm">if</a></b> an edge were deleted? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(rightcand, nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(nextedge, nextapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If nextapex is <a href="CppNULL.htm">NULL</a>, then no vertex would be exposed; the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangulation would have been eaten right through.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nextapex <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the edge is Delaunay. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;badedge <a href="CppOperatorAssign.htm">=</a> incircle(m, b, lowerleft, lowerright, upperright, nextapex) &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (badedge) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Eliminate the edge with an edge flip.&nbsp;&nbsp;As a result, the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; right triangulation will have one more boundary triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(nextedge, topcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(nextedge, sidecasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(nextedge, topcasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(rightcand, sidecasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(rightcand);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(rightcand, outercasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(nextedge, outercasing);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Correct the vertices to reflect the edge flip. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(rightcand, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(rightcand, lowerright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(rightcand, nextapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(nextedge, upperright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(nextedge, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(nextedge, nextapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Consider the newly exposed vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upperright <a href="CppOperatorAssign.htm">=</a> nextapex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> What vertex would be exposed <b><a href="CppIf.htm">if</a></b> another edge were deleted? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(sidecasing, nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(nextedge, nextapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nextapex <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the edge is Delaunay. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;badedge <a href="CppOperatorAssign.htm">=</a> incircle(m, b, lowerleft, lowerright, upperright,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nextapex) &gt; 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Avoid eating right through the triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;badedge <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (leftfinished <a href="CppOperatorLogicalOr.htm">||</a> (!rightfinished <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (incircle(m, b, upperleft, lowerleft, lowerright, upperright) &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Knit the triangulations, adding an edge from `lowerleft' <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to `upperright'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(baseedge, rightcand);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(rightcand, baseedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(baseedge, lowerleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerright <a href="CppOperatorAssign.htm">=</a> upperright;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(baseedge, rightcand);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(rightcand, upperright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Knit the triangulations, adding an edge from `upperleft' <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to `lowerright'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(baseedge, leftcand);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(leftcand, baseedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(baseedge, lowerright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerleft <a href="CppOperatorAssign.htm">=</a> upperleft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(baseedge, leftcand);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(leftcand, upperleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Connecting ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;baseedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;divconqrecurse()&nbsp;&nbsp; Recursively form a Delaunay triangulation by the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; divide-and-conquer <a href="CppMemberFunction.htm">member function</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Recursively <b><a href="CppBreak.htm">break</a></b>s down the problem into smaller pieces, which are&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;knitted together by mergehulls().&nbsp;&nbsp;The base <b><a href="CppCase.htm">case</a></b>s (problems of two or&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;three vertices) are handled specially here.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;On completion, `farleft' and `farright' are bounding triangles such that <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the origin of `farleft' is the leftmost vertex (<b><a href="CppBreak.htm">break</a></b>ing ties by&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;choosing the highest leftmost vertex), and the destination of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`farright' is the rightmost vertex (<b><a href="CppBreak.htm">break</a></b>ing ties by choosing the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;lowest rightmost vertex).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> divconqrecurse(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, vertex *sort<a href="CppArray.htm">array</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vertices, <b><a href="CppInt.htm">int</a></b> axis,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *farleft, <b><a href="CppStruct.htm">struct</a></b> otri *farright)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> divconqrecurse(m, b, sort<a href="CppArray.htm">array</a>, vertices, axis, farleft, farright)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex *sort<a href="CppArray.htm">array</a>;<br/>
<b><a href="CppInt.htm">int</a></b> vertices;<br/>
<b><a href="CppInt.htm">int</a></b> axis;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *farleft;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *farright;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri midtri, tri1, tri2, tri3;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri innerleft, innerright;<br/>
&nbsp;&nbsp;REAL area;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> divider;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Triangulating <a href="CppOperatorModulus.htm">%</a>d vertices.\n", vertices);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertices <a href="CppOperatorEqual.htm">==</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The triangulation of two vertices is an edge.&nbsp;&nbsp;An edge is <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; represented by two bounding triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setorg(*farleft, sort<a href="CppArray.htm">array</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setdest(*farleft, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The apex is intentionally left <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setorg(*farright, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setdest(*farright, sort<a href="CppArray.htm">array</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The apex is intentionally left <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(*farleft, *farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(*farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(*farleft, *farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(*farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bond(*farleft, *farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the origin of `farleft' is sort<a href="CppArray.htm">array</a>[0]. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprev(*farright, *farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (vertices <a href="CppOperatorEqual.htm">==</a> 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The triangulation of three vertices is either a triangle (with <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; three bounding triangles) or two edges (with four bounding&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangles).&nbsp;&nbsp;In either <b><a href="CppCase.htm">case</a></b>, four triangles are created.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;midtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, sort<a href="CppArray.htm">array</a>[0], sort<a href="CppArray.htm">array</a>[1], sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (area <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Three collinear vertices; the triangulation is two edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(midtri, sort<a href="CppArray.htm">array</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(midtri, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(tri1, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(tri1, sort<a href="CppArray.htm">array</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(tri2, sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(tri2, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(tri3, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(tri3, sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> All apices are intentionally left <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(midtri, tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(tri2, tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(midtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(midtri, tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(tri1, tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(midtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(midtri, tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(tri2, tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the origin of `farleft' is sort<a href="CppArray.htm">array</a>[0]. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(tri1, *farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the destination of `farright' is sort<a href="CppArray.htm">array</a>[2]. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(tri2, *farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The three vertices are not collinear; the triangulation is one <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle, namely `midtri'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(midtri, sort<a href="CppArray.htm">array</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(tri1, sort<a href="CppArray.htm">array</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(tri3, sort<a href="CppArray.htm">array</a>[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Apices of tri1, tri2, and tri3 are left <a href="CppNULL.htm">NULL</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (area &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The vertices are in <a href="CppCounter.htm">counter</a>clockwise order. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(midtri, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(tri1, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(tri2, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(midtri, sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(tri2, sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(tri3, sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The vertices are in clockwise order. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(midtri, sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(tri1, sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(tri2, sort<a href="CppArray.htm">array</a>[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(midtri, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(tri2, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(tri3, sort<a href="CppArray.htm">array</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The topology does not depend on how the vertices are ordered. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(midtri, tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(midtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(midtri, tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(midtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(midtri, tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(tri1, tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(tri1, tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(tri2, tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the origin of `farleft' is sort<a href="CppArray.htm">array</a>[0]. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(tri1, *farleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the destination of `farright' is sort<a href="CppArray.htm">array</a>[2]. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (area &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(tri2, *farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(*farleft, *farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;midtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;tri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;tri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;tri3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Split the vertices in half. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;divider <a href="CppOperatorAssign.htm">=</a> vertices <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively triangulate each half. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;divconqrecurse(m, b, sort<a href="CppArray.htm">array</a>, divider, 1 <a href="CppOperatorMinus.htm">-</a> axis, farleft, &amp;innerleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;divconqrecurse(m, b, &amp;sort<a href="CppArray.htm">array</a>[divider], vertices <a href="CppOperatorMinus.htm">-</a> divider, 1 <a href="CppOperatorMinus.htm">-</a> axis,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;innerright, farright);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Joining triangulations with <a href="CppOperatorModulus.htm">%</a>d and <a href="CppOperatorModulus.htm">%</a>d vertices.\n", divider,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertices <a href="CppOperatorMinus.htm">-</a> divider);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Merge the two triangulations into one. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;mergehulls(m, b, farleft, &amp;innerleft, &amp;innerright, farright, axis);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppLong.htm">long</a></b> removeghosts(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *startghost)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppLong.htm">long</a></b> removeghosts(m, b, startghost)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *startghost;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri searchedge;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri dissolveedge;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri deadtriangle;<br/>
&nbsp;&nbsp;vertex markorg;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> hullsize;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Removing ghost triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find an edge on the convex hull to start <a href="CppPointer.htm">point</a> location from. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;lprev(*startghost, searchedge);<br/>
&nbsp;&nbsp;symself(searchedge);<br/>
&nbsp;&nbsp;m-&gt;dummytri[0] <a href="CppOperatorAssign.htm">=</a> encode(searchedge);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remove the bounding box and count the convex hull edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;otricopy(*startghost, dissolveedge);<br/>
&nbsp;&nbsp;hullsize <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;hullsize<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnext(dissolveedge, deadtriangle);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(dissolveedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;symself(dissolveedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If no PSLG is involved, set the boundary markers of all the vertices <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; on the convex hull.&nbsp;&nbsp;If a PSLG is used, <b><a href="CppThis.htm">this</a></b> step is done later.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Watch out <b><a href="CppFor.htm">for</a></b> the <b><a href="CppCase.htm">case</a></b> where all the input vertices are collinear. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dissolveedge.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(dissolveedge, markorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(markorg) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(markorg, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remove a bounding triangle from a convex hull triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;dissolve(dissolveedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the next bounding triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(deadtriangle, dissolveedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Delete the bounding triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangledealloc(m, deadtriangle.tri);<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (!otriequal(dissolveedge, *startghost));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hullsize;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;divconqdelaunay()&nbsp;&nbsp; Form a Delaunay triangulation by the divide-and<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conquer <a href="CppMemberFunction.htm">member function</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Sorts the vertices, calls a recursive procedure to triangulate them, and <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;removes the bounding box, setting boundary markers as appropriate.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppLong.htm">long</a></b> divconqdelaunay(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppLong.htm">long</a></b> divconqdelaunay(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;vertex *sort<a href="CppArray.htm">array</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri hullleft, hullright;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> divider;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Sorting vertices.\n");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate an <a href="CppArray.htm">array</a> of <a href="CppPointer.htm">pointer</a>s to vertices <b><a href="CppFor.htm">for</a></b> sorting. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;sort<a href="CppArray.htm">array</a> <a href="CppOperatorAssign.htm">=</a> (vertex *) trimalloc(m-&gt;invertices * (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(vertex));<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;invertices; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[i] <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Sort the vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vertexsort(sort<a href="CppArray.htm">array</a>, m-&gt;invertices);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Discard duplicate vertices, which can really mess up the <a href="CppAlgorithm.htm">algorithm</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 1; j &lt; m-&gt;invertices; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((sort<a href="CppArray.htm">array</a>[i][0] <a href="CppOperatorEqual.htm">==</a> sort<a href="CppArray.htm">array</a>[j][0])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (sort<a href="CppArray.htm">array</a>[i][1] <a href="CppOperatorEqual.htm">==</a> sort<a href="CppArray.htm">array</a>[j][1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
"Warning:&nbsp;&nbsp;A duplicate vertex at (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) appeared and was ignored.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort<a href="CppArray.htm">array</a>[j][0], sort<a href="CppArray.htm">array</a>[j][1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(sort<a href="CppArray.htm">array</a>[j], UNDEADVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;undeads<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sort<a href="CppArray.htm">array</a>[i] <a href="CppOperatorAssign.htm">=</a> sort<a href="CppArray.htm">array</a>[j];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;i<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;dwyer) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Re-sort the <a href="CppArray.htm">array</a> of vertices to accommodate alternating cuts. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;divider <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorMinus.htm">-</a> divider <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (divider <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alternateaxes(sort<a href="CppArray.htm">array</a>, divider, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alternateaxes(&amp;sort<a href="CppArray.htm">array</a>[divider], i <a href="CppOperatorMinus.htm">-</a> divider, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Forming triangulation.\n");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Form the Delaunay triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;divconqrecurse(m, b, sort<a href="CppArray.htm">array</a>, i, 0, &amp;hullleft, &amp;hullright);<br/>
&nbsp;&nbsp;trifree((VOID *) sort<a href="CppArray.htm">array</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> removeghosts(m, b, &amp;hullleft);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Divide-and-conquer Delaunay triangulation ends here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Incremental Delaunay triangulation begins here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;boundingbox()&nbsp;&nbsp; Form an "infinite" bounding triangle to insert vertices&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;into.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The vertices at "infinity" are as<b><a href="CppSigned.htm">signed</a></b> finite coordinates, which are&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;used by the <a href="CppPointer.htm">point</a> location routines, but (mostly) ignored by the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Delaunay edge flip routines.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> boundingbox(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> boundingbox(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri inftri;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Handle <b><a href="CppFor.htm">for</a></b> the triangular bounding box. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;REAL width;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating triangular bounding box.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the width (or height, whichever is larger) of the triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;width <a href="CppOperatorAssign.htm">=</a> m-&gt;xmax <a href="CppOperatorMinus.htm">-</a> m-&gt;xmin;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;ymax <a href="CppOperatorMinus.htm">-</a> m-&gt;ymin &gt; width) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;width <a href="CppOperatorAssign.htm">=</a> m-&gt;ymax <a href="CppOperatorMinus.htm">-</a> m-&gt;ymin;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (width <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;width <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create the vertices of the bounding box. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;infvertex1 <a href="CppOperatorAssign.htm">=</a> (vertex) trimalloc(m-&gt;vertices.itembytes);<br/>
&nbsp;&nbsp;m-&gt;infvertex2 <a href="CppOperatorAssign.htm">=</a> (vertex) trimalloc(m-&gt;vertices.itembytes);<br/>
&nbsp;&nbsp;m-&gt;infvertex3 <a href="CppOperatorAssign.htm">=</a> (vertex) trimalloc(m-&gt;vertices.itembytes);<br/>
&nbsp;&nbsp;m-&gt;infvertex1[0] <a href="CppOperatorAssign.htm">=</a> m-&gt;xmin <a href="CppOperatorMinus.htm">-</a> 50.0 * width;<br/>
&nbsp;&nbsp;m-&gt;infvertex1[1] <a href="CppOperatorAssign.htm">=</a> m-&gt;ymin <a href="CppOperatorMinus.htm">-</a> 40.0 * width;<br/>
&nbsp;&nbsp;m-&gt;infvertex2[0] <a href="CppOperatorAssign.htm">=</a> m-&gt;xmax <a href="CppOperatorPlus.htm">+</a> 50.0 * width;<br/>
&nbsp;&nbsp;m-&gt;infvertex2[1] <a href="CppOperatorAssign.htm">=</a> m-&gt;ymin <a href="CppOperatorMinus.htm">-</a> 40.0 * width;<br/>
&nbsp;&nbsp;m-&gt;infvertex3[0] <a href="CppOperatorAssign.htm">=</a> 0.5 * (m-&gt;xmin <a href="CppOperatorPlus.htm">+</a> m-&gt;xmax);<br/>
&nbsp;&nbsp;m-&gt;infvertex3[1] <a href="CppOperatorAssign.htm">=</a> m-&gt;ymax <a href="CppOperatorPlus.htm">+</a> 60.0 * width;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create the bounding box. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;inftri);<br/>
&nbsp;&nbsp;setorg(inftri, m-&gt;infvertex1);<br/>
&nbsp;&nbsp;setdest(inftri, m-&gt;infvertex2);<br/>
&nbsp;&nbsp;setapex(inftri, m-&gt;infvertex3);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppLink.htm">Link</a> dummytri to the bounding box so we can always find an <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edge to begin searching (<a href="CppPointer.htm">point</a> location) from.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;dummytri[0] <a href="CppOperatorAssign.htm">=</a> (triangle) inftri.tri;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printtriangle(m, b, &amp;inftri);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;removebox()&nbsp;&nbsp; Remove the "infinite" bounding triangle, setting boundary&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;markers as appropriate.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The triangular bounding box has three boundary triangles (one <b><a href="CppFor.htm">for</a></b> each&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;side of the bounding box), and a bunch of triangles fanning out from&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the three bounding box vertices (one triangle <b><a href="CppFor.htm">for</a></b> each edge of the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;convex hull of the inner mesh).&nbsp;&nbsp;This routine removes these triangles.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns the number of edges on the convex hull of the triangulation.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppLong.htm">long</a></b> removebox(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppLong.htm">long</a></b> removebox(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri deadtriangle;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri searchedge;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri checkedge;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri nextedge, <b><a href="CppFinal.htm">final</a></b>edge, dissolveedge;<br/>
&nbsp;&nbsp;vertex markorg;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> hullsize;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Removing triangular bounding box.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a boundary triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;nextedge.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;nextedge.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;symself(nextedge);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark a place to stop. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;lprev(nextedge, <b><a href="CppFinal.htm">final</a></b>edge);<br/>
&nbsp;&nbsp;lnextself(nextedge);<br/>
&nbsp;&nbsp;symself(nextedge);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a triangle (on the boundary of the vertex set) that isn't <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; a bounding box triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;lprev(nextedge, searchedge);<br/>
&nbsp;&nbsp;symself(searchedge);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether nextedge is another boundary triangle <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent to the first one.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;lnext(nextedge, checkedge);<br/>
&nbsp;&nbsp;symself(checkedge);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkedge.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Go on to the next triangle.&nbsp;&nbsp;There are only three boundary&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangles, and <b><a href="CppThis.htm">this</a></b> next triangle cannot be the third one, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; so it's safe to stop here.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(searchedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;symself(searchedge);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a <b><a href="CppNew.htm">new</a></b> boundary edge to search from, as the current search <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edge lies on a bounding box triangle and will be deleted.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;dummytri[0] <a href="CppOperatorAssign.htm">=</a> encode(searchedge);<br/>
&nbsp;&nbsp;hullsize <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2l;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!otriequal(nextedge, <b><a href="CppFinal.htm">final</a></b>edge)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;hullsize<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprev(nextedge, dissolveedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;symself(dissolveedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If not <b><a href="CppUsing.htm">using</a></b> a PSLG, the vertices should be marked now. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; (If <b><a href="CppUsing.htm">using</a></b> a PSLG, markhull() will <b><a href="CppDo.htm">do</a></b> the job.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Be careful!&nbsp;&nbsp;One must check <b><a href="CppFor.htm">for</a></b> the <b><a href="CppCase.htm">case</a></b> where all the input&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vertices are collinear, and thus all the triangles are part of <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the bounding box.&nbsp;&nbsp;Otherwise, the setvertexmark() call below&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; will cause a bad <a href="CppPointer.htm">pointer</a> reference.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dissolveedge.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(dissolveedge, markorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(markorg) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(markorg, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Disconnect the bounding box triangle from the mesh triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;dissolve(dissolveedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnext(nextedge, deadtriangle);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(deadtriangle, nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Get rid of the bounding box triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangledealloc(m, deadtriangle.tri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Do we need to turn the corner? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nextedge.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Turn the corner. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(dissolveedge, nextedge);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;triangledealloc(m, <b><a href="CppFinal.htm">final</a></b>edge.tri);<br/>
<br/>
&nbsp;&nbsp;trifree((VOID *) m-&gt;infvertex1);&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Deallocate the bounding box vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;trifree((VOID *) m-&gt;infvertex2);<br/>
&nbsp;&nbsp;trifree((VOID *) m-&gt;infvertex3);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hullsize;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;incrementaldelaunay()&nbsp;&nbsp; Form a Delaunay triangulation by incrementally&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inserting vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns the number of edges on the convex hull of the triangulation.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppLong.htm">long</a></b> incrementaldelaunay(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppLong.htm">long</a></b> incrementaldelaunay(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri starttri;<br/>
&nbsp;&nbsp;vertex vertexloop;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create a triangular bounding box. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;boundingbox(m, b);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Incrementally inserting vertices.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (vertexloop <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;starttri.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (insertvertex(m, b, vertexloop, &amp;starttri, (<b><a href="CppStruct.htm">struct</a></b> osub *) <a href="CppNULL.htm">NULL</a>, 0, 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> DUPLICATEVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
"Warning:&nbsp;&nbsp;A duplicate vertex at (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) appeared and was ignored.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertexloop[0], vertexloop[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(vertexloop, UNDEADVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;undeads<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remove the bounding box. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> removebox(m, b);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Incremental Delaunay triangulation ends here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Sweepline Delaunay triangulation begins here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> eventheapinsert(<b><a href="CppStruct.htm">struct</a></b> event **heap, <b><a href="CppInt.htm">int</a></b> heapsize, <b><a href="CppStruct.htm">struct</a></b> event *newevent)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> eventheapinsert(heap, heapsize, newevent)<br/>
<b><a href="CppStruct.htm">struct</a></b> event **heap;<br/>
<b><a href="CppInt.htm">int</a></b> heapsize;<br/>
<b><a href="CppStruct.htm">struct</a></b> event *newevent;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL eventx, eventy;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> eventnum;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> parent;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> notdone;<br/>
<br/>
&nbsp;&nbsp;eventx <a href="CppOperatorAssign.htm">=</a> newevent-&gt;xkey;<br/>
&nbsp;&nbsp;eventy <a href="CppOperatorAssign.htm">=</a> newevent-&gt;ykey;<br/>
&nbsp;&nbsp;eventnum <a href="CppOperatorAssign.htm">=</a> heapsize;<br/>
&nbsp;&nbsp;notdone <a href="CppOperatorAssign.htm">=</a> eventnum &gt; 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (notdone) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parent <a href="CppOperatorAssign.htm">=</a> (eventnum <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((heap[parent]-&gt;ykey &lt; eventy) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((heap[parent]-&gt;ykey <a href="CppOperatorEqual.htm">==</a> eventy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (heap[parent]-&gt;xkey <a href="CppOperatorLessEqual.htm">&lt;=</a> eventx))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notdone <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heap[eventnum] <a href="CppOperatorAssign.htm">=</a> heap[parent];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heap[eventnum]-&gt;heapposition <a href="CppOperatorAssign.htm">=</a> eventnum;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventnum <a href="CppOperatorAssign.htm">=</a> parent;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notdone <a href="CppOperatorAssign.htm">=</a> eventnum &gt; 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;heap[eventnum] <a href="CppOperatorAssign.htm">=</a> newevent;<br/>
&nbsp;&nbsp;newevent-&gt;heapposition <a href="CppOperatorAssign.htm">=</a> eventnum;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> eventheapify(<b><a href="CppStruct.htm">struct</a></b> event **heap, <b><a href="CppInt.htm">int</a></b> heapsize, <b><a href="CppInt.htm">int</a></b> eventnum)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> eventheapify(heap, heapsize, eventnum)<br/>
<b><a href="CppStruct.htm">struct</a></b> event **heap;<br/>
<b><a href="CppInt.htm">int</a></b> heapsize;<br/>
<b><a href="CppInt.htm">int</a></b> eventnum;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> event *<b><a href="CppThis.htm">this</a></b>event;<br/>
&nbsp;&nbsp;REAL eventx, eventy;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> leftchild, rightchild;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> smallest;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> notdone;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>event <a href="CppOperatorAssign.htm">=</a> heap[eventnum];<br/>
&nbsp;&nbsp;eventx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>event-&gt;xkey;<br/>
&nbsp;&nbsp;eventy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>event-&gt;ykey;<br/>
&nbsp;&nbsp;leftchild <a href="CppOperatorAssign.htm">=</a> 2 * eventnum <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;notdone <a href="CppOperatorAssign.htm">=</a> leftchild &lt; heapsize;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (notdone) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((heap[leftchild]-&gt;ykey &lt; eventy) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((heap[leftchild]-&gt;ykey <a href="CppOperatorEqual.htm">==</a> eventy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (heap[leftchild]-&gt;xkey &lt; eventx))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallest <a href="CppOperatorAssign.htm">=</a> leftchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallest <a href="CppOperatorAssign.htm">=</a> eventnum;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rightchild <a href="CppOperatorAssign.htm">=</a> leftchild <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightchild &lt; heapsize) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((heap[rightchild]-&gt;ykey &lt; heap[smallest]-&gt;ykey) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((heap[rightchild]-&gt;ykey <a href="CppOperatorEqual.htm">==</a> heap[smallest]-&gt;ykey)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (heap[rightchild]-&gt;xkey &lt; heap[smallest]-&gt;xkey))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallest <a href="CppOperatorAssign.htm">=</a> rightchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (smallest <a href="CppOperatorEqual.htm">==</a> eventnum) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notdone <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heap[eventnum] <a href="CppOperatorAssign.htm">=</a> heap[smallest];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heap[eventnum]-&gt;heapposition <a href="CppOperatorAssign.htm">=</a> eventnum;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heap[smallest] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>event;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>event-&gt;heapposition <a href="CppOperatorAssign.htm">=</a> smallest;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventnum <a href="CppOperatorAssign.htm">=</a> smallest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftchild <a href="CppOperatorAssign.htm">=</a> 2 * eventnum <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notdone <a href="CppOperatorAssign.htm">=</a> leftchild &lt; heapsize;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> eventheapdelete(<b><a href="CppStruct.htm">struct</a></b> event **heap, <b><a href="CppInt.htm">int</a></b> heapsize, <b><a href="CppInt.htm">int</a></b> eventnum)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> eventheapdelete(heap, heapsize, eventnum)<br/>
<b><a href="CppStruct.htm">struct</a></b> event **heap;<br/>
<b><a href="CppInt.htm">int</a></b> heapsize;<br/>
<b><a href="CppInt.htm">int</a></b> eventnum;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> event *moveevent;<br/>
&nbsp;&nbsp;REAL eventx, eventy;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> parent;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> notdone;<br/>
<br/>
&nbsp;&nbsp;moveevent <a href="CppOperatorAssign.htm">=</a> heap[heapsize <a href="CppOperatorMinus.htm">-</a> 1];<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (eventnum &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;eventx <a href="CppOperatorAssign.htm">=</a> moveevent-&gt;xkey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;eventy <a href="CppOperatorAssign.htm">=</a> moveevent-&gt;ykey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent <a href="CppOperatorAssign.htm">=</a> (eventnum <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((heap[parent]-&gt;ykey &lt; eventy) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((heap[parent]-&gt;ykey <a href="CppOperatorEqual.htm">==</a> eventy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (heap[parent]-&gt;xkey <a href="CppOperatorLessEqual.htm">&lt;=</a> eventx))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notdone <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heap[eventnum] <a href="CppOperatorAssign.htm">=</a> heap[parent];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heap[eventnum]-&gt;heapposition <a href="CppOperatorAssign.htm">=</a> eventnum;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventnum <a href="CppOperatorAssign.htm">=</a> parent;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notdone <a href="CppOperatorAssign.htm">=</a> eventnum &gt; 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (notdone);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;heap[eventnum] <a href="CppOperatorAssign.htm">=</a> moveevent;<br/>
&nbsp;&nbsp;moveevent-&gt;heapposition <a href="CppOperatorAssign.htm">=</a> eventnum;<br/>
&nbsp;&nbsp;eventheapify(heap, heapsize <a href="CppOperatorMinus.htm">-</a> 1, eventnum);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> createeventheap(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> event ***eventheap,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> event **events, <b><a href="CppStruct.htm">struct</a></b> event **freeevents)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> createeventheap(m, eventheap, events, freeevents)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> event ***eventheap;<br/>
<b><a href="CppStruct.htm">struct</a></b> event **events;<br/>
<b><a href="CppStruct.htm">struct</a></b> event **freeevents;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;vertex <b><a href="CppThis.htm">this</a></b>vertex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> maxevents;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;maxevents <a href="CppOperatorAssign.htm">=</a> (3 * m-&gt;invertices) <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;*eventheap <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> event **) trimalloc(maxevents *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppStruct.htm">struct</a></b> event *));<br/>
&nbsp;&nbsp;*events <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> event *) trimalloc(maxevents * (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppStruct.htm">struct</a></b> event));<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;invertices; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>vertex <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*events)[i].eventptr <a href="CppOperatorAssign.htm">=</a> (VOID *) <b><a href="CppThis.htm">this</a></b>vertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*events)[i].xkey <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>vertex[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*events)[i].ykey <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>vertex[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;eventheapinsert(*eventheap, i, *events <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*freeevents <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> event *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> maxevents <a href="CppOperatorMinus.htm">-</a> 1; i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m-&gt;invertices; i<a href="CppOperatorDecrement.htm">--</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*events)[i].eventptr <a href="CppOperatorAssign.htm">=</a> (VOID *) *freeevents;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*freeevents <a href="CppOperatorAssign.htm">=</a> *events <a href="CppOperatorPlus.htm">+</a> i;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppInt.htm">int</a></b> rightofhyperbola(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> otri *fronttri, vertex newsite)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> rightofhyperbola(m, fronttri, newsite)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *fronttri;<br/>
vertex newsite;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;vertex leftvertex, rightvertex;<br/>
&nbsp;&nbsp;REAL dxa, dya, dxb, dyb;<br/>
<br/>
&nbsp;&nbsp;m-&gt;hyperbolacount<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;dest(*fronttri, leftvertex);<br/>
&nbsp;&nbsp;apex(*fronttri, rightvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((leftvertex[1] &lt; rightvertex[1]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((leftvertex[1] <a href="CppOperatorEqual.htm">==</a> rightvertex[1]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (leftvertex[0] &lt; rightvertex[0]))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newsite[0] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> rightvertex[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newsite[0] <a href="CppOperatorLessEqual.htm">&lt;=</a> leftvertex[0]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;dxa <a href="CppOperatorAssign.htm">=</a> leftvertex[0] <a href="CppOperatorMinus.htm">-</a> newsite[0];<br/>
&nbsp;&nbsp;dya <a href="CppOperatorAssign.htm">=</a> leftvertex[1] <a href="CppOperatorMinus.htm">-</a> newsite[1];<br/>
&nbsp;&nbsp;dxb <a href="CppOperatorAssign.htm">=</a> rightvertex[0] <a href="CppOperatorMinus.htm">-</a> newsite[0];<br/>
&nbsp;&nbsp;dyb <a href="CppOperatorAssign.htm">=</a> rightvertex[1] <a href="CppOperatorMinus.htm">-</a> newsite[1];<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dya * (dxb * dxb <a href="CppOperatorPlus.htm">+</a> dyb * dyb) &gt; dyb * (dxa * dxa <a href="CppOperatorPlus.htm">+</a> dya * dya);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
REAL circletop(<b><a href="CppStruct.htm">struct</a></b> mesh *m, vertex pa, vertex pb, vertex pc, REAL ccwabc)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
REAL circletop(m, pa, pb, pc, ccwabc)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
REAL ccwabc;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL xac, yac, xbc, ybc, xab, yab;<br/>
&nbsp;&nbsp;REAL aclen2, bclen2, ablen2;<br/>
<br/>
&nbsp;&nbsp;m-&gt;circletopcount<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;xac <a href="CppOperatorAssign.htm">=</a> pa[0] <a href="CppOperatorMinus.htm">-</a> pc[0];<br/>
&nbsp;&nbsp;yac <a href="CppOperatorAssign.htm">=</a> pa[1] <a href="CppOperatorMinus.htm">-</a> pc[1];<br/>
&nbsp;&nbsp;xbc <a href="CppOperatorAssign.htm">=</a> pb[0] <a href="CppOperatorMinus.htm">-</a> pc[0];<br/>
&nbsp;&nbsp;ybc <a href="CppOperatorAssign.htm">=</a> pb[1] <a href="CppOperatorMinus.htm">-</a> pc[1];<br/>
&nbsp;&nbsp;xab <a href="CppOperatorAssign.htm">=</a> pa[0] <a href="CppOperatorMinus.htm">-</a> pb[0];<br/>
&nbsp;&nbsp;yab <a href="CppOperatorAssign.htm">=</a> pa[1] <a href="CppOperatorMinus.htm">-</a> pb[1];<br/>
&nbsp;&nbsp;aclen2 <a href="CppOperatorAssign.htm">=</a> xac * xac <a href="CppOperatorPlus.htm">+</a> yac * yac;<br/>
&nbsp;&nbsp;bclen2 <a href="CppOperatorAssign.htm">=</a> xbc * xbc <a href="CppOperatorPlus.htm">+</a> ybc * ybc;<br/>
&nbsp;&nbsp;ablen2 <a href="CppOperatorAssign.htm">=</a> xab * xab <a href="CppOperatorPlus.htm">+</a> yab * yab;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pc[1] <a href="CppOperatorPlus.htm">+</a> (xac * bclen2 <a href="CppOperatorMinus.htm">-</a> xbc * aclen2 <a href="CppOperatorPlus.htm">+</a> sqrt(aclen2 * bclen2 * ablen2))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a> (2.0 * ccwabc);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> check4deadevent(<b><a href="CppStruct.htm">struct</a></b> otri *checktri, <b><a href="CppStruct.htm">struct</a></b> event **freeevents,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> event **eventheap, <b><a href="CppInt.htm">int</a></b> *heapsize)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> check4deadevent(checktri, freeevents, eventheap, heapsize)<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *checktri;<br/>
<b><a href="CppStruct.htm">struct</a></b> event **freeevents;<br/>
<b><a href="CppStruct.htm">struct</a></b> event **eventheap;<br/>
<b><a href="CppInt.htm">int</a></b> *heapsize;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> event *deadevent;<br/>
&nbsp;&nbsp;vertex eventvertex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> eventnum;<br/>
<br/>
&nbsp;&nbsp;org(*checktri, eventvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (eventvertex <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;deadevent <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> event *) eventvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;eventnum <a href="CppOperatorAssign.htm">=</a> deadevent-&gt;heapposition;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;deadevent-&gt;eventptr <a href="CppOperatorAssign.htm">=</a> (VOID *) *freeevents;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*freeevents <a href="CppOperatorAssign.htm">=</a> deadevent;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;eventheapdelete(eventheap, *heapsize, eventnum);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(*heapsize)<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setorg(*checktri, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *splay(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> splaynode *splaytree,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex search<a href="CppPointer.htm">point</a>, <b><a href="CppStruct.htm">struct</a></b> otri *searchtri)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *splay(m, splaytree, search<a href="CppPointer.htm">point</a>, searchtri)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *splaytree;<br/>
vertex search<a href="CppPointer.htm">point</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *searchtri;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> splaynode *child, *grandchild;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> splaynode *lefttree, *righttree;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> splaynode *leftright;<br/>
&nbsp;&nbsp;vertex checkvertex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rightofroot, rightofchild;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (splaytree <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;dest(splaytree-&gt;keyedge, checkvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkvertex <a href="CppOperatorEqual.htm">==</a> splaytree-&gt;keydest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rightofroot <a href="CppOperatorAssign.htm">=</a> rightofhyperbola(m, &amp;splaytree-&gt;keyedge, search<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightofroot) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(splaytree-&gt;keyedge, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child <a href="CppOperatorAssign.htm">=</a> splaytree-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child <a href="CppOperatorAssign.htm">=</a> splaytree-&gt;lchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (child <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> splaytree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(child-&gt;keyedge, checkvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkvertex <a href="CppOperatorNotEqual.htm">!=</a> child-&gt;keydest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child <a href="CppOperatorAssign.htm">=</a> splay(m, child, search<a href="CppPointer.htm">point</a>, searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (child <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightofroot) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splaytree-&gt;rchild <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splaytree-&gt;lchild <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> splaytree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rightofchild <a href="CppOperatorAssign.htm">=</a> rightofhyperbola(m, &amp;child-&gt;keyedge, search<a href="CppPointer.htm">point</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightofchild) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(child-&gt;keyedge, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grandchild <a href="CppOperatorAssign.htm">=</a> splay(m, child-&gt;rchild, search<a href="CppPointer.htm">point</a>, searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child-&gt;rchild <a href="CppOperatorAssign.htm">=</a> grandchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grandchild <a href="CppOperatorAssign.htm">=</a> splay(m, child-&gt;lchild, search<a href="CppPointer.htm">point</a>, searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child-&gt;lchild <a href="CppOperatorAssign.htm">=</a> grandchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (grandchild <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightofroot) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splaytree-&gt;rchild <a href="CppOperatorAssign.htm">=</a> child-&gt;lchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child-&gt;lchild <a href="CppOperatorAssign.htm">=</a> splaytree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splaytree-&gt;lchild <a href="CppOperatorAssign.htm">=</a> child-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child-&gt;rchild <a href="CppOperatorAssign.htm">=</a> splaytree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> child;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightofchild) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightofroot) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splaytree-&gt;rchild <a href="CppOperatorAssign.htm">=</a> child-&gt;lchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child-&gt;lchild <a href="CppOperatorAssign.htm">=</a> splaytree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splaytree-&gt;lchild <a href="CppOperatorAssign.htm">=</a> grandchild-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grandchild-&gt;rchild <a href="CppOperatorAssign.htm">=</a> splaytree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child-&gt;rchild <a href="CppOperatorAssign.htm">=</a> grandchild-&gt;lchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grandchild-&gt;lchild <a href="CppOperatorAssign.htm">=</a> child;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (rightofroot) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splaytree-&gt;rchild <a href="CppOperatorAssign.htm">=</a> grandchild-&gt;lchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grandchild-&gt;lchild <a href="CppOperatorAssign.htm">=</a> splaytree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splaytree-&gt;lchild <a href="CppOperatorAssign.htm">=</a> child-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child-&gt;rchild <a href="CppOperatorAssign.htm">=</a> splaytree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child-&gt;lchild <a href="CppOperatorAssign.htm">=</a> grandchild-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grandchild-&gt;rchild <a href="CppOperatorAssign.htm">=</a> child;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> grandchild;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lefttree <a href="CppOperatorAssign.htm">=</a> splay(m, splaytree-&gt;lchild, search<a href="CppPointer.htm">point</a>, searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;righttree <a href="CppOperatorAssign.htm">=</a> splay(m, splaytree-&gt;rchild, search<a href="CppPointer.htm">point</a>, searchtri);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pooldealloc(&amp;m-&gt;splaynodes, (VOID *) splaytree);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lefttree <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> righttree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (righttree <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lefttree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (lefttree-&gt;rchild <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lefttree-&gt;rchild <a href="CppOperatorAssign.htm">=</a> righttree-&gt;lchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;righttree-&gt;lchild <a href="CppOperatorAssign.htm">=</a> lefttree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> righttree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (righttree-&gt;lchild <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;righttree-&gt;lchild <a href="CppOperatorAssign.htm">=</a> lefttree-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lefttree-&gt;rchild <a href="CppOperatorAssign.htm">=</a> righttree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lefttree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Holy Toledo!!!\n"); <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftright <a href="CppOperatorAssign.htm">=</a> lefttree-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (leftright-&gt;rchild <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftright <a href="CppOperatorAssign.htm">=</a> leftright-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftright-&gt;rchild <a href="CppOperatorAssign.htm">=</a> righttree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lefttree;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *splayinsert(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> splaynode *splayroot,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *newkey, vertex search<a href="CppPointer.htm">point</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *splayinsert(m, splayroot, newkey, search<a href="CppPointer.htm">point</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *splayroot;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *newkey;<br/>
vertex search<a href="CppPointer.htm">point</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> splaynode *newsplaynode;<br/>
<br/>
&nbsp;&nbsp;newsplaynode <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) poolalloc(&amp;m-&gt;splaynodes);<br/>
&nbsp;&nbsp;otricopy(*newkey, newsplaynode-&gt;keyedge);<br/>
&nbsp;&nbsp;dest(*newkey, newsplaynode-&gt;keydest);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (splayroot <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newsplaynode-&gt;lchild <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newsplaynode-&gt;rchild <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (rightofhyperbola(m, &amp;splayroot-&gt;keyedge, search<a href="CppPointer.htm">point</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newsplaynode-&gt;lchild <a href="CppOperatorAssign.htm">=</a> splayroot;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newsplaynode-&gt;rchild <a href="CppOperatorAssign.htm">=</a> splayroot-&gt;rchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;splayroot-&gt;rchild <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newsplaynode-&gt;lchild <a href="CppOperatorAssign.htm">=</a> splayroot-&gt;lchild;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newsplaynode-&gt;rchild <a href="CppOperatorAssign.htm">=</a> splayroot;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;splayroot-&gt;lchild <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> newsplaynode;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *circletopinsert(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> splaynode *splayroot,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *newkey,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex pa, vertex pb, vertex pc, REAL topy)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *circletopinsert(m, b, splayroot, newkey, pa, pb, pc, topy)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *splayroot;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *newkey;<br/>
vertex pa;<br/>
vertex pb;<br/>
vertex pc;<br/>
REAL topy;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL ccwabc;<br/>
&nbsp;&nbsp;REAL xac, yac, xbc, ybc;<br/>
&nbsp;&nbsp;REAL aclen2, bclen2;<br/>
&nbsp;&nbsp;REAL search<a href="CppPointer.htm">point</a>[2];<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri dummytri;<br/>
<br/>
&nbsp;&nbsp;ccwabc <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, pa, pb, pc);<br/>
&nbsp;&nbsp;xac <a href="CppOperatorAssign.htm">=</a> pa[0] <a href="CppOperatorMinus.htm">-</a> pc[0];<br/>
&nbsp;&nbsp;yac <a href="CppOperatorAssign.htm">=</a> pa[1] <a href="CppOperatorMinus.htm">-</a> pc[1];<br/>
&nbsp;&nbsp;xbc <a href="CppOperatorAssign.htm">=</a> pb[0] <a href="CppOperatorMinus.htm">-</a> pc[0];<br/>
&nbsp;&nbsp;ybc <a href="CppOperatorAssign.htm">=</a> pb[1] <a href="CppOperatorMinus.htm">-</a> pc[1];<br/>
&nbsp;&nbsp;aclen2 <a href="CppOperatorAssign.htm">=</a> xac * xac <a href="CppOperatorPlus.htm">+</a> yac * yac;<br/>
&nbsp;&nbsp;bclen2 <a href="CppOperatorAssign.htm">=</a> xbc * xbc <a href="CppOperatorPlus.htm">+</a> ybc * ybc;<br/>
&nbsp;&nbsp;search<a href="CppPointer.htm">point</a>[0] <a href="CppOperatorAssign.htm">=</a> pc[0] <a href="CppOperatorMinus.htm">-</a> (yac * bclen2 <a href="CppOperatorMinus.htm">-</a> ybc * aclen2) <a href="CppOperatorDivide.htm">/</a> (2.0 * ccwabc);<br/>
&nbsp;&nbsp;search<a href="CppPointer.htm">point</a>[1] <a href="CppOperatorAssign.htm">=</a> topy;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> splayinsert(m, splay(m, splayroot, (vertex) search<a href="CppPointer.htm">point</a>, &amp;dummytri),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newkey, (vertex) search<a href="CppPointer.htm">point</a>);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *frontlocate(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> splaynode *splayroot,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *bottommost, vertex searchvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *searchtri, <b><a href="CppInt.htm">int</a></b> *farright)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *frontlocate(m, splayroot, bottommost, searchvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchtri, farright)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> splaynode *splayroot;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *bottommost;<br/>
vertex searchvertex;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *searchtri;<br/>
<b><a href="CppInt.htm">int</a></b> *farright;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> farrightflag;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by onext(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;otricopy(*bottommost, *searchtri);<br/>
&nbsp;&nbsp;splayroot <a href="CppOperatorAssign.htm">=</a> splay(m, splayroot, searchvertex, searchtri);<br/>
<br/>
&nbsp;&nbsp;farrightflag <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!farrightflag <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rightofhyperbola(m, searchtri, searchvertex)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;onextself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;farrightflag <a href="CppOperatorAssign.htm">=</a> otriequal(*searchtri, *bottommost);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*farright <a href="CppOperatorAssign.htm">=</a> farrightflag;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> splayroot;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppLong.htm">long</a></b> sweeplinedelaunay(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppLong.htm">long</a></b> sweeplinedelaunay(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> event **eventheap;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> event *events;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> event *freeevents;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> event *nextevent;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> event *newevent;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> splaynode *splayroot;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri bottommost;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri searchtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri fliptri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri lefttri, righttri, farlefttri, farrighttri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri inserttri;<br/>
&nbsp;&nbsp;vertex firstvertex, secondvertex;<br/>
&nbsp;&nbsp;vertex nextvertex, lastvertex;<br/>
&nbsp;&nbsp;vertex connectvertex;<br/>
&nbsp;&nbsp;vertex leftvertex, midvertex, rightvertex;<br/>
&nbsp;&nbsp;REAL lefttest, righttest;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> heapsize;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> check4events, farrightflag;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(), onext(), and oprev(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;poolinit(&amp;m-&gt;splaynodes, <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppStruct.htm">struct</a></b> splaynode), SPLAYNODEPERBLOCK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SPLAYNODEPERBLOCK, 0);<br/>
&nbsp;&nbsp;splayroot <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> splaynode *) <a href="CppNULL.htm">NULL</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Placing vertices in event heap.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;createeventheap(m, &amp;eventheap, &amp;events, &amp;freeevents);<br/>
&nbsp;&nbsp;heapsize <a href="CppOperatorAssign.htm">=</a> m-&gt;invertices;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Forming triangulation.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;lefttri);<br/>
&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;righttri);<br/>
&nbsp;&nbsp;bond(lefttri, righttri);<br/>
&nbsp;&nbsp;lnextself(lefttri);<br/>
&nbsp;&nbsp;lprevself(righttri);<br/>
&nbsp;&nbsp;bond(lefttri, righttri);<br/>
&nbsp;&nbsp;lnextself(lefttri);<br/>
&nbsp;&nbsp;lprevself(righttri);<br/>
&nbsp;&nbsp;bond(lefttri, righttri);<br/>
&nbsp;&nbsp;firstvertex <a href="CppOperatorAssign.htm">=</a> (vertex) eventheap[0]-&gt;eventptr;<br/>
&nbsp;&nbsp;eventheap[0]-&gt;eventptr <a href="CppOperatorAssign.htm">=</a> (VOID *) freeevents;<br/>
&nbsp;&nbsp;freeevents <a href="CppOperatorAssign.htm">=</a> eventheap[0];<br/>
&nbsp;&nbsp;eventheapdelete(eventheap, heapsize, 0);<br/>
&nbsp;&nbsp;heapsize<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (heapsize <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Input vertices are all identical.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;secondvertex <a href="CppOperatorAssign.htm">=</a> (vertex) eventheap[0]-&gt;eventptr;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;eventheap[0]-&gt;eventptr <a href="CppOperatorAssign.htm">=</a> (VOID *) freeevents;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;freeevents <a href="CppOperatorAssign.htm">=</a> eventheap[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;eventheapdelete(eventheap, heapsize, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;heapsize<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((firstvertex[0] <a href="CppOperatorEqual.htm">==</a> secondvertex[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(firstvertex[1] <a href="CppOperatorEqual.htm">==</a> secondvertex[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
"Warning:&nbsp;&nbsp;A duplicate vertex at (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) appeared and was ignored.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; secondvertex[0], secondvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(secondvertex, UNDEADVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;undeads<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((firstvertex[0] <a href="CppOperatorEqual.htm">==</a> secondvertex[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (firstvertex[1] <a href="CppOperatorEqual.htm">==</a> secondvertex[1]));<br/>
&nbsp;&nbsp;setorg(lefttri, firstvertex);<br/>
&nbsp;&nbsp;setdest(lefttri, secondvertex);<br/>
&nbsp;&nbsp;setorg(righttri, secondvertex);<br/>
&nbsp;&nbsp;setdest(righttri, firstvertex);<br/>
&nbsp;&nbsp;lprev(lefttri, bottommost);<br/>
&nbsp;&nbsp;lastvertex <a href="CppOperatorAssign.htm">=</a> secondvertex;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (heapsize &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nextevent <a href="CppOperatorAssign.htm">=</a> eventheap[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;eventheapdelete(eventheap, heapsize, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;heapsize<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;check4events <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nextevent-&gt;xkey &lt; m-&gt;xmin) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decode(nextevent-&gt;eventptr, fliptri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprev(fliptri, farlefttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check4deadevent(&amp;farlefttri, &amp;freeevents, eventheap, &amp;heapsize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onext(fliptri, farrighttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check4deadevent(&amp;farrighttri, &amp;freeevents, eventheap, &amp;heapsize);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (otriequal(farlefttri, bottommost)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(fliptri, bottommost);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flip(m, b, &amp;fliptri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setapex(fliptri, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(fliptri, lefttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(fliptri, righttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(lefttri, farlefttri);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (randomnation(SAMPLERATE) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(fliptri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(fliptri, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(fliptri, midvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(fliptri, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splayroot <a href="CppOperatorAssign.htm">=</a> circletopinsert(m, b, splayroot, &amp;lefttri, leftvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;midvertex, rightvertex, nextevent-&gt;ykey);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextvertex <a href="CppOperatorAssign.htm">=</a> (vertex) nextevent-&gt;eventptr;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((nextvertex[0] <a href="CppOperatorEqual.htm">==</a> lastvertex[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(nextvertex[1] <a href="CppOperatorEqual.htm">==</a> lastvertex[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
"Warning:&nbsp;&nbsp;A duplicate vertex at (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) appeared and was ignored.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nextvertex[0], nextvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(nextvertex, UNDEADVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;undeads<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check4events <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastvertex <a href="CppOperatorAssign.htm">=</a> nextvertex;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splayroot <a href="CppOperatorAssign.htm">=</a> frontlocate(m, splayroot, &amp;bottommost, nextvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;searchtri, &amp;farrightflag);<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(bottommost, searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farrightflag <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!farrightflag <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rightofhyperbola(m, &amp;searchtri, nextvertex)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onextself(searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;farrightflag <a href="CppOperatorAssign.htm">=</a> otriequal(searchtri, bottommost);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check4deadevent(&amp;searchtri, &amp;freeevents, eventheap, &amp;heapsize);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(searchtri, farrighttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(searchtri, farlefttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;lefttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;righttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(farrighttri, connectvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(lefttri, connectvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(lefttri, nextvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(righttri, nextvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setdest(righttri, connectvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(lefttri, righttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(lefttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(righttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(lefttri, righttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(lefttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(righttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(lefttri, farlefttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(righttri, farrighttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!farrightflag <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> otriequal(farrighttri, bottommost)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(lefttri, bottommost);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (randomnation(SAMPLERATE) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splayroot <a href="CppOperatorAssign.htm">=</a> splayinsert(m, splayroot, &amp;lefttri, nextvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (randomnation(SAMPLERATE) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(righttri, inserttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splayroot <a href="CppOperatorAssign.htm">=</a> splayinsert(m, splayroot, &amp;inserttri, nextvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nextevent-&gt;eventptr <a href="CppOperatorAssign.htm">=</a> (VOID *) freeevents;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;freeevents <a href="CppOperatorAssign.htm">=</a> nextevent;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (check4events) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(farlefttri, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(lefttri, midvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(lefttri, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lefttest <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, leftvertex, midvertex, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lefttest &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newevent <a href="CppOperatorAssign.htm">=</a> freeevents;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;freeevents <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> event *) freeevents-&gt;eventptr;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newevent-&gt;xkey <a href="CppOperatorAssign.htm">=</a> m-&gt;xminextreme;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newevent-&gt;ykey <a href="CppOperatorAssign.htm">=</a> circletop(m, leftvertex, midvertex, rightvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lefttest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newevent-&gt;eventptr <a href="CppOperatorAssign.htm">=</a> (VOID *) encode(lefttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventheapinsert(eventheap, heapsize, newevent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heapsize<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(lefttri, newevent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(righttri, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(righttri, midvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(farrighttri, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;righttest <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, leftvertex, midvertex, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (righttest &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newevent <a href="CppOperatorAssign.htm">=</a> freeevents;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;freeevents <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> event *) freeevents-&gt;eventptr;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newevent-&gt;xkey <a href="CppOperatorAssign.htm">=</a> m-&gt;xminextreme;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newevent-&gt;ykey <a href="CppOperatorAssign.htm">=</a> circletop(m, leftvertex, midvertex, rightvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; righttest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newevent-&gt;eventptr <a href="CppOperatorAssign.htm">=</a> (VOID *) encode(farrighttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventheapinsert(eventheap, heapsize, newevent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heapsize<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(farrighttri, newevent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;pooldeinit(&amp;m-&gt;splaynodes);<br/>
&nbsp;&nbsp;lprevself(bottommost);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> removeghosts(m, b, &amp;bottommost);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Sweepline Delaunay triangulation ends here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** General mesh <a href="CppConstructor.htm">construct</a>ion routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;delaunay()&nbsp;&nbsp; Form a Delaunay triangulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppLong.htm">long</a></b> delaunay(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppLong.htm">long</a></b> delaunay(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> hulledges;<br/>
<br/>
&nbsp;&nbsp;m-&gt;eextras <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>trisubpools(m, b);<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> REDUCED<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppConstructor.htm">Construct</a>ing Delaunay triangulation by divide-and-conquer <a href="CppMemberFunction.htm">member function</a>.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;hulledges <a href="CppOperatorAssign.htm">=</a> divconqdelaunay(m, b);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("<a href="CppConstructor.htm">Construct</a>ing Delaunay triangulation ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;incremental) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("by incremental <a href="CppMemberFunction.htm">member function</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (b-&gt;sweepline) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("by sweepline <a href="CppMemberFunction.htm">member function</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("by divide-and-conquer <a href="CppMemberFunction.htm">member function</a>.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;incremental) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;hulledges <a href="CppOperatorAssign.htm">=</a> incrementaldelaunay(m, b);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (b-&gt;sweepline) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;hulledges <a href="CppOperatorAssign.htm">=</a> sweeplinedelaunay(m, b);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;hulledges <a href="CppOperatorAssign.htm">=</a> divconqdelaunay(m, b);<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;triangles.items <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The input vertices were all collinear, so there are no triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0l;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hulledges;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;re<a href="CppConstructor.htm">construct</a>()&nbsp;&nbsp; Re<a href="CppConstructor.htm">construct</a> a triangulation from its .ele (and possibly&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.poly) file.&nbsp;&nbsp;Used when the <a href="CppOperatorMinus.htm">-</a>r <b><a href="CppSwitch.htm">switch</a></b> is used.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Reads an .ele file and re<a href="CppConstructor.htm">construct</a>s the original mesh.&nbsp;&nbsp;If the <a href="CppOperatorMinus.htm">-</a>p <b><a href="CppSwitch.htm">switch</a></b> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is used, <b><a href="CppThis.htm">this</a></b> procedure will also read a .poly file and re<a href="CppConstructor.htm">construct</a> the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegments of the original mesh.&nbsp;&nbsp;If the <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b> is used, <b><a href="CppThis.htm">this</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;procedure will also read an .area file and set a maximum area constraint <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;on each triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Vertices that are not corners of triangles, such as nodes on edges of&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subparametric elements, are discarded.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This routine finds the adjacencies between triangles (and subsegments)&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;by forming one stack of triangles <b><a href="CppFor.htm">for</a></b> each vertex.&nbsp;&nbsp;Each triangle is on&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;three different stacks simultaneously.&nbsp;&nbsp;Each triangle's subsegment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppPointer.htm">pointer</a>s are used to <a href="CppLink.htm">link</a> the items in each stack.&nbsp;&nbsp;This <a href="CppMemory.htm">memory</a>-saving&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;feature <a href="CppMake.htm">make</a>s the code harder to read.&nbsp;&nbsp;The most important thing to keep <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;in mind is that each triangle is removed from a stack precisely when&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the corresponding <a href="CppPointer.htm">pointer</a> is adjusted to refer to a subsegment rather&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;than the next triangle of the stack.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppInt.htm">int</a></b> re<a href="CppConstructor.htm">construct</a>(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppInt.htm">int</a></b> *trianglelist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REAL *triangleattriblist, REAL *trianglearealist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> elements, <b><a href="CppInt.htm">int</a></b> corners, <b><a href="CppInt.htm">int</a></b> attribs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *segmentlist,<b><a href="CppInt.htm">int</a></b> *segmentmarkerlist, <b><a href="CppInt.htm">int</a></b> numberofsegments)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> re<a href="CppConstructor.htm">construct</a>(m, b, trianglelist, triangleattriblist, trianglearealist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elements, corners, attribs, segmentlist, segmentmarkerlist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numberofsegments)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> *trianglelist;<br/>
REAL *triangleattriblist;<br/>
REAL *trianglearealist;<br/>
<b><a href="CppInt.htm">int</a></b> elements;<br/>
<b><a href="CppInt.htm">int</a></b> corners;<br/>
<b><a href="CppInt.htm">int</a></b> attribs;<br/>
<b><a href="CppInt.htm">int</a></b> *segmentlist;<br/>
<b><a href="CppInt.htm">int</a></b> *segmentmarkerlist;<br/>
<b><a href="CppInt.htm">int</a></b> numberofsegments;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppLong.htm">long</a></b> re<a href="CppConstructor.htm">construct</a>(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *elefilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppChar.htm">char</a></b> *areafilename, <b><a href="CppChar.htm">char</a></b> *polyfilename, <a href="CppCfile.htm">FILE</a> *polyfile)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppLong.htm">long</a></b> re<a href="CppConstructor.htm">construct</a>(m, b, elefilename, areafilename, polyfilename, polyfile)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *elefilename;<br/>
<b><a href="CppChar.htm">char</a></b> *areafilename;<br/>
<b><a href="CppChar.htm">char</a></b> *polyfilename;<br/>
<a href="CppCfile.htm">FILE</a> *polyfile;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vertexindex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> att<a href="CppRibi.htm">ribi</a>ndex;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *elefile;<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *areafile;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *stringptr;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> areaelements;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleleft;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri checktri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri checkleft;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri checkneighbor;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub subsegloop;<br/>
&nbsp;&nbsp;triangle *vertex<a href="CppArray.htm">array</a>;<br/>
&nbsp;&nbsp;triangle *prev<a href="CppLink.htm">link</a>;<br/>
&nbsp;&nbsp;triangle nexttri;<br/>
&nbsp;&nbsp;vertex tdest, tapex;<br/>
&nbsp;&nbsp;vertex checkdest, checkapex;<br/>
&nbsp;&nbsp;vertex shorg;<br/>
&nbsp;&nbsp;vertex killvertex;<br/>
&nbsp;&nbsp;vertex segmentorg, segmentdest;<br/>
&nbsp;&nbsp;REAL area;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> corner[3];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> end[2];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> killvertexindex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> incorners;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> segmentmarkers;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> boundmarker;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> aroundvertex;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> hullsize;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> notfound;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> elementnumber, segmentnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;m-&gt;inelements <a href="CppOperatorAssign.htm">=</a> elements;<br/>
&nbsp;&nbsp;incorners <a href="CppOperatorAssign.htm">=</a> corners;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (incorners &lt; 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangles must have at least 3 vertices.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m-&gt;eextras <a href="CppOperatorAssign.htm">=</a> attribs;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the triangles from an .ele file. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", elefilename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;elefile <a href="CppOperatorAssign.htm">=</a> fopen(elefilename, "r");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (elefile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", elefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read number of triangles, number of vertices per triangle, and <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; number of triangle attributes from .ele file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, elefile, elefilename);<br/>
&nbsp;&nbsp;m-&gt;inelements <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;incorners <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;incorners <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (incorners &lt; 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangles in <a href="CppOperatorModulus.htm">%</a>s must have at least 3 vertices.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;eextras <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;eextras <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>trisubpools(m, b);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create the triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (elementnumber <a href="CppOperatorAssign.htm">=</a> 1; elementnumber <a href="CppOperatorLessEqual.htm">&lt;=</a> m-&gt;inelements; elementnumber<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>triangle(m, b, &amp;triangleloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the triangle as living. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri[3] <a href="CppOperatorAssign.htm">=</a> (triangle) triangleloop.tri;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;segmentmarkers <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;poly) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;insegments <a href="CppOperatorAssign.htm">=</a> numberofsegments;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;segmentmarkers <a href="CppOperatorAssign.htm">=</a> segmentmarkerlist <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read number of segments and number of segment <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; boundary markers from .poly file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, polyfile, b-&gt;inpolyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;insegments <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorNotEqual.htm">!=</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentmarkers <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create the subsegments. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (segmentnumber <a href="CppOperatorAssign.htm">=</a> 1; segmentnumber <a href="CppOperatorLessEqual.htm">&lt;=</a> m-&gt;insegments; segmentnumber<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>subseg(m, &amp;subsegloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the subsegment as living. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subsegloop.ss[2] <a href="CppOperatorAssign.htm">=</a> (subseg) subsegloop.ss;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;vertexindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;att<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Open an .area file, check <b><a href="CppFor.htm">for</a></b> consistency with the .ele file. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", areafilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;areafile <a href="CppOperatorAssign.htm">=</a> fopen(areafilename, "r");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (areafile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", areafilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, areafile, areafilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;areaelements <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (areaelements <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;inelements) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>s and <a href="CppOperatorModulus.htm">%</a>s disagree on number of triangles.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elefilename, areafilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Re<a href="CppConstructor.htm">construct</a>ing mesh.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate a temporary <a href="CppArray.htm">array</a> that maps each vertex to some adjacent <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle.&nbsp;&nbsp;I took care to allocate all the permanent <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangles and subsegments first.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vertex<a href="CppArray.htm">array</a> <a href="CppOperatorAssign.htm">=</a> (triangle *) trimalloc(m-&gt;vertices.items *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(triangle));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Each vertex is initially unrepresented. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;vertices.items; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertex<a href="CppArray.htm">array</a>[i] <a href="CppOperatorAssign.htm">=</a> (triangle) m-&gt;dummytri;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Assembling triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the triangles from the .ele file, and <a href="CppLink.htm">link</a> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; together those that share an edge.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;elementnumber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Copy the triangle's three corners. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;corner[j] <a href="CppOperatorAssign.htm">=</a> trianglelist[vertexindex<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((corner[j] &lt; b-&gt;firstnumber) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(corner[j] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> m-&gt;invertices)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangle <a href="CppOperatorModulus.htm">%</a>ld has an invalid vertex index.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elementnumber);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read triangle number and the triangle's three corners. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, elefile, elefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangle <a href="CppOperatorModulus.htm">%</a>ld is missing vertex <a href="CppOperatorModulus.htm">%</a>d in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elementnumber, j <a href="CppOperatorPlus.htm">+</a> 1, elefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;corner[j] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((corner[j] &lt; b-&gt;firstnumber) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(corner[j] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> m-&gt;invertices)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangle <a href="CppOperatorModulus.htm">%</a>ld has an invalid vertex index.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elementnumber);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find out <a href="CppAbout.htm">about</a> (and <b><a href="CppThrow.htm">throw</a></b> away) extra nodes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 3; j &lt; incorners; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killvertexindex <a href="CppOperatorAssign.htm">=</a> trianglelist[vertexindex<a href="CppOperatorIncrement.htm">++</a>];<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorNotEqual.htm">!=</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killvertexindex <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((killvertexindex <a href="CppOperatorGreaterEqual.htm">&gt;=</a> b-&gt;firstnumber) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(killvertexindex &lt; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> m-&gt;invertices)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Delete the non-corner vertex <b><a href="CppIf.htm">if</a></b> it's not already deleted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killvertex <a href="CppOperatorAssign.htm">=</a> getvertex(m, b, killvertexindex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertextype(killvertex) <a href="CppOperatorNotEqual.htm">!=</a> DEADVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexdealloc(m, killvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the triangle's attributes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; m-&gt;eextras; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(triangleloop, j, triangleattriblist[att<a href="CppRibi.htm">ribi</a>ndex<a href="CppOperatorIncrement.htm">++</a>]);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(triangleloop, j, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(triangleloop, j,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (REAL) strtod(stringptr, &amp;stringptr));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> trianglearealist[elementnumber <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber];<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read an area constraint from the .area file. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, areafile, areafilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> No constraint on <b><a href="CppThis.htm">this</a></b> triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setareabound(triangleloop, area);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the triangle's vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setorg(triangleloop, getvertex(m, b, corner[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setdest(triangleloop, getvertex(m, b, corner[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setapex(triangleloop, getvertex(m, b, corner[2]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Try <a href="CppLink.htm">link</a>ing the triangle to others that share these vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0; triangleloop.orient &lt; 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleloop.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Take the number <b><a href="CppFor.htm">for</a></b> the origin of triangleloop. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aroundvertex <a href="CppOperatorAssign.htm">=</a> corner[triangleloop.orient];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Look <b><a href="CppFor.htm">for</a></b> other triangles having <b><a href="CppThis.htm">this</a></b> vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nexttri <a href="CppOperatorAssign.htm">=</a> vertex<a href="CppArray.htm">array</a>[aroundvertex <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppLink.htm">Link</a> the current triangle to the next one in the stack. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri[6 <a href="CppOperatorPlus.htm">+</a> triangleloop.orient] <a href="CppOperatorAssign.htm">=</a> nexttri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Push the current triangle onto the stack. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex<a href="CppArray.htm">array</a>[aroundvertex <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber] <a href="CppOperatorAssign.htm">=</a> encode(triangleloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decode(nexttri, checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checktri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, tdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(triangleloop, tapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Look <b><a href="CppFor.htm">for</a></b> other triangles that share an edge. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(checktri, checkdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(checktri, checkapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tapex <a href="CppOperatorEqual.htm">==</a> checkdest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The two triangles share an edge; bond them together. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(triangleloop, triangleleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(triangleleft, checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tdest <a href="CppOperatorEqual.htm">==</a> checkapex) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The two triangles share an edge; bond them together. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(checktri, checkleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bond(triangleloop, checkleft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the next triangle in the stack. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nexttri <a href="CppOperatorAssign.htm">=</a> checktri.tri[6 <a href="CppOperatorPlus.htm">+</a> checktri.orient];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decode(nexttri, checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (checktri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elementnumber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;vertexindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fclose(elefile);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fclose(areafile);<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;hullsize <a href="CppOperatorAssign.htm">=</a> 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Prepare to count the boundary edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Marking segments in triangulation.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the segments from the .poly file, and <a href="CppLink.htm">link</a> them <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to their neighboring triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;boundmarker <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;traversalinit(&amp;m-&gt;subsegs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;subsegloop.ss <a href="CppOperatorAssign.htm">=</a> subsegtraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;segmentnumber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (subsegloop.ss <a href="CppOperatorNotEqual.htm">!=</a> (subseg *) <a href="CppNULL.htm">NULL</a>) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end[0] <a href="CppOperatorAssign.htm">=</a> segmentlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end[1] <a href="CppOperatorAssign.htm">=</a> segmentlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (segmentmarkers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundmarker <a href="CppOperatorAssign.htm">=</a> segmentmarkerlist[segmentnumber <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the endpoints of each segment, and possibly a boundary marker. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, polyfile, b-&gt;inpolyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Skip the first (segment number) field. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>ld has no endpoints in <a href="CppOperatorModulus.htm">%</a>s.\n", segmentnumber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end[0] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>ld is missing its second endpoint in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; segmentnumber, polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end[1] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (segmentmarkers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundmarker <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundmarker <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 2; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((end[j] &lt; b-&gt;firstnumber) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(end[j] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> m-&gt;invertices)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>ld has an invalid vertex index.\n", <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; segmentnumber);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> set the subsegment's vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subsegloop.ssorient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentorg <a href="CppOperatorAssign.htm">=</a> getvertex(m, b, end[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentdest <a href="CppOperatorAssign.htm">=</a> getvertex(m, b, end[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setsorg(subsegloop, segmentorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setsdest(subsegloop, segmentdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setsegorg(subsegloop, segmentorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setsegdest(subsegloop, segmentdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setmark(subsegloop, boundmarker);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Try <a href="CppLink.htm">link</a>ing the subsegment to triangles that share these vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (subsegloop.ssorient <a href="CppOperatorAssign.htm">=</a> 0; subsegloop.ssorient &lt; 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subsegloop.ssorient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Take the number <b><a href="CppFor.htm">for</a></b> the destination of subsegloop. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aroundvertex <a href="CppOperatorAssign.htm">=</a> end[1 <a href="CppOperatorMinus.htm">-</a> subsegloop.ssorient];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Look <b><a href="CppFor.htm">for</a></b> triangles having <b><a href="CppThis.htm">this</a></b> vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev<a href="CppLink.htm">link</a> <a href="CppOperatorAssign.htm">=</a> &amp;vertex<a href="CppArray.htm">array</a>[aroundvertex <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nexttri <a href="CppOperatorAssign.htm">=</a> vertex<a href="CppArray.htm">array</a>[aroundvertex <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decode(nexttri, checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sorg(subsegloop, shorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notfound <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Look <b><a href="CppFor.htm">for</a></b> triangles having <b><a href="CppThis.htm">this</a></b> edge.&nbsp;&nbsp;Note that I'm only&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; comparing each triangle's destination with the subsegment;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; each triangle's apex is handled through a different vertex.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Because each triangle appears on three vertices' lists, each <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; occurrence of a triangle on a list can (and does) represent&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; an edge.&nbsp;&nbsp;In <b><a href="CppThis.htm">this</a></b> way, most edges are represented twice, and <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; every triangle-subsegment bond is represented once.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (notfound <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (checktri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(checktri, checkdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (shorg <a href="CppOperatorEqual.htm">==</a> checkdest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We have a match.&nbsp;&nbsp;Remove <b><a href="CppThis.htm">this</a></b> triangle from the list. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*prev<a href="CppLink.htm">link</a> <a href="CppOperatorAssign.htm">=</a> checktri.tri[6 <a href="CppOperatorPlus.htm">+</a> checktri.orient];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Bond the subsegment to the triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsbond(checktri, subsegloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> is a boundary edge. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(checktri, checkneighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkneighbor.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The next line doesn't insert a subsegment (because there's <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; already one there), but it sets the boundary markers of&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the existing subsegment and its vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertsubseg(m, b, &amp;checktri, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hullsize<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notfound <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the next triangle in the stack. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev<a href="CppLink.htm">link</a> <a href="CppOperatorAssign.htm">=</a> &amp;checktri.tri[6 <a href="CppOperatorPlus.htm">+</a> checktri.orient];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nexttri <a href="CppOperatorAssign.htm">=</a> checktri.tri[6 <a href="CppOperatorPlus.htm">+</a> checktri.orient];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decode(nexttri, checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subsegloop.ss <a href="CppOperatorAssign.htm">=</a> subsegtraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentnumber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the remaining edges as not being attached to <a href="CppAny.htm">any</a> subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Also, count the (yet uncounted) boundary edges.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;vertices.items; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search the stack of triangles adjacent to a vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;nexttri <a href="CppOperatorAssign.htm">=</a> vertex<a href="CppArray.htm">array</a>[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;decode(nexttri, checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (checktri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the next triangle in the stack before <b><a href="CppThis.htm">this</a></b> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; information gets overwritten.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nexttri <a href="CppOperatorAssign.htm">=</a> checktri.tri[6 <a href="CppOperatorPlus.htm">+</a> checktri.orient];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> No adjacent subsegment.&nbsp;&nbsp;(This overwrites the stack info.) <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(checktri, checkneighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkneighbor.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertsubseg(m, b, &amp;checktri, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hullsize<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decode(nexttri, checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;trifree((VOID *) vertex<a href="CppArray.htm">array</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> hullsize;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** General mesh <a href="CppConstructor.htm">construct</a>ion routines end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Segment insertion begins here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;finddirection()&nbsp;&nbsp; Find the first triangle on the path from one <a href="CppPointer.htm">point</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to another.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Finds the triangle that intersects a line segment drawn from the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;origin of `searchtri' to the <a href="CppPointer.htm">point</a> `search<a href="CppPointer.htm">point</a>', and <a href="CppReturn.htm">returns</a> the result <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;in `searchtri'.&nbsp;&nbsp;The origin of `searchtri' does not change, even though&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the triangle <b><a href="CppReturn.htm">return</a></b>ed may differ from the one passed in.&nbsp;&nbsp;This routine&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is used to find the direction to move in to get from one <a href="CppPointer.htm">point</a> to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;another.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <b><a href="CppReturn.htm">return</a></b> value notes whether the destination or apex of the found&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle is collinear with the two <a href="CppPointer.htm">point</a>s in <a href="CppQuestion.htm">question</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppEnum.htm">enum</a></b> finddirectionresult finddirection(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> otri *searchtri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertex search<a href="CppPointer.htm">point</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppEnum.htm">enum</a></b> finddirectionresult finddirection(m, b, searchtri, search<a href="CppPointer.htm">point</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *searchtri;<br/>
vertex search<a href="CppPointer.htm">point</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri checktri;<br/>
&nbsp;&nbsp;vertex startvertex;<br/>
&nbsp;&nbsp;vertex leftvertex, rightvertex;<br/>
&nbsp;&nbsp;REAL leftccw, rightccw;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> leftflag, rightflag;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by onext() and oprev(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;org(*searchtri, startvertex);<br/>
&nbsp;&nbsp;dest(*searchtri, rightvertex);<br/>
&nbsp;&nbsp;apex(*searchtri, leftvertex);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is `search<a href="CppPointer.htm">point</a>' to the left? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;leftccw <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, search<a href="CppPointer.htm">point</a>, startvertex, leftvertex);<br/>
&nbsp;&nbsp;leftflag <a href="CppOperatorAssign.htm">=</a> leftccw &gt; 0.0;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is `search<a href="CppPointer.htm">point</a>' to the right? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;rightccw <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, startvertex, search<a href="CppPointer.htm">point</a>, rightvertex);<br/>
&nbsp;&nbsp;rightflag <a href="CppOperatorAssign.htm">=</a> rightccw &gt; 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (leftflag <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rightflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `searchtri' faces directly away from `search<a href="CppPointer.htm">point</a>'.&nbsp;&nbsp;We could go left <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; or right.&nbsp;&nbsp;Ask whether it's a triangle or a boundary on the left.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;onext(*searchtri, checktri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checktri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftflag <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rightflag <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (leftflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Turn left until satisfied. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;onextself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (searchtri-&gt;tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in finddirection():&nbsp;&nbsp;Unable to find a\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;triangle leading from (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) to", startvertex[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; startvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n", search<a href="CppPointer.htm">point</a>[0], search<a href="CppPointer.htm">point</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(*searchtri, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rightccw <a href="CppOperatorAssign.htm">=</a> leftccw;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;leftccw <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, search<a href="CppPointer.htm">point</a>, startvertex, leftvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;leftflag <a href="CppOperatorAssign.htm">=</a> leftccw &gt; 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (rightflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Turn right until satisfied. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;oprevself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (searchtri-&gt;tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in finddirection():&nbsp;&nbsp;Unable to find a\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;triangle leading from (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) to", startvertex[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; startvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n", search<a href="CppPointer.htm">point</a>[0], search<a href="CppPointer.htm">point</a>[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(*searchtri, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;leftccw <a href="CppOperatorAssign.htm">=</a> rightccw;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rightccw <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, startvertex, search<a href="CppPointer.htm">point</a>, rightvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rightflag <a href="CppOperatorAssign.htm">=</a> rightccw &gt; 0.0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (leftccw <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> LEFTCOLLINEAR;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (rightccw <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> RIGHTCOLLINEAR;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WITHIN;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;segmentintersection()&nbsp;&nbsp; Find the intersection of an existing segment&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and a segment that is being inserted.&nbsp;&nbsp;Insert&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a vertex at the intersection, splitting an&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;existing subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The segment being inserted connects the apex of splittri to endpoint2.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;splitsubseg is the subsegment being split, and MUST adjoin splittri.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Hence, endpoints of the subsegment being split are the origin and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;destination of splittri.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;On completion, splittri is a handle having the newly inserted&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;intersection <a href="CppPointer.htm">point</a> as its origin, and endpoint1 as its destination.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> segmentintersection(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> otri *splittri, <b><a href="CppStruct.htm">struct</a></b> osub *splitsubseg,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertex endpoint2)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> segmentintersection(m, b, splittri, splitsubseg, endpoint2)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *splittri;<br/>
<b><a href="CppStruct.htm">struct</a></b> osub *splitsubseg;<br/>
vertex endpoint2;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub opposubseg;<br/>
&nbsp;&nbsp;vertex endpoint1;<br/>
&nbsp;&nbsp;vertex torg, tdest;<br/>
&nbsp;&nbsp;vertex leftvertex, rightvertex;<br/>
&nbsp;&nbsp;vertex newvertex;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> insertvertexresult success;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppEnum.htm">enum</a></b> finddirectionresult collinear;<br/>
&nbsp;&nbsp;REAL ex, ey;<br/>
&nbsp;&nbsp;REAL tx, ty;<br/>
&nbsp;&nbsp;REAL etx, ety;<br/>
&nbsp;&nbsp;REAL split, denom;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by onext(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by snext(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the other three segment endpoints. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;apex(*splittri, endpoint1);<br/>
&nbsp;&nbsp;org(*splittri, torg);<br/>
&nbsp;&nbsp;dest(*splittri, tdest);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Segment intersection formulae; see the Antonio reference. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;tx <a href="CppOperatorAssign.htm">=</a> tdest[0] <a href="CppOperatorMinus.htm">-</a> torg[0];<br/>
&nbsp;&nbsp;ty <a href="CppOperatorAssign.htm">=</a> tdest[1] <a href="CppOperatorMinus.htm">-</a> torg[1];<br/>
&nbsp;&nbsp;ex <a href="CppOperatorAssign.htm">=</a> endpoint2[0] <a href="CppOperatorMinus.htm">-</a> endpoint1[0];<br/>
&nbsp;&nbsp;ey <a href="CppOperatorAssign.htm">=</a> endpoint2[1] <a href="CppOperatorMinus.htm">-</a> endpoint1[1];<br/>
&nbsp;&nbsp;etx <a href="CppOperatorAssign.htm">=</a> torg[0] <a href="CppOperatorMinus.htm">-</a> endpoint2[0];<br/>
&nbsp;&nbsp;ety <a href="CppOperatorAssign.htm">=</a> torg[1] <a href="CppOperatorMinus.htm">-</a> endpoint2[1];<br/>
&nbsp;&nbsp;denom <a href="CppOperatorAssign.htm">=</a> ty * ex <a href="CppOperatorMinus.htm">-</a> tx * ey;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (denom <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in segmentintersection():");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Attempt to find intersection of parallel segments.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;split <a href="CppOperatorAssign.htm">=</a> (ey * etx <a href="CppOperatorMinus.htm">-</a> ex * ety) <a href="CppOperatorDivide.htm">/</a> denom;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create the <b><a href="CppNew.htm">new</a></b> vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;newvertex <a href="CppOperatorAssign.htm">=</a> (vertex) poolalloc(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Interpolate its coordinate and attributes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 2 <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newvertex[i] <a href="CppOperatorAssign.htm">=</a> torg[i] <a href="CppOperatorPlus.htm">+</a> split * (tdest[i] <a href="CppOperatorMinus.htm">-</a> torg[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;setvertexmark(newvertex, mark(*splitsubseg));<br/>
&nbsp;&nbsp;setvertextype(newvertex, INPUTVERTEX);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;Splitting subsegment (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) at (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; torg[0], torg[1], tdest[0], tdest[1], newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the intersection vertex.&nbsp;&nbsp;This should always succeed. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;success <a href="CppOperatorAssign.htm">=</a> insertvertex(m, b, newvertex, splittri, splitsubseg, 0, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (success <a href="CppOperatorNotEqual.htm">!=</a> SUCCESSFULVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in segmentintersection():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Failure to split a segment.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Record a triangle whose origin is the <b><a href="CppNew.htm">new</a></b> vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;setvertex2tri(newvertex, encode(*splittri));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;steinerleft &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;steinerleft<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Divide the segment into two, and correct the segment endpoints. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;ssymself(*splitsubseg);<br/>
&nbsp;&nbsp;spivot(*splitsubseg, opposubseg);<br/>
&nbsp;&nbsp;sdissolve(*splitsubseg);<br/>
&nbsp;&nbsp;sdissolve(opposubseg);<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setsegorg(*splitsubseg, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;snextself(*splitsubseg);<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (splitsubseg-&gt;ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub);<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setsegorg(opposubseg, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;snextself(opposubseg);<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (opposubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Inserting the vertex may have caused edge flips.&nbsp;&nbsp;We wish to rediscover <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the edge connecting endpoint1 to the <b><a href="CppNew.htm">new</a></b> intersection vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <b><a href="CppEnum.htm">enum</a></b> finddirectionresult collinear <a href="CppOperatorAssign.htm">=</a> <a href="CppComment.htm">*/</a>finddirection(m, b, splittri, endpoint1);<br/>
&nbsp;&nbsp;dest(*splittri, rightvertex);<br/>
&nbsp;&nbsp;apex(*splittri, leftvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((leftvertex[0] <a href="CppOperatorEqual.htm">==</a> endpoint1[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (leftvertex[1] <a href="CppOperatorEqual.htm">==</a> endpoint1[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;onextself(*splittri);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((rightvertex[0] <a href="CppOperatorNotEqual.htm">!=</a> endpoint1[0]) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (rightvertex[1] <a href="CppOperatorNotEqual.htm">!=</a> endpoint1[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in segmentintersection():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Topological inconsistency after splitting a segment.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `splittri' should have destination endpoint1. <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;scoutsegment()&nbsp;&nbsp; Scout the first triangle on the path from one endpoint&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to another, and check <b><a href="CppFor.htm">for</a></b> completion (reaching the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; second endpoint), a collinear vertex, or the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intersection of two segments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Returns one <b><a href="CppIf.htm">if</a></b> the entire segment is successfully inserted, and zero <b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the job must be finished by conformingedge() or constrainededge().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If the first triangle on the path has the second endpoint as its&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;destination or apex, a subsegment is inserted and the job is done.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If the first triangle on the path has a destination or apex that lies on <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the segment, a subsegment is inserted connecting the first endpoint to&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the collinear vertex, and the search is <b><a href="CppContinue.htm">continue</a></b>d from the collinear&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If the first triangle on the path has a subsegment opposite its origin,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;then there is a segment that intersects the segment being inserted.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Their intersection vertex is inserted, splitting the subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppInt.htm">int</a></b> scoutsegment(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppStruct.htm">struct</a></b> otri *searchtri,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertex endpoint2, <b><a href="CppInt.htm">int</a></b> newmark)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> scoutsegment(m, b, searchtri, endpoint2, newmark)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *searchtri;<br/>
vertex endpoint2;<br/>
<b><a href="CppInt.htm">int</a></b> newmark;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri crosstri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub crosssubseg;<br/>
&nbsp;&nbsp;vertex leftvertex, rightvertex;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppEnum.htm">enum</a></b> finddirectionresult collinear;<br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> finddirectionresult collinear <a href="CppOperatorAssign.htm">=</a> finddirection(m, b, searchtri, endpoint2);<br/>
&nbsp;&nbsp;dest(*searchtri, rightvertex);<br/>
&nbsp;&nbsp;apex(*searchtri, leftvertex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((leftvertex[0] <a href="CppOperatorEqual.htm">==</a> endpoint2[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (leftvertex[1] <a href="CppOperatorEqual.htm">==</a> endpoint2[1])) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((rightvertex[0] <a href="CppOperatorEqual.htm">==</a> endpoint2[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (rightvertex[1] <a href="CppOperatorEqual.htm">==</a> endpoint2[1]))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The segment is already an edge in the mesh. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((leftvertex[0] <a href="CppOperatorEqual.htm">==</a> endpoint2[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (leftvertex[1] <a href="CppOperatorEqual.htm">==</a> endpoint2[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert a subsegment, <b><a href="CppIf.htm">if</a></b> there isn't already one there. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;insertsubseg(m, b, searchtri, newmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (collinear <a href="CppOperatorEqual.htm">==</a> LEFTCOLLINEAR) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We've collided with a vertex between the segment's endpoints. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make the collinear vertex be the triangle's origin. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lprevself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;insertsubseg(m, b, searchtri, newmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the remainder of the segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> scoutsegment(m, b, searchtri, endpoint2, newmark);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (collinear <a href="CppOperatorEqual.htm">==</a> RIGHTCOLLINEAR) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We've collided with a vertex between the segment's endpoints. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;insertsubseg(m, b, searchtri, newmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make the collinear vertex be the triangle's origin. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(*searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the remainder of the segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> scoutsegment(m, b, searchtri, endpoint2, newmark);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnext(*searchtri, crosstri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tspivot(crosstri, crosssubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> a crossing segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (crosssubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert a vertex at the intersection. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentintersection(m, b, &amp;crosstri, &amp;crosssubseg, endpoint2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(crosstri, *searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertsubseg(m, b, searchtri, newmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the remainder of the segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> scoutsegment(m, b, searchtri, endpoint2, newmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;conformingedge()&nbsp;&nbsp; Force a segment into a conforming Delaunay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangulation by inserting a vertex at its mid<a href="CppPointer.htm">point</a>,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and recursively forcing in the two half-segments <b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; necessary.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Generates a sequence of subsegments connecting `endpoint1' to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`endpoint2'.&nbsp;&nbsp;`newmark' is the boundary marker of the segment, as<b><a href="CppSigned.htm">signed</a></b>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to each <b><a href="CppNew.htm">new</a></b> splitting vertex and subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Note that conformingedge() does not always maintain the conforming&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Delaunay property.&nbsp;&nbsp;Once inserted, segments are locked into place;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertices inserted later (to force other segments in) may render these&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;fixed segments non-Delaunay.&nbsp;&nbsp;The conforming Delaunay property will be&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;restored by enforcequality() by splitting encroached subsegments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> conformingedge(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex endpoint1, vertex endpoint2, <b><a href="CppInt.htm">int</a></b> newmark)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> conformingedge(m, b, endpoint1, endpoint2, newmark)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex endpoint1;<br/>
vertex endpoint2;<br/>
<b><a href="CppInt.htm">int</a></b> newmark;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri searchtri1, searchtri2;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub brokensubseg;<br/>
&nbsp;&nbsp;vertex newvertex;<br/>
&nbsp;&nbsp;vertex midvertex1, midvertex2;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> insertvertexresult success;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Forcing segment into triangulation by recursive splitting:\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n", endpoint1[0], endpoint1[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endpoint2[0], endpoint2[1]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create a <b><a href="CppNew.htm">new</a></b> vertex to insert in the middle of the segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;newvertex <a href="CppOperatorAssign.htm">=</a> (vertex) poolalloc(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Interpolate coordinates and attributes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 2 <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newvertex[i] <a href="CppOperatorAssign.htm">=</a> 0.5 * (endpoint1[i] <a href="CppOperatorPlus.htm">+</a> endpoint2[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;setvertexmark(newvertex, newmark);<br/>
&nbsp;&nbsp;setvertextype(newvertex, SEGMENTVERTEX);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> No known triangle to search from. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;searchtri1.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Attempt to insert the <b><a href="CppNew.htm">new</a></b> vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;success <a href="CppOperatorAssign.htm">=</a> insertvertex(m, b, newvertex, &amp;searchtri1, (<b><a href="CppStruct.htm">struct</a></b> osub *) <a href="CppNULL.htm">NULL</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (success <a href="CppOperatorEqual.htm">==</a> DUPLICATEVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Segment intersects existing vertex (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Use the vertex that's already there. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexdealloc(m, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(searchtri1, newvertex);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (success <a href="CppOperatorEqual.htm">==</a> VIOLATINGVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Two segments intersect at (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> By fluke, we've landed right on another segment.&nbsp;&nbsp;Split it. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(searchtri1, brokensubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success <a href="CppOperatorAssign.htm">=</a> insertvertex(m, b, newvertex, &amp;searchtri1, &amp;brokensubseg,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (success <a href="CppOperatorNotEqual.htm">!=</a> SUCCESSFULVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in conformingedge():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Failure to split a segment.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The vertex has been inserted successfully. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;steinerleft &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;steinerleft<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;otricopy(searchtri1, searchtri2);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `searchtri1' and `searchtri2' are fastened at their origins to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; `newvertex', and will be directed toward `endpoint1' and `endpoint2' <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; respectively.&nbsp;&nbsp;First, we must get `searchtri2' out of the way so it&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; won't be invalidated during the insertion of the first half of the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; segment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;finddirection(m, b, &amp;searchtri2, endpoint2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!scoutsegment(m, b, &amp;searchtri1, endpoint1, newmark)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The origin of searchtri1 may have changed <b><a href="CppIf.htm">if</a></b> a collision with an <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; intervening vertex on the segment occurred.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(searchtri1, midvertex1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conformingedge(m, b, midvertex1, endpoint1, newmark);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!scoutsegment(m, b, &amp;searchtri2, endpoint2, newmark)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The origin of searchtri2 may have changed <b><a href="CppIf.htm">if</a></b> a collision with an <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; intervening vertex on the segment occurred.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(searchtri2, midvertex2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;conformingedge(m, b, midvertex2, endpoint2, newmark);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;delaunayfixup()&nbsp;&nbsp; Enforce the Delaunay condition at an edge, fanning out <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recursively from an existing vertex.&nbsp;&nbsp;Pay special&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attention to stacking inverted triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This is a support routine <b><a href="CppFor.htm">for</a></b> inserting segments into a constrained&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Delaunay triangulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The origin of fixuptri is treated as <b><a href="CppIf.htm">if</a></b> it has just been inserted, and&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the local Delaunay condition needs to be enforced.&nbsp;&nbsp;It is only enforced&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;in one sector, however, that being the angular range defined by&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;fixuptri.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This routine also needs to <a href="CppMake.htm">make</a> decisions regarding the "stacking" of&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles.&nbsp;&nbsp;(Read the description of constrainededge() below before&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;reading on here, so you understand the <a href="CppAlgorithm.htm">algorithm</a>.)&nbsp;&nbsp;If the position of&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the <b><a href="CppNew.htm">new</a></b> vertex (the origin of fixuptri) indicates that the vertex before <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;it on the polygon is a reflex vertex, then "stack" the triangle by&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;doing nothing.&nbsp;&nbsp;(fixuptri is an inverted triangle, which is how stacked&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles are identified.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Otherwise, check whether the vertex before that was a reflex vertex.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If so, perform an edge flip, thereby eliminating an inverted triangle&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(popping it off the stack).&nbsp;&nbsp;The edge flip may result in the creation&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of a <b><a href="CppNew.htm">new</a></b> inverted triangle, depending on whether or not the <b><a href="CppNew.htm">new</a></b> vertex&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is visible to the vertex three edges behind on the polygon.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If neither of the two vertices behind the <b><a href="CppNew.htm">new</a></b> vertex are reflex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertices, fixuptri and fartri, the triangle opposite it, are not&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;inverted; hence, ensure that the edge between them is locally Delaunay.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`leftside' indicates whether or not fixuptri is to the left of the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;segment being inserted.&nbsp;&nbsp;(Imagine that the segment is <a href="CppPointer.htm">point</a>ing up from&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;endpoint1 to endpoint2.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> delaunayfixup(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> otri *fixuptri, <b><a href="CppInt.htm">int</a></b> leftside)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> delaunayfixup(m, b, fixuptri, leftside)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *fixuptri;<br/>
<b><a href="CppInt.htm">int</a></b> leftside;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri neartri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri fartri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub faredge;<br/>
&nbsp;&nbsp;vertex nearvertex, leftvertex, rightvertex, farvertex;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;lnext(*fixuptri, neartri);<br/>
&nbsp;&nbsp;sym(neartri, fartri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> the edge opposite the origin of fixuptri can be flipped. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (fartri.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;tspivot(neartri, faredge);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (faredge.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find all the relevant vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;apex(neartri, nearvertex);<br/>
&nbsp;&nbsp;org(neartri, leftvertex);<br/>
&nbsp;&nbsp;dest(neartri, rightvertex);<br/>
&nbsp;&nbsp;apex(fartri, farvertex);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the previous polygon vertex is a reflex vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (leftside) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, nearvertex, leftvertex, farvertex) <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> leftvertex is a reflex vertex too.&nbsp;&nbsp;Nothing can <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; be done until a convex section is found.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, farvertex, rightvertex, nearvertex) <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> rightvertex is a reflex vertex too.&nbsp;&nbsp;Nothing can <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; be done until a convex section is found.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, rightvertex, leftvertex, farvertex) &gt; 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> fartri is not an inverted triangle, and farvertex is not a reflex <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vertex.&nbsp;&nbsp;As there are no reflex vertices, fixuptri isn't an&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; inverted triangle, either.&nbsp;&nbsp;Hence, test the edge between the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangles to ensure it is locally Delaunay.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (incircle(m, b, leftvertex, farvertex, rightvertex, nearvertex) <a href="CppOperatorLessEqual.htm">&lt;=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not locally Delaunay; go on to an edge flip. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <b><a href="CppElse.htm">else</a></b> fartri is inverted; remove it from the stack by flipping. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;flip(m, b, &amp;neartri);<br/>
&nbsp;&nbsp;lprevself(*fixuptri);&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Restore the origin of fixuptri after the flip. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Recursively process the two triangles that result from the flip. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;delaunayfixup(m, b, fixuptri, leftside);<br/>
&nbsp;&nbsp;delaunayfixup(m, b, &amp;fartri, leftside);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;constrainededge()&nbsp;&nbsp; Force a segment into a constrained Delaunay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangulation by deleting the triangles it&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersects, and triangulating the polygons that&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;form on each side of it.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Generates a single subsegment connecting `endpoint1' to `endpoint2'.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The triangle `starttri' has `endpoint1' as its origin.&nbsp;&nbsp;`newmark' is the <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;boundary marker of the segment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;To insert a segment, every triangle whose interior intersects the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;segment is deleted.&nbsp;&nbsp;The <b><a href="CppUnion.htm">union</a></b> of these deleted triangles is a polygon&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(which is not necessarily monotone, but is close enough), which is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;divided into two polygons by the <b><a href="CppNew.htm">new</a></b> segment.&nbsp;&nbsp;This routine's task is&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to generate the Delaunay triangulation of these two polygons.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;You might think of <b><a href="CppThis.htm">this</a></b> routine's behavior as a two-step process.&nbsp;&nbsp;The&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;first step is to walk from endpoint1 to endpoint2, flipping each edge&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;en<a href="CppCounter.htm">counter</a>ed.&nbsp;&nbsp;This step creates a fan of edges connected to endpoint1,&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;including the desired edge to endpoint2.&nbsp;&nbsp;The second step enforces the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Delaunay condition on each side of the segment in an incremental manner: <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;proceeding along the polygon from endpoint1 to endpoint2 (<b><a href="CppThis.htm">this</a></b> is done&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;independently on each side of the segment), each vertex is "enforced"&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;as <b><a href="CppIf.htm">if</a></b> it had just been inserted, but affecting only the previous&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertices.&nbsp;&nbsp;The result is the same as <b><a href="CppIf.htm">if</a></b> the vertices had been inserted&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;in the order they appear on the polygon, so the result is Delaunay.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;In truth, constrainededge() interleaves these two steps.&nbsp;&nbsp;The procedure&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;walks from endpoint1 to endpoint2, and each <a href="CppTime.htm">time</a> an edge is en<a href="CppCounter.htm">counter</a>ed&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and flipped, the newly exposed vertex (at the far end of the flipped&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;edge) is "enforced" upon the previously flipped edges, usually affecting <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;only one side of the polygon (depending upon which side of the segment&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the vertex falls on).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The <a href="CppAlgorithm.htm">algorithm</a> is complicated by the need to handle polygons that are not <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;convex.&nbsp;&nbsp;Although the polygon is not necessarily monotone, it can be&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangulated in a manner similar to the stack-based <a href="CppAlgorithm.htm">algorithm</a>s <b><a href="CppFor.htm">for</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;monotone polygons.&nbsp;&nbsp;For each reflex vertex (local concavity) of the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;polygon, there will be an inverted triangle formed by one of the edge&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;flips.&nbsp;&nbsp;(An inverted triangle is one with negative area <a href="CppOperatorMinus.htm">-</a> that is, its&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertices are arranged in clockwise order <a href="CppOperatorMinus.htm">-</a> and is best thought of as a&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;wrinkle in the fabric of the mesh.)&nbsp;&nbsp;Each inverted triangle can be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;thought of as a reflex vertex pushed on the stack, waiting to be fixed&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;later.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A reflex vertex is popped from the stack when a vertex is inserted that&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is visible to the reflex vertex.&nbsp;&nbsp;(However, <b><a href="CppIf.htm">if</a></b> the vertex behind the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;reflex vertex is not visible to the reflex vertex, a <b><a href="CppNew.htm">new</a></b> inverted&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangle will take its place on the stack.)&nbsp;&nbsp;These details are handled&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;by the delaunayfixup() routine above.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> constrainededge(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> otri *starttri, vertex endpoint2, <b><a href="CppInt.htm">int</a></b> newmark)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> constrainededge(m, b, starttri, endpoint2, newmark)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> otri *starttri;<br/>
vertex endpoint2;<br/>
<b><a href="CppInt.htm">int</a></b> newmark;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri fixuptri, fixuptri2;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub crosssubseg;<br/>
&nbsp;&nbsp;vertex endpoint1;<br/>
&nbsp;&nbsp;vertex farvertex;<br/>
&nbsp;&nbsp;REAL area;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> collision;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> done;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym() and oprev(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;org(*starttri, endpoint1);<br/>
&nbsp;&nbsp;lnext(*starttri, fixuptri);<br/>
&nbsp;&nbsp;flip(m, b, &amp;fixuptri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `collision' indicates whether we have found a vertex directly <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; between endpoint1 and endpoint2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;collision <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;done <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(fixuptri, farvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> `farvertex' is the extreme <a href="CppPointer.htm">point</a> of the polygon we are "digging" <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to get from endpoint1 to endpoint2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((farvertex[0] <a href="CppOperatorEqual.htm">==</a> endpoint2[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (farvertex[1] <a href="CppOperatorEqual.htm">==</a> endpoint2[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprev(fixuptri, fixuptri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Enforce the Delaunay condition around endpoint2. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delaunayfixup(m, b, &amp;fixuptri, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delaunayfixup(m, b, &amp;fixuptri2, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether farvertex is to the left or right of the segment <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; being inserted, to decide which edge of fixuptri to dig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; through next.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, endpoint1, endpoint2, farvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (area <a href="CppOperatorEqual.htm">==</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We've collided with a vertex between endpoint1 and endpoint2. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;collision <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprev(fixuptri, fixuptri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Enforce the Delaunay condition around farvertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delaunayfixup(m, b, &amp;fixuptri, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delaunayfixup(m, b, &amp;fixuptri2, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (area &gt; 0.0) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> farvertex is to the left of the segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprev(fixuptri, fixuptri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Enforce the Delaunay condition around farvertex, on the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; left side of the segment only.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delaunayfixup(m, b, &amp;fixuptri2, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Flip the edge that crosses the segment.&nbsp;&nbsp;After the edge is <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; flipped, one of its endpoints is the fan vertex, and the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; destination of fixuptri is the fan vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(fixuptri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> farvertex is to the right of the segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delaunayfixup(m, b, &amp;fixuptri, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Flip the edge that crosses the segment.&nbsp;&nbsp;After the edge is <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; flipped, one of its endpoints is the fan vertex, and the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; destination of fixuptri is the fan vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprevself(fixuptri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> two intersecting segments. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(fixuptri, crosssubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (crosssubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flip(m, b, &amp;fixuptri);&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> May create inverted triangle at left. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> We've collided with a segment between endpoint1 and endpoint2. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;collision <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert a vertex at the intersection. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentintersection(m, b, &amp;fixuptri, &amp;crosssubseg, endpoint2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (!done);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert a subsegment to <a href="CppMake.htm">make</a> the segment permanent. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;insertsubseg(m, b, &amp;fixuptri, newmark);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If there was a collision with an interceding vertex, install another <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; segment connecting that vertex with endpoint2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (collision) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the remainder of the segment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!scoutsegment(m, b, &amp;fixuptri, endpoint2, newmark)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constrainededge(m, b, &amp;fixuptri, endpoint2, newmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;insertsegment()&nbsp;&nbsp; Insert a PSLG segment into a triangulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> insertsegment(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vertex endpoint1, vertex endpoint2, <b><a href="CppInt.htm">int</a></b> newmark)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> insertsegment(m, b, endpoint1, endpoint2, newmark)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
vertex endpoint1;<br/>
vertex endpoint2;<br/>
<b><a href="CppInt.htm">int</a></b> newmark;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri searchtri1, searchtri2;<br/>
&nbsp;&nbsp;triangle encodedtri;<br/>
&nbsp;&nbsp;vertex checkvertex;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Connecting (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) to (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endpoint1[0], endpoint1[1], endpoint2[0], endpoint2[1]);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a triangle whose origin is the segment's first endpoint. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;checkvertex <a href="CppOperatorAssign.htm">=</a> (vertex) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;encodedtri <a href="CppOperatorAssign.htm">=</a> vertex2tri(endpoint1);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (encodedtri <a href="CppOperatorNotEqual.htm">!=</a> (triangle) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;decode(encodedtri, searchtri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(searchtri1, checkvertex);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkvertex <a href="CppOperatorNotEqual.htm">!=</a> endpoint1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a boundary triangle to search from. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;searchtri1.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;searchtri1.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;symself(searchtri1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search <b><a href="CppFor.htm">for</a></b> the segment's first endpoint by <a href="CppPointer.htm">point</a> location. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (locate(m, b, endpoint1, &amp;searchtri1) <a href="CppOperatorNotEqual.htm">!=</a> ONVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Internal error in insertsegment():&nbsp;&nbsp;Unable to locate PSLG vertex\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) in triangulation.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endpoint1[0], endpoint1[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remember <b><a href="CppThis.htm">this</a></b> triangle to improve subsequent <a href="CppPointer.htm">point</a> location. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;otricopy(searchtri1, m-&gt;recenttri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Scout the beginnings of a path from the first endpoint <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; toward the second.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (scoutsegment(m, b, &amp;searchtri1, endpoint2, newmark)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The segment was easily inserted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The first endpoint may have changed <b><a href="CppIf.htm">if</a></b> a collision with an intervening <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vertex on the segment occurred.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(searchtri1, endpoint1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a triangle whose origin is the segment's second endpoint. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;checkvertex <a href="CppOperatorAssign.htm">=</a> (vertex) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;encodedtri <a href="CppOperatorAssign.htm">=</a> vertex2tri(endpoint2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (encodedtri <a href="CppOperatorNotEqual.htm">!=</a> (triangle) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;decode(encodedtri, searchtri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(searchtri2, checkvertex);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkvertex <a href="CppOperatorNotEqual.htm">!=</a> endpoint2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a boundary triangle to search from. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;searchtri2.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;searchtri2.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;symself(searchtri2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search <b><a href="CppFor.htm">for</a></b> the segment's second endpoint by <a href="CppPointer.htm">point</a> location. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (locate(m, b, endpoint2, &amp;searchtri2) <a href="CppOperatorNotEqual.htm">!=</a> ONVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Internal error in insertsegment():&nbsp;&nbsp;Unable to locate PSLG vertex\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) in triangulation.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endpoint2[0], endpoint2[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remember <b><a href="CppThis.htm">this</a></b> triangle to improve subsequent <a href="CppPointer.htm">point</a> location. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;otricopy(searchtri2, m-&gt;recenttri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Scout the beginnings of a path from the second endpoint <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; toward the first.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (scoutsegment(m, b, &amp;searchtri2, endpoint1, newmark)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The segment was easily inserted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The second endpoint may have changed <b><a href="CppIf.htm">if</a></b> a collision with an intervening <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vertex on the segment occurred.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;org(searchtri2, endpoint2);<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;splitseg) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert vertices to force the segment into the triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;conformingedge(m, b, endpoint1, endpoint2, newmark);<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the segment directly into the triangulation. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;constrainededge(m, b, &amp;searchtri1, endpoint2, newmark);<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;markhull()&nbsp;&nbsp; Cover the convex hull of a triangulation with subsegments.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> markhull(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> markhull(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri hulltri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri nexttri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri starttri;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym() and oprev(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a triangle handle on the hull. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;hulltri.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;hulltri.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;symself(hulltri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remember where we started so we know when to stop. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;otricopy(hulltri, starttri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Go once <a href="CppCounter.htm">counter</a>clockwise around the convex hull. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create a subsegment <b><a href="CppIf.htm">if</a></b> there isn't already one here. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;insertsubseg(m, b, &amp;hulltri, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> To find the next hull edge, go clockwise around the next vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(hulltri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;oprev(hulltri, nexttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (nexttri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(nexttri, hulltri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprev(hulltri, nexttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (!otriequal(hulltri, starttri));<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;formskeleton()&nbsp;&nbsp; Create the segments of a triangulation, including PSLG&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; segments and edges on the convex hull.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The PSLG segments are read from a .poly file.&nbsp;&nbsp;The <b><a href="CppReturn.htm">return</a></b> value is the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;number of segments in the file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> formskeleton(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppInt.htm">int</a></b> *segmentlist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *segmentmarkerlist, <b><a href="CppInt.htm">int</a></b> numberofsegments)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> formskeleton(m, b, segmentlist, segmentmarkerlist, numberofsegments)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> *segmentlist;<br/>
<b><a href="CppInt.htm">int</a></b> *segmentmarkerlist;<br/>
<b><a href="CppInt.htm">int</a></b> numberofsegments;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> formskeleton(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *polyfile, <b><a href="CppChar.htm">char</a></b> *polyfilename)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> formskeleton(m, b, polyfile, polyfilename)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppCfile.htm">FILE</a> *polyfile;<br/>
<b><a href="CppChar.htm">char</a></b> *polyfilename;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> polyfilename[6];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppChar.htm">char</a></b> *stringptr <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vertex endpoint1, endpoint2;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> segmentmarkers;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> end1, end2;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> boundmarker;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Recovering segments in Delaunay triangulation.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;strcpy(polyfilename, "input");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;insegments <a href="CppOperatorAssign.htm">=</a> numberofsegments;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;segmentmarkers <a href="CppOperatorAssign.htm">=</a> segmentmarkerlist <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the segments from a .poly file. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read number of segments and number of boundary markers. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> * stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, polyfile, polyfilename); <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;insegments <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentmarkers <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentmarkers <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the input vertices are collinear, there is no triangulation, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; so don't <b><a href="CppTry.htm">try</a></b> to insert segments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;triangles.items <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If segments are to be inserted, compute a mapping <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; from vertices to triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;insegments &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMake.htm">make</a>vertexmap(m, b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Recovering PSLG segments.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;boundmarker <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read and insert the segments. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;insegments; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end1 <a href="CppOperatorAssign.htm">=</a> segmentlist[index<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end2 <a href="CppOperatorAssign.htm">=</a> segmentlist[index<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (segmentmarkers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundmarker <a href="CppOperatorAssign.htm">=</a> segmentmarkerlist[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, polyfile, b-&gt;inpolyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>d has no endpoints in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i, polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end1 <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Segment <a href="CppOperatorModulus.htm">%</a>d is missing its second endpoint in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i, polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end2 <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (segmentmarkers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundmarker <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundmarker <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((end1 &lt; b-&gt;firstnumber) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(end1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> m-&gt;invertices)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Warning:&nbsp;&nbsp;Invalid first endpoint of segment <a href="CppOperatorModulus.htm">%</a>d in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i, polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((end2 &lt; b-&gt;firstnumber) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (end2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> m-&gt;invertices)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Warning:&nbsp;&nbsp;Invalid second endpoint of segment <a href="CppOperatorModulus.htm">%</a>d in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i, polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the vertices numbered `end1' and `end2'. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endpoint1 <a href="CppOperatorAssign.htm">=</a> getvertex(m, b, end1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endpoint2 <a href="CppOperatorAssign.htm">=</a> getvertex(m, b, end2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((endpoint1[0] <a href="CppOperatorEqual.htm">==</a> endpoint2[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (endpoint1[1] <a href="CppOperatorEqual.htm">==</a> endpoint2[1])) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Warning:&nbsp;&nbsp;End<a href="CppPointer.htm">point</a>s of segment <a href="CppOperatorModulus.htm">%</a>d are coincident in <a href="CppOperatorModulus.htm">%</a>s.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i, polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertsegment(m, b, endpoint1, endpoint2, boundmarker);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;insegments <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;convex <a href="CppOperatorLogicalOr.htm">||</a> !b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Enclose the convex hull with subsegments. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Enclosing convex hull with segments.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;markhull(m, b);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Segment insertion ends here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Carving out holes and concavities begins here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;infecthull()&nbsp;&nbsp; Virally infect all of the triangles of the convex hull&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; that are not <b><a href="CppProtected.htm">protected</a></b> by subsegments.&nbsp;&nbsp;Where there are&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subsegments, set boundary markers as appropriate.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> infecthull(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> infecthull(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri hulltri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri nexttri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri starttri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub hullsubseg;<br/>
&nbsp;&nbsp;triangle **deadtriangle;<br/>
&nbsp;&nbsp;vertex horg, hdest;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Marking concavities (<b><a href="CppExtern.htm">extern</a></b>al triangles) <b><a href="CppFor.htm">for</a></b> elimination.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a triangle handle on the hull. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;hulltri.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;hulltri.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;symself(hulltri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remember where we started so we know when to stop. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;otricopy(hulltri, starttri);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Go once <a href="CppCounter.htm">counter</a>clockwise around the convex hull. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ignore triangles that are already infected. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!infected(hulltri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is the triangle <b><a href="CppProtected.htm">protected</a></b> by a subsegment? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(hulltri, hullsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hullsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The triangle is not <b><a href="CppProtected.htm">protected</a></b>; infect it. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!infected(hulltri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infect(hulltri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deadtriangle <a href="CppOperatorAssign.htm">=</a> (triangle **) poolalloc(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*deadtriangle <a href="CppOperatorAssign.htm">=</a> hulltri.tri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The triangle is <b><a href="CppProtected.htm">protected</a></b>; set boundary markers <b><a href="CppIf.htm">if</a></b> appropriate. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mark(hullsubseg) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setmark(hullsubseg, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(hulltri, horg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(hulltri, hdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(horg) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(horg, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(hdest) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(hdest, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> To find the next hull edge, go clockwise around the next vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lnextself(hulltri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;oprev(hulltri, nexttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (nexttri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(nexttri, hulltri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprev(hulltri, nexttri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> (!otriequal(hulltri, starttri));<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;plague()&nbsp;&nbsp; Spread the virus from all infected triangles to <a href="CppAny.htm">any</a> neighbors <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not <b><a href="CppProtected.htm">protected</a></b> by subsegments.&nbsp;&nbsp;Delete all infected triangles. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This is the procedure that actually creates holes and concavities.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This procedure operates in two phases.&nbsp;&nbsp;The first phase identifies all&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the triangles that will die, and marks them as infected.&nbsp;&nbsp;They are&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;marked to ensure that each triangle is added to the virus pool only&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;once, so the procedure will terminate.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The second phase actually eliminates the infected triangles.&nbsp;&nbsp;It also&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;eliminates orphaned vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> plague(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> plague(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri testtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri neighbor;<br/>
&nbsp;&nbsp;triangle **virusloop;<br/>
&nbsp;&nbsp;triangle **deadtriangle;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub neighborsubseg;<br/>
&nbsp;&nbsp;vertex testvertex;<br/>
&nbsp;&nbsp;vertex norg, ndest;<br/>
&nbsp;&nbsp;vertex deadorg, deaddest, deadapex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> killorg;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym() and onext(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Marking neighbors of marked triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Loop through all the infected triangles, spreading the virus to <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; their neighbors, then to their neighbors' neighbors.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;virusloop <a href="CppOperatorAssign.htm">=</a> (triangle **) traverse(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (virusloop <a href="CppOperatorNotEqual.htm">!=</a> (triangle **) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;testtri.tri <a href="CppOperatorAssign.htm">=</a> *virusloop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> A triangle is marked as infected by messing with one of its <a href="CppPointer.htm">pointer</a>s <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to subsegments, setting it to an illegal value.&nbsp;&nbsp;Hence, we have to <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; temporarily uninfect <b><a href="CppThis.htm">this</a></b> triangle so that we can examine its&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent subsegments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;uninfect(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Assign the triangle an orientation <b><a href="CppFor.htm">for</a></b> convenience in <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; checking its vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testtri.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(testtri, deadorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(testtri, deaddest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(testtri, deadapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Checking (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deadorg[0], deadorg[1], deaddest[0], deaddest[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deadapex[0], deadapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check each of the triangle's three neighbors. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (testtri.orient <a href="CppOperatorAssign.htm">=</a> 0; testtri.orient &lt; 3; testtri.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the neighbor. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(testtri, neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> a subsegment between the triangle and its neighbor. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(testtri, neighborsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> the neighbor is nonexistent or already infected. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((neighbor.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) <a href="CppOperatorLogicalOr.htm">||</a> infected(neighbor)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (neighborsubseg.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There is a subsegment separating the triangle from its&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; neighbor, but both triangles are dying, so the subsegment <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; dies too.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subsegdealloc(m, neighborsubseg.ss);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (neighbor.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make sure the subsegment doesn't get deallocated again <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; later when the infected neighbor is visited.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uninfect(neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tsdissolve(neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infect(neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> The neighbor exists and is not infected. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (neighborsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There is no subsegment protecting the neighbor, so <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the neighbor becomes infected.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(neighbor, deadorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(neighbor, deaddest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(neighbor, deadapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;Marking (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deadorg[0], deadorg[1], deaddest[0], deaddest[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deadapex[0], deadapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infect(neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the neighbor's neighbors will be infected. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deadtriangle <a href="CppOperatorAssign.htm">=</a> (triangle **) poolalloc(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*deadtriangle <a href="CppOperatorAssign.htm">=</a> neighbor.tri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> The neighbor is <b><a href="CppProtected.htm">protected</a></b> by a subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remove <b><a href="CppThis.htm">this</a></b> triangle from the subsegment. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>issolve(neighborsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The subsegment becomes a boundary.&nbsp;&nbsp;Set markers accordingly. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mark(neighborsubseg) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setmark(neighborsubseg, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(neighbor, norg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(neighbor, ndest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(norg) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(norg, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vertexmark(ndest) <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(ndest, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remark the triangle as infected, so it doesn't get added to the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; virus pool again.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;infect(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;virusloop <a href="CppOperatorAssign.htm">=</a> (triangle **) traverse(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Deleting marked triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;virusloop <a href="CppOperatorAssign.htm">=</a> (triangle **) traverse(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (virusloop <a href="CppOperatorNotEqual.htm">!=</a> (triangle **) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;testtri.tri <a href="CppOperatorAssign.htm">=</a> *virusloop;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check each of the three corners of the triangle <b><a href="CppFor.htm">for</a></b> elimination. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; This is done by walking around each vertex, checking <b><a href="CppIf.htm">if</a></b> it is&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; still connected to at least one live triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (testtri.orient <a href="CppOperatorAssign.htm">=</a> 0; testtri.orient &lt; 3; testtri.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(testtri, testvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppIf.htm">if</a></b> the vertex has already been tested. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (testvertex <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killorg <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the corner of the triangle as having been tested. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(testtri, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Walk <a href="CppCounter.htm">counter</a>clockwise <a href="CppAbout.htm">about</a> the vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onext(testtri, neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Stop upon reaching a boundary or the starting triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((neighbor.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (!otriequal(neighbor, testtri))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infected(neighbor)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the corner of <b><a href="CppThis.htm">this</a></b> triangle as having been tested. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(neighbor, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> A live triangle.&nbsp;&nbsp;The vertex survives. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killorg <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Walk <a href="CppCounter.htm">counter</a>clockwise <a href="CppAbout.htm">about</a> the vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onextself(neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If we reached a boundary, we must walk clockwise as well. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (neighbor.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Walk clockwise <a href="CppAbout.htm">about</a> the vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprev(testtri, neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Stop upon reaching a boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (neighbor.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infected(neighbor)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark the corner of <b><a href="CppThis.htm">this</a></b> triangle as having been tested. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setorg(neighbor, <a href="CppNULL.htm">NULL</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> A live triangle.&nbsp;&nbsp;The vertex survives. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killorg <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Walk clockwise <a href="CppAbout.htm">about</a> the vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oprevself(neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (killorg) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Deleting vertex (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; testvertex[0], testvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(testvertex, UNDEADVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;undeads<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Record changes in the number of boundary edges, and disconnect <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; dead triangles from their neighbors.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (testtri.orient <a href="CppOperatorAssign.htm">=</a> 0; testtri.orient &lt; 3; testtri.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(testtri, neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (neighbor.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There is no neighboring triangle on <b><a href="CppThis.htm">this</a></b> edge, so <b><a href="CppThis.htm">this</a></b> edge&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; is a boundary edge.&nbsp;&nbsp;This triangle is being deleted, so <b><a href="CppThis.htm">this</a></b> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; boundary edge is deleted.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;hullsize<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Disconnect the triangle from its neighbor. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dissolve(neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> There is a neighboring triangle on <b><a href="CppThis.htm">this</a></b> edge, so <b><a href="CppThis.htm">this</a></b> edge <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; becomes a boundary edge when <b><a href="CppThis.htm">this</a></b> triangle is deleted.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;hullsize<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Return the dead triangle to the pool of triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangledealloc(m, testtri.tri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;virusloop <a href="CppOperatorAssign.htm">=</a> (triangle **) traverse(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Empty the virus pool. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;poolrestart(&amp;m-&gt;viri);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;regionplague()&nbsp;&nbsp; Spread regional attributes and/or area constraints&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (from a .poly file) throughout the mesh.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This procedure operates in two phases.&nbsp;&nbsp;The first phase spreads an&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;attribute and/or an area constraint through a (segment-bounded) region.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The triangles are marked to ensure that each triangle is added to the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;virus pool only once, so the procedure will terminate.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The second phase uninfects all infected triangles, <b><a href="CppReturn.htm">return</a></b>ing them to&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;normal.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> regionplague(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REAL attribute, REAL area)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> regionplague(m, b, attribute, area)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
REAL attribute;<br/>
REAL area;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri testtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri neighbor;<br/>
&nbsp;&nbsp;triangle **virusloop;<br/>
&nbsp;&nbsp;triangle **regiontri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub neighborsubseg;<br/>
&nbsp;&nbsp;vertex regionorg, regiondest, regionapex;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym() and onext(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Marking neighbors of marked triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Loop through all the infected triangles, spreading the attribute&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and/or area constraint to their neighbors, then to their neighbors' <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; neighbors.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;virusloop <a href="CppOperatorAssign.htm">=</a> (triangle **) traverse(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (virusloop <a href="CppOperatorNotEqual.htm">!=</a> (triangle **) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;testtri.tri <a href="CppOperatorAssign.htm">=</a> *virusloop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> A triangle is marked as infected by messing with one of its <a href="CppPointer.htm">pointer</a>s <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to subsegments, setting it to an illegal value.&nbsp;&nbsp;Hence, we have to <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; temporarily uninfect <b><a href="CppThis.htm">this</a></b> triangle so that we can examine its&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent subsegments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;uninfect(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;regionattrib) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set an attribute. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(testtri, m-&gt;eextras, attribute);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set an area constraint. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setareabound(testtri, area);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Assign the triangle an orientation <b><a href="CppFor.htm">for</a></b> convenience in <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; checking its vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testtri.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(testtri, regionorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(testtri, regiondest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(testtri, regionapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Checking (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionorg[0], regionorg[1], regiondest[0], regiondest[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionapex[0], regionapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check each of the triangle's three neighbors. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (testtri.orient <a href="CppOperatorAssign.htm">=</a> 0; testtri.orient &lt; 3; testtri.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the neighbor. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(testtri, neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> a subsegment between the triangle and its neighbor. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(testtri, neighborsubseg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make sure the neighbor exists, is not already infected, and <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; isn't <b><a href="CppProtected.htm">protected</a></b> by a subsegment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((neighbor.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !infected(neighbor)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (neighborsubseg.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(neighbor, regionorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(neighbor, regiondest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(neighbor, regionapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;Marking (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionorg[0], regionorg[1], regiondest[0], regiondest[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionapex[0], regionapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Infect the neighbor. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infect(neighbor);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the neighbor's neighbors will be infected. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regiontri <a href="CppOperatorAssign.htm">=</a> (triangle **) poolalloc(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*regiontri <a href="CppOperatorAssign.htm">=</a> neighbor.tri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Remark the triangle as infected, so it doesn't get added to the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; virus pool again.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;infect(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;virusloop <a href="CppOperatorAssign.htm">=</a> (triangle **) traverse(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Uninfect all triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Unmarking marked triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;virusloop <a href="CppOperatorAssign.htm">=</a> (triangle **) traverse(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (virusloop <a href="CppOperatorNotEqual.htm">!=</a> (triangle **) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;testtri.tri <a href="CppOperatorAssign.htm">=</a> *virusloop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;uninfect(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;virusloop <a href="CppOperatorAssign.htm">=</a> (triangle **) traverse(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Empty the virus pool. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;poolrestart(&amp;m-&gt;viri);<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;carveholes()&nbsp;&nbsp; Find the holes and infect them.&nbsp;&nbsp;Find the area&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; constraints and infect them.&nbsp;&nbsp;Infect the convex hull.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Spread the infection and kill triangles.&nbsp;&nbsp;Spread the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; area constraints.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This routine mainly calls other routines to carry out all these&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppFunction.htm">function</a>s.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppDefine.htm">#define</a> ANSI_DECLARATORS<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> carveholes(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, REAL *holelist, <b><a href="CppInt.htm">int</a></b> holes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REAL *regionlist, <b><a href="CppInt.htm">int</a></b> regions)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> carveholes(m, b, holelist, holes, regionlist, regions)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
REAL *holelist;<br/>
<b><a href="CppInt.htm">int</a></b> holes;<br/>
REAL *regionlist;<br/>
<b><a href="CppInt.htm">int</a></b> regions;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri searchtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri *regiontris;<br/>
&nbsp;&nbsp;triangle **holetri;<br/>
&nbsp;&nbsp;triangle **regiontri;<br/>
&nbsp;&nbsp;vertex searchorg, searchdest;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> locateresult intersect;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!(b-&gt;quiet <a href="CppOperatorLogicalOr.htm">||</a> (b-&gt;noholes <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> b-&gt;convex))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Removing unwanted triangles.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (holes &gt; 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Marking holes <b><a href="CppFor.htm">for</a></b> elimination.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (regions &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate storage <b><a href="CppFor.htm">for</a></b> the triangles in which region <a href="CppPointer.htm">point</a>s fall. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;regiontris <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> otri *) trimalloc(regions *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppStruct.htm">struct</a></b> otri));<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;regiontris <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> otri *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((holes &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b-&gt;noholes) <a href="CppOperatorLogicalOr.htm">||</a> !b-&gt;convex <a href="CppOperatorLogicalOr.htm">||</a> (regions &gt; 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> a pool of viri to be used <b><a href="CppFor.htm">for</a></b> holes, concavities, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; regional attributes, and/or regional area constraints.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;poolinit(&amp;m-&gt;viri, <b><a href="CppSizeof.htm">sizeof</a></b>(triangle *), VIRUSPERBLOCK, VIRUSPERBLOCK, 0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;convex) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Mark as infected <a href="CppAny.htm">any</a> un<b><a href="CppProtected.htm">protected</a></b> triangles on the boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; This is one way by which concavities are created.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;infecthull(m, b);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((holes &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b-&gt;noholes) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Infect each triangle in which a hole lies. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 2 * holes; i <a href="CppOperatorPlusAssign.htm">+=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ignore holes that aren't within the bounds of the mesh. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((holelist[i] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m-&gt;xmin) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (holelist[i] <a href="CppOperatorLessEqual.htm">&lt;=</a> m-&gt;xmax)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (holelist[i <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m-&gt;ymin) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (holelist[i <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> m-&gt;ymax)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Start searching from some triangle on the outer boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchtri.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchtri.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the hole is to the left of <b><a href="CppThis.htm">this</a></b> boundary edge; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; otherwise, locate() will <b><a href="CppFalse.htm">false</a></b>ly report that the hole&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; falls within the starting triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(searchtri, searchorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(searchtri, searchdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, searchorg, searchdest, &amp;holelist[i]) &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a triangle that contains the hole. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersect <a href="CppOperatorAssign.htm">=</a> locate(m, b, &amp;holelist[i], &amp;searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((intersect <a href="CppOperatorNotEqual.htm">!=</a> OUTSIDE) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (!infected(searchtri))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Infect the triangle.&nbsp;&nbsp;This is done by marking the triangle&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; as infected and including the triangle in the virus pool. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infect(searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;holetri <a href="CppOperatorAssign.htm">=</a> (triangle **) poolalloc(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*holetri <a href="CppOperatorAssign.htm">=</a> searchtri.tri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Now, we have to find all the regions BEFORE we carve the holes, because <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; locate() won't work when the triangulation is no longer convex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; (Incidentally, <b><a href="CppThis.htm">this</a></b> is the reason why regional attributes and area&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; constraints can't be used when refining a preexisting mesh, which&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; might not be convex; they can only be used with a freshly&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangulated PSLG.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (regions &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the starting triangle <b><a href="CppFor.htm">for</a></b> each region. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; regions; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regiontris[i].tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ignore region <a href="CppPointer.htm">point</a>s that aren't within the bounds of the mesh. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((regionlist[4 * i] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m-&gt;xmin) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (regionlist[4 * i] <a href="CppOperatorLessEqual.htm">&lt;=</a> m-&gt;xmax) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(regionlist[4 * i <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m-&gt;ymin) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(regionlist[4 * i <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorLessEqual.htm">&lt;=</a> m-&gt;ymax)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Start searching from some triangle on the outer boundary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchtri.tri <a href="CppOperatorAssign.htm">=</a> m-&gt;dummytri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchtri.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symself(searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the region <a href="CppPointer.htm">point</a> is to the left of <b><a href="CppThis.htm">this</a></b> boundary <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edge; otherwise, locate() will <b><a href="CppFalse.htm">false</a></b>ly report that the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; region <a href="CppPointer.htm">point</a> falls within the starting triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(searchtri, searchorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(searchtri, searchdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCounter.htm">counter</a>clockwise(m, b, searchorg, searchdest, &amp;regionlist[4 * i]) &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find a triangle that contains the region <a href="CppPointer.htm">point</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersect <a href="CppOperatorAssign.htm">=</a> locate(m, b, &amp;regionlist[4 * i], &amp;searchtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((intersect <a href="CppOperatorNotEqual.htm">!=</a> OUTSIDE) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (!infected(searchtri))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Record the triangle <b><a href="CppFor.htm">for</a></b> processing after the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; holes have been carved.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otricopy(searchtri, regiontris[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;viri.items &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Carve the holes and concavities. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;plague(m, b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The virus pool should be empty now. <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (regions &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;regionattrib) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;vararea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Spreading regional attributes and area constraints.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Spreading regional attributes.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> { <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Spreading regional area constraints.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;regionattrib <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b-&gt;refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Assign every triangle a regional attribute of zero. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setelemattribute(triangleloop, m-&gt;eextras, 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; regions; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (regiontris[i].tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make sure the triangle under consideration still exists. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; It may have been eaten by the virus.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!deadtri(regiontris[i].tri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Put one triangle in the virus pool. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infect(regiontris[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regiontri <a href="CppOperatorAssign.htm">=</a> (triangle **) poolalloc(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*regiontri <a href="CppOperatorAssign.htm">=</a> regiontris[i].tri;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Apply one region's attribute and/or area constraint. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionplague(m, b, regionlist[4 * i <a href="CppOperatorPlus.htm">+</a> 2], regionlist[4 * i <a href="CppOperatorPlus.htm">+</a> 3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The virus pool should be empty now. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;regionattrib <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b-&gt;refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Note the fact that each triangle has an additional attribute. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;eextras<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Free up <a href="CppMemory.htm">memory</a>. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((holes &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b-&gt;noholes) <a href="CppOperatorLogicalOr.htm">||</a> !b-&gt;convex <a href="CppOperatorLogicalOr.htm">||</a> (regions &gt; 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pooldeinit(&amp;m-&gt;viri);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (regions &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trifree((VOID *) regiontris);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Carving out holes and concavities ends here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>******** Mesh quality maintenance begins here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;tallyencs()&nbsp;&nbsp; Traverse the entire list of subsegments, and check each&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to see <b><a href="CppIf.htm">if</a></b> it is encroached.&nbsp;&nbsp;If so, add it to the list.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> tallyencs(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> tallyencs(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub subsegloop;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> dummy;<br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;subsegs);<br/>
&nbsp;&nbsp;subsegloop.ssorient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;subsegloop.ss <a href="CppOperatorAssign.htm">=</a> subsegtraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (subsegloop.ss <a href="CppOperatorNotEqual.htm">!=</a> (subseg *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the segment is encroached, add it to the list. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>dummy <a href="CppOperatorAssign.htm">=</a> <a href="CppComment.htm">*/</a>checkseg4encroach(m, b, &amp;subsegloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;subsegloop.ss <a href="CppOperatorAssign.htm">=</a> subsegtraverse(m);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;precisionerror()&nbsp;&nbsp;Print an error message <b><a href="CppFor.htm">for</a></b> precision problems.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> precisionerror()<br/>
{<br/>
&nbsp;&nbsp;printf("Try increasing the area criterion and/or reducing the minimum\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;allowable angle so that tiny triangles are not created.\n");<br/>
<a href="CppIfdef.htm">#ifdef</a> SINGLE<br/>
&nbsp;&nbsp;printf("Alternatively, <b><a href="CppTry.htm">try</a></b> recompiling me with <b><a href="CppDouble.htm">double</a></b> precision\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;arithmetic (by removing \"<a href="CppDefine.htm">#define</a> SINGLE\" from the\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;source file or \"-DSINGLE\" from the <a href="CppMakefile.htm">makefile</a>).\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> SINGLE <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;splitencsegs()&nbsp;&nbsp; Split all the encroached subsegments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Each encroached subsegment is repaired by splitting it <a href="CppOperatorMinus.htm">-</a> inserting a&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;vertex at or near its mid<a href="CppPointer.htm">point</a>.&nbsp;&nbsp;Newly inserted vertices may encroach&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;upon other subsegments; these are also repaired.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`triflaws' is a flag that specifies whether one should take note of <b><a href="CppNew.htm">new</a></b>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;bad triangles that result from inserting vertices to repair encroached&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;subsegments.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> splitencsegs(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppInt.htm">int</a></b> triflaws)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> splitencsegs(m, b, triflaws)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> triflaws;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri enctri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri testtri;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub testsh;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub currentenc;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badsubseg *encloop;<br/>
&nbsp;&nbsp;vertex eorg, edest, eapex;<br/>
&nbsp;&nbsp;vertex newvertex;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> insertvertexresult success;<br/>
&nbsp;&nbsp;REAL segmentlength, nearestpoweroftwo;<br/>
&nbsp;&nbsp;REAL split;<br/>
&nbsp;&nbsp;REAL multiplier, divisor;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> acuteorg, acuteorg2, acutedest, acutedest2;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> dummy;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by stpivot(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by snext(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Note that steinerleft <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1 <b><a href="CppIf.htm">if</a></b> an unlimited number <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of Steiner <a href="CppPointer.htm">point</a>s is allowed.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((m-&gt;badsubsegs.items &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (m-&gt;steinerleft <a href="CppOperatorNotEqual.htm">!=</a> 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;traversalinit(&amp;m-&gt;badsubsegs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;encloop <a href="CppOperatorAssign.htm">=</a> badsubsegtraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((encloop <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppStruct.htm">struct</a></b> badsubseg *) <a href="CppNULL.htm">NULL</a>) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (m-&gt;steinerleft <a href="CppOperatorNotEqual.htm">!=</a> 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sdecode(encloop-&gt;encsubseg, currentenc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sorg(currentenc, eorg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sdest(currentenc, edest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make sure that <b><a href="CppThis.htm">this</a></b> segment is still the same segment it was&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; when it was determined to be encroached.&nbsp;&nbsp;If the segment was <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; enqueued multiple <a href="CppTime.htm">time</a>s (because several newly inserted&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vertices encroached it), it may have already been split.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!deadsubseg(currentenc.ss) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(eorg <a href="CppOperatorEqual.htm">==</a> encloop-&gt;subsegorg) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (edest <a href="CppOperatorEqual.htm">==</a> encloop-&gt;subsegdest)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> To decide where to split a segment, we need to know <b><a href="CppIf.htm">if</a></b> the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; segment shares an endpoint with an adjacent segment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; The concern is that, <b><a href="CppIf.htm">if</a></b> we simply split every encroached&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; segment in its center, two adjacent segments with a small&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; angle between them might lead to an infinite loop; each&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; vertex added to split one segment will encroach upon the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; other segment, which must then be split with a vertex that <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; will encroach upon the first segment, and so on forever.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> To avoid <b><a href="CppThis.htm">this</a></b>, imagine a set of concentric circles, whose&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; radii are powers of two, <a href="CppAbout.htm">about</a> each segment endpoint.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; These concentric circles determine where the segment is&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; split.&nbsp;&nbsp;(If both endpoints are shared with adjacent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; segments, split the segment in the middle, and apply the&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; concentric circles <b><a href="CppFor.htm">for</a></b> later splittings.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is the origin shared with another segment? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stpivot(currentenc, enctri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnext(enctri, testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(testtri, testsh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acuteorg <a href="CppOperatorAssign.htm">=</a> testsh.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is the destination shared with another segment? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(testtri, testsh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acutedest <a href="CppOperatorAssign.htm">=</a> testsh.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If we're <b><a href="CppUsing.htm">using</a></b> Chew's <a href="CppAlgorithm.htm">algorithm</a> (rather than Ruppert's) <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; to define encroachment, <b><a href="CppDelete.htm">delete</a></b> free vertices from the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; subsegment's diametral circle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;conformdel <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !acuteorg <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !acutedest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(enctri, eapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((vertextype(eapex) <a href="CppOperatorEqual.htm">==</a> FREEVERTEX) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((eorg[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) * (edest[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(eorg[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) * (edest[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) &lt; 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deletevertex(m, b, &amp;testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stpivot(currentenc, enctri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(enctri, eapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprev(enctri, testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Now, check the other side of the segment, <b><a href="CppIf.htm">if</a></b> there's a triangle <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; there.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(enctri, testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (testtri.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is the destination shared with another segment? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(testtri, testsh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acutedest2 <a href="CppOperatorAssign.htm">=</a> testsh.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acutedest <a href="CppOperatorAssign.htm">=</a> acutedest <a href="CppOperatorLogicalOr.htm">||</a> acutedest2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Is the origin shared with another segment? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lnextself(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(testtri, testsh);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acuteorg2 <a href="CppOperatorAssign.htm">=</a> testsh.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acuteorg <a href="CppOperatorAssign.htm">=</a> acuteorg <a href="CppOperatorLogicalOr.htm">||</a> acuteorg2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Delete free vertices from the subsegment's diametral circle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;conformdel <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !acuteorg2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !acutedest2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(testtri, eapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((vertextype(eapex) <a href="CppOperatorEqual.htm">==</a> FREEVERTEX) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((eorg[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) * (edest[0] <a href="CppOperatorMinus.htm">-</a> eapex[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(eorg[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) * (edest[1] <a href="CppOperatorMinus.htm">-</a> eapex[1]) &lt; 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deletevertex(m, b, &amp;testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(enctri, testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apex(testtri, eapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(testtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Use the concentric circles <b><a href="CppIf.htm">if</a></b> exactly one endpoint is shared <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; with another adjacent segment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (acuteorg <a href="CppOperatorLogicalOr.htm">||</a> acutedest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segmentlength <a href="CppOperatorAssign.htm">=</a> sqrt((edest[0] <a href="CppOperatorMinus.htm">-</a> eorg[0]) * (edest[0] <a href="CppOperatorMinus.htm">-</a> eorg[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (edest[1] <a href="CppOperatorMinus.htm">-</a> eorg[1]) * (edest[1] <a href="CppOperatorMinus.htm">-</a> eorg[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the power of two that most evenly splits the segment.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; The worst <b><a href="CppCase.htm">case</a></b> is a 2:1 ratio between subsegment lengths. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nearestpoweroftwo <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (segmentlength &gt; 3.0 * nearestpoweroftwo) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nearestpoweroftwo <a href="CppOperatorMultiplyAssign.htm">*=</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (segmentlength &lt; 1.5 * nearestpoweroftwo) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nearestpoweroftwo <a href="CppOperatorMultiplyAssign.htm">*=</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Where <b><a href="CppDo.htm">do</a></b> we split the segment? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;split <a href="CppOperatorAssign.htm">=</a> nearestpoweroftwo <a href="CppOperatorDivide.htm">/</a> segmentlength;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (acutedest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;split <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> split;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If we're not worried <a href="CppAbout.htm">about</a> adjacent segments, split <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <b><a href="CppThis.htm">this</a></b> segment in the middle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;split <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create the <b><a href="CppNew.htm">new</a></b> vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newvertex <a href="CppOperatorAssign.htm">=</a> (vertex) poolalloc(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Interpolate its coordinate and attributes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 2 <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newvertex[i] <a href="CppOperatorAssign.htm">=</a> eorg[i] <a href="CppOperatorPlus.htm">+</a> split * (edest[i] <a href="CppOperatorMinus.htm">-</a> eorg[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;noexact) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Roundoff in the above calculation may yield a `newvertex'&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; that is not precisely collinear with `eorg' and `edest'.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Improve collinearity by one step of iterative refinement. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;multiplier <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, eorg, edest, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;divisor <a href="CppOperatorAssign.htm">=</a> ((eorg[0] <a href="CppOperatorMinus.htm">-</a> edest[0]) * (eorg[0] <a href="CppOperatorMinus.htm">-</a> edest[0]) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (eorg[1] <a href="CppOperatorMinus.htm">-</a> edest[1]) * (eorg[1] <a href="CppOperatorMinus.htm">-</a> edest[1]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((multiplier <a href="CppOperatorNotEqual.htm">!=</a> 0.0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (divisor <a href="CppOperatorNotEqual.htm">!=</a> 0.0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;multiplier <a href="CppOperatorAssign.htm">=</a> multiplier <a href="CppOperatorDivide.htm">/</a> divisor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Watch out <b><a href="CppFor.htm">for</a></b> NANs. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (multiplier <a href="CppOperatorEqual.htm">==</a> multiplier) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newvertex[0] <a href="CppOperatorPlusAssign.htm">+=</a> multiplier * (edest[1] <a href="CppOperatorMinus.htm">-</a> eorg[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newvertex[1] <a href="CppOperatorPlusAssign.htm">+=</a> multiplier * (eorg[0] <a href="CppOperatorMinus.htm">-</a> edest[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(newvertex, mark(currentenc));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(newvertex, SEGMENTVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;"&nbsp;&nbsp;Splitting subsegment (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) at (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eorg[0], eorg[1], edest[0], edest[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the <b><a href="CppNew.htm">new</a></b> vertex lies on an endpoint. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((newvertex[0] <a href="CppOperatorEqual.htm">==</a> eorg[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (newvertex[1] <a href="CppOperatorEqual.htm">==</a> eorg[1])) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((newvertex[0] <a href="CppOperatorEqual.htm">==</a> edest[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (newvertex[1] <a href="CppOperatorEqual.htm">==</a> edest[1]))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Ran out of precision at (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("I attempted to split a segment to a smaller size than\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;can be accommodated by the finite precision of\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;floating <a href="CppPointer.htm">point</a> arithmetic.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;precisionerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the splitting vertex.&nbsp;&nbsp;This should always succeed. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success <a href="CppOperatorAssign.htm">=</a> insertvertex(m, b, newvertex, &amp;enctri, &amp;currentenc,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1, triflaws);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((success <a href="CppOperatorNotEqual.htm">!=</a> SUCCESSFULVERTEX) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (success <a href="CppOperatorNotEqual.htm">!=</a> ENCROACHINGVERTEX)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Internal error in splitencsegs():\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Failure to split a segment.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;steinerleft &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;steinerleft<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check the two <b><a href="CppNew.htm">new</a></b> subsegments to see <b><a href="CppIf.htm">if</a></b> they're encroached. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>dummy <a href="CppOperatorAssign.htm">=</a> <a href="CppComment.htm">*/</a>checkseg4encroach(m, b, &amp;currentenc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snextself(currentenc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>dummy <a href="CppOperatorAssign.htm">=</a> <a href="CppComment.htm">*/</a>checkseg4encroach(m, b, &amp;currentenc);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;badsubsegdealloc(m, encloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encloop <a href="CppOperatorAssign.htm">=</a> badsubsegtraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;tallyfaces()&nbsp;&nbsp; Test every triangle in the mesh <b><a href="CppFor.htm">for</a></b> quality measures.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> tallyfaces(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> tallyfaces(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Making a list of bad triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the triangle is bad, enqueue it. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;testtriangle(m, b, &amp;triangleloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;splittriangle()&nbsp;&nbsp; Inserts a vertex at the circumcenter of a triangle.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deletes the newly inserted vertex <b><a href="CppIf.htm">if</a></b> it encroaches&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upon a segment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> splittriangle(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> badtriang *badtri)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> splittriangle(m, b, badtri)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppStruct.htm">struct</a></b> badtriang *badtri;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri badotri;<br/>
&nbsp;&nbsp;vertex borg, bdest, bapex;<br/>
&nbsp;&nbsp;vertex newvertex;<br/>
&nbsp;&nbsp;REAL xi, eta;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> insertvertexresult success;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> errorflag;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;decode(badtri-&gt;poortri, badotri);<br/>
&nbsp;&nbsp;org(badotri, borg);<br/>
&nbsp;&nbsp;dest(badotri, bdest);<br/>
&nbsp;&nbsp;apex(badotri, bapex);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make sure that <b><a href="CppThis.htm">this</a></b> triangle is still the same triangle it was&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; when it was tested and determined to be of bad quality.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Subsequent transformations may have made it a different triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!deadtri(badotri.tri) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (borg <a href="CppOperatorEqual.htm">==</a> badtri-&gt;triangorg) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(bdest <a href="CppOperatorEqual.htm">==</a> badtri-&gt;triangdest) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (bapex <a href="CppOperatorEqual.htm">==</a> badtri-&gt;triangapex)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Splitting <b><a href="CppThis.htm">this</a></b> triangle at its circumcenter:\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n", borg[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; borg[1], bdest[0], bdest[1], bapex[0], bapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;errorflag <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create a <b><a href="CppNew.htm">new</a></b> vertex at the triangle's circumcenter. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;newvertex <a href="CppOperatorAssign.htm">=</a> (vertex) poolalloc(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;findcircumcenter(m, b, borg, bdest, bapex, newvertex, &amp;xi, &amp;eta, 1);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check whether the <b><a href="CppNew.htm">new</a></b> vertex lies on a triangle vertex. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (((newvertex[0] <a href="CppOperatorEqual.htm">==</a> borg[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (newvertex[1] <a href="CppOperatorEqual.htm">==</a> borg[1])) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((newvertex[0] <a href="CppOperatorEqual.htm">==</a> bdest[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (newvertex[1] <a href="CppOperatorEqual.htm">==</a> bdest[1])) <a href="CppOperatorLogicalOr.htm">||</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((newvertex[0] <a href="CppOperatorEqual.htm">==</a> bapex[0]) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (newvertex[1] <a href="CppOperatorEqual.htm">==</a> bapex[1]))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Warning:&nbsp;&nbsp;New vertex (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) falls on existing vertex.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorflag <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexdealloc(m, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 2; i &lt; 2 <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Interpolate the vertex attributes at the circumcenter. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newvertex[i] <a href="CppOperatorAssign.htm">=</a> borg[i] <a href="CppOperatorPlus.htm">+</a> xi * (bdest[i] <a href="CppOperatorMinus.htm">-</a> borg[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> eta * (bapex[i] <a href="CppOperatorMinus.htm">-</a> borg[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The <b><a href="CppNew.htm">new</a></b> vertex must be in the interior, and therefore is a <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; free vertex with a marker of zero.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(newvertex, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(newvertex, FREEVERTEX);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that the handle `badotri' does not represent the longest&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; edge of the triangle.&nbsp;&nbsp;This ensures that the circumcenter must <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; fall to the left of <b><a href="CppThis.htm">this</a></b> edge, so <a href="CppPointer.htm">point</a> location will work.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; (If the angle org-apex-dest exceeds 90 degrees, then the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; circumcenter lies outside the org-dest edge, and eta is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; negative.&nbsp;&nbsp;Roundoff error might prevent eta from being&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; negative when it should be, so I test eta against xi.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (eta &lt; xi) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lprevself(badotri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert the circumcenter, searching from the edge of the triangle, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and maintain the Delaunay property of the triangulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success <a href="CppOperatorAssign.htm">=</a> insertvertex(m, b, newvertex, &amp;badotri, (<b><a href="CppStruct.htm">struct</a></b> osub *) <a href="CppNULL.htm">NULL</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (success <a href="CppOperatorEqual.htm">==</a> SUCCESSFULVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;steinerleft &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;steinerleft<a href="CppOperatorDecrement.htm">--</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (success <a href="CppOperatorEqual.htm">==</a> ENCROACHINGVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the newly inserted vertex encroaches upon a subsegment, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; <b><a href="CppDelete.htm">delete</a></b> the <b><a href="CppNew.htm">new</a></b> vertex.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;undovertex(m, b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Rejecting (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n", newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexdealloc(m, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (success <a href="CppOperatorEqual.htm">==</a> VIOLATINGVERTEX) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Failed to insert the <b><a href="CppNew.htm">new</a></b> vertex, but some subsegment was <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; marked as being encroached.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexdealloc(m, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> success <a href="CppOperatorEqual.htm">==</a> DUPLICATEVERTEX <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Couldn't insert the <b><a href="CppNew.htm">new</a></b> vertex because a vertex is already there. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Warning:&nbsp;&nbsp;New vertex (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) falls on existing vertex.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorflag <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexdealloc(m, newvertex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (errorflag) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;The <b><a href="CppNew.htm">new</a></b> vertex is at the circumcenter of triangle\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;(%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g) (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g)\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; borg[0], borg[1], bdest[0], bdest[1], bapex[0], bapex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("This probably means that I am trying to refine triangles\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;to a smaller size than can be accommodated by the finite\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;precision of floating <a href="CppPointer.htm">point</a> arithmetic.&nbsp;&nbsp;(You can be\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;sure of <b><a href="CppThis.htm">this</a></b> <b><a href="CppIf.htm">if</a></b> I fail to terminate.)\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;precisionerror();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1); <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;enforcequality()&nbsp;&nbsp; Remove all the encroached subsegments and bad&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangles from the triangulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> enforcequality(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> enforcequality(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> badtriang *badtri;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("<a href="CppAdd.htm">Add</a>ing Steiner <a href="CppPointer.htm">point</a>s to enforce quality.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the pool of encroached subsegments. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;poolinit(&amp;m-&gt;badsubsegs, <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppStruct.htm">struct</a></b> badsubseg), BADSUBSEGPERBLOCK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BADSUBSEGPERBLOCK, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Looking <b><a href="CppFor.htm">for</a></b> encroached subsegments.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Test all segments to see <b><a href="CppIf.htm">if</a></b> they're encroached. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;tallyencs(m, b);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (m-&gt;badsubsegs.items &gt; 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Splitting encroached subsegments.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Fix encroached subsegments without noting bad triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;splitencsegs(m, b, 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> At <b><a href="CppThis.htm">this</a></b> <a href="CppPointer.htm">point</a>, <b><a href="CppIf.htm">if</a></b> we haven't run out of Steiner <a href="CppPointer.htm">point</a>s, the <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangulation should be (conforming) Delaunay.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Next, we worry <a href="CppAbout.htm">about</a> enforcing triangle quality. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((b-&gt;minangle &gt; 0.0) <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;vararea <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;fixedarea <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;usertest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the pool of bad triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;poolinit(&amp;m-&gt;badtriangles, <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppStruct.htm">struct</a></b> badtriang), BADTRIPERBLOCK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BADTRIPERBLOCK, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the queues of bad triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 4096; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;queuefront[i] <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppStruct.htm">struct</a></b> badtriang *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;firstnonemptyq <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Test all triangles to see <b><a href="CppIf.htm">if</a></b> they're bad. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;tallyfaces(m, b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppInitialize.htm">Initialize</a> the pool of recently flipped triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;poolinit(&amp;m-&gt;flipstackers, <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppStruct.htm">struct</a></b> flipstacker), FLIPSTACKERPERBLOCK,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FLIPSTACKERPERBLOCK, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;checkquality <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Splitting bad triangles.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((m-&gt;badtriangles.items &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (m-&gt;steinerleft <a href="CppOperatorNotEqual.htm">!=</a> 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Fix one bad triangle by inserting a vertex at its circumcenter. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;badtri <a href="CppOperatorAssign.htm">=</a> dequeuebadtriang(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splittriangle(m, b, badtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;badsubsegs.items &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Put bad triangle back in queue <b><a href="CppFor.htm">for</a></b> another <b><a href="CppTry.htm">try</a></b> later. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueuebadtriang(m, b, badtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Fix <a href="CppAny.htm">any</a> encroached subsegments that resulted. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Record <a href="CppAny.htm">any</a> <b><a href="CppNew.htm">new</a></b> bad triangles that result.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splitencsegs(m, b, 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Return the bad triangle to the pool. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pooldealloc(&amp;m-&gt;badtriangles, (VOID *) badtri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> At <b><a href="CppThis.htm">this</a></b> <a href="CppPointer.htm">point</a>, <b><a href="CppIf.htm">if</a></b> the "-D" <b><a href="CppSwitch.htm">switch</a></b> was selected and we haven't run out&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; of Steiner <a href="CppPointer.htm">point</a>s, the triangulation should be (conforming) Delaunay <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and have no low-quality triangles.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Might we have run out of Steiner <a href="CppPointer.htm">point</a>s too soon? <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> b-&gt;conformdel <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (m-&gt;badsubsegs.items &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(m-&gt;steinerleft <a href="CppOperatorEqual.htm">==</a> 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\nWarning:&nbsp;&nbsp;I ran out of Steiner <a href="CppPointer.htm">point</a>s, but the mesh has\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;badsubsegs.items <a href="CppOperatorEqual.htm">==</a> 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;one encroached subsegment, and therefore might not be truly\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld encroached subsegments, and therefore might not be truly\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , m-&gt;badsubsegs.items);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Delaunay.&nbsp;&nbsp;If the Delaunay property is important to you,\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> increasing the number of Steiner <a href="CppPointer.htm">point</a>s (controlled by\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;the <a href="CppOperatorMinus.htm">-</a>S <b><a href="CppSwitch.htm">switch</a></b>) slightly and <b><a href="CppTry.htm">try</a></b> again.\n\n");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** Mesh quality maintenance ends here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;highorder()&nbsp;&nbsp; Create extra nodes <b><a href="CppFor.htm">for</a></b> quadratic subparametric elements.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> highorder(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> highorder(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop, trisym;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub checkmark;<br/>
&nbsp;&nbsp;vertex newvertex;<br/>
&nbsp;&nbsp;vertex torg, tdest;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("<a href="CppAdd.htm">Add</a>ing vertices <b><a href="CppFor.htm">for</a></b> second-order triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The following line ensures that dead items in the pool of nodes&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; cannot be allocated <b><a href="CppFor.htm">for</a></b> the extra nodes associated with high&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; order elements.&nbsp;&nbsp;This ensures that the primary nodes (at the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; corners of elements) will occur earlier in the output files, and <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; have lower indices, than the extra nodes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;vertices.deaditemstack <a href="CppOperatorAssign.htm">=</a> (VOID *) <a href="CppNULL.htm">NULL</a>;<br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> To loop over the set of edges, loop over all triangles, and look at&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the three edges of each triangle.&nbsp;&nbsp;If there isn't another triangle&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent to the edge, operate on the edge.&nbsp;&nbsp;If there is another&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent triangle, operate on the edge only <b><a href="CppIf.htm">if</a></b> the current triangle <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; has a smaller <a href="CppPointer.htm">pointer</a> than its neighbor.&nbsp;&nbsp;This way, each edge is&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; considered only once.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0; triangleloop.orient &lt; 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleloop.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(triangleloop, trisym);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((triangleloop.tri &lt; trisym.tri) <a href="CppOperatorLogicalOr.htm">||</a> (trisym.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, torg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, tdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Create a <b><a href="CppNew.htm">new</a></b> node in the middle of the edge.&nbsp;&nbsp;Interpolate <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; its attributes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newvertex <a href="CppOperatorAssign.htm">=</a> (vertex) poolalloc(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 2 <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newvertex[i] <a href="CppOperatorAssign.htm">=</a> 0.5 * (torg[i] <a href="CppOperatorPlus.htm">+</a> tdest[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set the <b><a href="CppNew.htm">new</a></b> node's marker to zero or one, depending on <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; whether it lies on a boundary.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(newvertex, trisym.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(newvertex,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trisym.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri ? FREEVERTEX : SEGMENTVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(triangleloop, checkmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If <b><a href="CppThis.htm">this</a></b> edge is a segment, transfer the marker to the <b><a href="CppNew.htm">new</a></b> node. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkmark.ss <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummysub) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(newvertex, mark(checkmark));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(newvertex, SEGMENTVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Creating (%.12g, <a href="CppOperatorModulus.htm">%</a>.12g).\n", newvertex[0], newvertex[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Record the <b><a href="CppNew.htm">new</a></b> node in the (one or two) adjacent elements. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri[m-&gt;highorderindex <a href="CppOperatorPlus.htm">+</a> triangleloop.orient] <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(triangle) newvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (trisym.tri <a href="CppOperatorNotEqual.htm">!=</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trisym.tri[m-&gt;highorderindex <a href="CppOperatorPlus.htm">+</a> trisym.orient] <a href="CppOperatorAssign.htm">=</a> (triangle) newvertex;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>******** File I/O routines begin here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;readline()&nbsp;&nbsp; Read a nonempty line from a file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;A line is considered "nonempty" <b><a href="CppIf.htm">if</a></b> it contains something that looks like <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;a number.&nbsp;&nbsp;Comments (prefaced by `#') are ignored.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppChar.htm">char</a></b> *readline(<b><a href="CppChar.htm">char</a></b> *string, <a href="CppCfile.htm">FILE</a> *infile, <b><a href="CppChar.htm">char</a></b> *infilename)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppChar.htm">char</a></b> *readline(string, infile, infilename)<br/>
<b><a href="CppChar.htm">char</a></b> *string;<br/>
<a href="CppCfile.htm">FILE</a> *infile;<br/>
<b><a href="CppChar.htm">char</a></b> *infilename;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *result <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Search <b><a href="CppFor.htm">for</a></b> something that looks like a number. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>printf("Result: &lt;begin&gt;%s&lt;end&gt;\n",string); <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result <a href="CppOperatorAssign.htm">=</a> fgets(string, INPUTLINESIZE, infile);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>printf("Result: &lt;begin&gt;%s&lt;end&gt;\n",result); <a href="CppComment.htm">//</a>RJCB<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (result <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppChar.htm">char</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!result) { <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>printf("Error:&nbsp;&nbsp;Unexpected end of file in <a href="CppOperatorModulus.htm">%</a>s.\n", infilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Skip <a href="CppAny.htm">any</a>thing that doesn't look like a number, a comment, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; or the end of a line.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((*result <a href="CppOperatorNotEqual.htm">!=</a> '\0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '#')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '.') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '+') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '-')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((*result &lt; '0') <a href="CppOperatorLogicalOr.htm">||</a> (*result &gt; '9'))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If it's a comment or end of line, read another line and <b><a href="CppTry.htm">try</a></b> again. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;} <b><a href="CppWhile.htm">while</a></b> ((*result <a href="CppOperatorEqual.htm">==</a> '#') <a href="CppOperatorLogicalOr.htm">||</a> (*result <a href="CppOperatorEqual.htm">==</a> '\0'));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;findfield()&nbsp;&nbsp; Find the next field of a string.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Jumps past the current field by searching <b><a href="CppFor.htm">for</a></b> whitespace, then jumps&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;past the whitespace to find the next field.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppChar.htm">char</a></b> *findfield(<b><a href="CppChar.htm">char</a></b> *string)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppChar.htm">char</a></b> *findfield(string)<br/>
<b><a href="CppChar.htm">char</a></b> *string;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *result;<br/>
<br/>
&nbsp;&nbsp;result <a href="CppOperatorAssign.htm">=</a> string;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Skip the current field.&nbsp;&nbsp;Stop upon reaching whitespace. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((*result <a href="CppOperatorNotEqual.htm">!=</a> '\0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '#')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> ' ') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '\t')) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Now skip the whitespace and <a href="CppAny.htm">any</a>thing <b><a href="CppElse.htm">else</a></b> that doesn't look like a <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; number, a comment, or the end of a line.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((*result <a href="CppOperatorNotEqual.htm">!=</a> '\0') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '#')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '.') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '+') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*result <a href="CppOperatorNotEqual.htm">!=</a> '-')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> ((*result &lt; '0') <a href="CppOperatorLogicalOr.htm">||</a> (*result &gt; '9'))) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Check <b><a href="CppFor.htm">for</a></b> a comment (prefixed with `#'). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*result <a href="CppOperatorEqual.htm">==</a> '#') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*result <a href="CppOperatorAssign.htm">=</a> '\0';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;readnodes()&nbsp;&nbsp; Read the vertices from a file, which may be a .node or&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.poly file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<br/>
<a href="CppDefine.htm">#define</a> ANSI_DECLARATORS <a href="CppComment.htm">//</a>RJCB<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> readnodes(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *nodefilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppChar.htm">char</a></b> *polyfilename, <a href="CppCfile.htm">FILE</a> **polyfile)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> readnodes(m, b, nodefilename, polyfilename, polyfile)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *nodefilename;<br/>
<b><a href="CppChar.htm">char</a></b> *polyfilename;<br/>
<a href="CppCfile.htm">FILE</a> **polyfile;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *infile;<br/>
&nbsp;&nbsp;vertex vertexloop;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppChar.htm">char</a></b> *stringptr <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *infilename;<br/>
&nbsp;&nbsp;REAL x, y;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> firstnode;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nodemarkers;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> currentmarker;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the vertices from a .poly file. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*polyfile <a href="CppOperatorAssign.htm">=</a> fopen(polyfilename, "r");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*polyfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read number of vertices, number of dimensions, number of vertex <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; attributes, and number of boundary markers.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> * stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, *polyfile, polyfilename); <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;invertices <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;mesh_dim <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;mesh_dim <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextras <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextras <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodemarkers <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodemarkers <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;invertices &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infile <a href="CppOperatorAssign.htm">=</a> *polyfile;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infilename <a href="CppOperatorAssign.htm">=</a> polyfilename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;readnodefile <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If the .poly file claims there are zero vertices, that means that <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the vertices should be read from a separate .node file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;readnodefile <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infilename <a href="CppOperatorAssign.htm">=</a> nodefilename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;readnodefile <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;infilename <a href="CppOperatorAssign.htm">=</a> nodefilename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*polyfile <a href="CppOperatorAssign.htm">=</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;readnodefile) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the vertices from a .node file. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Opening <a href="CppOperatorModulus.htm">%</a>s.\n", nodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;infile <a href="CppOperatorAssign.htm">=</a> fopen(nodefilename, "r");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (infile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot access file <a href="CppOperatorModulus.htm">%</a>s.\n", nodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read number of vertices, number of dimensions, number of vertex <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; attributes, and number of boundary markers.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> * stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, nodefilename); <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;invertices <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;mesh_dim <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;mesh_dim <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextras <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextras <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodemarkers <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodemarkers <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;invertices &lt; 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Input must have at least three input vertices.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;mesh_dim <a href="CppOperatorNotEqual.htm">!=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Triangle only works with two-dimensional meshes.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;nextras <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;weighted <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>vertexpool(m, b);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;invertices; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> (vertex) poolalloc(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> * stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, infile, infilename); <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstnode <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((firstnode <a href="CppOperatorEqual.htm">==</a> 0) <a href="CppOperatorLogicalOr.htm">||</a> (firstnode <a href="CppOperatorEqual.htm">==</a> 1)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;firstnumber <a href="CppOperatorAssign.htm">=</a> firstnode;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Vertex <a href="CppOperatorModulus.htm">%</a>d has no x coordinate.\n", b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Vertex <a href="CppOperatorModulus.htm">%</a>d has no y coordinate.\n", b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexloop[0] <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexloop[1] <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the vertex attributes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 2; j &lt; 2 <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexloop[j] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexloop[j] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nodemarkers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read a vertex marker. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(vertexloop, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentmarker <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(vertexloop, currentmarker);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If no markers are specified in the file, they <b><a href="CppDefault.htm">default</a></b> to zero. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(vertexloop, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(vertexloop, INPUTVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Determine the smallest and largest x and y coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;xmin <a href="CppOperatorAssign.htm">=</a> m-&gt;xmax <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;ymin <a href="CppOperatorAssign.htm">=</a> m-&gt;ymax <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;xmin <a href="CppOperatorAssign.htm">=</a> (x &lt; m-&gt;xmin) ? x : m-&gt;xmin;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;xmax <a href="CppOperatorAssign.htm">=</a> (x &gt; m-&gt;xmax) ? x : m-&gt;xmax;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;ymin <a href="CppOperatorAssign.htm">=</a> (y &lt; m-&gt;ymin) ? y : m-&gt;ymin;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;ymax <a href="CppOperatorAssign.htm">=</a> (y &gt; m-&gt;ymax) ? y : m-&gt;ymax;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;readnodefile) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fclose(infile);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Nonexistent x value used as a flag to mark circle events in sweepline <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Delaunay <a href="CppAlgorithm.htm">algorithm</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;xminextreme <a href="CppOperatorAssign.htm">=</a> 10 * m-&gt;xmin <a href="CppOperatorMinus.htm">-</a> 9 * m-&gt;xmax;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;transfernodes()&nbsp;&nbsp; Read the vertices from <a href="CppMemory.htm">memory</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> transfernodes(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, REAL *<a href="CppPointer.htm">point</a>list,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REAL *<a href="CppPointer.htm">point</a>attriblist, <b><a href="CppInt.htm">int</a></b> *<a href="CppPointer.htm">point</a>markerlist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> numberof<a href="CppPointer.htm">point</a>s, <b><a href="CppInt.htm">int</a></b> numberof<a href="CppPointer.htm">point</a>attribs)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> transfernodes(m, b, <a href="CppPointer.htm">point</a>list, <a href="CppPointer.htm">point</a>attriblist, <a href="CppPointer.htm">point</a>markerlist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numberof<a href="CppPointer.htm">point</a>s, numberof<a href="CppPointer.htm">point</a>attribs)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
REAL *<a href="CppPointer.htm">point</a>list;<br/>
REAL *<a href="CppPointer.htm">point</a>attriblist;<br/>
<b><a href="CppInt.htm">int</a></b> *<a href="CppPointer.htm">point</a>markerlist;<br/>
<b><a href="CppInt.htm">int</a></b> numberof<a href="CppPointer.htm">point</a>s;<br/>
<b><a href="CppInt.htm">int</a></b> numberof<a href="CppPointer.htm">point</a>attribs;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;vertex vertexloop;<br/>
&nbsp;&nbsp;REAL x, y;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> coordindex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> att<a href="CppRibi.htm">ribi</a>ndex;<br/>
<br/>
&nbsp;&nbsp;m-&gt;invertices <a href="CppOperatorAssign.htm">=</a> numberof<a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;m-&gt;mesh_dim <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;m-&gt;nextras <a href="CppOperatorAssign.htm">=</a> numberof<a href="CppPointer.htm">point</a>attribs;<br/>
&nbsp;&nbsp;m-&gt;readnodefile <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;invertices &lt; 3) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Input must have at least three input vertices.\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;nextras <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;weighted <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>vertexpool(m, b);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;coordindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;att<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;invertices; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> (vertex) poolalloc(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the vertex coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> vertexloop[0] <a href="CppOperatorAssign.htm">=</a> <a href="CppPointer.htm">point</a>list[coordindex<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> vertexloop[1] <a href="CppOperatorAssign.htm">=</a> <a href="CppPointer.htm">point</a>list[coordindex<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the vertex attributes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; numberof<a href="CppPointer.htm">point</a>attribs; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexloop[2 <a href="CppOperatorPlus.htm">+</a> j] <a href="CppOperatorAssign.htm">=</a> <a href="CppPointer.htm">point</a>attriblist[att<a href="CppRibi.htm">ribi</a>ndex<a href="CppOperatorIncrement.htm">++</a>];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppPointer.htm">point</a>markerlist <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read a vertex marker. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(vertexloop, <a href="CppPointer.htm">point</a>markerlist[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If no markers are specified, they <b><a href="CppDefault.htm">default</a></b> to zero. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(vertexloop, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setvertextype(vertexloop, INPUTVERTEX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Determine the smallest and largest x and y coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;xmin <a href="CppOperatorAssign.htm">=</a> m-&gt;xmax <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;ymin <a href="CppOperatorAssign.htm">=</a> m-&gt;ymax <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;xmin <a href="CppOperatorAssign.htm">=</a> (x &lt; m-&gt;xmin) ? x : m-&gt;xmin;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;xmax <a href="CppOperatorAssign.htm">=</a> (x &gt; m-&gt;xmax) ? x : m-&gt;xmax;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;ymin <a href="CppOperatorAssign.htm">=</a> (y &lt; m-&gt;ymin) ? y : m-&gt;ymin;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;ymax <a href="CppOperatorAssign.htm">=</a> (y &gt; m-&gt;ymax) ? y : m-&gt;ymax;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Nonexistent x value used as a flag to mark circle events in sweepline <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Delaunay <a href="CppAlgorithm.htm">algorithm</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m-&gt;xminextreme <a href="CppOperatorAssign.htm">=</a> 10 * m-&gt;xmin <a href="CppOperatorMinus.htm">-</a> 9 * m-&gt;xmax;<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;readholes()&nbsp;&nbsp; Read the holes, and possibly regional attributes and area&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraints, from a .poly file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> readholes(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppCfile.htm">FILE</a> *polyfile, <b><a href="CppChar.htm">char</a></b> *polyfilename, REAL **hlist, <b><a href="CppInt.htm">int</a></b> *holes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REAL **rlist, <b><a href="CppInt.htm">int</a></b> *regions)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> readholes(m, b, polyfile, polyfilename, hlist, holes, rlist, regions)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppCfile.htm">FILE</a> *polyfile;<br/>
<b><a href="CppChar.htm">char</a></b> *polyfilename;<br/>
REAL **hlist;<br/>
<b><a href="CppInt.htm">int</a></b> *holes;<br/>
REAL **rlist;<br/>
<b><a href="CppInt.htm">int</a></b> *regions;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;REAL *holelist;<br/>
&nbsp;&nbsp;REAL *regionlist;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> inputline[INPUTLINESIZE];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppChar.htm">char</a></b> *stringptr <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the holes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> * stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, polyfile, polyfilename); <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;*holes <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*holes &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;holelist <a href="CppOperatorAssign.htm">=</a> (REAL *) trimalloc(2 * *holes * (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*hlist <a href="CppOperatorAssign.htm">=</a> holelist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 2 * *holes; i <a href="CppOperatorPlusAssign.htm">+=</a> 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, polyfile, polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Hole <a href="CppOperatorModulus.htm">%</a>d has no x coordinate.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> (i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;holelist[i] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Hole <a href="CppOperatorModulus.htm">%</a>d has no y coordinate.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> (i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;holelist[i <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*hlist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((b-&gt;regionattrib <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;vararea) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b-&gt;refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read the area constraints. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, polyfile, polyfilename);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (stringptr <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppGoto.htm">goto</a></b> my_end; <a href="CppComment.htm">//</a>RJCB<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*regions <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) strtol(stringptr, &amp;stringptr, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*regions &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist <a href="CppOperatorAssign.htm">=</a> (REAL *) trimalloc(4 * *regions * (<b><a href="CppInt.htm">int</a></b>) <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rlist <a href="CppOperatorAssign.htm">=</a> regionlist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; *regions; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> readline(inputline, polyfile, polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Region <a href="CppOperatorModulus.htm">%</a>d has no x coordinate.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Error:&nbsp;&nbsp;Region <a href="CppOperatorModulus.htm">%</a>d has no y coordinate.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Error:&nbsp;&nbsp;Region <a href="CppOperatorModulus.htm">%</a>d has no region attribute or area constraint.\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stringptr <a href="CppOperatorAssign.htm">=</a> findfield(stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*stringptr <a href="CppOperatorEqual.htm">==</a> '\0') {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist[index] <a href="CppOperatorAssign.htm">=</a> regionlist[index <a href="CppOperatorMinus.htm">-</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist[index] <a href="CppOperatorAssign.htm">=</a> (REAL) strtod(stringptr, &amp;stringptr);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_end: ;<a href="CppComment.htm">//</a>RJCB<br/>
<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Set `*regions' to zero to avoid an accidental free() later. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;*regions <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*rlist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;fclose(polyfile);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;finishfile()&nbsp;&nbsp; Write the command line to the output file so the user&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; can remember how the file was generated.&nbsp;&nbsp;Close the file. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> finishfile(<a href="CppCfile.htm">FILE</a> *outfile, <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<a href="CppCfile.htm">FILE</a> *outfile;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;fprintf(outfile, "# Generated by");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; <a href="CppArgc.htm">argc</a>; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, " ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fputs(<a href="CppArgc.htm">argv</a>[i], outfile);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;fprintf(outfile, "\n");<br/>
&nbsp;&nbsp;fclose(outfile);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;writenodes()&nbsp;&nbsp; Number the vertices and write them to a .node file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;To save <a href="CppMemory.htm">memory</a>, the vertex numbers are written over the boundary markers <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;after the vertices are written to a file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writenodes(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, REAL **<a href="CppPointer.htm">point</a>list,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REAL **<a href="CppPointer.htm">point</a>attriblist, <b><a href="CppInt.htm">int</a></b> **<a href="CppPointer.htm">point</a>markerlist)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writenodes(m, b, <a href="CppPointer.htm">point</a>list, <a href="CppPointer.htm">point</a>attriblist, <a href="CppPointer.htm">point</a>markerlist)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
REAL **<a href="CppPointer.htm">point</a>list;<br/>
REAL **<a href="CppPointer.htm">point</a>attriblist;<br/>
<b><a href="CppInt.htm">int</a></b> **<a href="CppPointer.htm">point</a>markerlist;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writenodes(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *nodefilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writenodes(m, b, nodefilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *nodefilename;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;REAL *plist;<br/>
&nbsp;&nbsp;REAL *palist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *pmlist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> coordindex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> att<a href="CppRibi.htm">ribi</a>ndex;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *outfile;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vertex vertexloop;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> outvertices;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vertexnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;jettison) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;outvertices <a href="CppOperatorAssign.htm">=</a> m-&gt;vertices.items <a href="CppOperatorMinus.htm">-</a> m-&gt;undeads;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;outvertices <a href="CppOperatorAssign.htm">=</a> m-&gt;vertices.items;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing vertices.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output vertices <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*<a href="CppPointer.htm">point</a>list <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppPointer.htm">point</a>list <a href="CppOperatorAssign.htm">=</a> (REAL *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (outvertices * 2 * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output vertex attributes <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((m-&gt;nextras &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*<a href="CppPointer.htm">point</a>attriblist <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppPointer.htm">point</a>attriblist <a href="CppOperatorAssign.htm">=</a> (REAL *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (outvertices * m-&gt;nextras *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppSizeof.htm">sizeof</a></b>(REAL)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output vertex markers <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;nobound <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*<a href="CppPointer.htm">point</a>markerlist <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppPointer.htm">point</a>markerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (outvertices * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;plist <a href="CppOperatorAssign.htm">=</a> *<a href="CppPointer.htm">point</a>list;<br/>
&nbsp;&nbsp;palist <a href="CppOperatorAssign.htm">=</a> *<a href="CppPointer.htm">point</a>attriblist;<br/>
&nbsp;&nbsp;pmlist <a href="CppOperatorAssign.htm">=</a> *<a href="CppPointer.htm">point</a>markerlist;<br/>
&nbsp;&nbsp;coordindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;att<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s.\n", nodefilename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;outfile <a href="CppOperatorAssign.htm">=</a> fopen(nodefilename, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (outfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot create file <a href="CppOperatorModulus.htm">%</a>s.\n", nodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of vertices, number of dimensions, number of vertex attributes, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and number of boundary markers (zero or one).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "%ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", outvertices, m-&gt;mesh_dim,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextras, 1 <a href="CppOperatorMinus.htm">-</a> b-&gt;nobound);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;vertexnumber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (vertexloop <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;jettison <a href="CppOperatorLogicalOr.htm">||</a> (vertextype(vertexloop) <a href="CppOperatorNotEqual.htm">!=</a> UNDEADVERTEX)) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> X and y coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plist[coordindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexloop[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plist[coordindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexloop[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Vertex attributes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;palist[att<a href="CppRibi.htm">ribi</a>ndex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexloop[2 <a href="CppOperatorPlus.htm">+</a> i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;nobound) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Copy the boundary marker. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pmlist[vertexnumber <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber] <a href="CppOperatorAssign.htm">=</a> vertexmark(vertexloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Vertex number, x and y coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4d&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g", vertexnumber, vertexloop[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexloop[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Write an attribute. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g", vertexloop[i <a href="CppOperatorPlus.htm">+</a> 2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;nobound) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Write the boundary marker. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", vertexmark(vertexloop));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(vertexloop, vertexnumber);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexnumber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;numbernodes()&nbsp;&nbsp; Number the vertices.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Each vertex is as<b><a href="CppSigned.htm">signed</a></b> a marker equal to its number.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Used when writenodes() is not called because no .node file is written.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> numbernodes(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> numbernodes(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;vertex vertexloop;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vertexnumber;<br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;vertexnumber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (vertexloop <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;setvertexmark(vertexloop, vertexnumber);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;jettison <a href="CppOperatorLogicalOr.htm">||</a> (vertextype(vertexloop) <a href="CppOperatorNotEqual.htm">!=</a> UNDEADVERTEX)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexnumber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;writeelements()&nbsp;&nbsp; Write the triangles to an .ele file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writeelements(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> **trianglelist, REAL **triangleattriblist)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writeelements(m, b, trianglelist, triangleattriblist)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> **trianglelist;<br/>
REAL **triangleattriblist;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writeelements(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *elefilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writeelements(m, b, elefilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *elefilename;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *tlist;<br/>
&nbsp;&nbsp;REAL *talist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> vertexindex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> att<a href="CppRibi.htm">ribi</a>ndex;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *outfile;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
&nbsp;&nbsp;vertex p1, p2, p3;<br/>
&nbsp;&nbsp;vertex mid1, mid2, mid3;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> elementnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing triangles.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output triangles <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*trianglelist <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*trianglelist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;triangles.items *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((b-&gt;order <a href="CppOperatorPlus.htm">+</a> 1) * (b-&gt;order <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2) * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output triangle attributes <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((m-&gt;eextras &gt; 0) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*triangleattriblist <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*triangleattriblist <a href="CppOperatorAssign.htm">=</a> (REAL *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;triangles.items *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;eextras *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSizeof.htm">sizeof</a></b>(REAL)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;tlist <a href="CppOperatorAssign.htm">=</a> *trianglelist;<br/>
&nbsp;&nbsp;talist <a href="CppOperatorAssign.htm">=</a> *triangleattriblist;<br/>
&nbsp;&nbsp;vertexindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;att<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s.\n", elefilename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;outfile <a href="CppOperatorAssign.htm">=</a> fopen(elefilename, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (outfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot create file <a href="CppOperatorModulus.htm">%</a>s.\n", elefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of triangles, vertices per triangle, attributes per triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "%ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;triangles.items,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(b-&gt;order <a href="CppOperatorPlus.htm">+</a> 1) * (b-&gt;order <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorDivide.htm">/</a> 2, m-&gt;eextras);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;elementnumber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, p1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, p2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(triangleloop, p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;order <a href="CppOperatorEqual.htm">==</a> 1) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(p1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(p2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(p3);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Triangle number, indices <b><a href="CppFor.htm">for</a></b> three vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d", elementnumber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(p1), vertexmark(p2), vertexmark(p3));<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid1 <a href="CppOperatorAssign.htm">=</a> (vertex) triangleloop.tri[m-&gt;highorderindex <a href="CppOperatorPlus.htm">+</a> 1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid2 <a href="CppOperatorAssign.htm">=</a> (vertex) triangleloop.tri[m-&gt;highorderindex <a href="CppOperatorPlus.htm">+</a> 2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid3 <a href="CppOperatorAssign.htm">=</a> (vertex) triangleloop.tri[m-&gt;highorderindex];<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(p1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(p2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(mid1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(mid2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tlist[vertexindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(mid3);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Triangle number, indices <b><a href="CppFor.htm">for</a></b> six vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d", elementnumber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(p1), vertexmark(p2), vertexmark(p3), vertexmark(mid1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(mid2), vertexmark(mid3));<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;eextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;talist[att<a href="CppRibi.htm">ribi</a>ndex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> elemattribute(triangleloop, i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; m-&gt;eextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g", elemattribute(triangleloop, i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elementnumber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;writepoly()&nbsp;&nbsp; Write the segments and holes to a .poly file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writepoly(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> **segmentlist, <b><a href="CppInt.htm">int</a></b> **segmentmarkerlist)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writepoly(m, b, segmentlist, segmentmarkerlist)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> **segmentlist;<br/>
<b><a href="CppInt.htm">int</a></b> **segmentmarkerlist;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writepoly(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *polyfilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REAL *holelist, <b><a href="CppInt.htm">int</a></b> holes, REAL *regionlist, <b><a href="CppInt.htm">int</a></b> regions,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writepoly(m, b, polyfilename, holelist, holes, regionlist, regions,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *polyfilename;<br/>
REAL *holelist;<br/>
<b><a href="CppInt.htm">int</a></b> holes;<br/>
REAL *regionlist;<br/>
<b><a href="CppInt.htm">int</a></b> regions;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *slist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *smlist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *outfile;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> hol<b><a href="CppEnum.htm">enum</a></b>ber, regionnumber;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub subsegloop;<br/>
&nbsp;&nbsp;vertex endpoint1, endpoint2;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> subsegnumber;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing segments.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output segments <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*segmentlist <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*segmentlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;subsegs.items * 2 *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output segment markers <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;nobound <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*segmentmarkerlist <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*segmentmarkerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;subsegs.items *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;slist <a href="CppOperatorAssign.htm">=</a> *segmentlist;<br/>
&nbsp;&nbsp;smlist <a href="CppOperatorAssign.htm">=</a> *segmentmarkerlist;<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s.\n", polyfilename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;outfile <a href="CppOperatorAssign.htm">=</a> fopen(polyfilename, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (outfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot create file <a href="CppOperatorModulus.htm">%</a>s.\n", polyfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The zero indicates that the vertices are in a separate .node file. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; Followed by number of dimensions, number of vertex attributes,&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and number of boundary markers (zero or one).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "%d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", 0, m-&gt;mesh_dim, m-&gt;nextras,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 <a href="CppOperatorMinus.htm">-</a> b-&gt;nobound);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of segments, number of boundary markers (zero or one). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "%ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;subsegs.items, 1 <a href="CppOperatorMinus.htm">-</a> b-&gt;nobound);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;subsegs);<br/>
&nbsp;&nbsp;subsegloop.ss <a href="CppOperatorAssign.htm">=</a> subsegtraverse(m);<br/>
&nbsp;&nbsp;subsegloop.ssorient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;subsegnumber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (subsegloop.ss <a href="CppOperatorNotEqual.htm">!=</a> (subseg *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sorg(subsegloop, endpoint1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sdest(subsegloop, endpoint2);<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Copy indices of the segment's two endpoints. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;slist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(endpoint1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;slist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(endpoint2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;nobound) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Copy the boundary marker. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smlist[subsegnumber <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber] <a href="CppOperatorAssign.htm">=</a> mark(subsegloop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Segment number, indices of its two endpoints, and possibly a marker. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;nobound) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d\n", subsegnumber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(endpoint1), vertexmark(endpoint2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d\n", subsegnumber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(endpoint1), vertexmark(endpoint2), mark(subsegloop));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;subsegloop.ss <a href="CppOperatorAssign.htm">=</a> subsegtraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;subsegnumber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;fprintf(outfile, "%d\n", holes);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (holes &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (hol<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> 0; hol<b><a href="CppEnum.htm">enum</a></b>ber &lt; holes; hol<b><a href="CppEnum.htm">enum</a></b>ber<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Hole number, x and y coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g\n", b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> hol<b><a href="CppEnum.htm">enum</a></b>ber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;holelist[2 * hol<b><a href="CppEnum.htm">enum</a></b>ber], holelist[2 * hol<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorPlus.htm">+</a> 1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (regions &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%d\n", regions);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (regionnumber <a href="CppOperatorAssign.htm">=</a> 0; regionnumber &lt; regions; regionnumber<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Region number, x and y coordinates, attribute, maximum area. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b-&gt;firstnumber <a href="CppOperatorPlus.htm">+</a> regionnumber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist[4 * regionnumber], regionlist[4 * regionnumber <a href="CppOperatorPlus.htm">+</a> 1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist[4 * regionnumber <a href="CppOperatorPlus.htm">+</a> 2],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regionlist[4 * regionnumber <a href="CppOperatorPlus.htm">+</a> 3]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;writeedges()&nbsp;&nbsp; Write the edges to an .edge file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writeedges(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> **edgelist, <b><a href="CppInt.htm">int</a></b> **edgemarkerlist)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writeedges(m, b, edgelist, edgemarkerlist)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> **edgelist;<br/>
<b><a href="CppInt.htm">int</a></b> **edgemarkerlist;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writeedges(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *edgefilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writeedges(m, b, edgefilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *edgefilename;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *elist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *emlist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *outfile;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop, trisym;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> osub checkmark;<br/>
&nbsp;&nbsp;vertex p1, p2;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> edg<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;subseg sptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Temporary variable used by tspivot(). <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing edges.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> edges <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*edgelist <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*edgelist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;edges * 2 * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> edge markers <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;nobound <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (*edgemarkerlist <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*edgemarkerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;edges * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;elist <a href="CppOperatorAssign.htm">=</a> *edgelist;<br/>
&nbsp;&nbsp;emlist <a href="CppOperatorAssign.htm">=</a> *edgemarkerlist;<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s.\n", edgefilename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;outfile <a href="CppOperatorAssign.htm">=</a> fopen(edgefilename, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (outfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot create file <a href="CppOperatorModulus.htm">%</a>s.\n", edgefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of edges, number of boundary markers (zero or one). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "%ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;edges, 1 <a href="CppOperatorMinus.htm">-</a> b-&gt;nobound);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;edg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> To loop over the set of edges, loop over all triangles, and look at&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the three edges of each triangle.&nbsp;&nbsp;If there isn't another triangle&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent to the edge, operate on the edge.&nbsp;&nbsp;If there is another&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent triangle, operate on the edge only <b><a href="CppIf.htm">if</a></b> the current triangle <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; has a smaller <a href="CppPointer.htm">pointer</a> than its neighbor.&nbsp;&nbsp;This way, each edge is&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; considered only once.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0; triangleloop.orient &lt; 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleloop.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(triangleloop, trisym);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((triangleloop.tri &lt; trisym.tri) <a href="CppOperatorLogicalOr.htm">||</a> (trisym.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, p1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, p2);<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(p1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> vertexmark(p2);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;nobound) {<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Edge number, indices of two endpoints. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", edg<b><a href="CppEnum.htm">enum</a></b>ber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(p1), vertexmark(p2));<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Edge number, indices of two endpoints, and a boundary marker. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; If there's no subsegment, the boundary marker is zero.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tspivot(triangleloop, checkmark);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (checkmark.ss <a href="CppOperatorEqual.htm">==</a> m-&gt;dummysub) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emlist[edg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", edg<b><a href="CppEnum.htm">enum</a></b>ber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(p1), vertexmark(p2), 0);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emlist[edg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber] <a href="CppOperatorAssign.htm">=</a> mark(checkmark);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", edg<b><a href="CppEnum.htm">enum</a></b>ber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(p1), vertexmark(p2), mark(checkmark));<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emlist[edg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber] <a href="CppOperatorAssign.htm">=</a> trisym.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", edg<b><a href="CppEnum.htm">enum</a></b>ber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(p1), vertexmark(p2), trisym.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edg<b><a href="CppEnum.htm">enum</a></b>ber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;writevoronoi()&nbsp;&nbsp; Write the Voronoi diagram to a .v.node and .v.edge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The Voronoi diagram is the geometric dual of the Delaunay triangulation. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Hence, the Voronoi vertices are listed by traversing the Delaunay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangles, and the Voronoi edges are listed by traversing the Delaunay&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;edges.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;WARNING:&nbsp;&nbsp;In order to assign numbers to the Voronoi vertices, <b><a href="CppThis.htm">this</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;procedure messes up the subsegments or the extra nodes of every&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;element.&nbsp;&nbsp;Hence, you should call <b><a href="CppThis.htm">this</a></b> procedure last.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writevoronoi(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, REAL **v<a href="CppPointer.htm">point</a>list,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REAL **v<a href="CppPointer.htm">point</a>attriblist, <b><a href="CppInt.htm">int</a></b> **v<a href="CppPointer.htm">point</a>markerlist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> **vedgelist, <b><a href="CppInt.htm">int</a></b> **vedgemarkerlist, REAL **vnormlist)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writevoronoi(m, b, v<a href="CppPointer.htm">point</a>list, v<a href="CppPointer.htm">point</a>attriblist, v<a href="CppPointer.htm">point</a>markerlist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vedgelist, vedgemarkerlist, vnormlist)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
REAL **v<a href="CppPointer.htm">point</a>list;<br/>
REAL **v<a href="CppPointer.htm">point</a>attriblist;<br/>
<b><a href="CppInt.htm">int</a></b> **v<a href="CppPointer.htm">point</a>markerlist;<br/>
<b><a href="CppInt.htm">int</a></b> **vedgelist;<br/>
<b><a href="CppInt.htm">int</a></b> **vedgemarkerlist;<br/>
REAL **vnormlist;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writevoronoi(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *vnodefilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *vedgefilename, <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writevoronoi(m, b, vnodefilename, vedgefilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *vnodefilename;<br/>
<b><a href="CppChar.htm">char</a></b> *vedgefilename;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;REAL *plist;<br/>
&nbsp;&nbsp;REAL *palist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *elist;<br/>
&nbsp;&nbsp;REAL *normlist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> coordindex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> att<a href="CppRibi.htm">ribi</a>ndex;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *outfile;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop, trisym;<br/>
&nbsp;&nbsp;vertex torg, tdest, tapex;<br/>
&nbsp;&nbsp;REAL circumcenter[2];<br/>
&nbsp;&nbsp;REAL xi, eta;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> vnod<b><a href="CppEnum.htm">enum</a></b>ber, vedg<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> p1, p2;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing Voronoi vertices.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> Voronoi vertices <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*v<a href="CppPointer.htm">point</a>list <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*v<a href="CppPointer.htm">point</a>list <a href="CppOperatorAssign.htm">=</a> (REAL *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;triangles.items * 2 *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSizeof.htm">sizeof</a></b>(REAL)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> Voronoi vertex attributes <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*v<a href="CppPointer.htm">point</a>attriblist <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*v<a href="CppPointer.htm">point</a>attriblist <a href="CppOperatorAssign.htm">=</a> (REAL *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;triangles.items *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;nextras * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*v<a href="CppPointer.htm">point</a>markerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;plist <a href="CppOperatorAssign.htm">=</a> *v<a href="CppPointer.htm">point</a>list;<br/>
&nbsp;&nbsp;palist <a href="CppOperatorAssign.htm">=</a> *v<a href="CppPointer.htm">point</a>attriblist;<br/>
&nbsp;&nbsp;coordindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;att<a href="CppRibi.htm">ribi</a>ndex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s.\n", vnodefilename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;outfile <a href="CppOperatorAssign.htm">=</a> fopen(vnodefilename, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (outfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot create file <a href="CppOperatorModulus.htm">%</a>s.\n", vnodefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of triangles, two dimensions, number of vertex attributes, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; no markers.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "%ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;triangles.items, 2, m-&gt;nextras, 0);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;vnod<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, torg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, tdest);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(triangleloop, tapex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;findcircumcenter(m, b, torg, tdest, tapex, circumcenter, &amp;xi, &amp;eta, 0);<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> X and y coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;plist[coordindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> circumcenter[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;plist[coordindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> circumcenter[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 2; i &lt; 2 <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Interpolate the vertex attributes at the circumcenter. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;palist[att<a href="CppRibi.htm">ribi</a>ndex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> torg[i] <a href="CppOperatorPlus.htm">+</a> xi * (tdest[i] <a href="CppOperatorMinus.htm">-</a> torg[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> eta * (tapex[i] <a href="CppOperatorMinus.htm">-</a> torg[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Voronoi vertex number, x and y coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g", vnod<b><a href="CppEnum.htm">enum</a></b>ber, circumcenter[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circumcenter[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 2; i &lt; 2 <a href="CppOperatorPlus.htm">+</a> m-&gt;nextras; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Interpolate the vertex attributes at the circumcenter. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g", torg[i] <a href="CppOperatorPlus.htm">+</a> xi * (tdest[i] <a href="CppOperatorMinus.htm">-</a> torg[i])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> eta * (tapex[i] <a href="CppOperatorMinus.htm">-</a> torg[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (<b><a href="CppInt.htm">int</a></b> *) (triangleloop.tri <a href="CppOperatorPlus.htm">+</a> 6) <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) vnod<b><a href="CppEnum.htm">enum</a></b>ber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vnod<b><a href="CppEnum.htm">enum</a></b>ber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing Voronoi edges.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output Voronoi edges <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*vedgelist <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*vedgelist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;edges * 2 * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;*vedgemarkerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> output Voronoi norms <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*vnormlist <a href="CppOperatorEqual.htm">==</a> (REAL *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*vnormlist <a href="CppOperatorAssign.htm">=</a> (REAL *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;edges * 2 * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;elist <a href="CppOperatorAssign.htm">=</a> *vedgelist;<br/>
&nbsp;&nbsp;normlist <a href="CppOperatorAssign.htm">=</a> *vnormlist;<br/>
&nbsp;&nbsp;coordindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s.\n", vedgefilename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;outfile <a href="CppOperatorAssign.htm">=</a> fopen(vedgefilename, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (outfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot create file <a href="CppOperatorModulus.htm">%</a>s.\n", vedgefilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of edges, zero boundary markers. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "%ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;edges, 0);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;vedg<b><a href="CppEnum.htm">enum</a></b>ber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> To loop over the set of edges, loop over all triangles, and look at&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; the three edges of each triangle.&nbsp;&nbsp;If there isn't another triangle&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent to the edge, operate on the edge.&nbsp;&nbsp;If there is another&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; adjacent triangle, operate on the edge only <b><a href="CppIf.htm">if</a></b> the current triangle <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; has a smaller <a href="CppPointer.htm">pointer</a> than its neighbor.&nbsp;&nbsp;This way, each edge is&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; considered only once.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0; triangleloop.orient &lt; 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; triangleloop.orient<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sym(triangleloop, trisym);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((triangleloop.tri &lt; trisym.tri) <a href="CppOperatorLogicalOr.htm">||</a> (trisym.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the number of <b><a href="CppThis.htm">this</a></b> triangle (and Voronoi vertex). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1 <a href="CppOperatorAssign.htm">=</a> * (<b><a href="CppInt.htm">int</a></b> *) (triangleloop.tri <a href="CppOperatorPlus.htm">+</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (trisym.tri <a href="CppOperatorEqual.htm">==</a> m-&gt;dummytri) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, torg);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, tdest);<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Copy an infinite ray.&nbsp;&nbsp;Index of one endpoint, and <a href="CppOperatorMinus.htm">-</a>1. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elist[coordindex] <a href="CppOperatorAssign.htm">=</a> p1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normlist[coordindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> tdest[1] <a href="CppOperatorMinus.htm">-</a> torg[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elist[coordindex] <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normlist[coordindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> torg[0] <a href="CppOperatorMinus.htm">-</a> tdest[0];<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Write an infinite ray.&nbsp;&nbsp;Edge number, index of one endpoint, <a href="CppOperatorMinus.htm">-</a>1, <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; and x and y coordinates of a vector representing the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; direction of the ray.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g\n", vedg<b><a href="CppEnum.htm">enum</a></b>ber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1, <a href="CppOperatorMinus.htm">-</a>1, tdest[1] <a href="CppOperatorMinus.htm">-</a> torg[1], torg[0] <a href="CppOperatorMinus.htm">-</a> tdest[0]);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Find the number of the adjacent triangle (and Voronoi vertex). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2 <a href="CppOperatorAssign.htm">=</a> * (<b><a href="CppInt.htm">int</a></b> *) (trisym.tri <a href="CppOperatorPlus.htm">+</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Finite edge.&nbsp;&nbsp;Write indices of two endpoints. <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elist[coordindex] <a href="CppOperatorAssign.htm">=</a> p1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normlist[coordindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elist[coordindex] <a href="CppOperatorAssign.htm">=</a> p2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normlist[coordindex<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", vedg<b><a href="CppEnum.htm">enum</a></b>ber, p1, p2);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vedg<b><a href="CppEnum.htm">enum</a></b>ber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writeneighbors(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppInt.htm">int</a></b> **neighborlist)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writeneighbors(m, b, neighborlist)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppInt.htm">int</a></b> **neighborlist;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writeneighbors(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *neighborfilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writeneighbors(m, b, neighborfilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *neighborfilename;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *nlist;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *outfile;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop, trisym;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> elementnumber;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> neighbor1, neighbor2, neighbor3;<br/>
&nbsp;&nbsp;triangle ptr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Temporary variable used by sym(). <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing neighbors.\n");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Allocate <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> neighbors <b><a href="CppIf.htm">if</a></b> necessary. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (*neighborlist <a href="CppOperatorEqual.htm">==</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*neighborlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) trimalloc((<b><a href="CppInt.htm">int</a></b>) (m-&gt;triangles.items * 3 *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;nlist <a href="CppOperatorAssign.htm">=</a> *neighborlist;<br/>
&nbsp;&nbsp;index <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s.\n", neighborfilename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;outfile <a href="CppOperatorAssign.htm">=</a> fopen(neighborfilename, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (outfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot create file <a href="CppOperatorModulus.htm">%</a>s.\n", neighborfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of triangles, three neighbors per triangle. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "%ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;triangles.items, 3);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;elementnumber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (<b><a href="CppInt.htm">int</a></b> *) (triangleloop.tri <a href="CppOperatorPlus.htm">+</a> 6) <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b>) elementnumber;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elementnumber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;* (<b><a href="CppInt.htm">int</a></b> *) (m-&gt;dummytri <a href="CppOperatorPlus.htm">+</a> 6) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;elementnumber <a href="CppOperatorAssign.htm">=</a> b-&gt;firstnumber;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(triangleloop, trisym);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;neighbor1 <a href="CppOperatorAssign.htm">=</a> * (<b><a href="CppInt.htm">int</a></b> *) (trisym.tri <a href="CppOperatorPlus.htm">+</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(triangleloop, trisym);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;neighbor2 <a href="CppOperatorAssign.htm">=</a> * (<b><a href="CppInt.htm">int</a></b> *) (trisym.tri <a href="CppOperatorPlus.htm">+</a> 6);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sym(triangleloop, trisym);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;neighbor3 <a href="CppOperatorAssign.htm">=</a> * (<b><a href="CppInt.htm">int</a></b> *) (trisym.tri <a href="CppOperatorPlus.htm">+</a> 6);<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nlist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> neighbor1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nlist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> neighbor2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nlist[index<a href="CppOperatorIncrement.htm">++</a>] <a href="CppOperatorAssign.htm">=</a> neighbor3;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Triangle number, neighboring triangle numbers. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, "%4ld&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>d\n", elementnumber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neighbor1, neighbor2, neighbor3);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;elementnumber<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;writeoff()&nbsp;&nbsp; Write the triangulation to an .off file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;OFF stands <b><a href="CppFor.htm">for</a></b> the Object File Format, a format used by the Geometry&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Center's Geomview package.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> writeoff(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b, <b><a href="CppChar.htm">char</a></b> *offfilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> writeoff(m, b, offfilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<b><a href="CppChar.htm">char</a></b> *offfilename;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *outfile;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
&nbsp;&nbsp;vertex vertexloop;<br/>
&nbsp;&nbsp;vertex p1, p2, p3;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> outvertices;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Writing <a href="CppOperatorModulus.htm">%</a>s.\n", offfilename);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;jettison) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;outvertices <a href="CppOperatorAssign.htm">=</a> m-&gt;vertices.items <a href="CppOperatorMinus.htm">-</a> m-&gt;undeads;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;outvertices <a href="CppOperatorAssign.htm">=</a> m-&gt;vertices.items;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;outfile <a href="CppOperatorAssign.htm">=</a> fopen(offfilename, "w");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (outfile <a href="CppOperatorEqual.htm">==</a> (<a href="CppCfile.htm">FILE</a> *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Error:&nbsp;&nbsp;Cannot create file <a href="CppOperatorModulus.htm">%</a>s.\n", offfilename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triexit(1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Number of vertices, triangles, and edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;fprintf(outfile, "OFF\n%ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld\n", outvertices, m-&gt;triangles.items,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m-&gt;edges);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Write the vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;vertices);<br/>
&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (vertexloop <a href="CppOperatorNotEqual.htm">!=</a> (vertex) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;jettison <a href="CppOperatorLogicalOr.htm">||</a> (vertextype(vertexloop) <a href="CppOperatorNotEqual.htm">!=</a> UNDEADVERTEX)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The "0.0" is here because the OFF format uses 3D coordinates. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, " <a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.17g\n", vertexloop[0], vertexloop[1],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vertexloop <a href="CppOperatorAssign.htm">=</a> vertextraverse(m);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Write the triangles. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, p1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, p2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(triangleloop, p3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The "3" means a three-vertex polygon. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(outfile, " 3&nbsp;&nbsp; <a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d\n", vertexmark(p1) <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexmark(p2) <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber, vertexmark(p3) <a href="CppOperatorMinus.htm">-</a> b-&gt;firstnumber);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;finishfile(outfile, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>******** File I/O routines end here&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;********<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;quality_statistics()&nbsp;&nbsp; Print statistics <a href="CppAbout.htm">about</a> the quality of the mesh.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> quality_statistics(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> quality_statistics(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> otri triangleloop;<br/>
&nbsp;&nbsp;vertex p[3];<br/>
&nbsp;&nbsp;REAL cossquaretable[8];<br/>
&nbsp;&nbsp;REAL ratiotable[16];<br/>
&nbsp;&nbsp;REAL dx[3], dy[3];<br/>
&nbsp;&nbsp;REAL edgelength[3];<br/>
&nbsp;&nbsp;REAL dotproduct;<br/>
&nbsp;&nbsp;REAL cossquare;<br/>
&nbsp;&nbsp;REAL triarea;<br/>
&nbsp;&nbsp;REAL shortest, longest;<br/>
&nbsp;&nbsp;REAL trilongest2;<br/>
&nbsp;&nbsp;REAL smallestarea, biggestarea;<br/>
&nbsp;&nbsp;REAL triminaltitude2;<br/>
&nbsp;&nbsp;REAL minaltitude;<br/>
&nbsp;&nbsp;REAL triaspect2;<br/>
&nbsp;&nbsp;REAL worstaspect;<br/>
&nbsp;&nbsp;REAL smallestangle, biggestangle;<br/>
&nbsp;&nbsp;REAL radconst, degconst;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> angletable[18];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> aspecttable[16];<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> aspectindex;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> tendegree;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> acutebiggest;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, ii, j, k;<br/>
<br/>
&nbsp;&nbsp;printf("Mesh quality statistics:\n\n");<br/>
&nbsp;&nbsp;radconst <a href="CppOperatorAssign.htm">=</a> PI <a href="CppOperatorDivide.htm">/</a> 18.0;<br/>
&nbsp;&nbsp;degconst <a href="CppOperatorAssign.htm">=</a> 180.0 <a href="CppOperatorDivide.htm">/</a> PI;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 8; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cossquaretable[i] <a href="CppOperatorAssign.htm">=</a> cos(radconst * (REAL) (i <a href="CppOperatorPlus.htm">+</a> 1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cossquaretable[i] <a href="CppOperatorAssign.htm">=</a> cossquaretable[i] * cossquaretable[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 18; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;angletable[i] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ratiotable[0]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratiotable[1]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp; 2.0;<br/>
&nbsp;&nbsp;ratiotable[2]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratiotable[3]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp; 3.0;<br/>
&nbsp;&nbsp;ratiotable[4]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratiotable[5]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp; 6.0;<br/>
&nbsp;&nbsp;ratiotable[6]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp; 10.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratiotable[7]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;15.0;<br/>
&nbsp;&nbsp;ratiotable[8]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp; 25.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratiotable[9]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;50.0;<br/>
&nbsp;&nbsp;ratiotable[10] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;100.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratiotable[11] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 300.0;<br/>
&nbsp;&nbsp;ratiotable[12] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp; 1000.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratiotable[13] <a href="CppOperatorAssign.htm">=</a> 10000.0;<br/>
&nbsp;&nbsp;ratiotable[14] <a href="CppOperatorAssign.htm">=</a> 100000.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratiotable[15] <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp; 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 16; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;aspecttable[i] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;worstaspect <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;minaltitude <a href="CppOperatorAssign.htm">=</a> m-&gt;xmax <a href="CppOperatorMinus.htm">-</a> m-&gt;xmin <a href="CppOperatorPlus.htm">+</a> m-&gt;ymax <a href="CppOperatorMinus.htm">-</a> m-&gt;ymin;<br/>
&nbsp;&nbsp;minaltitude <a href="CppOperatorAssign.htm">=</a> minaltitude * minaltitude;<br/>
&nbsp;&nbsp;shortest <a href="CppOperatorAssign.htm">=</a> minaltitude;<br/>
&nbsp;&nbsp;longest <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;smallestarea <a href="CppOperatorAssign.htm">=</a> minaltitude;<br/>
&nbsp;&nbsp;biggestarea <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;worstaspect <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;smallestangle <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;biggestangle <a href="CppOperatorAssign.htm">=</a> 2.0;<br/>
&nbsp;&nbsp;acutebiggest <a href="CppOperatorAssign.htm">=</a> 1;<br/>
<br/>
&nbsp;&nbsp;traversalinit(&amp;m-&gt;triangles);<br/>
&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;triangleloop.orient <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (triangleloop.tri <a href="CppOperatorNotEqual.htm">!=</a> (triangle *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;org(triangleloop, p[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dest(triangleloop, p[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;apex(triangleloop, p[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trilongest2 <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 3; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j <a href="CppOperatorAssign.htm">=</a> plus1mod3[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k <a href="CppOperatorAssign.htm">=</a> minus1mod3[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[i] <a href="CppOperatorAssign.htm">=</a> p[j][0] <a href="CppOperatorMinus.htm">-</a> p[k][0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy[i] <a href="CppOperatorAssign.htm">=</a> p[j][1] <a href="CppOperatorMinus.htm">-</a> p[k][1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgelength[i] <a href="CppOperatorAssign.htm">=</a> dx[i] * dx[i] <a href="CppOperatorPlus.htm">+</a> dy[i] * dy[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgelength[i] &gt; trilongest2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trilongest2 <a href="CppOperatorAssign.htm">=</a> edgelength[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgelength[i] &gt; longest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;longest <a href="CppOperatorAssign.htm">=</a> edgelength[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (edgelength[i] &lt; shortest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shortest <a href="CppOperatorAssign.htm">=</a> edgelength[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triarea <a href="CppOperatorAssign.htm">=</a> <a href="CppCounter.htm">counter</a>clockwise(m, b, p[0], p[1], p[2]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triarea &lt; smallestarea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallestarea <a href="CppOperatorAssign.htm">=</a> triarea;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triarea &gt; biggestarea) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;biggestarea <a href="CppOperatorAssign.htm">=</a> triarea;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triminaltitude2 <a href="CppOperatorAssign.htm">=</a> triarea * triarea <a href="CppOperatorDivide.htm">/</a> trilongest2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triminaltitude2 &lt; minaltitude) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minaltitude <a href="CppOperatorAssign.htm">=</a> triminaltitude2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triaspect2 <a href="CppOperatorAssign.htm">=</a> trilongest2 <a href="CppOperatorDivide.htm">/</a> triminaltitude2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (triaspect2 &gt; worstaspect) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;worstaspect <a href="CppOperatorAssign.htm">=</a> triaspect2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;aspectindex <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((triaspect2 &gt; ratiotable[aspectindex] * ratiotable[aspectindex])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (aspectindex &lt; 15)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspectindex<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;aspecttable[aspectindex]<a href="CppOperatorIncrement.htm">++</a>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 3; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j <a href="CppOperatorAssign.htm">=</a> plus1mod3[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k <a href="CppOperatorAssign.htm">=</a> minus1mod3[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dotproduct <a href="CppOperatorAssign.htm">=</a> dx[j] * dx[k] <a href="CppOperatorPlus.htm">+</a> dy[j] * dy[k];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cossquare <a href="CppOperatorAssign.htm">=</a> dotproduct * dotproduct <a href="CppOperatorDivide.htm">/</a> (edgelength[j] * edgelength[k]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tendegree <a href="CppOperatorAssign.htm">=</a> 8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (ii <a href="CppOperatorAssign.htm">=</a> 7; ii <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0; ii<a href="CppOperatorDecrement.htm">--</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cossquare &gt; cossquaretable[ii]) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tendegree <a href="CppOperatorAssign.htm">=</a> ii;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dotproduct <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angletable[tendegree]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (cossquare &gt; smallestangle) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smallestangle <a href="CppOperatorAssign.htm">=</a> cossquare;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (acutebiggest <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (cossquare &lt; biggestangle)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;biggestangle <a href="CppOperatorAssign.htm">=</a> cossquare;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angletable[17 <a href="CppOperatorMinus.htm">-</a> tendegree]<a href="CppOperatorIncrement.htm">++</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (acutebiggest <a href="CppOperatorLogicalOr.htm">||</a> (cossquare &gt; biggestangle)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;biggestangle <a href="CppOperatorAssign.htm">=</a> cossquare;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acutebiggest <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;triangleloop.tri <a href="CppOperatorAssign.htm">=</a> triangletraverse(m);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;shortest <a href="CppOperatorAssign.htm">=</a> sqrt(shortest);<br/>
&nbsp;&nbsp;longest <a href="CppOperatorAssign.htm">=</a> sqrt(longest);<br/>
&nbsp;&nbsp;minaltitude <a href="CppOperatorAssign.htm">=</a> sqrt(minaltitude);<br/>
&nbsp;&nbsp;worstaspect <a href="CppOperatorAssign.htm">=</a> sqrt(worstaspect);<br/>
&nbsp;&nbsp;smallestarea <a href="CppOperatorMultiplyAssign.htm">*=</a> 0.5;<br/>
&nbsp;&nbsp;biggestarea <a href="CppOperatorMultiplyAssign.htm">*=</a> 0.5;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (smallestangle <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;smallestangle <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;smallestangle <a href="CppOperatorAssign.htm">=</a> degconst * acos(sqrt(smallestangle));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (biggestangle <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;biggestangle <a href="CppOperatorAssign.htm">=</a> 180.0;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (acutebiggest) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;biggestangle <a href="CppOperatorAssign.htm">=</a> degconst * acos(sqrt(biggestangle));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;biggestangle <a href="CppOperatorAssign.htm">=</a> 180.0 <a href="CppOperatorMinus.htm">-</a> degconst * acos(sqrt(biggestangle));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Smallest area: <a href="CppOperatorModulus.htm">%</a>16.5g&nbsp;&nbsp; |&nbsp;&nbsp;Largest area: <a href="CppOperatorModulus.htm">%</a>16.5g\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; smallestarea, biggestarea);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Shortest edge: <a href="CppOperatorModulus.htm">%</a>16.5g&nbsp;&nbsp; |&nbsp;&nbsp;Longest edge: <a href="CppOperatorModulus.htm">%</a>16.5g\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shortest, longest);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Shortest altitude: <a href="CppOperatorModulus.htm">%</a>12.5g&nbsp;&nbsp; |&nbsp;&nbsp;Largest aspect ratio: <a href="CppOperatorModulus.htm">%</a>8.5g\n\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minaltitude, worstaspect);<br/>
<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Triangle aspect ratio histogram:\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;1.1547 <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorModulus.htm">%</a>-6.6g&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>8d&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorModulus.htm">%</a>6.6g <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorModulus.htm">%</a>-6.6g&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>8d\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ratiotable[0], aspecttable[0], ratiotable[7], ratiotable[8],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aspecttable[8]);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 1; i &lt; 7; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>6.6g <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorModulus.htm">%</a>-6.6g&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>8d&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorModulus.htm">%</a>6.6g <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorModulus.htm">%</a>-6.6g&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>8d\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ratiotable[i <a href="CppOperatorMinus.htm">-</a> 1], ratiotable[i], aspecttable[i],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ratiotable[i <a href="CppOperatorPlus.htm">+</a> 7], ratiotable[i <a href="CppOperatorPlus.htm">+</a> 8], aspecttable[i <a href="CppOperatorPlus.htm">+</a> 8]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>6.6g <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorModulus.htm">%</a>-6.6g&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>8d&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppOperatorModulus.htm">%</a>6.6g <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>8d\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ratiotable[6], ratiotable[7], aspecttable[7], ratiotable[14],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aspecttable[15]);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;(Aspect ratio is longest edge divided by shortest altitude)\n\n");<br/>
<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Smallest angle: <a href="CppOperatorModulus.htm">%</a>15.5g&nbsp;&nbsp; |&nbsp;&nbsp;Largest angle: <a href="CppOperatorModulus.htm">%</a>15.5g\n\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; smallestangle, biggestangle);<br/>
<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Angle histogram:\n");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; 9; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>3d <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorModulus.htm">%</a>3d degrees:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>8d&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>3d <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorModulus.htm">%</a>3d degrees:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>8d\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i * 10, i * 10 <a href="CppOperatorPlus.htm">+</a> 10, angletable[i],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i * 10 <a href="CppOperatorPlus.htm">+</a> 90, i * 10 <a href="CppOperatorPlus.htm">+</a> 100, angletable[i <a href="CppOperatorPlus.htm">+</a> 9]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;printf("\n");<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;statistics()&nbsp;&nbsp; Print all sorts of cool facts.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> statistics(<b><a href="CppStruct.htm">struct</a></b> mesh *m, <b><a href="CppStruct.htm">struct</a></b> behavior *b)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> statistics(m, b)<br/>
<b><a href="CppStruct.htm">struct</a></b> mesh *m;<br/>
<b><a href="CppStruct.htm">struct</a></b> behavior *b;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
{<br/>
&nbsp;&nbsp;printf("\nStatistics:\n\n");<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Input vertices: <a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;invertices);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Input triangles: <a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;inelements);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Input segments: <a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;insegments);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Input holes: <a href="CppOperatorModulus.htm">%</a>d\n", m-&gt;holes);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;printf("\n&nbsp;&nbsp;Mesh vertices: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;vertices.items <a href="CppOperatorMinus.htm">-</a> m-&gt;undeads);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Mesh triangles: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;triangles.items);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Mesh edges: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;edges);<br/>
&nbsp;&nbsp;printf("&nbsp;&nbsp;Mesh exterior boundary edges: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;hullsize);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;poly <a href="CppOperatorLogicalOr.htm">||</a> b-&gt;refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Mesh interior boundary edges: <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;subsegs.items <a href="CppOperatorMinus.htm">-</a> m-&gt;hullsize);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Mesh subsegments (constrained edges): <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;subsegs.items);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;printf("\n");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b-&gt;verbose) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;quality_statistics(m, b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("<a href="CppMemory.htm">Memory</a> allocation statistics:\n\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Maximum number of vertices: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;vertices.maxitems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Maximum number of triangles: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;triangles.maxitems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;subsegs.maxitems &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Maximum number of subsegments: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;subsegs.maxitems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;viri.maxitems &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Maximum number of viri: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;viri.maxitems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;badsubsegs.maxitems &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Maximum number of encroached subsegments: <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;badsubsegs.maxitems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;badtriangles.maxitems &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Maximum number of bad triangles: <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;badtriangles.maxitems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;flipstackers.maxitems &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Maximum number of stacked triangle flips: <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;flipstackers.maxitems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;splaynodes.maxitems &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Maximum number of splay tree nodes: <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;splaynodes.maxitems);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Approximate heap <a href="CppMemory.htm">memory</a> use (bytes): <a href="CppOperatorModulus.htm">%</a>ld\n\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;vertices.maxitems * m-&gt;vertices.itembytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;triangles.maxitems * m-&gt;triangles.itembytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;subsegs.maxitems * m-&gt;subsegs.itembytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;viri.maxitems * m-&gt;viri.itembytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;badsubsegs.maxitems * m-&gt;badsubsegs.itembytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;badtriangles.maxitems * m-&gt;badtriangles.itembytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;flipstackers.maxitems * m-&gt;flipstackers.itembytes <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;splaynodes.maxitems * m-&gt;splaynodes.itembytes);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("<a href="CppAlgorithm.htm">Algorithm</a>ic statistics:\n\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b-&gt;weighted) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Number of incircle tests: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;incirclecount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Number of 3D orientation tests: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;orient3dcount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Number of 2D orientation tests: <a href="CppOperatorModulus.htm">%</a>ld\n", m-&gt;<a href="CppCounter.htm">counter</a>clockcount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;hyperbolacount &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Number of right-of-hyperbola tests: <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;hyperbolacount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;circletopcount &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Number of circle top computations: <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;circletopcount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;circumcentercount &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;Number of triangle circumcenter computations: <a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m-&gt;circumcentercount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppMain.htm">main</a>() or triangulate()&nbsp;&nbsp; Gosh, <b><a href="CppDo.htm">do</a></b> everything.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The sequence is roughly as follows.&nbsp;&nbsp;M<a href="CppAny.htm">any</a> of these steps can be skipped, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;depending on the command line <b><a href="CppSwitch.htm">switch</a></b>es.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppInitialize.htm">Initialize</a> constants and parse the command line.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Read the vertices from a file and either&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> triangulate them (no <a href="CppOperatorMinus.htm">-</a>r), or&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> read an old mesh from files and re<a href="CppConstructor.htm">construct</a> it (-r).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Insert the PSLG segments (-p), and possibly segments on the convex&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hull (-c).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Read the holes (-p), regional attributes (-pA), and regional area&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraints (-pa).&nbsp;&nbsp;Carve the holes and concavities, and spread the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regional attributes and area constraints.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Enforce the constraints on minimum angle (-q) and maximum area (-a).&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Also enforce the conforming Delaunay property (-q and <a href="CppOperatorMinus.htm">-</a>a).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Compute the number of edges in the resulting mesh.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Promote the mesh's linear triangles to higher order elements (-o).&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Write the output files and print the statistics.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Check the consistency and Delaunay property of the mesh (-C).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> triangulate(<b><a href="CppChar.htm">char</a></b> *tri<b><a href="CppSwitch.htm">switch</a></b>es, <b><a href="CppStruct.htm">struct</a></b> triangulateio *in,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> triangulateio *out, <b><a href="CppStruct.htm">struct</a></b> triangulateio *vorout)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> triangulate(tri<b><a href="CppSwitch.htm">switch</a></b>es, in, out, vorout)<br/>
<b><a href="CppChar.htm">char</a></b> *tri<b><a href="CppSwitch.htm">switch</a></b>es;<br/>
<b><a href="CppStruct.htm">struct</a></b> triangulateio *in;<br/>
<b><a href="CppStruct.htm">struct</a></b> triangulateio *out;<br/>
<b><a href="CppStruct.htm">struct</a></b> triangulateio *vorout;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppInt.htm">int</a></b> triangle_main(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppInt.htm">int</a></b> triangle_main(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>)<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>;<br/>
<b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> mesh m;<br/>
&nbsp;&nbsp;m.regions <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> behavior b;<br/>
&nbsp;&nbsp;REAL *hole<a href="CppArray.htm">array</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> <a href="CppArray.htm">Array</a> of holes. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;REAL *region<a href="CppArray.htm">array</a>;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> <a href="CppArray.htm">Array</a> of regional attributes and area constraints. <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<a href="CppCfile.htm">FILE</a> *polyfile;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Variables <b><a href="CppFor.htm">for</a></b> timing the <a href="CppPerformance.htm">performance</a> of Triangle.&nbsp;&nbsp;The types are <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; defined in sys/<a href="CppTime.htm">time</a>.h.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppTime.htm">time</a>val tv0, tv1, tv2, tv3, tv4, tv5, tv6;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppTime.htm">time</a>zone tz;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
&nbsp;&nbsp;get<a href="CppTime.htm">time</a>ofday(&amp;tv0, &amp;tz);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;triangleinit(&amp;m);<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;parsecommandline(1, &amp;tri<b><a href="CppSwitch.htm">switch</a></b>es, &amp;b);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;parsecommandline(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>, &amp;b);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m.steinerleft <a href="CppOperatorAssign.htm">=</a> b.steiner;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;transfernodes(&amp;m, &amp;b, in-&gt;<a href="CppPointer.htm">point</a>list, in-&gt;<a href="CppPointer.htm">point</a>attributelist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in-&gt;<a href="CppPointer.htm">point</a>markerlist, in-&gt;numberof<a href="CppPointer.htm">point</a>s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in-&gt;numberof<a href="CppPointer.htm">point</a>attributes);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;readnodes(&amp;m, &amp;b, b.innodefilename, b.inpolyfilename, &amp;polyfile);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get<a href="CppTime.htm">time</a>ofday(&amp;tv1, &amp;tz);<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> CDT_ONLY<br/>
&nbsp;&nbsp;m.hullsize <a href="CppOperatorAssign.htm">=</a> delaunay(&amp;m, &amp;b);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Triangulate the vertices. <a href="CppComment.htm">*/</a><br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Read and re<a href="CppConstructor.htm">construct</a> a mesh. <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.hullsize <a href="CppOperatorAssign.htm">=</a> re<a href="CppConstructor.htm">construct</a>(&amp;m, &amp;b, in-&gt;trianglelist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in-&gt;triangleattributelist, in-&gt;trianglearealist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in-&gt;numberoftriangles, in-&gt;numberofcorners,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in-&gt;numberoftriangleattributes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in-&gt;segmentlist, in-&gt;segmentmarkerlist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in-&gt;numberofsegments);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.hullsize <a href="CppOperatorAssign.htm">=</a> re<a href="CppConstructor.htm">construct</a>(&amp;m, &amp;b, b.inelefilename, b.areafilename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.inpolyfilename, polyfile);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.hullsize <a href="CppOperatorAssign.htm">=</a> delaunay(&amp;m, &amp;b);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Triangulate the vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get<a href="CppTime.htm">time</a>ofday(&amp;tv2, &amp;tz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Mesh re<a href="CppConstructor.htm">construct</a>ion");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Delaunay");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf(" milliseconds:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld\n", 1000l * (tv2.tv_sec <a href="CppOperatorMinus.htm">-</a> tv1.tv_sec) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (tv2.tv_usec <a href="CppOperatorMinus.htm">-</a> tv1.tv_usec) <a href="CppOperatorDivide.htm">/</a> 1000l);<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Ensure that no vertex can be mistaken <b><a href="CppFor.htm">for</a></b> a triangular bounding <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; box vertex in insertvertex().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m.infvertex1 <a href="CppOperatorAssign.htm">=</a> (vertex) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;m.infvertex2 <a href="CppOperatorAssign.htm">=</a> (vertex) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;m.infvertex3 <a href="CppOperatorAssign.htm">=</a> (vertex) <a href="CppNULL.htm">NULL</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.checksegments <a href="CppOperatorAssign.htm">=</a> 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Segments will be introduced next. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Insert PSLG segments and/or convex hull segments. <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formskeleton(&amp;m, &amp;b, in-&gt;segmentlist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in-&gt;segmentmarkerlist, in-&gt;numberofsegments);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formskeleton(&amp;m, &amp;b, polyfile, b.inpolyfilename);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get<a href="CppTime.htm">time</a>ofday(&amp;tv3, &amp;tz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.usesegments <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b.refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Segment milliseconds:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000l * (tv3.tv_sec <a href="CppOperatorMinus.htm">-</a> tv2.tv_sec) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (tv3.tv_usec <a href="CppOperatorMinus.htm">-</a> tv2.tv_usec) <a href="CppOperatorDivide.htm">/</a> 1000l);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.poly <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (m.triangles.items &gt; 0)) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;hole<a href="CppArray.htm">array</a> <a href="CppOperatorAssign.htm">=</a> in-&gt;holelist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.holes <a href="CppOperatorAssign.htm">=</a> in-&gt;numberofholes;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;region<a href="CppArray.htm">array</a> <a href="CppOperatorAssign.htm">=</a> in-&gt;regionlist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.regions <a href="CppOperatorAssign.htm">=</a> in-&gt;numberofregions;<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;readholes(&amp;m, &amp;b, polyfile, b.inpolyfilename, &amp;hole<a href="CppArray.htm">array</a>, &amp;m.holes,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;region<a href="CppArray.htm">array</a>, &amp;m.regions);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Carve out holes and concavities. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;carveholes(&amp;m, &amp;b, hole<a href="CppArray.htm">array</a>, m.holes, region<a href="CppArray.htm">array</a>, m.regions);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Without a PSLG, there can be no holes or regional attributes&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; or area constraints.&nbsp;&nbsp;The following are set to zero to avoid <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; an accidental free() later.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.holes <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.regions <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get<a href="CppTime.htm">time</a>ofday(&amp;tv4, &amp;tz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.poly <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !b.refine) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Hole milliseconds:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld\n", 1000l * (tv4.tv_sec <a href="CppOperatorMinus.htm">-</a> tv3.tv_sec) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (tv4.tv_usec <a href="CppOperatorMinus.htm">-</a> tv3.tv_usec) <a href="CppOperatorDivide.htm">/</a> 1000l);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.quality <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (m.triangles.items &gt; 0)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;enforcequality(&amp;m, &amp;b);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Enforce angle and area constraints. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get<a href="CppTime.htm">time</a>ofday(&amp;tv5, &amp;tz);<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.quality) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Quality milliseconds:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000l * (tv5.tv_sec <a href="CppOperatorMinus.htm">-</a> tv4.tv_sec) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (tv5.tv_usec <a href="CppOperatorMinus.htm">-</a> tv4.tv_usec) <a href="CppOperatorDivide.htm">/</a> 1000l);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Calculate the number of edges. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;m.edges <a href="CppOperatorAssign.htm">=</a> (3l * m.triangles.items <a href="CppOperatorPlus.htm">+</a> m.hullsize) <a href="CppOperatorDivide.htm">/</a> 2l;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.order &gt; 1) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;highorder(&amp;m, &amp;b);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Promote elements to higher polynomial order. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.jettison) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;numberof<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> m.vertices.items <a href="CppOperatorMinus.htm">-</a> m.undeads;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;numberof<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> m.vertices.items;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;out-&gt;numberof<a href="CppPointer.htm">point</a>attributes <a href="CppOperatorAssign.htm">=</a> m.nextras;<br/>
&nbsp;&nbsp;out-&gt;numberoftriangles <a href="CppOperatorAssign.htm">=</a> m.triangles.items;<br/>
&nbsp;&nbsp;out-&gt;numberofcorners <a href="CppOperatorAssign.htm">=</a> (b.order <a href="CppOperatorPlus.htm">+</a> 1) * (b.order <a href="CppOperatorPlus.htm">+</a> 2) <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;out-&gt;numberoftriangleattributes <a href="CppOperatorAssign.htm">=</a> m.eextras;<br/>
&nbsp;&nbsp;out-&gt;numberofedges <a href="CppOperatorAssign.htm">=</a> m.edges;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.usesegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;numberofsegments <a href="CppOperatorAssign.htm">=</a> m.subsegs.items;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;numberofsegments <a href="CppOperatorAssign.htm">=</a> m.hullsize;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (vorout <a href="CppOperatorNotEqual.htm">!=</a> (<b><a href="CppStruct.htm">struct</a></b> triangulateio *) <a href="CppNULL.htm">NULL</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vorout-&gt;numberof<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> m.triangles.items;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vorout-&gt;numberof<a href="CppPointer.htm">point</a>attributes <a href="CppOperatorAssign.htm">=</a> m.nextras;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vorout-&gt;numberofedges <a href="CppOperatorAssign.htm">=</a> m.edges;<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If not <b><a href="CppUsing.htm">using</a></b> iteration numbers, don't write a .node file <b><a href="CppIf.htm">if</a></b> one was <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; read, because the original one would be overwritten!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.nonodewritten <a href="CppOperatorLogicalOr.htm">||</a> (b.noiterationnum <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.readnodefile)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("NOT writing vertices.\n");<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("NOT writing a .node file.\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;numbernodes(&amp;m, &amp;b);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> We must remember to number the vertices. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> writenodes() numbers the vertices too. <a href="CppComment.htm">*/</a><br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;writenodes(&amp;m, &amp;b, &amp;out-&gt;<a href="CppPointer.htm">point</a>list, &amp;out-&gt;<a href="CppPointer.htm">point</a>attributelist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;out-&gt;<a href="CppPointer.htm">point</a>markerlist);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;writenodes(&amp;m, &amp;b, b.outnodefilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.noelewritten) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("NOT writing triangles.\n");<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("NOT writing an .ele file.\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;writeelements(&amp;m, &amp;b, &amp;out-&gt;trianglelist, &amp;out-&gt;triangleattributelist);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;writeelements(&amp;m, &amp;b, b.outelefilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> The <a href="CppOperatorMinus.htm">-</a>c <b><a href="CppSwitch.htm">switch</a></b> (convex <b><a href="CppSwitch.htm">switch</a></b>) causes a PSLG to be written <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; even <b><a href="CppIf.htm">if</a></b> none was read.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.poly <a href="CppOperatorLogicalOr.htm">||</a> b.convex) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> If not <b><a href="CppUsing.htm">using</a></b> iteration numbers, don't overwrite the .poly file. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.nopolywritten <a href="CppOperatorLogicalOr.htm">||</a> b.noiterationnum) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("NOT writing segments.\n");<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("NOT writing a .poly file.\n");<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writepoly(&amp;m, &amp;b, &amp;out-&gt;segmentlist, &amp;out-&gt;segmentmarkerlist);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;numberofholes <a href="CppOperatorAssign.htm">=</a> m.holes;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;numberofregions <a href="CppOperatorAssign.htm">=</a> m.regions;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.poly) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;holelist <a href="CppOperatorAssign.htm">=</a> in-&gt;holelist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;regionlist <a href="CppOperatorAssign.htm">=</a> in-&gt;regionlist;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;holelist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out-&gt;regionlist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writepoly(&amp;m, &amp;b, b.outpolyfilename, hole<a href="CppArray.htm">array</a>, m.holes, region<a href="CppArray.htm">array</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.regions, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
<a href="CppIfndef.htm">#ifndef</a> CDT_ONLY<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m.regions &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trifree((VOID *) region<a href="CppArray.htm">array</a>);<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not CDT_ONLY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m.holes &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;trifree((VOID *) hole<a href="CppArray.htm">array</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.geomview) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;writeoff(&amp;m, &amp;b, b.offfilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.edgesout) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;writeedges(&amp;m, &amp;b, &amp;out-&gt;edgelist, &amp;out-&gt;edgemarkerlist);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;writeedges(&amp;m, &amp;b, b.edgefilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.voronoi) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;writevoronoi(&amp;m, &amp;b, &amp;vorout-&gt;<a href="CppPointer.htm">point</a>list, &amp;vorout-&gt;<a href="CppPointer.htm">point</a>attributelist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;vorout-&gt;<a href="CppPointer.htm">point</a>markerlist, &amp;vorout-&gt;edgelist,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;vorout-&gt;edgemarkerlist, &amp;vorout-&gt;normlist);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;writevoronoi(&amp;m, &amp;b, b.vnodefilename, b.vedgefilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.neighbors) {<br/>
<a href="CppIfdef.htm">#ifdef</a> TRILIBRARY<br/>
&nbsp;&nbsp;&nbsp;&nbsp;writeneighbors(&amp;m, &amp;b, &amp;out-&gt;neighborlist);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;writeneighbors(&amp;m, &amp;b, b.neighborfilename, <a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!b.quiet) {<br/>
<a href="CppIfndef.htm">#ifndef</a> NO_TIMER<br/>
&nbsp;&nbsp;&nbsp;&nbsp;get<a href="CppTime.htm">time</a>ofday(&amp;tv6, &amp;tz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\nOutput milliseconds:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000l * (tv6.tv_sec <a href="CppOperatorMinus.htm">-</a> tv5.tv_sec) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (tv6.tv_usec <a href="CppOperatorMinus.htm">-</a> tv5.tv_usec) <a href="CppOperatorDivide.htm">/</a> 1000l);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("Total running milliseconds:&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>ld\n",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000l * (tv6.tv_sec <a href="CppOperatorMinus.htm">-</a> tv0.tv_sec) <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (tv6.tv_usec <a href="CppOperatorMinus.htm">-</a> tv0.tv_usec) <a href="CppOperatorDivide.htm">/</a> 1000l);<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not NO_TIMER <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;statistics(&amp;m, &amp;b);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> REDUCED<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b.docheck) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;checkmesh(&amp;m, &amp;b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;checkdelaunay(&amp;m, &amp;b);<br/>
&nbsp;&nbsp;}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not REDUCED <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;triangledeinit(&amp;m, &amp;b);<br/>
<a href="CppIfndef.htm">#ifndef</a> TRILIBRARY<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not TRILIBRARY <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> __cplusplus <a href="CppComment.htm">//</a>RJCB<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppExtern.htm">extern</a></b> "C" <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a>~ifdef __cplusplus <a href="CppComment.htm">//</a>RJCB<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop <a href="CppComment.htm">//</a>RJCB<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTriangle/triangle.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/triangle.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(triangle.h)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Include file <b><a href="CppFor.htm">for</a></b> programs that call Triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Accompanies Triangle <a href="CppVersion.htm">Version</a> 1.6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;July 28, 2005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Copyright 1996, 2005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;2360 Woolsey #H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Berkeley, California&nbsp;&nbsp;94705-1927&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;jrs@cs.berkeley.edu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;How to call Triangle from another program&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If you haven't read Triangle's instructions (run "triangle <a href="CppOperatorMinus.htm">-</a>h" to read&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;them), you won't understand what follows.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Triangle must be <a href="CppCompile.htm">compile</a>d into an object file (triangle.o) with the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;TRILIBRARY symbol defined (generally by <b><a href="CppUsing.htm">using</a></b> the <a href="CppOperatorMinus.htm">-</a>DTRILIBRARY <a href="CppCompiler.htm">compiler</a>&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>).&nbsp;&nbsp;The <a href="CppMakefile.htm">makefile</a> included with Triangle will <b><a href="CppDo.htm">do</a></b> <b><a href="CppThis.htm">this</a></b> <b><a href="CppFor.htm">for</a></b> you <b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;you run "<a href="CppMake.htm">make</a> tri<a href="CppLibrary.htm">library</a>".&nbsp;&nbsp;The resulting object file can be called via&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the procedure triangulate().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;If the size of the object file is important to you, you may wish to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;generate a reduced <a href="CppVersion.htm">version</a> of triangle.o.&nbsp;&nbsp;The REDUCED symbol gets rid&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;of all features that are primarily of research interest.&nbsp;&nbsp;Specifically,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the <a href="CppOperatorMinus.htm">-</a>DREDUCED <b><a href="CppSwitch.htm">switch</a></b> eliminates Triangle's <a href="CppOperatorMinus.htm">-</a>i, <a href="CppOperatorMinus.htm">-</a>F, <a href="CppOperatorMinus.htm">-</a>s, and <a href="CppOperatorMinus.htm">-</a>C <b><a href="CppSwitch.htm">switch</a></b>es.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The CDT_ONLY symbol gets rid of all meshing <a href="CppAlgorithm.htm">algorithm</a>s above and beyond&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;constrained Delaunay triangulation.&nbsp;&nbsp;Specifically, the <a href="CppOperatorMinus.htm">-</a>DCDT_ONLY <b><a href="CppSwitch.htm">switch</a></b> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;eliminates Triangle's <a href="CppOperatorMinus.htm">-</a>r, <a href="CppOperatorMinus.htm">-</a>q, <a href="CppOperatorMinus.htm">-</a>a, <a href="CppOperatorMinus.htm">-</a>u, <a href="CppOperatorMinus.htm">-</a>D, <a href="CppOperatorMinus.htm">-</a>Y, <a href="CppOperatorMinus.htm">-</a>S, and <a href="CppOperatorMinus.htm">-</a>s <b><a href="CppSwitch.htm">switch</a></b>es.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;IMPORTANT:&nbsp;&nbsp;These <a href="CppDefinition.htm">definitions</a> (TRILIBRARY, REDUCED, CDT_ONLY) must be&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;made in the <a href="CppMakefile.htm">makefile</a> or in triangle.c itself.&nbsp;&nbsp;Putting these <a href="CppDefinition.htm">definitions</a> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;in <b><a href="CppThis.htm">this</a></b> file (triangle.h) will not create the desired effect.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The calling convention <b><a href="CppFor.htm">for</a></b> triangulate() follows.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> triangulate(tri<b><a href="CppSwitch.htm">switch</a></b>es, in, out, vorout)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> *tri<b><a href="CppSwitch.htm">switch</a></b>es;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> triangulateio *in;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> triangulateio *out;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> triangulateio *vorout;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`tri<b><a href="CppSwitch.htm">switch</a></b>es' is a string containing the command line <b><a href="CppSwitch.htm">switch</a></b>es you wish&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to invoke.&nbsp;&nbsp;No initial dash is required.&nbsp;&nbsp;Some suggestions:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> You'll probably find it convenient to use the `z' <b><a href="CppSwitch.htm">switch</a></b> so that&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s (and other items) are numbered from zero.&nbsp;&nbsp;This simplifies&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;indexing, because the first item of <a href="CppAny.htm">any</a> type always starts at index&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;[0] of the corresponding <a href="CppArray.htm">array</a>, whether that item's number is zero or&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;one.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> You'll probably want to use the `Q' (quiet) <b><a href="CppSwitch.htm">switch</a></b> in your <b><a href="CppFinal.htm">final</a></b> code, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;but you can take advantage of Triangle's printed output (including the <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;`V' <b><a href="CppSwitch.htm">switch</a></b>) <b><a href="CppWhile.htm">while</a></b> <a href="CppDebug.htm">debugging</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> If you are not <b><a href="CppUsing.htm">using</a></b> the `q', `a', `u', `D', `j', or `s' <b><a href="CppSwitch.htm">switch</a></b>es,&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;then the output <a href="CppPointer.htm">point</a>s will be identical to the input <a href="CppPointer.htm">point</a>s, except&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;possibly <b><a href="CppFor.htm">for</a></b> the boundary markers.&nbsp;&nbsp;If you don't need the boundary&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;markers, you should use the `N' (no nodes output) <b><a href="CppSwitch.htm">switch</a></b> to save&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMemory.htm">memory</a>.&nbsp;&nbsp;(If you <b><a href="CppDo.htm">do</a></b> need boundary markers, but need to save <a href="CppMemory.htm">memory</a>, a&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;good nasty trick is to set out-&gt;<a href="CppPointer.htm">point</a>list equal to in-&gt;<a href="CppPointer.htm">point</a>list&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;before calling triangulate(), so that Triangle overwrites the input&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s with identical copies.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> The `I' (no iteration numbers) and `g' (.off file output) <b><a href="CppSwitch.htm">switch</a></b>es&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;have no effect when Triangle is <a href="CppCompile.htm">compile</a>d with TRILIBRARY defined.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`in', `out', and `vorout' are descriptions of the input, the output,&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;and the Voronoi output.&nbsp;&nbsp;If the `v' (Voronoi output) <b><a href="CppSwitch.htm">switch</a></b> is not used, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`vorout' may be <a href="CppNULL.htm">NULL</a>.&nbsp;&nbsp;`in' and `out' may never be <a href="CppNULL.htm">NULL</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Certain fields of the input and output structures must be <a href="CppInitialize.htm">initialize</a>d,&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;as described below.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The `triangulateio' structure.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Used to pass data into and out of the triangulate() procedure.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppArray.htm">Array</a>s are used to store <a href="CppPointer.htm">point</a>s, triangles, markers, and so forth.&nbsp;&nbsp;In&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;all <b><a href="CppCase.htm">case</a></b>s, the first item in <a href="CppAny.htm">any</a> <a href="CppArray.htm">array</a> is stored starting at index [0].&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;However, that item is item number `1' unless the `z' <b><a href="CppSwitch.htm">switch</a></b> is used, in&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;which <b><a href="CppCase.htm">case</a></b> it is item number `0'.&nbsp;&nbsp;Hence, you may find it easier to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;index <a href="CppPointer.htm">point</a>s (and triangles in the neighbor list) <b><a href="CppIf.htm">if</a></b> you use the `z'&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>.&nbsp;&nbsp;Unless, of course, you're calling Triangle from a Fortran&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;program.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Description of fields (except the `numberof' fields, which are obvious): <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`<a href="CppPointer.htm">point</a>list':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of <a href="CppPointer.htm">point</a> coordinates.&nbsp;&nbsp;The first <a href="CppPointer.htm">point</a>'s x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;coordinate is at index [0] and its y coordinate at index [1], followed <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;by the coordinates of the remaining <a href="CppPointer.htm">point</a>s.&nbsp;&nbsp;Each <a href="CppPointer.htm">point</a> occupies two&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;REALs.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`<a href="CppPointer.htm">point</a>attributelist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of <a href="CppPointer.htm">point</a> attributes.&nbsp;&nbsp;Each <a href="CppPointer.htm">point</a>'s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;attributes occupy `numberof<a href="CppPointer.htm">point</a>attributes' REALs.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`<a href="CppPointer.htm">point</a>markerlist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of <a href="CppPointer.htm">point</a> markers; one <b><a href="CppInt.htm">int</a></b> per <a href="CppPointer.htm">point</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`trianglelist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of triangle corners.&nbsp;&nbsp;The first triangle's&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;first corner is at index [0], followed by its other two corners in&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCounter.htm">counter</a>clockwise order, followed by <a href="CppAny.htm">any</a> other nodes <b><a href="CppIf.htm">if</a></b> the triangle&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;represents a nonlinear element.&nbsp;&nbsp;Each triangle occupies&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;`numberofcorners' ints.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`triangleattributelist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of triangle attributes.&nbsp;&nbsp;Each&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;triangle's attributes occupy `numberoftriangleattributes' REALs.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`trianglearealist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of triangle area constraints; one REAL per <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;triangle.&nbsp;&nbsp;Input only.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`neighborlist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of triangle neighbors; three ints per&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;triangle.&nbsp;&nbsp;Output only.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`segmentlist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of segment endpoints.&nbsp;&nbsp;The first segment's&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;endpoints are at indices [0] and [1], followed by the remaining&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;segments.&nbsp;&nbsp;Two ints per segment.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`segmentmarkerlist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of segment markers; one <b><a href="CppInt.htm">int</a></b> per segment.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`holelist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of holes.&nbsp;&nbsp;The first hole's x and y coordinates&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;are at indices [0] and [1], followed by the remaining holes.&nbsp;&nbsp;Two&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;REALs per hole.&nbsp;&nbsp;Input only, although the <a href="CppPointer.htm">pointer</a> is copied to the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;output structure <b><a href="CppFor.htm">for</a></b> your convenience.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`regionlist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of regional attributes and area constraints.&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;The first constraint's x and y coordinates are at indices [0] and [1], <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;followed by the regional attribute at index [2], followed by the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;maximum area at index [3], followed by the remaining area constraints. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Four REALs per area constraint.&nbsp;&nbsp;Note that each regional attribute is&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;used only <b><a href="CppIf.htm">if</a></b> you select the `A' <b><a href="CppSwitch.htm">switch</a></b>, and each area constraint is&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;used only <b><a href="CppIf.htm">if</a></b> you select the `a' <b><a href="CppSwitch.htm">switch</a></b> (with no number following), but <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;omitting one of these <b><a href="CppSwitch.htm">switch</a></b>es does not change the <a href="CppMemory.htm">memory</a> layout.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Input only, although the <a href="CppPointer.htm">pointer</a> is copied to the output structure <b><a href="CppFor.htm">for</a></b> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;your convenience.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`edgelist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of edge endpoints.&nbsp;&nbsp;The first edge's endpoints are <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;at indices [0] and [1], followed by the remaining edges.&nbsp;&nbsp;Two ints per <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;edge.&nbsp;&nbsp;Output only.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`edgemarkerlist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of edge markers; one <b><a href="CppInt.htm">int</a></b> per edge.&nbsp;&nbsp;Output&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;only.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`normlist':&nbsp;&nbsp;An <a href="CppArray.htm">array</a> of normal vectors, used <b><a href="CppFor.htm">for</a></b> infinite rays in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;Voronoi diagrams.&nbsp;&nbsp;The first normal vector's x and y magnitudes are&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;at indices [0] and [1], followed by the remaining vectors.&nbsp;&nbsp;For each&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;finite edge in a Voronoi diagram, the normal vector written is the&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;zero vector.&nbsp;&nbsp;Two REALs per edge.&nbsp;&nbsp;Output only.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Any input fields that Triangle will examine must be <a href="CppInitialize.htm">initialize</a>d.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Furthermore, <b><a href="CppFor.htm">for</a></b> each output <a href="CppArray.htm">array</a> that Triangle will write to, you&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;must either provide space by setting the appropriate <a href="CppPointer.htm">pointer</a> to <a href="CppPointer.htm">point</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;to the space you want the data written to, or you must <a href="CppInitialize.htm">initialize</a> the&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppPointer.htm">pointer</a> to <a href="CppNULL.htm">NULL</a>, which tells Triangle to allocate space <b><a href="CppFor.htm">for</a></b> the results. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;The latter option is preferable, because Triangle always knows exactly&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;how much space to allocate.&nbsp;&nbsp;The former option is provided mainly <b><a href="CppFor.htm">for</a></b>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;people who need to call Triangle from Fortran code, though it also <a href="CppMake.htm">make</a>s <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;possible some nasty space-saving tricks, like writing the output to the&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;same <a href="CppArray.htm">array</a>s as the input.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Triangle will not free() <a href="CppAny.htm">any</a> input or output <a href="CppArray.htm">array</a>s, including those it&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;allocates itself; that's up to you.&nbsp;&nbsp;You should free <a href="CppArray.htm">array</a>s allocated by <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Triangle by calling the trifree() procedure defined below.&nbsp;&nbsp;(By <b><a href="CppDefault.htm">default</a></b>, <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;trifree() just calls the standard free() <a href="CppLibrary.htm">library</a> procedure, but&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppApplication.htm">application</a>s that call triangulate() may replace trimalloc() and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;trifree() in triangle.c to use specialized <a href="CppMemory.htm">memory</a> allocators.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Here's a guide to help you decide which fields you must <a href="CppInitialize.htm">initialize</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;before you call triangulate().&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`in':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `<a href="CppPointer.htm">point</a>list' must always <a href="CppPointer.htm">point</a> to a list of <a href="CppPointer.htm">point</a>s; `numberof<a href="CppPointer.htm">point</a>s'&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and `numberof<a href="CppPointer.htm">point</a>attributes' must be properly set.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`<a href="CppPointer.htm">point</a>markerlist' must either be set to <a href="CppNULL.htm">NULL</a> (in which <b><a href="CppCase.htm">case</a></b> all&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;markers <b><a href="CppDefault.htm">default</a></b> to zero), or must <a href="CppPointer.htm">point</a> to a list of markers.&nbsp;&nbsp;If&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`numberof<a href="CppPointer.htm">point</a>attributes' is not zero, `<a href="CppPointer.htm">point</a>attributelist' must&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPointer.htm">point</a> to a list of <a href="CppPointer.htm">point</a> attributes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> If the `r' <b><a href="CppSwitch.htm">switch</a></b> is used, `trianglelist' must <a href="CppPointer.htm">point</a> to a list of&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangles, and `numberoftriangles', `numberofcorners', and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`numberoftriangleattributes' must be properly set.&nbsp;&nbsp;If&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`numberoftriangleattributes' is not zero, `triangleattributelist'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;must <a href="CppPointer.htm">point</a> to a list of triangle attributes.&nbsp;&nbsp;If the `a' <b><a href="CppSwitch.htm">switch</a></b> is&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used (with no number following), `trianglearealist' must <a href="CppPointer.htm">point</a> to a&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list of triangle area constraints.&nbsp;&nbsp;`neighborlist' may be ignored.&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> If the `p' <b><a href="CppSwitch.htm">switch</a></b> is used, `segmentlist' must <a href="CppPointer.htm">point</a> to a list of&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segments, `numberofsegments' must be properly set, and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`segmentmarkerlist' must either be set to <a href="CppNULL.htm">NULL</a> (in which <b><a href="CppCase.htm">case</a></b> all&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;markers <b><a href="CppDefault.htm">default</a></b> to zero), or must <a href="CppPointer.htm">point</a> to a list of markers.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> If the `p' <b><a href="CppSwitch.htm">switch</a></b> is used without the `r' <b><a href="CppSwitch.htm">switch</a></b>, then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`numberofholes' and `numberofregions' must be properly set.&nbsp;&nbsp;If&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`numberofholes' is not zero, `holelist' must <a href="CppPointer.htm">point</a> to a list of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;holes.&nbsp;&nbsp;If `numberofregions' is not zero, `regionlist' must <a href="CppPointer.htm">point</a> to <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a list of region constraints.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> If the `p' <b><a href="CppSwitch.htm">switch</a></b> is used, `holelist', `numberofholes',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`regionlist', and `numberofregions' is copied to `out'.&nbsp;&nbsp;(You can&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nonetheless get away with not initializing them <b><a href="CppIf.htm">if</a></b> the `r' <b><a href="CppSwitch.htm">switch</a></b> is <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `edgelist', `edgemarkerlist', `normlist', and `numberofedges' may be <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ignored.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`out':&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `<a href="CppPointer.htm">point</a>list' must be <a href="CppInitialize.htm">initialize</a>d (<a href="CppNULL.htm">NULL</a> or <a href="CppPointer.htm">point</a>ing to <a href="CppMemory.htm">memory</a>) unless&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the `N' <b><a href="CppSwitch.htm">switch</a></b> is used.&nbsp;&nbsp;`<a href="CppPointer.htm">point</a>markerlist' must be <a href="CppInitialize.htm">initialize</a>d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unless the `N' or `B' <b><a href="CppSwitch.htm">switch</a></b> is used.&nbsp;&nbsp;If `N' is not used and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`in-&gt;numberof<a href="CppPointer.htm">point</a>attributes' is not zero, `<a href="CppPointer.htm">point</a>attributelist' must <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be <a href="CppInitialize.htm">initialize</a>d.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `trianglelist' must be <a href="CppInitialize.htm">initialize</a>d unless the `E' <b><a href="CppSwitch.htm">switch</a></b> is used.&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`neighborlist' must be <a href="CppInitialize.htm">initialize</a>d <b><a href="CppIf.htm">if</a></b> the `n' <b><a href="CppSwitch.htm">switch</a></b> is used.&nbsp;&nbsp;If&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the `E' <b><a href="CppSwitch.htm">switch</a></b> is not used and (`in-&gt;numberofelementattributes' is&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;not zero or the `A' <b><a href="CppSwitch.htm">switch</a></b> is used), `elementattributelist' must be&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>d.&nbsp;&nbsp;`trianglearealist' may be ignored.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `segmentlist' must be <a href="CppInitialize.htm">initialize</a>d <b><a href="CppIf.htm">if</a></b> the `p' or `c' <b><a href="CppSwitch.htm">switch</a></b> is used,&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and the `P' <b><a href="CppSwitch.htm">switch</a></b> is not used.&nbsp;&nbsp;`segmentmarkerlist' must also be&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppInitialize.htm">initialize</a>d under these circumstances unless the `B' <b><a href="CppSwitch.htm">switch</a></b> is used. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `edgelist' must be <a href="CppInitialize.htm">initialize</a>d <b><a href="CppIf.htm">if</a></b> the `e' <b><a href="CppSwitch.htm">switch</a></b> is used.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`edgemarkerlist' must be <a href="CppInitialize.htm">initialize</a>d <b><a href="CppIf.htm">if</a></b> the `e' <b><a href="CppSwitch.htm">switch</a></b> is used and&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the `B' <b><a href="CppSwitch.htm">switch</a></b> is not.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `holelist', `regionlist', `normlist', and all scalars may be ignored.<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`vorout' (only needed <b><a href="CppIf.htm">if</a></b> `v' <b><a href="CppSwitch.htm">switch</a></b> is used):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `<a href="CppPointer.htm">point</a>list' must be <a href="CppInitialize.htm">initialize</a>d.&nbsp;&nbsp;If `in-&gt;numberof<a href="CppPointer.htm">point</a>attributes'&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is not zero, `<a href="CppPointer.htm">point</a>attributelist' must be <a href="CppInitialize.htm">initialize</a>d.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`<a href="CppPointer.htm">point</a>markerlist' may be ignored.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> `edgelist' and `normlist' must both be <a href="CppInitialize.htm">initialize</a>d.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`edgemarkerlist' may be ignored.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> Everything <b><a href="CppElse.htm">else</a></b> may be ignored.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;After a call to triangulate(), the valid fields of `out' and `vorout'&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;will depend, in an obvious way, on the choice of <b><a href="CppSwitch.htm">switch</a></b>es used.&nbsp;&nbsp;Note&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;that when the `p' <b><a href="CppSwitch.htm">switch</a></b> is used, the <a href="CppPointer.htm">pointer</a>s `holelist' and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;`regionlist' are copied from `in' to `out', but no <b><a href="CppNew.htm">new</a></b> space is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;allocated; be careful that you don't free() the same <a href="CppArray.htm">array</a> twice.&nbsp;&nbsp;On&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;the other hand, Triangle will never copy the `<a href="CppPointer.htm">point</a>list' <a href="CppPointer.htm">pointer</a> (or <a href="CppAny.htm">any</a> <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;others); <b><a href="CppNew.htm">new</a></b> space is allocated <b><a href="CppFor.htm">for</a></b> `out-&gt;<a href="CppPointer.htm">point</a>list', or <b><a href="CppIf.htm">if</a></b> the `N'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> is used, `out-&gt;<a href="CppPointer.htm">point</a>list' remains un<a href="CppInitialize.htm">initialize</a>d.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;All of the meaningful `numberof' fields will be properly set; <b><a href="CppFor.htm">for</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppInstance.htm">instance</a>, `numberofedges' will represent the number of edges in the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;triangulation whether or not the edges were written.&nbsp;&nbsp;If segments are&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;not used, `numberofsegments' will indicate the number of boundary edges. <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> __cplusplus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<b><a href="CppExtern.htm">extern</a></b> "C" {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppEndif.htm">#endif</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppDouble.htm">double</a></b> REAL;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppInt.htm">int</a></b> VOID;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB<br/>
<b><a href="CppInt.htm">int</a></b> triangle_main(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>** <a href="CppArgc.htm">argv</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB<br/>
);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppDefine.htm">#define</a> ANSI_DECLARATORS <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppIfndef.htm">#ifndef</a> ANSI_DECLARATORS<br/>
<a href="CppPragma.htm">#pragma</a> error<br/>
I_WILL_NOT_COMPILE<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> triangulateio {<br/>
&nbsp;&nbsp;REAL *<a href="CppPointer.htm">point</a>list;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;REAL *<a href="CppPointer.htm">point</a>attributelist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *<a href="CppPointer.htm">point</a>markerlist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberof<a href="CppPointer.htm">point</a>s;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberof<a href="CppPointer.htm">point</a>attributes;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *trianglelist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;REAL *triangleattributelist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;REAL *trianglearealist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> In only <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *neighborlist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Out only <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberoftriangles;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberofcorners;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberoftriangleattributes;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *segmentlist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *segmentmarkerlist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberofsegments;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> out <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;REAL *holelist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> <a href="CppPointer.htm">pointer</a> to <a href="CppArray.htm">array</a> copied out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberofholes;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> copied out <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;REAL *regionlist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> <a href="CppPointer.htm">pointer</a> to <a href="CppArray.htm">array</a> copied out <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberofregions;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> In <a href="CppOperatorDivide.htm">/</a> copied out <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *edgelist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Out only <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> *edgemarkerlist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not used with Voronoi diagram; out only <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;REAL *normlist;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Used only with Voronoi diagram; out only <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> numberofedges;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Out only <a href="CppComment.htm">*/</a><br/>
};<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> ANSI_DECLARATORS<br/>
<b><a href="CppVoid.htm">void</a></b> triangulate(<b><a href="CppChar.htm">char</a></b> *, <b><a href="CppStruct.htm">struct</a></b> triangulateio *, <b><a href="CppStruct.htm">struct</a></b> triangulateio *,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppStruct.htm">struct</a></b> triangulateio *);<br/>
<b><a href="CppVoid.htm">void</a></b> trifree(VOID *memptr);<br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<b><a href="CppVoid.htm">void</a></b> triangulate();<br/>
<b><a href="CppVoid.htm">void</a></b> trifree();<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not ANSI_DECLARATORS <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppUndef.htm">#undef</a> ANSI_DECLARATORS <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppIfdef.htm">#ifdef</a> __cplusplus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB<br/>
}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>RJCB<br/>
<a href="CppEndif.htm">#endif</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RJCB<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolTriangle/tricall.c</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolTriangle/tricall.c" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;(tricall.c)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Example program that demonstrates how to call Triangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Accompanies Triangle <a href="CppVersion.htm">Version</a> 1.6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;July 19, 1996&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;This file is placed in the <b><a href="CppPublic.htm">public</a></b> domain (but the file that it calls&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;is still copyrighted!) by&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Jonathan Ri<b><a href="CppChar.htm">char</a></b>d Shewchuk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;2360 Woolsey #H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;Berkeley, California&nbsp;&nbsp;94705-1927&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;jrs@cs.berkeley.edu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> If SINGLE is defined when triangle.o is <a href="CppCompile.htm">compile</a>d, it should also be&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp; defined here.&nbsp;&nbsp;If not, it should not be defined here.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> <a href="CppDefine.htm">#define</a> SINGLE <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> SINGLE<br/>
<a href="CppDefine.htm">#define</a> REAL <b><a href="CppFloat.htm">float</a></b><br/>
<a href="CppPreElse.htm">#else</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
<a href="CppDefine.htm">#define</a> REAL <b><a href="CppDouble.htm">double</a></b><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">/*</a> not SINGLE <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdioH.htm">stdio.h</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStd.htm">std</a>lib.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "triangle.h"<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;report()&nbsp;&nbsp; Print the input or output.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> report(io, markers, reporttriangles, reportneighbors, reportsegments,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reportedges, reportnorms)<br/>
<b><a href="CppStruct.htm">struct</a></b> triangulateio *io;<br/>
<b><a href="CppInt.htm">int</a></b> markers;<br/>
<b><a href="CppInt.htm">int</a></b> reporttriangles;<br/>
<b><a href="CppInt.htm">int</a></b> reportneighbors;<br/>
<b><a href="CppInt.htm">int</a></b> reportsegments;<br/>
<b><a href="CppInt.htm">int</a></b> reportedges;<br/>
<b><a href="CppInt.htm">int</a></b> reportnorms;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i, j;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; io-&gt;numberof<a href="CppPointer.htm">point</a>s; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("<a href="CppPoint.htm">Point</a> <a href="CppOperatorModulus.htm">%</a>4d:", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 2; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.6g", io-&gt;<a href="CppPointer.htm">point</a>list[i * 2 <a href="CppOperatorPlus.htm">+</a> j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (io-&gt;numberof<a href="CppPointer.htm">point</a>attributes &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp; attributes");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; io-&gt;numberof<a href="CppPointer.htm">point</a>attributes; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.6g",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; io-&gt;<a href="CppPointer.htm">point</a>attributelist[i * io-&gt;numberof<a href="CppPointer.htm">point</a>attributes <a href="CppOperatorPlus.htm">+</a> j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (markers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp; marker <a href="CppOperatorModulus.htm">%</a>d\n", io-&gt;<a href="CppPointer.htm">point</a>markerlist[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;printf("\n");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (reporttriangles <a href="CppOperatorLogicalOr.htm">||</a> reportneighbors) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; io-&gt;numberoftriangles; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (reporttriangles) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Triangle <a href="CppOperatorModulus.htm">%</a>4d <a href="CppPointer.htm">point</a>s:", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; io-&gt;numberofcorners; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d", io-&gt;trianglelist[i * io-&gt;numberofcorners <a href="CppOperatorPlus.htm">+</a> j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (io-&gt;numberoftriangleattributes &gt; 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp; attributes");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; io-&gt;numberoftriangleattributes; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.6g", io-&gt;triangleattributelist[i *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; io-&gt;numberoftriangleattributes <a href="CppOperatorPlus.htm">+</a> j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (reportneighbors) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Triangle <a href="CppOperatorModulus.htm">%</a>4d neighbors:", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 3; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d", io-&gt;neighborlist[i * 3 <a href="CppOperatorPlus.htm">+</a> j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (reportsegments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; io-&gt;numberofsegments; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Segment <a href="CppOperatorModulus.htm">%</a>4d <a href="CppPointer.htm">point</a>s:", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 2; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d", io-&gt;segmentlist[i * 2 <a href="CppOperatorPlus.htm">+</a> j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (markers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp; marker <a href="CppOperatorModulus.htm">%</a>d\n", io-&gt;segmentmarkerlist[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (reportedges) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; io-&gt;numberofedges; i<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Edge <a href="CppOperatorModulus.htm">%</a>4d <a href="CppPointer.htm">point</a>s:", i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 2; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>4d", io-&gt;edgelist[i * 2 <a href="CppOperatorPlus.htm">+</a> j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (reportnorms <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (io-&gt;edgelist[i * 2 <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1)) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j <a href="CppOperatorAssign.htm">=</a> 0; j &lt; 2; j<a href="CppOperatorIncrement.htm">++</a>) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp;<a href="CppOperatorModulus.htm">%</a>.6g", io-&gt;normlist[i * 2 <a href="CppOperatorPlus.htm">+</a> j]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (markers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("&nbsp;&nbsp; marker <a href="CppOperatorModulus.htm">%</a>d\n", io-&gt;edgemarkerlist[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("\n");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;<a href="CppMain.htm">main</a>()&nbsp;&nbsp; Create and refine a mesh.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a>***************************************************************************<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> triangulateio in, mid, out, vorout;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Define input <a href="CppPointer.htm">point</a>s. <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;in.numberof<a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;in.numberof<a href="CppPointer.htm">point</a>attributes <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc(in.numberof<a href="CppPointer.htm">point</a>s * 2 * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list[1] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list[2] <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list[3] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list[4] <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list[5] <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list[6] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>list[7] <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>attributelist <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc(in.numberof<a href="CppPointer.htm">point</a>s *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in.numberof<a href="CppPointer.htm">point</a>attributes *<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>attributelist[0] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>attributelist[1] <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>attributelist[2] <a href="CppOperatorAssign.htm">=</a> 11.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>attributelist[3] <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>markerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) malloc(in.numberof<a href="CppPointer.htm">point</a>s * <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>));<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>markerlist[0] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>markerlist[1] <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>markerlist[2] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;in.<a href="CppPointer.htm">point</a>markerlist[3] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;in.numberofsegments <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;in.numberofholes <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;in.numberofregions <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;in.regionlist <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc(in.numberofregions * 4 * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;in.regionlist[0] <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
&nbsp;&nbsp;in.regionlist[1] <a href="CppOperatorAssign.htm">=</a> 5.0;<br/>
&nbsp;&nbsp;in.regionlist[2] <a href="CppOperatorAssign.htm">=</a> 7.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Regional attribute (<b><a href="CppFor.htm">for</a></b> whole mesh). <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;in.regionlist[3] <a href="CppOperatorAssign.htm">=</a> 0.1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Area constraint that will not be used. <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;printf("Input <a href="CppPointer.htm">point</a> set:\n\n");<br/>
&nbsp;&nbsp;report(&amp;in, 1, 0, 0, 0, 0, 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make necessary <a href="CppInitialize.htm">initialization</a>s so that Triangle can <b><a href="CppReturn.htm">return</a></b> a <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangulation in `mid' and a voronoi diagram in `vorout'.&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;mid.<a href="CppPointer.htm">point</a>list <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>N <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>N <b><a href="CppSwitch.htm">switch</a></b> used or number of <a href="CppPointer.htm">point</a> attributes is zero: <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;mid.<a href="CppPointer.htm">point</a>attributelist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;mid.<a href="CppPointer.htm">point</a>markerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>; <a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>N or <a href="CppOperatorMinus.htm">-</a>B <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;mid.trianglelist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>E <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>E <b><a href="CppSwitch.htm">switch</a></b> used or number of triangle attributes is zero: <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;mid.triangleattributelist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;mid.neighborlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>n <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> segments are output (-p or <a href="CppOperatorMinus.htm">-</a>c) and <a href="CppOperatorMinus.htm">-</a>P not used: <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;mid.segmentlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> segments are output (-p or <a href="CppOperatorMinus.htm">-</a>c) and <a href="CppOperatorMinus.htm">-</a>P and <a href="CppOperatorMinus.htm">-</a>B not used: <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;mid.segmentmarkerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;mid.edgelist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>e <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;mid.edgemarkerlist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>e used and <a href="CppOperatorMinus.htm">-</a>B not used. <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;vorout.<a href="CppPointer.htm">point</a>list <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>v <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>v <b><a href="CppSwitch.htm">switch</a></b> used and number of attributes is not zero: <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vorout.<a href="CppPointer.htm">point</a>attributelist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;vorout.edgelist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>v <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;vorout.normlist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>v <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Triangulate the <a href="CppPointer.htm">point</a>s.&nbsp;&nbsp;Switches are chosen to read and write a&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; PSLG (p), preserve the convex hull (c), number everything from&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; zero (z), assign a regional attribute to each element (A), and&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; produce an edge list (e), a Voronoi diagram (v), and a triangle <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; neighbor list (n).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;triangulate("pczAevn", &amp;in, &amp;mid, &amp;vorout);<br/>
<br/>
&nbsp;&nbsp;printf("Initial triangulation:\n\n");<br/>
&nbsp;&nbsp;report(&amp;mid, 1, 1, 1, 1, 1, 0);<br/>
&nbsp;&nbsp;printf("Initial Voronoi diagram:\n\n");<br/>
&nbsp;&nbsp;report(&amp;vorout, 0, 0, 0, 0, 1, 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Attach area constraints to the triangles in preparation <b><a href="CppFor.htm">for</a></b> <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; refining the triangulation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Needed only <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>r and <a href="CppOperatorMinus.htm">-</a>a <b><a href="CppSwitch.htm">switch</a></b>es used: <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;mid.trianglearealist <a href="CppOperatorAssign.htm">=</a> (REAL *) malloc(mid.numberoftriangles * <b><a href="CppSizeof.htm">sizeof</a></b>(REAL));<br/>
&nbsp;&nbsp;mid.trianglearealist[0] <a href="CppOperatorAssign.htm">=</a> 3.0;<br/>
&nbsp;&nbsp;mid.trianglearealist[1] <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Make necessary <a href="CppInitialize.htm">initialization</a>s so that Triangle can <b><a href="CppReturn.htm">return</a></b> a <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangulation in `out'.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;out.<a href="CppPointer.htm">point</a>list <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>N <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>N <b><a href="CppSwitch.htm">switch</a></b> used or number of attributes is zero: <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;out.<a href="CppPointer.htm">point</a>attributelist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
&nbsp;&nbsp;out.trianglelist <a href="CppOperatorAssign.htm">=</a> (<b><a href="CppInt.htm">int</a></b> *) <a href="CppNULL.htm">NULL</a>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>E <b><a href="CppSwitch.htm">switch</a></b> used. <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not needed <b><a href="CppIf.htm">if</a></b> <a href="CppOperatorMinus.htm">-</a>E <b><a href="CppSwitch.htm">switch</a></b> used or number of triangle attributes is zero: <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;out.triangleattributelist <a href="CppOperatorAssign.htm">=</a> (REAL *) <a href="CppNULL.htm">NULL</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Refine the triangulation according to the attached <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>&nbsp;&nbsp; triangle area constraints.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;triangulate("prazBP", &amp;mid, &amp;out, (<b><a href="CppStruct.htm">struct</a></b> triangulateio *) <a href="CppNULL.htm">NULL</a>);<br/>
<br/>
&nbsp;&nbsp;printf("Refined triangulation:\n\n");<br/>
&nbsp;&nbsp;report(&amp;out, 0, 1, 0, 0, 0, 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Free all allocated <a href="CppArray.htm">array</a>s, including those allocated by Triangle. <a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;free(in.<a href="CppPointer.htm">point</a>list);<br/>
&nbsp;&nbsp;free(in.<a href="CppPointer.htm">point</a>attributelist);<br/>
&nbsp;&nbsp;free(in.<a href="CppPointer.htm">point</a>markerlist);<br/>
&nbsp;&nbsp;free(in.regionlist);<br/>
&nbsp;&nbsp;free(mid.<a href="CppPointer.htm">point</a>list);<br/>
&nbsp;&nbsp;free(mid.<a href="CppPointer.htm">point</a>attributelist);<br/>
&nbsp;&nbsp;free(mid.<a href="CppPointer.htm">point</a>markerlist);<br/>
&nbsp;&nbsp;free(mid.trianglelist);<br/>
&nbsp;&nbsp;free(mid.triangleattributelist);<br/>
&nbsp;&nbsp;free(mid.trianglearealist);<br/>
&nbsp;&nbsp;free(mid.neighborlist);<br/>
&nbsp;&nbsp;free(mid.segmentlist);<br/>
&nbsp;&nbsp;free(mid.segmentmarkerlist);<br/>
&nbsp;&nbsp;free(mid.edgelist);<br/>
&nbsp;&nbsp;free(mid.edgemarkerlist);<br/>
&nbsp;&nbsp;free(vorout.<a href="CppPointer.htm">point</a>list);<br/>
&nbsp;&nbsp;free(vorout.<a href="CppPointer.htm">point</a>attributelist);<br/>
&nbsp;&nbsp;free(vorout.edgelist);<br/>
&nbsp;&nbsp;free(vorout.normlist);<br/>
&nbsp;&nbsp;free(out.<a href="CppPointer.htm">point</a>list);<br/>
&nbsp;&nbsp;free(out.<a href="CppPointer.htm">point</a>attributelist);<br/>
&nbsp;&nbsp;free(out.trianglelist);<br/>
&nbsp;&nbsp;free(out.triangleattributelist);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
