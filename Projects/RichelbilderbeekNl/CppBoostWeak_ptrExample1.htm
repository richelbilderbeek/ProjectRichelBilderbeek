<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>BoostWeak_ptrExample1</title>
  <meta name="description" content="C++ BoostWeak_ptrExample1"/>
  <meta name="keywords" content="C++ BoostWeak_ptrExample1 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBoostWeak_ptrExample1.htm">BoostWeak_ptrExample1</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.627 at Wed Apr  2 15:20:46 2014
 -->
<p>
  <a href="CppBoostWeak_ptrExample1.htm">boost::weak_ptr example 1</a> is a
  <a href="CppBoostWeak_ptr.htm">boost::weak_ptr example</a>
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.10 (saucy)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.7.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppBoostWeak_ptrExample1/CppBoostWeak_ptrExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostWeak_ptrExample1/CppBoostWeak_ptrExample1.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri) #Or use the code below<br/>
# QT += core<br/>
# QT += gui<br/>
# greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
# <a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
#&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
# }<br/>
# <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
# unix {<br/>
#&nbsp;&nbsp; <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
# }<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri) #Or use the code below<br/>
# win32 {<br/>
#&nbsp;&nbsp; <a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
# }<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBoostWeak_ptrExample1/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostWeak_ptrExample1/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/weak_ptr.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a>A person with an ID<br/>
<b><a href="CppStruct.htm">struct</a></b> Person<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a Person with an ID<br/>
&nbsp;&nbsp;Person(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id) : m_id{id} {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Person his/her ID<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetId() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_id; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the Person his/her ID<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetId(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id) { m_id <a href="CppOperatorAssign.htm">=</a> id; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only allow a <a href="CppBoost.htm">Boost</a> <a href="CppSmartPointer.htm">smart pointer</a> to <b><a href="CppDelete.htm">delete</a></b> Person,<br/>
&nbsp;&nbsp;~Person() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only allow a <a href="CppBoost.htm">Boost</a> <a href="CppSmartPointer.htm">smart pointer</a> to <b><a href="CppDelete.htm">delete</a></b> Person,<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(Person*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Person his/her ID<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_id;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>A Person database with a single Person<br/>
<b><a href="CppStruct.htm">struct</a></b> Database<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a single Person (but more is possible as well)<br/>
&nbsp;&nbsp;Database() : m_persons{}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a single person<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_persons.push_back(<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Person&gt;(<b><a href="CppNew.htm">new</a></b> Person(1)));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Remove all Persons from the Database<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Clear()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_persons.resize(0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the first Person as a read-only <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Person * GetFirst1()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_persons[0].get(); <a href="CppComment.htm">//</a>Created from a Person*<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the first Person as a read-only <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a> <a href="CppPointer.htm">pointer</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Person&gt; GetFirst2()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_persons[0]; <a href="CppComment.htm">//</a>Created from a <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Person&gt;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Persons<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Person&gt; &gt; m_persons;<br/>
};<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a database<br/>
&nbsp;&nbsp;Database d;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain <a href="CppPointer.htm">pointer</a>s to the first object<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Person * <b><a href="CppConst.htm">const</a></b> p1 <a href="CppOperatorAssign.htm">=</a> d.GetFirst1();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Person&gt; p2 <a href="CppOperatorAssign.htm">=</a> d.GetFirst2();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2.use_count() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>To read from a <a href="CppBoostWeak_ptr.htm">boost::weak_ptr</a>, a <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>must be created from it<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Person&gt; r <a href="CppOperatorAssign.htm">=</a> p2.lock())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> r-&gt;GetId());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> p1; <a href="CppComment.htm">//</a>Good: does not not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> r.get(); <a href="CppComment.htm">//</a>Good: does not not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>p1-&gt;SetId(-1); <a href="CppComment.htm">//</a>Good: does not not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>r-&gt;SetId(-1); <a href="CppComment.htm">//</a>Good: does not not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2.use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r.use_count() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Kill the person in the database,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>possibly resulting in dangling <a href="CppPointer.htm">pointer</a>s!<br/>
&nbsp;&nbsp;d.Clear();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(p1-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> 1); <a href="CppComment.htm">//</a>Bad: use of dangling <a href="CppPointer.htm">pointer</a>! Not detectable!<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2.use_count() <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Good: dangling <a href="CppPointer.htm">pointer</a> is detected<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Person&gt; r <a href="CppOperatorAssign.htm">=</a> p2.lock())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Bad: should not get here! ");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(r-&gt;GetId() <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> !"Bad: use of dangling <a href="CppPointer.htm">pointer</a>!"); <a href="CppComment.htm">//</a>Will not get here!<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Good: dangling <a href="CppPointer.htm">pointer</a> is not used\n";<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
