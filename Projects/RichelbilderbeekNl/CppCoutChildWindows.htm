<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>CoutChildWindows</title>
  <meta name="description" content="C++ CoutChildWindows"/>
  <meta name="keywords" content="C++ CoutChildWindows cout std::cout print child window windows children code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCoutChildWindows.htm">CoutChildWindows</a></h1>
<p>&nbsp;</p>
<p><a href="CppWindows.htm">Windows</a> <a href="CppCodeSnippets.htm">code snippet</a> to <a href="CppCout.htm">std::cout</a> the text of each windows and its children.</p>
<p>&nbsp;</p>
<p>Note that I really dislike all those Windows API casts. I have tried to make them as explicit as possible.</p>
<p>&nbsp;</p>
<p>This code is <a href="CppCompile.htm">compiled</a> under <a href="CppBuilder.htm">C++ Builder</a> 6.0.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lexical_cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;windows.h&gt;<br/>
<br/>
BOOL CALLBACK CoutEachChild(HWND hwnd, LPARAM lParam)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> 256;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> buffer[sz];<br/>
&nbsp;&nbsp;GetWindowText(hwnd,buffer,sz);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> window_name(buffer);<br/>
&nbsp;&nbsp;SendMessage(hwnd, WM_GETTEXT,sz <a href="CppOperatorMinus.htm">-</a> 1,<b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>&lt;LPARAM&gt;(buffer)); <a href="CppComment.htm">//</a>A dirty cast<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> child_name(buffer);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> window_adress <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(hwnd);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> debug_string <a href="CppOperatorAssign.htm">=</a> window_adress <a href="CppOperatorPlus.htm">+</a> " : " <a href="CppOperatorPlus.htm">+</a> window_name <a href="CppOperatorPlus.htm">+</a> " : " <a href="CppOperatorPlus.htm">+</a> child_name;<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "  * " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> debug_string <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> BOOL CALLBACK (*EnumChildFunc)();<br/>
&nbsp;&nbsp;HWND handle <a href="CppOperatorAssign.htm">=</a> GetWindow(GetForegroundWindow(),GW_HWNDFIRST);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(handle)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> 256;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> buffer[sz];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetWindowText(handle,buffer,sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> window_name(buffer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "* " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> window_name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;EnumChildWindows(handle,<b><a href="CppReinterpret_cast.htm">reinterpret_cast</a></b>&lt;EnumChildFunc&gt;(CoutEachChild), 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;handle <a href="CppOperatorAssign.htm">=</a> GetNextWindow(handle,GW_HWNDNEXT);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
