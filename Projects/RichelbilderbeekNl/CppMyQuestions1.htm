<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>My Questions: const_cast does not work to remove constness in argument</title>
  <meta name="description" content="C++ My Questions: const_cast does not work to remove constness in argument"/>
  <meta name="keywords" content="C++ STL My Questions const_cast does not work to remove constness in argument code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMyQuestions1.htm">const_cast does not work to remove constness in argument</a></h1>
<p>&nbsp;</p>
<p>One of my <a href="CppMyQuestions.htm">C++ questions</a> that has been solved!</p>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.programmersheaven.com/mb/CandCPP/390544/390544/const_cast-does-not-work-to-remove-constness-in-argument/?S=B20000#390544">View this post at the Programmers Heaven C++ forum</a></li>
</ul>
<p>&nbsp;</p>
<p>Posted on 7 May 2009 at 3:58 AM</p>
<p>&nbsp;</p>
<p>Dear fellow PH-users,</p>
<p>&nbsp;</p>
<p>When using <a href="CppSearch_n.htm">std::seach_n</a> in a const-correct way I ran into problems. I found a workaround, but I hope one of you can give an in-depth explanation.</p>
<p>&nbsp;</p>
<p>The following code should compile, but it doesn't (under the IDE C++ Builder 6.0 Enterprise edition with the Borland compiler BCB.exe version 6.0.10.157):</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(),n,'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The compile-error given is 'Cannot modify const object', because 'n' is of type 'const int'. Although the real problem is in the std::search_n algorithm, I use the following workaround:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(),<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n),'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Due to the static_cast to integer type, this compiles nicely. But what I also tried is to const_cast the const integer n to integer type, as below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abc***def";<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 3; <a href="CppComment.htm">//</a>Number of repeats<br/>
<a href="CppSearch_n.htm">std::search_n</a>( s.begin(),s.end(),<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n),'*');<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This again gives the compile-error 'Cannot modify const object'.</p>
<p>&nbsp;</p>
<p>IMHO the const_cast is better then the static_cast (because I want the constness away).</p>
<p>&nbsp;</p>
<p>So my question is: why does static_cast work and why doesn't const_cast work?</p>
<p>&nbsp;</p>
<p>Thanks in advance, Bilderbikkel</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Answer by Sergey (thanks!)</h2>
<p>&nbsp;</p>
<p>As section 5.2.11 Const cast [expr.const.cast] of ISO C++ standard suggests, there are limited amount of conversion that can be performed using const_cast, so const_cast operator can be briefly described as applicable to two pointers to the same type with various cv-qualifiers. So point is that you can't const_cast to any type other that pointer or reference.</p>
<p>&nbsp;</p>
<p>And static_cast worked becouse it created new temporary object from existing one, it is was similar to use "const int n = 10; search_n( s.begin(), s.end(), int( n), '*');". But I suppose that these casts are redundant becouse arguments are passed by value so algorithm don't affects "outer" variables.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
