<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>operator=</title>
  <meta name="description" content="C++ operator="/>
  <meta name="keywords" content="C++ operator= operator assign assign-operator copy-assign-operator code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppOperatorAssign.htm">operator=</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppOperatorAssign.htm">operator=</a> is an <a href="CppOperator.htm">operator</a>, that is called the 
  <a href="CppOperatorAssign.htm">assign operator</a> and <a href="CppOperatorAssign.htm">assignment operator</a>.
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;MyClass&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> MyClass&amp; rhs)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy the <b><a href="CppClass.htm">class</a></b> members<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
&nbsp;&nbsp;}<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Handle assignment to self: Identity test</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;MyClass&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> MyClass&amp; rhs)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>'Identity test'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b> <a href="CppOperatorEqual.htm">==</a> &amp;rhs) <b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
 <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Copy<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>...<br/>
 <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Return *<b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
&nbsp;&nbsp;}<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Handle assignment to self: Copy and swap</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;MyClass&amp; <b><a href="CppOperator.htm">operator</a></b>=(MyClass tempCopy) <a href="CppComment.htm">//</a>'Copy' (by passing by value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>'Swap'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Swap(tempCopy); <a href="CppComment.htm">//</a>Swaps the data of temp with *<b><a href="CppThis.htm">this</a></b><br/>
 <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
&nbsp;&nbsp;}<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Swap(MyClass&amp; m)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Swap data of m with <b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.htm">std::swap</a>(mX, m.mX);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Other data...<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mX; <a href="CppComment.htm">//</a>Just to have a member variable<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    In <a href="CppClassDesign.htm">class design</a>, have <a href="CppOperatorAssign.htm">assignment
    operators</a> return a reference to *<a href="CppThis.htm">this</a> [1,3].
  </li>
  <li>
    In <a href="CppClassDesign.htm">class design</a>, also handle assignment to self [2,4].
    To handle assignment to self there are two techniques: 'identity test' or 'copy
    and swap'.
  </li>
  <li>
    Prefer the <a href="CppListInitialization.htm">{}-initializer</a> 
    <a href="CppSyntax.htm">syntax</a> for <a href="CppDeclaration.htm">declarations</a>
    with a named type [7].
    Prefer the <a href="CppOperatorAssign.htm">=</a> <a href="CppSyntax.htm">syntax</a> 
    for the <a href="CppListInitialization.htm">initialization</a> in 
    <a href="CppDeclaration.htm">declarations</a> using <a href="CppAuto.htm">auto</a> [6]
  </li>
  <li>
    Reversing the order of the pair of symbols in the <a href="CppOperator.htm">operators</a> 
    <a href="CppOperatorNotEqual.htm">!=</a>, <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 
    and <a href="CppOperatorLessEqual.htm">&lt;=</a> (by writing them as =!, =&gt; and =&lt; respectively) 
    is normally a <a href="CppSyntaxError.htm">syntax error</a> [5]
  <li>
  </li>
    In some cases, writing 
    <a href="CppOperatorNotEqual.htm">!=</a> as =! will not be a 
    <a href="CppSyntaxError.htm">syntax error</a>, but almost certainly will be a 
    <a href="CppLogicError.htm">logic error</a> that has an effect at execution time [5]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN: 0-321-33487-6. Item 10: Have assignment operators return a reference to *this.</li>
  <li><!--  2 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN: 0-321-33487-6. Item 11: Handle assignment to self in operator=.</li>
  <li><!--  3 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 82: 'An assignment operator shall return a reference to *this.'</li>
  <li><!--  4 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 81: 'The assignment operator shall handle self-assignment correctly'</li>
  <li><!--  5 -->Paul Deitel, Harvey Deitel. C++11 for programmers (2nd edition). 2014. ISBN: 978-0-13-343985-4. Chapter 2.4, Common Programming Error 2.2. page 32: 'Reversing the order of the pair of symbols in the operators !=, &gt;= and &lt; (by writing them as =!, =&gt; and =&lt; respectively) is normally a syntax error. In some cases, writing != as =! will not be a syntax error, but almost certainly will be a logic error that has an effect at execution time.'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice, page 169: '[20] Prefer the = syntax for the initialization in declarations using auto'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice, page 169: '[19] Prefer the {}-initializer syntax for declarations with a named type'</li>

</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
