<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MapToXml</title>
  <meta name="description" content="C++ MapToXml"/>
  <meta name="keywords" content="C++ MapToXml "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMapToXml.htm">MapToXml</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppMapToXml-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppMapToXml/CppMapToXml.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMapToXml/CppMapToXml.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
<br/>
#<br/>
#<br/>
# Type of compile<br/>
#<br/>
#<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
}<br/>
<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
<br/>
unix {<br/>
&nbsp;&nbsp;<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
}<br/>
<br/>
#<br/>
#<br/>
# <a href="CppBoost.htm">Boost</a><br/>
#<br/>
#<br/>
<br/>
win32 {<br/>
&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMapToXml/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMapToXml/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a <a href="CppStdString.htm">std::string</a> to single-line <a href="CppXml.htm">XML</a><br/>
<a href="CppComment.htm">///</a>For example, a <a href="CppStdString.htm">std::string</a> with tag name "cat_name" and content "Kitty" becomes<br/>
/<a href="CppComment.htm">//</a> &lt;cat_name&gt;Kitty&lt;/cat_name&gt;<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with <a href="CppXml.htm">Xml</a>ToStr<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T, <b><a href="CppClass.htm">class</a></b> U&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; tag_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> U&amp; content)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;"&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> tag_name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> content <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> tag_name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No test here, as To<a href="CppXml.htm">Xml</a> is used in testing From<a href="CppXml.htm">Xml</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a <a href="CppStdString.htm">std::string</a> to single-line <a href="CppXml.htm">XML</a><br/>
<a href="CppComment.htm">///</a>For example, a <a href="CppStdString.htm">std::string</a> with tag name "cat_name" and content "Kitty" becomes<br/>
/<a href="CppComment.htm">//</a> &lt;cat_name&gt;Kitty&lt;/cat_name&gt;<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with <a href="CppXml.htm">Xml</a>ToStr<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T, <b><a href="CppClass.htm">class</a></b> U&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> To<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; tag_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> U&amp; content,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppStdString.htm">std::string</a>(<b><a href="CppConst.htm">const</a></b> T&amp;)&gt; tag_to_str_function,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppStdString.htm">std::string</a>(<b><a href="CppConst.htm">const</a></b> U&amp;)&gt; content_to_str_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;"&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> tag_to_str_function(tag_name) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> content_to_str_function(content)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> tag_to_str_function(tag_name) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No test here, as To<a href="CppXml.htm">Xml</a> is used in testing From<a href="CppXml.htm">Xml</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a single-line <a href="CppXml.htm">XML</a> to its content and its tag name<br/>
<a href="CppComment.htm">///</a>For example, the <a href="CppXml.htm">XML</a> line "&lt;cat_name&gt;Kitty&lt;/cat_name&gt;"<br/>
<a href="CppComment.htm">///</a>becomes a <a href="CppStdPair.htm">std::pair</a> with elements {"cat_name","Kitty"}<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with To<a href="CppXml.htm">Xml</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>, <b><a href="CppClass.htm">class</a></b> U <a href="CppOperatorAssign.htm">=</a> <a href="CppStdString.htm">std::string</a>&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;T,U&gt; From<a href="CppXml.htm">Xml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; xml)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!xml.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xml[0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xml[xml.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xml.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> tag_name_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(xml.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_name <a href="CppOperatorAssign.htm">=</a> xml.substr(1,tag_name_sz);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xml.find_last_of('/') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> content_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(xml.find_last_of('/')) <a href="CppOperatorMinus.htm">-</a> tag_name_sz <a href="CppOperatorMinus.htm">-</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> content <a href="CppOperatorAssign.htm">=</a> xml.substr(tag_name.size() <a href="CppOperatorPlus.htm">+</a> 2,content_sz);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;T,U&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;T&gt;(tag_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;U&gt;(content)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(To<a href="CppXml.htm">Xml</a>(p.first,p.second) <a href="CppOperatorEqual.htm">==</a> xml);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a single-line <a href="CppXml.htm">XML</a> to its content and its tag name<br/>
<a href="CppComment.htm">///</a>For example, the <a href="CppXml.htm">XML</a> line "&lt;cat_name&gt;Kitty&lt;/cat_name&gt;"<br/>
<a href="CppComment.htm">///</a>becomes a <a href="CppStdPair.htm">std::pair</a> with elements {"cat_name","Kitty"}<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with To<a href="CppXml.htm">Xml</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T, <b><a href="CppClass.htm">class</a></b> U&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;T,U&gt; From<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; xml,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;T(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; str_to_tag_function,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;U(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; str_to_content_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!xml.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xml[0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xml[xml.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xml.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> tag_name_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(xml.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_name <a href="CppOperatorAssign.htm">=</a> xml.substr(1,tag_name_sz);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(xml.find_last_of('/') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> content_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(xml.find_last_of('/')) <a href="CppOperatorMinus.htm">-</a> tag_name_sz <a href="CppOperatorMinus.htm">-</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> content <a href="CppOperatorAssign.htm">=</a> xml.substr(tag_name.size() <a href="CppOperatorPlus.htm">+</a> 2,content_sz);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;T,U&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;str_to_tag_function(tag_name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;str_to_content_function(content)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot <b><a href="CppDo.htm">do</a></b> <b><a href="CppThis.htm">this</a></b> <a href="CppDebug.htm">debug</a> check <a href="CppAny.htm">any</a>more, as one would need<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a tag_to_str_function and content_to_str_function:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(To<a href="CppXml.htm">Xml</a>(p.first,p.second,tag_to_str_function,content_to_str_function) <a href="CppOperatorEqual.htm">==</a> xml);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a map to single-line <a href="CppXml.htm">XML</a><br/>
<a href="CppComment.htm">///</a>For example, an <b><a href="CppInt.htm">int</a></b>-to-string map of<br/>
/<a href="CppComment.htm">//</a> {{1,"one"}, {2,"two"}, {4,"four"}} and tag name "numbers" becomes the following <a href="CppXml.htm">XML</a> string:<br/>
<a href="CppComment.htm">///</a><br/>
/<a href="CppComment.htm">//</a> &lt;numbers&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;1&gt;one&lt;/1&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;2&gt;two&lt;/2&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;4&gt;four&lt;/4&gt;<br/>
/<a href="CppComment.htm">//</a> &lt;/numbers&gt;<br/>
<a href="CppComment.htm">///</a><br/>
/<a href="CppComment.htm">//</a> &lt;numbers&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;0&gt;&lt;key&gt;1&lt;/key&gt;&lt;value&gt;one&lt;/value&gt;&lt;/0&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;1&gt;&lt;key&gt;2&lt;/key&gt;&lt;value&gt;two&lt;/value&gt;&lt;/1&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;2&gt;&lt;key&gt;4&lt;/key&gt;&lt;value&gt;four&lt;/value&gt;&lt;/2&gt;<br/>
/<a href="CppComment.htm">//</a> &lt;/numbers&gt;<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>(indentation is added <b><a href="CppFor.htm">for</a></b> readability)<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with <a href="CppXml.htm">Xml</a>ToPtrs<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> MapTo<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tag_name,<br/>
&nbsp;&nbsp;T begin,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; end)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; begin<a href="CppOperatorNotEqual.htm">!=</a>end; <a href="CppOperatorIncrement.htm">++</a>begin)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> To<a href="CppXml.htm">Xml</a>( (*begin).first, (*begin).second);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> content { s.str() };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> To<a href="CppXml.htm">Xml</a>(tag_name,content);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a map to single-line <a href="CppXml.htm">XML</a><br/>
<a href="CppComment.htm">///</a>For example, an <b><a href="CppInt.htm">int</a></b>-to-string map of<br/>
/<a href="CppComment.htm">//</a> {{1,"one"}, {2,"two"}, {4,"four"}} and tag name "numbers" becomes the following <a href="CppXml.htm">XML</a> string:<br/>
<a href="CppComment.htm">///</a><br/>
/<a href="CppComment.htm">//</a> &lt;numbers&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;1&gt;one&lt;/1&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;2&gt;two&lt;/2&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;4&gt;four&lt;/4&gt;<br/>
/<a href="CppComment.htm">//</a> &lt;/numbers&gt;<br/>
<a href="CppComment.htm">///</a><br/>
/<a href="CppComment.htm">//</a> &lt;numbers&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;0&gt;&lt;key&gt;1&lt;/key&gt;&lt;value&gt;one&lt;/value&gt;&lt;/0&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;1&gt;&lt;key&gt;2&lt;/key&gt;&lt;value&gt;two&lt;/value&gt;&lt;/1&gt;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; &lt;2&gt;&lt;key&gt;4&lt;/key&gt;&lt;value&gt;four&lt;/value&gt;&lt;/2&gt;<br/>
/<a href="CppComment.htm">//</a> &lt;/numbers&gt;<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>(indentation is added <b><a href="CppFor.htm">for</a></b> readability)<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with <a href="CppXml.htm">Xml</a>ToPtrs<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> TagType, <b><a href="CppClass.htm">class</a></b> KeyType, <b><a href="CppClass.htm">class</a></b> ValueType&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> MapTo<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TagType&amp; tag_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType&gt; m,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppStdString.htm">std::string</a>(<b><a href="CppConst.htm">const</a></b> TagType&amp;&nbsp;&nbsp;)&gt; tag_to_str_function,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppStdString.htm">std::string</a>(<b><a href="CppConst.htm">const</a></b> KeyType&amp;&nbsp;&nbsp;)&gt; key_to_str_function,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppStdString.htm">std::string</a>(<b><a href="CppConst.htm">const</a></b> ValueType&amp;)&gt; value_to_str_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> end <a href="CppOperatorAssign.htm">=</a> <a href="CppStdEnd.htm">std::end</a>(m);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> begin <a href="CppOperatorAssign.htm">=</a> <a href="CppStdBegin.htm">std::begin</a>(m); begin<a href="CppOperatorNotEqual.htm">!=</a>end; <a href="CppOperatorIncrement.htm">++</a>begin)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> To<a href="CppXml.htm">Xml</a>( (*begin).first, (*begin).second, key_to_str_function, value_to_str_function);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> content { s.str() };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> To<a href="CppXml.htm">Xml</a>(tag_to_str_function(tag_name),content);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a single-line <a href="CppXml.htm">XML</a> to a map<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with MapTo<a href="CppXml.htm">Xml</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> KeyType, <b><a href="CppClass.htm">class</a></b> ValueType&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppXml.htm">Xml</a>ToMap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;KeyType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; str_to_key_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;ValueType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; str_to_value_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[s.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the name tag<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&lt;name&gt;...&lt;/name&gt;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> tag_name_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_name <a href="CppOperatorAssign.htm">=</a> s.substr(1,tag_name_sz);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType&gt; map;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove the name tags<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(tag_name_sz <a href="CppOperatorPlus.htm">+</a> 2,s.size() <a href="CppOperatorMinus.htm">-</a> (2 * tag_name_sz) <a href="CppOperatorMinus.htm">-</a> 5);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !t.empty(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the index tags and item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&lt;index&gt;item&lt;/index&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t[0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t[t.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> index <a href="CppOperatorAssign.htm">=</a> t.substr(1,index_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.find('/') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> item_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.find('/')) <a href="CppOperatorMinus.htm">-</a> index_sz <a href="CppOperatorMinus.htm">-</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> item_str <a href="CppOperatorAssign.htm">=</a> t.substr(index.size() <a href="CppOperatorPlus.htm">+</a> 2,item_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> total_sz <a href="CppOperatorAssign.htm">=</a> (2 * index_sz) <a href="CppOperatorPlus.htm">+</a> item_sz <a href="CppOperatorPlus.htm">+</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> t.substr(total_sz,t.size() <a href="CppOperatorMinus.htm">-</a> total_sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;map.insert(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str_to_key_function(index),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str_to_value_function(item_str)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot <b><a href="CppDo.htm">do</a></b> the test below, as one would need a key_to_str_function and content_to_str_function<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(MapTo<a href="CppXml.htm">Xml</a>(tag_name,map.begin(),map.end(),key_to_str_function,content_to_str_function) <a href="CppOperatorEqual.htm">==</a> s);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(tag_name,map);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use <b><a href="CppInt.htm">int</a></b> to <a href="CppStdString.htm">std::string</a> map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppInt.htm">int</a></b> KeyType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a> ValueType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>(1,"one") );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>(2,"two") );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>(4,"four") );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_name <a href="CppOperatorAssign.htm">=</a> "<a href="CppInt.htm">integer</a>s";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> map to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> xml <a href="CppOperatorAssign.htm">=</a> MapTo<a href="CppXml.htm">Xml</a>(tag_name,m.begin(),m.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppXml.htm">XML</a> back to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;KeyType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt;&amp; str_to_key_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;KeyType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;ValueType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt;&amp; str_to_value_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;ValueType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppXml.htm">Xml</a>ToMap&lt;KeyType,ValueType&gt;(xml,str_to_key_function,str_to_value_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.first <a href="CppOperatorEqual.htm">==</a> tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.second.size() <a href="CppOperatorEqual.htm">==</a> m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdEqual.htm">std::equal</a>(m.begin(),m.end(),p.second.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Again <a href="CppConvert.htm">convert</a> <a href="CppPointer.htm">pointer</a>s to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> MapTo<a href="CppXml.htm">Xml</a>(p.first,p.second.begin(),p.second.end()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use <a href="CppStdString.htm">std::string</a> to <b><a href="CppInt.htm">int</a></b> map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a> KeyType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppInt.htm">int</a></b> ValueType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>("one",1) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>("two",2) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>("four",4) );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_name <a href="CppOperatorAssign.htm">=</a> "<a href="CppInt.htm">integer</a>s";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> map to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> xml <a href="CppOperatorAssign.htm">=</a> MapTo<a href="CppXml.htm">Xml</a>(tag_name,m.begin(),m.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppXml.htm">XML</a> back to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;KeyType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt;&amp; str_to_key_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;KeyType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;ValueType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt;&amp; str_to_value_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;ValueType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppXml.htm">Xml</a>ToMap&lt;KeyType,ValueType&gt;(xml,str_to_key_function,str_to_value_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.first <a href="CppOperatorEqual.htm">==</a> tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.second.size() <a href="CppOperatorEqual.htm">==</a> m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdEqual.htm">std::equal</a>(m.begin(),m.end(),p.second.begin()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Again <a href="CppConvert.htm">convert</a> <a href="CppPointer.htm">pointer</a>s to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> MapTo<a href="CppXml.htm">Xml</a>(p.first,p.second.begin(),p.second.end()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use <b><a href="CppInt.htm">int</a></b> to <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&gt; map<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdString.htm">std::string</a> TagType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppInt.htm">int</a></b> KeyType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&gt; ValueType;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TagType tag_name { "<a href="CppInt.htm">integer</a>s again" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType&gt; m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>(1,<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>("one" )) ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>(4,<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>("four")) ));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m.insert( <a href="CppStdMake_pair.htm">std::make_pair</a>(9,<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>("nine")) ));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> map to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppStdString.htm">std::string</a>(<b><a href="CppConst.htm">const</a></b> TagType&amp;)&gt; tag_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> TagType&amp; tag)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> tag;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppStdString.htm">std::string</a>(<b><a href="CppConst.htm">const</a></b> KeyType&amp;&nbsp;&nbsp;)&gt; key_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> KeyType&amp; key)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(key);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<a href="CppStdString.htm">std::string</a>(<b><a href="CppConst.htm">const</a></b> ValueType&amp;)&gt; value_to_str_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> ValueType&amp; value)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *value;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> xml {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MapTo<a href="CppXml.htm">Xml</a>(tag_name,m,tag_to_str_function,key_to_str_function,value_to_str_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppXml.htm">XML</a> back to map<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;TagType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt;&amp; str_to_tag_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;KeyType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt;&amp; str_to_key_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;KeyType&gt;(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;ValueType(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt;&amp; str_to_value_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdMap.htm">std::map</a>&lt;KeyType,ValueType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppXml.htm">Xml</a>ToMap&lt;KeyType,ValueType&gt;(xml,str_to_key_function,str_to_value_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.first <a href="CppOperatorEqual.htm">==</a> tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.second.size() <a href="CppOperatorEqual.htm">==</a> m.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEqual.htm">std::equal</a>(m.begin(),m.end(),p.second.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[key_to_str_function,value_to_str_function](<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;KeyType,ValueType&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;KeyType,ValueType&gt;&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> key_to_str_function(lhs.first) <a href="CppOperatorEqual.htm">==</a> key_to_str_function(rhs.first)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value_to_str_function(lhs.second) <a href="CppOperatorEqual.htm">==</a> value_to_str_function(rhs.second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Again <a href="CppConvert.htm">convert</a> <a href="CppPointer.htm">pointer</a>s to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> MapTo<a href="CppXml.htm">Xml</a>(tag_name,m,tag_to_str_function,key_to_str_function,value_to_str_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a> Screen output<br/>
<br/>
&lt;<a href="CppInt.htm">integer</a>s&gt;&lt;1&gt;one&lt;/1&gt;&lt;2&gt;two&lt;/2&gt;&lt;4&gt;four&lt;/4&gt;&lt;/<a href="CppInt.htm">integer</a>s&gt;<br/>
&lt;<a href="CppInt.htm">integer</a>s&gt;&lt;four&gt;4&lt;/four&gt;&lt;one&gt;1&lt;/one&gt;&lt;two&gt;2&lt;/two&gt;&lt;/<a href="CppInt.htm">integer</a>s&gt;<br/>
&lt;<a href="CppInt.htm">integer</a>s again&gt;&lt;1&gt;one&lt;/1&gt;&lt;4&gt;four&lt;/4&gt;&lt;9&gt;nine&lt;/9&gt;&lt;/<a href="CppInt.htm">integer</a>s again&gt;<br/>
Press &lt;RETURN&gt; to close <b><a href="CppThis.htm">this</a></b> window...<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
