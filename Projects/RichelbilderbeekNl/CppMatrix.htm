<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Matrix</title>
  <meta name="description" content="C++ Matrix"/>
  <meta name="keywords" content="C++ Matrix "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMatrix.htm">Matrix</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.647 at Fri Jun  6 17:13:17 2014
 -->
<p><img src="PicBoost.png" alt="Boost"/><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppMatrix.htm">matrix</a> is a two-dimensional <a href="CppContainer.htm">container</a>
  (that is a <a href="CppContainer.htm">container</a> in which two values
  are needed to retrieve an element). For one-dimensional containers,
  <a href="CppContainer.htm">go to the container page</a>.
</p>
<p>&nbsp;</p>
<p>There exists no std::matrix (yet).</p>
<p>&nbsp;</p>
<p>Possibilities are:</p>
<ol>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;</li>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppMulti_array.htm">boost::multi_array</a></li>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a></li>
  <li><img src="PicSpacer.png" alt=" "/>blitz::Array</li>
  <li><img src="PicSpacer.png" alt=" "/><a href="http://www.techsoftpl.com/matrix">Techsoft</a>'s matrix</li>
  <li><img src="PicSpacer.png" alt=" "/>Flood::Matrix</li>
</ol>
<p>&nbsp;</p>
<p>These possibilities are described below in more detail.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicStl.png" alt="STL"/> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;</h2>
<p>&nbsp;</p>
<p>
  A <a href="CppVector.htm">std::vector</a> can contain a collection of
  <a href="CppVector.htm">std::vector</a>s. If all
  <a href="CppVector.htm">std::vector</a>s in this collection are of the same
  size, one has a matrix.
</p>
<p>&nbsp;</p>
<p>When using <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; for a two-dimensional matrix, the choice between x-y-ordering or y-x-ordering must be made. The run-time speed difference does not reside in individual element read/write, but when obtaining a row or collumn: in a y-x-ordered <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; an individual row can be obtained, in an x-y-ordered <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; an individual collumn can be obtained.</p>
<p>&nbsp;</p>
<p>Below is an example of a y-x-ordered <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="2D vector example" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the y-x-ordered 2D-vector<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v(n_rows, <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(n_cols,0),<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> n_rows <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> n_cols <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()),<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v[y].size()),<br/>
&nbsp;&nbsp;v[y][x] <a href="CppOperatorAssign.htm">=</a> 10; <a href="CppComment.htm">//</a>y-x-ordered<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppInt.htm">int</a>&gt; &gt; <a href="CppCodeSnippets.htm">code snippets</a></h3>
<p>&nbsp;</p>
<p>Note that some of these <a href="CppCodeSnippets.htm">code snippets</a> also work on other <a href="CppContainer.htm">containers</a>.</p>
<p>&nbsp;</p>
<ol>
  <li><a href="CppConvertMatrix.htm">Convert Matrix&lt;X&gt; to Matrix&lt;Y&gt;, ConvertMatrix</a></li>
  <li><a href="CppConvertMatrix.htm">Convert std::vector&lt;std::vector&lt;X&gt; &gt; to std::vector&lt;std::vector&lt;Y&gt; &gt;, ConvertMatrix</a></li>
  <li><a href="CppConvertMatrix.htm">Convert two 2D std::vector&lt;X&gt; to 2D std::vector&lt;Y&gt;, ConvertMatrix</a></li>
  <li><a href="CppConvertMatrix.htm">ConvertMatrix, convert Matrix&lt;X&gt; to Matrix&lt;Y&gt;</a></li>
  <li><a href="CppConvertMatrix.htm">ConvertMatrix, convert std::vector&lt;std::vector&lt;X&gt; &gt; to std::vector&lt;std::vector&lt;Y&gt; &gt;</a></li>
  <li><a href="CppConvertMatrix.htm">ConvertMatrix, convert two 2D std::vector&lt;X&gt; to 2D std::vector&lt;Y&gt;</a></li>
  <li><a href="CppMaxElement.htm">Get the maximal element of a 2D container, MaxElement</a></li>
  <li><a href="CppMinElement.htm">Get the minimum element of a 2D container, MinElement</a></li>
  <li><a href="CppGetSizes.htm">Get the sizes of the std::vectors in a 2D std::vector, GetSizes</a></li>
  <li><a href="CppGetSumMatrix.htm">Get the sum of a 2D std::vector, GetSum</a></li>
  <li><a href="CppGetSizes.htm">GetSizes, get the sizes of the std::vectors in a 2D std::vector</a></li>
  <li><a href="CppGetSumMatrix.htm">GetSum, get the sum of a 2D std::vector</a></li>
  <li><a href="CppMaxElement.htm">MaxElement, get the maximal element of a 2D container</a></li>
  <li><a href="CppMinElement.htm">MinElement, get the minimum element of a 2D container</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> <a href="CppMulti_array.htm">boost::multi_array</a></h2>
<p>&nbsp;</p>
<p>The <a href="CppMulti_array.htm">boost::multi_array</a> (part of the <a href="CppBoost.htm">Boost</a> library) is not only support a two-dimensional matrix, but to many more dimensions.</p>
<p>&nbsp;</p>
<p>When using <a href="CppBuilder.htm">C++ Builder</a> 6.0, this does not <a href="CppCompile.htm">compile</a> (it results in the <a href="CppCompileError.htm">compile error</a> <a href="CppCompileErrorBorlandHppOnlyMemberFunctionsMayBeConstOrVolatile.htm">borland.hpp: Only member functions may be 'const' or 'volatile'</a>).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a></h2>
<p>&nbsp;</p>
<p>The <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a> (part of the 
<a href="CppUblas.htm">Boost.uBLAS</a> <a href="CppLibrary.htm">library</a>) support a two-dimensional matrix.</p>
<p>&nbsp;</p>
<p>See <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><img src="PicGreen.png" alt="OKAY"/><img src="PicQtCreator.png" alt="Qt Creator"/> In <a href="CppQtCreator.htm">Qt Creator</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a> works fine</li>
  <li><img src="PicRed.png" alt="FAIL"/><img src="PicCppBuilder.png" alt="C++ Builder"/> In <a href="CppBuilder.htm">C++ Builder</a> 6.0, this does not <a href="CppCompile.htm">compile</a> (it results in the <a href="CppCompileError.htm">compile error</a> <a href="CppCompileErrorYourCompilerAndOrConfigurationIsUnsupportedByThisVerionsOfUblas.htm">Your compiler and/or configuration is unsupported by this verions of uBLAS</a>)</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>blitz::Array</h2>
<p>&nbsp;</p>
<p>The blitz::Array (part of the <a href="CppBlitzpp.htm">Blitz++</a> <a href="CppLibrary.htm">library</a>) is not only support a two-dimensional matrix, but to many more dimensions.</p>
<p>&nbsp;</p>
<p>When using <a href="CppBuilder.htm">C++ Builder</a> 6.0, this does not <a href="CppCompile.htm">compile</a> (it results in the <a href="CppCompileError.htm">compile error</a> <a href="CppCompileErrorBzconfigHunknownCompiler.htm">bzconfig.h: Unknown compiler</a>).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="http://www.techsoftpl.com/matrix">Techsoft</a>'s matrix</h2>
<p>&nbsp;</p>
<p><a href="http://www.techsoftpl.com/matrix">Techsoft</a>'s matrix supports a x-y-ordered two-dimensional matrix.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Techsoft matrix example" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;techsoft/matrix.h&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;math::matrix&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(n_rows,n_cols,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> n_rows <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> n_cols <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v(x,y)<a href="CppOperatorEqual.htm">==</a>0,<br/>
&nbsp;&nbsp;v(x,y) <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v(x,y)<a href="CppOperatorEqual.htm">==</a>10,<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Flood::Matrix</h2>
<p>&nbsp;</p>
<p>The Flood::Matrix (from the <a href="CppFlood.htm">Flood</a> library) supports a x-y-ordered two-dimensional matrix.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Flood::Matrix example" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;flood/utilities/matrix.h&gt;<br/>
&nbsp;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;Flood::Matrix&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(n_rows,n_cols,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> n_rows <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> n_cols <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x &lt; v.getNumberOfRows(),<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; v.getNumberOfColumns(),<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[x][y]<a href="CppOperatorEqual.htm">==</a>0,<br/>
&nbsp;&nbsp;v[x][y] <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[x][y]<a href="CppOperatorEqual.htm">==</a>10,<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://en.wikipedia.org/wiki/Matrix_%28mathematics%29">Wikipedia page about matrices</a></li>
  <li><a href="http://www.boost.org/doc/libs/1_42_0/libs/multi_array/doc/index.html">Boost page about boost::multi_array</a></li>
  <li><a href="http://www.oonumerics.org/blitz">Blitz++ homepage</a></li>
  <li><a href="http://www.techsoftpl.com/matrix">Techsoft homepage</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://en.wikipedia.org/wiki/Matrix_%28mathematics%29">Wikipedia page about matrices</a></li>
</ol>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMatrix/CppMatrix.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMatrix/CppMatrix.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a>/<a href="CppMatrix.htm">matrix</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a>/<a href="CppMatrix.htm">matrix</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMatrix/matrix.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMatrix/matrix.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMatrix.htm">Matrix</a>, <a href="CppFunction.htm">function</a>s working on vectors and matrices<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppMatrix.htm">CppMatrix</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> MATRIX_H<br/>
<a href="CppDefine.htm">#define</a> MATRIX_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Helper <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> <a href="CppMatrix.htm">matrix</a> operations<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMatrix.htm">Matrix</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the determinant<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Adapted from the code Maik Beckmann posted at<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;http://<a href="CppBoost.htm">boost</a>.2283326.n4.nabble.com/How-to-compute-determinant-td2710896.html<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> CalcDeterminant(<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Chop <a href="CppReturn.htm">returns</a> a <a href="CppStdVector.htm">std::vector</a> of sub-matrices<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; Chop(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a n_rows x n_cols sized <a href="CppMatrix.htm">matrix</a> from a <a href="CppStdVector.htm">std::vector</a>,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/used <b><a href="CppFor.htm">for</a></b> easy <a href="CppInitialize.htm">initialization</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Create<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a random-filled <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateRandom<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows, <b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a uBLAS vector from a <a href="CppStdVector.htm">std::vector</a>,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/used <b><a href="CppFor.htm">for</a></b> easy <a href="CppInitialize.htm">initialization</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppCreateVector.htm">CreateVector</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a uBLAS vector from a <a href="CppStdVector.htm">std::vector</a>,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/used <b><a href="CppFor.htm">for</a></b> easy <a href="CppInitialize.htm">initialization</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppCreateVector.htm">CreateVector</a>Int(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the inverse of a <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Inverse(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two <b><a href="CppDouble.htm">double</a></b>s are <a href="CppAbout.htm">about</a> equal<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two matrices are equal<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This is only suitable to test <b><a href="CppFor.htm">for</a></b> exact copies.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use MatricesAre<a href="CppAbout.htm">About</a>Equal to allow <b><a href="CppFor.htm">for</a></b> a<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/small difference between the <a href="CppMatrix.htm">matrix</a> elements.<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> MatricesAreEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two matrices are <a href="CppAbout.htm">about</a> equal<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> MatricesAre<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two matrices are <a href="CppAbout.htm">about</a> equal<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppMatrix.htm">Matrix</a>Is<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates the <a href="CppMatrix.htm">matrix</a> product a * b * c<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; MultiProd(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Take the power of a square <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Power(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates the <a href="CppMatrix.htm">matrix</a> product a * b<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with checking <b><a href="CppFor.htm">for</a></b> correct dimensions<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculates the <a href="CppMatrix.htm">matrix</a> product a * b<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with checking <b><a href="CppFor.htm">for</a></b> correct dimensions<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Simplify a structure<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [A] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [B] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [C] ]&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [D] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ D ]<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; SimplifyVectorOfVector(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Simplify a structure<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [A B] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [C D] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [E F] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [G H] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ G H ]<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; SimplifyVectorOf<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Simplify a structure<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [A B]&nbsp;&nbsp;[I J] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [C D]&nbsp;&nbsp;[K L] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B I J]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;[ C D K L]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [E F]&nbsp;&nbsp;[M N] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F M N]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [G H]&nbsp;&nbsp;[O P] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ G H O P]<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Simplify<a href="CppMatrix.htm">Matrix</a>Of<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;&amp; m);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test these <a href="CppFunction.htm">function</a>s<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Unchop merges the 4 <a href="CppStdVector.htm">std::vector</a> of sub-matrices produced by Chop<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Unchop(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two vectors are <a href="CppAbout.htm">about</a> equal<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> VectorsAre<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two vectors are <a href="CppAbout.htm">about</a> equal<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> VectorIs<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two vector are equal<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/This is only suitable to test <b><a href="CppFor.htm">for</a></b> exact copies.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use VectorsAre<a href="CppAbout.htm">About</a>Equal to allow <b><a href="CppFor.htm">for</a></b> a<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/small difference between the vector elements.<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Vectors<a href="CppDouble.htm">Double</a>AreEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two vector are equal<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> VectorsIntAreEqual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MATRIX_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMatrix/matrix.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMatrix/matrix.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMatrix.htm">Matrix</a>, <a href="CppFunction.htm">function</a>s working on vectors and matrices<br/>
Copyright (C) 2013-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppMatrix.htm">CppMatrix</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMatrix.htm">matrix</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/lu.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>_proxy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/blas.hpp&gt; <a href="CppComment.htm">//</a><a href="CppBoostUblas.htm">boost::numeric::ublas</a>::equals<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::CalcDeterminant(<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> m.size2() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only calculate the determinant of square matrices");<br/>
&nbsp;&nbsp;<a href="CppBoostUblas.htm">boost::numeric::ublas</a>::permutation_<a href="CppMatrix.htm">matrix</a>&lt;<a href="CppStdSize_t.htm">std::size_t</a>&gt; pivots(m.size1() );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> is_singular <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::lu_factorize(m, pivots);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_singular) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> pivots.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i <a href="CppOperatorNotEqual.htm">!=</a> sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pivots(i) <a href="CppOperatorNotEqual.htm">!=</a> i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d <a href="CppOperatorMultiplyAssign.htm">*=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d <a href="CppOperatorMultiplyAssign.htm">*=</a> m(i,i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Chop(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::range;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_range;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;v.reserve(4);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midy <a href="CppOperatorAssign.htm">=</a> m.size1() <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midx <a href="CppOperatorAssign.htm">=</a> m.size2() <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>_range&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; top_left(&nbsp;&nbsp;&nbsp;&nbsp;m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>_range&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; bottom_left( m,range(midy,m.size1()),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>_range&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; top_right(&nbsp;&nbsp; m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(midx,m.size2()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>_range&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; bottom_right(m,range(midy,m.size1()),range(midx,m.size2()));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(top_left));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(top_right));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bottom_left));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bottom_right));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_rows * n_cols <a href="CppOperatorEqual.htm">==</a> v.size());<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(n_rows,n_cols);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) <a href="CppOperatorAssign.htm">=</a> v[ (col * n_rows) <a href="CppOperatorPlus.htm">+</a> row];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::CreateRandom<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows, <b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(n_rows,n_cols);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>()) <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w(v.size());<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),w.begin());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>Int(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w(v.size());<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),w.begin());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.3";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-04-28: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-11: <a href="CppVersion.htm">version</a> 1.1: fixed <a href="CppBug.htm">bug</a>s in MatricesAreEqual and MatricesAre<a href="CppAbout.htm">About</a>Equal",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-06-27: <a href="CppVersion.htm">version</a> 1.2: added tests, renamed VectorsAreEqual to Vectors<a href="CppDouble.htm">Double</a>AreEqual and VectorsIntAreEqual"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-09-16: <a href="CppVersion.htm">version</a> 1.3: <b><a href="CppNoexcept.htm">noexcept</a></b>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Inverse(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> m.size2() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only calculate the inverse of square matrices");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(m.size1())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 1x1 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot take the inverse of <a href="CppMatrix.htm">matrix</a> [0]");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1.0 <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 2x2 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> m(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> m(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> m(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;d <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,1) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>b <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,0) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>c <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,1) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;a <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 3x3 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> m(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> m(0,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> m(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> e <a href="CppOperatorAssign.htm">=</a> m(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> m(1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> m(2,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> h <a href="CppOperatorAssign.htm">=</a> m(2,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k <a href="CppOperatorAssign.htm">=</a> m(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(3,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_a <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((e*k)-(f*h)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_b <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((d*k)-(f*g)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_c <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((d*h)-(e*g)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_d <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((b*k)-(c*h)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_e <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((a*k)-(c*g)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_f <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((a*h)-(b*g)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_g <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((b*f)-(c*e)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_h <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((a*f)-(c*d)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_k <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((a*e)-(b*d)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a> new_a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,0) <a href="CppOperatorAssign.htm">=</a> new_b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,0) <a href="CppOperatorAssign.htm">=</a> new_c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,1) <a href="CppOperatorAssign.htm">=</a> new_d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,1) <a href="CppOperatorAssign.htm">=</a> new_e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,1) <a href="CppOperatorAssign.htm">=</a> new_f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,2) <a href="CppOperatorAssign.htm">=</a> new_g;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,2) <a href="CppOperatorAssign.htm">=</a> new_h;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,2) <a href="CppOperatorAssign.htm">=</a> new_k;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use blockwise in<a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Chop <a href="CppReturn.htm">returns</a> a <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() &gt; 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size2() &gt; 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size1() <a href="CppOperatorEqual.htm">==</a> a.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&nbsp;&nbsp;a_inv <a href="CppOperatorAssign.htm">=</a> Inverse(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; c <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; d <a href="CppOperatorAssign.htm">=</a> v[3];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(c,a_inv)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(term.size1() <a href="CppOperatorEqual.htm">==</a> term.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term_inv <a href="CppOperatorAssign.htm">=</a> Inverse(term);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> a_inv<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_d <a href="CppOperatorAssign.htm">=</a> term_inv;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> { new_a, new_b, new_c, new_d };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; result <a href="CppOperatorAssign.htm">=</a> Unchop(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.000001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a <a href="CppOperatorMinus.htm">-</a> epsilon &lt; b <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a <a href="CppOperatorPlus.htm">+</a> epsilon &gt; b;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Power(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exponent <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only take the power of matrices with a positive exponent");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> m.size2() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only take the power of square matrices");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m.size1();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (exponent <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::identity_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sz);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (exponent <a href="CppOperatorEqual.htm">==</a> 1) <b><a href="CppReturn.htm">return</a></b> m;<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(m);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>exponent; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(n,m);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a.size1() <a href="CppOperatorNotEqual.htm">!=</a> b.size1()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a.size2() <a href="CppOperatorNotEqual.htm">!=</a> b.size2()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(a.begin1(),a.end1(),b.begin1(),&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal); <a href="CppComment.htm">//</a>DON'T USE STD::EQUAL!<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size1() <a href="CppOperatorEqual.htm">==</a> b.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size2() <a href="CppOperatorEqual.htm">==</a> b.size2());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> a.size1();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> a.size2();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row <a href="CppOperatorAssign.htm">=</a> 0; row <a href="CppOperatorNotEqual.htm">!=</a> n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col <a href="CppOperatorAssign.htm">=</a> 0; col <a href="CppOperatorNotEqual.htm">!=</a> n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Is<a href="CppAbout.htm">About</a>Equal(a(row,col),b(row,col))) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::MatricesAreEqual(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( a.size1() <a href="CppOperatorNotEqual.htm">!=</a> b.size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> a.size2() <a href="CppOperatorNotEqual.htm">!=</a> b.size2()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> is_equal <a href="CppOperatorAssign.htm">=</a> <a href="CppStdEqual.htm">std::equal</a>(a.begin1(),a.end1(),b.begin1()); <a href="CppComment.htm">//</a>DON'T USE STD::EQUAL!<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size1() <a href="CppOperatorEqual.htm">==</a> b.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size2() <a href="CppOperatorEqual.htm">==</a> b.size2());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> a.size1();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> a.size2();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row <a href="CppOperatorAssign.htm">=</a> 0; row <a href="CppOperatorNotEqual.htm">!=</a> n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col <a href="CppOperatorAssign.htm">=</a> 0; col <a href="CppOperatorNotEqual.htm">!=</a> n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a(row,col) <a href="CppOperatorNotEqual.htm">!=</a> b(row,col)) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::<a href="CppMatrix.htm">Matrix</a>Is<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Deprecated naming");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> MatricesAre<a href="CppAbout.htm">About</a>Equal(a,b);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::MultiProd(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Prod(Prod(a,b),c);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size2() <a href="CppOperatorEqual.htm">==</a> b.size1() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A's width must be B's height");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::prod(a,b);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size2() <a href="CppOperatorEqual.htm">==</a> b.size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "A's width must be B's height");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::prod(a,b);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Simplify<a href="CppMatrix.htm">Matrix</a>Of<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [A B]&nbsp;&nbsp;[I J] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [C D]&nbsp;&nbsp;[K L] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B I J]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;[ C D K L]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [E F]&nbsp;&nbsp;[M N] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F M N]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [G H]&nbsp;&nbsp;[O P] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ G H O P]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m.size1() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(m.size2() &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_sub_rows <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size1());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_sub_cols <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size2());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sub_rows&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> n_sub_rows <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n_sub_cols <a href="CppOperatorNotEqual.htm">!=</a> 0 ? <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m(0,0).size1()) : 0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sub_cols&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> n_sub_cols <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n_sub_cols <a href="CppOperatorNotEqual.htm">!=</a> 0 ? <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m(0,0).size2()) : 0;<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(n_sub_rows * sub_rows, n_sub_cols * sub_cols);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> sub_row=0; sub_row<a href="CppOperatorNotEqual.htm">!=</a>n_sub_rows; <a href="CppOperatorIncrement.htm">++</a>sub_row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> sub_col=0; sub_col<a href="CppOperatorNotEqual.htm">!=</a>n_sub_cols; <a href="CppOperatorIncrement.htm">++</a>sub_col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; sub <a href="CppOperatorAssign.htm">=</a> m(sub_row,sub_col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_x <a href="CppOperatorAssign.htm">=</a> sub_col * sub_cols;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_y <a href="CppOperatorAssign.htm">=</a> sub_row * sub_rows;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>sub_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>sub_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(offset_y <a href="CppOperatorPlus.htm">+</a> row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(offset_x <a href="CppOperatorPlus.htm">+</a> col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(sub.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(sub.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(offset_y <a href="CppOperatorPlus.htm">+</a> row,offset_x <a href="CppOperatorPlus.htm">+</a> col) <a href="CppOperatorAssign.htm">=</a> sub(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::SimplifyVectorOf<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [A B] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [C D] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ C D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [E F] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [G H] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ G H ]<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_subs&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sub_rows <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m[0].size1());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sub_cols <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m[0].size2());<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(n_subs * sub_rows, sub_cols);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> sub_index=0; sub_index<a href="CppOperatorNotEqual.htm">!=</a>n_subs; <a href="CppOperatorIncrement.htm">++</a>sub_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sub_index &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; sub <a href="CppOperatorAssign.htm">=</a> m[sub_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_y <a href="CppOperatorAssign.htm">=</a> sub_index * sub_rows;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>sub_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>sub_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(offset_y <a href="CppOperatorPlus.htm">+</a> row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(offset_x <a href="CppOperatorPlus.htm">+</a> col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(sub.size1()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(sub.size2()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(offset_y <a href="CppOperatorPlus.htm">+</a> row,offset_x <a href="CppOperatorPlus.htm">+</a> col) <a href="CppOperatorAssign.htm">=</a> sub(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::SimplifyVectorOfVector(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [A] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [B] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [C] ]&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [D] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ D ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!m.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_subs <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> subs_sz <a href="CppOperatorAssign.htm">=</a> n_subs &gt; 0 ? <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m[0].size()) : 0;<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(n_subs * subs_sz);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_subs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; sub <a href="CppOperatorAssign.htm">=</a> m[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(sub.begin(),sub.end(),v.begin() <a href="CppOperatorPlus.htm">+</a> (i * subs_sz));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Test()");<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::detail::equals;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Create<a href="CppMatrix.htm">Matrix</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [1,4]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [2,5]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [3,6]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(3,2, {1,2,3,4,5,6} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Simplify vector of vector<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [A] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [B] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ B ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [C] ]&nbsp;&nbsp;&nbsp;&nbsp;[ C ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [D] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ D ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> <a href="CppCreateVector.htm">CreateVector</a>( { 1.0, 2.0 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> <a href="CppCreateVector.htm">CreateVector</a>( { 3.0, 4.0 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> SimplifyVectorOfVector(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsAre<a href="CppAbout.htm">About</a>Equal(w, <a href="CppCreateVector.htm">CreateVector</a>( { 1.0, 2.0, 3.0, 4.0 } )));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Simplify a structure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [A B] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [C D] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp;[ C D ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [E F] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> [ [G H] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ G H ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(2,2, {1.0, 3.0, 2.0, 4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(2,2, {5.0, 7.0, 6.0, 8.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> SimplifyVectorOf<a href="CppMatrix.htm">Matrix</a>(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size1() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(MatricesAre<a href="CppAbout.htm">About</a>Equal(w, Create<a href="CppMatrix.htm">Matrix</a>(4,2, { 1.0, 3.0, 5.0, 7.0, 2.0, 4.0, 6.0, 8.0 } )));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Simplify a structure<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [A B]&nbsp;&nbsp;[I J] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [C D]&nbsp;&nbsp;[K L] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B I J]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;[ C D K L]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [E F]&nbsp;&nbsp;[M N] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F M N]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [G H]&nbsp;&nbsp;[O P] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ G H O P]<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [ 1&nbsp;&nbsp;2]&nbsp;&nbsp;[ 3&nbsp;&nbsp;4] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [ 5&nbsp;&nbsp;6]&nbsp;&nbsp;[ 7&nbsp;&nbsp;8] ]&nbsp;&nbsp;&nbsp;&nbsp;[ A B I J]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;[ C D K L]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [ 9 10]&nbsp;&nbsp;[11 12] ]&nbsp;&nbsp;&nbsp;&nbsp;[ E F M N]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ [13 14]&nbsp;&nbsp;[15 16] ] <a href="CppOperatorMinus.htm">-</a>&gt; [ G H O P]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v(0,0) <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(2,2, { 1.0,&nbsp;&nbsp;5.0,&nbsp;&nbsp;2.0,&nbsp;&nbsp;6.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v(1,0) <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(2,2, { 9.0, 13.0, 10.0, 14.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v(0,1) <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(2,2, { 3.0,&nbsp;&nbsp;7.0,&nbsp;&nbsp;4.0,&nbsp;&nbsp;8.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v(1,1) <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(2,2, {11.0, 15.0, 12.0, 16.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Simplify<a href="CppMatrix.htm">Matrix</a>Of<a href="CppMatrix.htm">Matrix</a>(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size1() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size2() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(4,4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 5.0,&nbsp;&nbsp;9.0, 13.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 6.0, 10.0, 14.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0, 7.0, 11.0, 15.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.0, 8.0, 12.0, 16.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!MatricesAre<a href="CppAbout.htm">About</a>Equal(w,expected))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "w: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> w <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "e: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> expected <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(MatricesAre<a href="CppAbout.htm">About</a>Equal(w,expected));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Chop on 3x3<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 1.0 ] | [ 2.0&nbsp;&nbsp; 3.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0 ]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>------+------------<a href="CppOperatorDecrement.htm">--</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 4.0 5.0 6.0 ]&nbsp;&nbsp;&nbsp;&nbsp; [ 4.0 ] | [ 5.0&nbsp;&nbsp; 6.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 7.0 8.0 9.0 ] <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ 7.0 ] | [ 8.0&nbsp;&nbsp; 9.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(3,3, {1.0,4.0,7.0,2.0,5.0,8.0,3.0,6.0,9.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorEqual.htm">==</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 5.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorEqual.htm">==</a> 6.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 7.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 8.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorEqual.htm">==</a> 9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; n <a href="CppOperatorAssign.htm">=</a> Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size1() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size1() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorPlus.htm">+</a> n[2].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorPlus.htm">+</a> n[3].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorPlus.htm">+</a> n[1].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorPlus.htm">+</a> n[3].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Chop on 5x5<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(5,5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 6.0,11.0,16.0,21.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 7.0,12.0,17.0,22.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0, 8.0,13.0,18.0,23.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.0, 9.0,14.0,19.0,24.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.0,10.0,15.0,20.0,25.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;3.0); <a href="CppAssert.htm">assert</a>(m(0,3) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;4.0); <a href="CppAssert.htm">assert</a>(m(0,4) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;6.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;7.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;8.0); <a href="CppAssert.htm">assert</a>(m(1,3) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;9.0); <a href="CppAssert.htm">assert</a>(m(1,4) <a href="CppOperatorEqual.htm">==</a> 10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 11.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 12.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorEqual.htm">==</a> 13.0); <a href="CppAssert.htm">assert</a>(m(2,3) <a href="CppOperatorEqual.htm">==</a> 14.0); <a href="CppAssert.htm">assert</a>(m(2,4) <a href="CppOperatorEqual.htm">==</a> 15.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(3,0) <a href="CppOperatorEqual.htm">==</a> 16.0); <a href="CppAssert.htm">assert</a>(m(3,1) <a href="CppOperatorEqual.htm">==</a> 17.0); <a href="CppAssert.htm">assert</a>(m(3,2) <a href="CppOperatorEqual.htm">==</a> 18.0); <a href="CppAssert.htm">assert</a>(m(3,3) <a href="CppOperatorEqual.htm">==</a> 19.0); <a href="CppAssert.htm">assert</a>(m(3,4) <a href="CppOperatorEqual.htm">==</a> 20.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(4,0) <a href="CppOperatorEqual.htm">==</a> 21.0); <a href="CppAssert.htm">assert</a>(m(4,1) <a href="CppOperatorEqual.htm">==</a> 22.0); <a href="CppAssert.htm">assert</a>(m(4,2) <a href="CppOperatorEqual.htm">==</a> 23.0); <a href="CppAssert.htm">assert</a>(m(4,3) <a href="CppOperatorEqual.htm">==</a> 24.0); <a href="CppAssert.htm">assert</a>(m(4,4) <a href="CppOperatorEqual.htm">==</a> 25.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; n <a href="CppOperatorAssign.htm">=</a> Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size2() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size1() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size1() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size2() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorPlus.htm">+</a> n[2].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorPlus.htm">+</a> n[3].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorPlus.htm">+</a> n[1].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorPlus.htm">+</a> n[3].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test VectorsAre<a href="CppAbout.htm">About</a>Equal<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> <a href="CppCreateVector.htm">CreateVector</a>( {1.0,3.0,2.0,4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsAre<a href="CppAbout.htm">About</a>Equal(m,m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n <a href="CppOperatorMultiplyAssign.htm">*=</a> 3.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n <a href="CppOperatorDivideAssign.htm">/=</a> 6.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n <a href="CppOperatorMultiplyAssign.htm">*=</a> 2.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsAre<a href="CppAbout.htm">About</a>Equal(m,n));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Power<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(sz,sz, {1.0,3.0,2.0,4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected_0 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::identity_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected_1 <a href="CppOperatorAssign.htm">=</a> m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; expected_2 <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(sz,sz, {7.0,15.0,10.0,22.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(m,m));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(Power(m,0),expected_0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(Power(m,1),expected_1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::MatricesAre<a href="CppAbout.htm">About</a>Equal(Power(m,2),expected_2));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Unchop<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check 0x0 to and including 9x9 matrices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> 0; n_rows<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>n_rows)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> 0; n_cols<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>n_cols)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Epsilon is more or less the smallest round-off error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a random <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::CreateRandom<a href="CppMatrix.htm">Matrix</a>(n_rows,n_cols);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume it is found identical to itself<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(equals(m,m,epsilon,epsilon));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Chop and unchop the input <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Unchop(Chop(m));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume input <a href="CppMatrix.htm">matrix</a> and result are identical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(equals(m,n,epsilon,epsilon));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 2x2 <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 ] <a href="CppOperatorMinus.htm">-</a>1&nbsp;&nbsp;&nbsp;&nbsp;[ <a href="CppOperatorMinus.htm">-</a>2.0&nbsp;&nbsp; 1.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 3.0 4.0 ]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> [&nbsp;&nbsp;1.5&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>0.5 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(2,2, {1.0,3.0,2.0,4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.0000001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,0) &gt; <a href="CppOperatorMinus.htm">-</a>2.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,0) &lt; <a href="CppOperatorMinus.htm">-</a>2.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,0) &gt;&nbsp;&nbsp;1.5 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,0) &lt;&nbsp;&nbsp;1.5 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,1) &gt;&nbsp;&nbsp;1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,1) &lt;&nbsp;&nbsp;1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,1) &gt; <a href="CppOperatorMinus.htm">-</a>0.5 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,1) &lt; <a href="CppOperatorMinus.htm">-</a>0.5 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n)(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n)(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n)(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n)(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n)(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n)(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n)(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n)(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0] <a href="CppOperatorMinus.htm">-</a>1&nbsp;&nbsp;&nbsp;&nbsp;[ <a href="CppOperatorMinus.htm">-</a>24.0&nbsp;&nbsp; 18.0&nbsp;&nbsp; 5.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 0.0 1.0 4.0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;20.0&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>15.0&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>4.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 5.0 6.0 0.0]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> [ <a href="CppOperatorMinus.htm">-</a> 5.0&nbsp;&nbsp;&nbsp;&nbsp;4.0&nbsp;&nbsp; 1.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(3,3, {1.0,0.0,5.0,2.0,1.0,6.0,3.0,4.0,0.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorEqual.htm">==</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 0.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 1.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorEqual.htm">==</a> 4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 5.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 6.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.0001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,0) &gt; <a href="CppOperatorMinus.htm">-</a>24.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,0) &lt; <a href="CppOperatorMinus.htm">-</a>24.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,0) &gt;&nbsp;&nbsp;20.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,0) &lt;&nbsp;&nbsp;20.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,0) &gt; <a href="CppOperatorMinus.htm">-</a> 5.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,0) &lt; <a href="CppOperatorMinus.htm">-</a> 5.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,1) &gt;&nbsp;&nbsp;18.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,1) &lt;&nbsp;&nbsp;18.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,1) &gt; <a href="CppOperatorMinus.htm">-</a>15.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,1) &lt; <a href="CppOperatorMinus.htm">-</a>15.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,1) &gt;&nbsp;&nbsp; 4.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,1) &lt;&nbsp;&nbsp; 4.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,2) &gt;&nbsp;&nbsp; 5.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,2) &lt;&nbsp;&nbsp; 5.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,2) &gt;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>4.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,2) &lt; <a href="CppOperatorMinus.htm">-</a> 4.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,2) &gt;&nbsp;&nbsp; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,2) &lt;&nbsp;&nbsp; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 3x3 <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0] <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 4.0 4.0 6.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 7.0 8.0 9.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Note: cannot <a href="CppMake.htm">make</a> the center value equal to 5.0, as <b><a href="CppThis.htm">this</a></b> <a href="CppMake.htm">make</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> the <a href="CppMatrix.htm">matrix</a> un-invertible (the determinant becomes equal to zero)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(3,3, {1.0,4.0,7.0,2.0,4.0,8.0,3.0,6.0,9.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorEqual.htm">==</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorEqual.htm">==</a> 6.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 7.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 8.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorEqual.htm">==</a> 9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 4x4 <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::CreateRandom<a href="CppMatrix.htm">Matrix</a>(4,4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> i is identity <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,3) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,3) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test Inverse on bigger matrices");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> 5; sz<a href="CppOperatorNotEqual.htm">!=</a>20; <a href="CppOperatorIncrement.htm">++</a>sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::CreateRandom<a href="CppMatrix.htm">Matrix</a>(sz,sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> i is identity <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> y <a href="CppOperatorAssign.htm">=</a> 0; y<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> x <a href="CppOperatorAssign.htm">=</a> 0; x<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (x <a href="CppOperatorEqual.htm">==</a> y <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (x <a href="CppOperatorNotEqual.htm">!=</a> y <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test MatricesAreEqual");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(2,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(3,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(3,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( MatricesAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( MatricesAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( MatricesAreEqual(c,c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( MatricesAreEqual(d,d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!MatricesAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!MatricesAreEqual(a,c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!MatricesAreEqual(a,d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!MatricesAreEqual(b,c));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!MatricesAreEqual(b,d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!MatricesAreEqual(c,d));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(2,2, { 1.0,0.0,0.0,1.0 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(MatricesAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(MatricesAre<a href="CppAbout.htm">About</a>Equal(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1,1) <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!MatricesAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!MatricesAre<a href="CppAbout.htm">About</a>Equal(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1,1) <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(MatricesAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(MatricesAre<a href="CppAbout.htm">About</a>Equal(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test VectorsAreEqual (<b><a href="CppInt.htm">int</a></b>)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(2,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(3,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( VectorsIntAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( VectorsIntAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!VectorsIntAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!VectorsIntAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppCreateVector.htm">CreateVector</a>( { 1,2,3 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsIntAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsIntAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsIntAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsIntAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( VectorsIntAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!VectorsIntAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!VectorsIntAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( VectorsIntAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1) <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsIntAreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsIntAreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsIntAreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsIntAreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Test VectorsAreEqual (<b><a href="CppDouble.htm">double</a></b>)");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::zero_vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Vectors<a href="CppDouble.htm">Double</a>AreEqual(a,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Vectors<a href="CppDouble.htm">Double</a>AreEqual(b,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Vectors<a href="CppDouble.htm">Double</a>AreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Vectors<a href="CppDouble.htm">Double</a>AreEqual(b,a));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> <a href="CppCreateVector.htm">CreateVector</a>( { 1.1,2.2,3.3 } );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Vectors<a href="CppDouble.htm">Double</a>AreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsAre<a href="CppAbout.htm">About</a>Equal(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1) <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Vectors<a href="CppDouble.htm">Double</a>AreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!VectorsAre<a href="CppAbout.htm">About</a>Equal(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b(1) <a href="CppOperatorAssign.htm">=</a> 2.2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Vectors<a href="CppDouble.htm">Double</a>AreEqual(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(VectorsAre<a href="CppAbout.htm">About</a>Equal(a,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Test()");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Unchop(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Chop <a href="CppReturn.htm">returns</a> a <a href="CppStdVector.htm">std::vector</a> of sub-matrices<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::range;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_range;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size1() <a href="CppOperatorEqual.htm">==</a> v[1].size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2].size1() <a href="CppOperatorEqual.htm">==</a> v[3].size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size2() <a href="CppOperatorEqual.htm">==</a> v[2].size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1].size2() <a href="CppOperatorEqual.htm">==</a> v[3].size2());<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(v[0].size1() <a href="CppOperatorPlus.htm">+</a> v[2].size1(),v[0].size2() <a href="CppOperatorPlus.htm">+</a> v[1].size2());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> quadrant=0; quadrant<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>quadrant)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; w <a href="CppOperatorAssign.htm">=</a> v[quadrant];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> v[quadrant].size1();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> v[quadrant].size2();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_x <a href="CppOperatorAssign.htm">=</a> quadrant <a href="CppOperatorModulus.htm">%</a> 2 ? v[0].size2() : 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_y <a href="CppOperatorAssign.htm">=</a> quadrant <a href="CppOperatorDivide.htm">/</a> 2 ? v[0].size1() : 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(offset_y <a href="CppOperatorPlus.htm">+</a> row, offset_x <a href="CppOperatorPlus.htm">+</a> col) <a href="CppOperatorAssign.htm">=</a> w(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size1() <a href="CppOperatorPlus.htm">+</a> v[2].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1].size1() <a href="CppOperatorPlus.htm">+</a> v[3].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size2() <a href="CppOperatorPlus.htm">+</a> v[1].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2].size2() <a href="CppOperatorPlus.htm">+</a> v[3].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::VectorIs<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Deprecated naming");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> VectorsAre<a href="CppAbout.htm">About</a>Equal(a,b);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::VectorsAre<a href="CppAbout.htm">About</a>Equal(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a.size() <a href="CppOperatorNotEqual.htm">!=</a> b.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(a.begin(),a.end(),b.begin(),&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Is<a href="CppAbout.htm">About</a>Equal);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::Vectors<a href="CppDouble.htm">Double</a>AreEqual(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a.size() <a href="CppOperatorNotEqual.htm">!=</a> b.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(a.begin(),a.end(),b.begin());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMatrix.htm">Matrix</a>::VectorsIntAreEqual(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; b) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a.size() <a href="CppOperatorNotEqual.htm">!=</a> b.size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdEqual.htm">std::equal</a>(a.begin(),a.end(),b.begin());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
