<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #3: Don't give away your internals, #1</title>
  <meta name="description" content="C++ Answer of exercise #3: Don't give away your internals, #1"/>
  <meta name="keywords" content="C++ Answer of exercise #3: Don't give away your internals, #1"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseDontGiveAwayYourInternalsAnswer1.htm">Answer of exercise #3: Don't give away your internals, #1</a></h1>
<p>&nbsp;</p>
<p>This is part #1 of the answer of <a href="CppExerciseDontGiveAwayYourInternals.htm">exercise #3: Don't give away your internals</a> and the follow-up of
<a href="CppExerciseDontGiveAwayYourInternalsAnswer0.htm"> Answer of exercise #3: Don't give away your internals, #0</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Part #1: checking you checking</h2>
<p>&nbsp;</p>
<p>Let's again start by defining a similar test suite.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filel9lLRe.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Animal <a href="CppComment.htm">//</a>An <a href="CppAbstractBaseClass.htm">abstract base class</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mX; <a href="CppComment.htm">//</a>It does not matter what mX is...<br/>
};<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> Zoo<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The GetAnimals method...<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Animal&gt; &gt; mAnimals;<br/>
};<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;Zoo zoo;<br/>
&nbsp;&nbsp;zoo.GetAnimals[0]-&gt;mX <a href="CppOperatorAssign.htm">=</a> 123; <a href="CppComment.htm">//</a>Must not <a href="CppCompile.htm">compile</a>!<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>For the GetAnimals method, there are now even more possibilities:</p>
<ul>
  <li>The <a href="CppMemberFunction.htm">member function</a> can be a <a href="CppConstMemberFunction.htm">const member function</a> yes or no</li>
  <li>The <a href="CppReturnType.htm">return type</a> can be a <a href="CppConstReturnType.htm">const return type</a> yes or no</li>
  <li>The <a href="CppReturnType.htm">return type</a> can have a const or non-const <a href="CppShared_ptr.htm">boost::shared_ptr</a></li>
  <li>The <a href="CppReturnType.htm">return type</a> can have a const or non-const Animal held by the <a href="CppShared_ptr.htm">boost::shared_ptr</a></li>
  <li>The animals can be given by using a <a href="CppReference.htm">reference</a> or a copy</li>
</ul>
<p>&nbsp;</p>
<p>Again, we do not need a copy of those Animals (Note: perhaps later we will get back to
this!) and we do not use the non-<a href="CppConstMethod.htm">const member functions</a>.</p>
<p>&nbsp;</p>
<p>This leaves only eight options left, which I'll give numbers from now on:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="file366YK8.cpp" border = "1"><tr><td><code>
<a href="CppVector.htm">std::vector</a>&lt; <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt; Animal&gt; &gt;&amp; GetAnimals0() <b><a href="CppConst.htm">const</a></b>;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt; <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt; Animal&gt; &gt;&amp; GetAnimals1() <b><a href="CppConst.htm">const</a></b>;<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt; Animal&gt; &gt;&amp; GetAnimals2() <b><a href="CppConst.htm">const</a></b>;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt; Animal&gt; &gt;&amp; GetAnimals3() <b><a href="CppConst.htm">const</a></b>;<br/>
<a href="CppVector.htm">std::vector</a>&lt; <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;&amp; GetAnimals4() <b><a href="CppConst.htm">const</a></b>;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt; <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;&amp; GetAnimals5() <b><a href="CppConst.htm">const</a></b>;<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;&amp; GetAnimals6() <b><a href="CppConst.htm">const</a></b>;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;&amp; GetAnimals7() <b><a href="CppConst.htm">const</a></b>;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Now the real tests start, even before defining the GetAnimal methods.</p>
<p>&nbsp;</p>
<p>The following line must not compile:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="file7hMJUm.cpp" border = "1"><tr><td><code>
zoo.GetAnimalsX()[0]-&gt;mX <a href="CppOperatorAssign.htm">=</a> 123;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The first Four versions of GetAnimals will compile against our goal! The
boost::shared_ptr must hold a const Animal, because <a href="CppConstIsNotDeep.htm">const is not deep</a>.</p>
<p>&nbsp;</p>
<p>With three methods left in the race, it's time to (try to) define them:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filexOWtvB.cpp" border = "1"><tr><td><code>
<a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;&amp; GetAnimals4() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAnimals; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.htm">compile</a>!<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;&amp; GetAnimals5() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAnimals; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.htm">compile</a>!<br/>
}<br/>
<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;&amp; GetAnimals6() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAnimals; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.htm">compile</a>!<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;&amp; GetAnimals7() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mAnimals; <a href="CppComment.htm">//</a>Does not <a href="CppCompile.htm">compile</a>!<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Blimey, none of these compile! This is because a Zoo holds non-const Animals inside
its <a href="CppShared_ptr.htm">boost::shared_ptr</a>s. Because of this it is
impossible to return a reference of const Animals back! How can we solve this?</p>
<p>&nbsp;</p>
<p>The solution is...</p>
<p>&nbsp;</p>
<p>(I wrote that I'd get back to it)</p>
<p>&nbsp;</p>
<p>It is...</p>
<p>&nbsp;</p>
<p>(and now is the time)</p>
<p>&nbsp;</p>
<p>To make a copy!</p>
<p>&nbsp;</p>
<p>I'll directly show you the methods in full:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileRPkaJR.cpp" border = "1"><tr><td><code>
<a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt; GetAnimals4() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;(mAnimals.begin(),mAnimals.end());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt; GetAnimals5() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;(mAnimals.begin(),mAnimals.end());<br/>
}<br/>
<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt; GetAnimals6() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;(mAnimals.begin(),mAnimals.end());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt; GetAnimals7() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;(mAnimals.begin(),mAnimals.end());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Does this makes you head spin? It might, but it's for a good cause: to not give away our internals.</p>
<p>&nbsp;</p>
<p>After this change, all four GetAnimals methods correctly refrain from compiling in this test:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filezRhhcy.cpp" border = "1"><tr><td><code>
zoo.GetAnimalsX()[0]-&gt;mX <a href="CppOperatorAssign.htm">=</a> 123;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Great, we cannot modify an Animal. But, we might be able to modify a boost::shared_ptr!</p>
<p>&nbsp;</p>
<p>Time for another test:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filedHgb0T.cpp" border = "1"><tr><td><code>
zoo.GetAnimalsX()[0].reset();<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This will compile for GetAnimals4, so it's taken off our list, leaving only three candidates:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filex6dy5E.cpp" border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt; GetAnimals5() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;(mAnimals.begin(),mAnimals.end());<br/>
}<br/>
<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt; GetAnimals6() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;(mAnimals.begin(),mAnimals.end());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt; GetAnimals7() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;(mAnimals.begin(),mAnimals.end());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Though unexpected, this exercise is finished. When using a boost::shared_ptr, I cannot
show that GetAnimals5 is not the candidate your're looking for. I cannot show
this, because a boost::shared_ptr does not have a non-const-method that does
not change an Animal. The difference between GetAnimals6 and GetAnimals7 only
appear in a very small percentage of code.</p>
<p>&nbsp;</p>
<p>My favorite would be GetAnimals7, because it has the most consts:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileZp5YtH.cpp" border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Zoo<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt; GetAnimals7() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Animal&gt; &gt;(mAnimals.begin(),mAnimals.end());<br/>
&nbsp;&nbsp;}<br/>
 <br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Animal&gt; &gt; mAnimals;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>I hope you enjoyed this exercise.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Epilogue</h2>
<p>&nbsp;</p>
<p>The exercise is called 'Don't give away your internals' (after [1]). 
One of the points of this item was the question:
'What do you want to do with this information?'. If you want to use std::cout
on the implementation of Zoo (that is, the std::vector of Animal), why not
enable to use std::cout on Zoo itself? Think if you perhaps do not need the
GetAnimals (or similar, as in your code) method after all.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">Reference</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 28: 'Don't give away your internals'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
