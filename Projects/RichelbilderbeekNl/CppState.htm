<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>state/State</title>
  <meta name="description" content="C++ state/State"/>
  <meta name="keywords" content="C++ state/State design pattern code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppState.htm">state/State</a></h1>
<p>&nbsp;</p>
<p><a href="CppState.htm">state/State</a> has multiple meanings:</p>
<ul>
  <li><a href="CppState.htm">state</a>: the size of the state space of a piece of code</li>
  <li><a href="CppState.htm">state</a>: the current position in state space of a piece of code</li>
  <li><a href="CppDesignPatternState.htm">State</a>: a <a href="CppDesignPattern.htm">Design Pattern</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppState.htm">state</a>: the size of the state space of a piece of code</h2>
<p>&nbsp;</p>
<p>Using <a href="CppState.htm">state</a> as the size of the state space of a piece of code is done while designing and coding. The bigger
the state space of a piece of code, the harder it will be to <a href="CppDebug.htm">debug</a> [5]. The larger the <a href="CppScope.htm">scope</a>
of a non-<a href="CppConst.htm">const</a> <a href="CppVariable.htm">variable</a>, the bigger the state space gets. Keep <a href="CppScope.htm">scopes</a>
small and keep <a href="CppVariable.htm">variables</a> as <a href="CppLocal.htm">local</a> as possible. Avoid using 
<a href="CppGlobal.htm">global</a> data [1,3-5,8-9].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppState.htm">state</a>: the current position in state space of a piece of code</h2>
<p>&nbsp;</p>
<p>Using <a href="CppState.htm">state</a> as the current position in state space of a piece of code is
done, for example, when <a href="CppDebug.htm">debugging</a>. While <a href="CppDebug.htm">debugging</a> one might check for ages being 
positive values, names not to have digits and zip codes being in the valid format.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppDesignPatternState.htm">State</a>: a <a href="CppDesignPattern.htm">Design Pattern</a></h2>
<p>&nbsp;</p>
<p>See <a href="CppDesignPatternState.htm">State</a> (<a href="CppDesignPattern.htm">Design Pattern</a>).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 10: 'Minimize global and shared data'.</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a> . C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 18: 'Declare variables as locally as possible'.</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition).ISBN: 0-201-88954-4. Chapter 1.8.2.a: 'Don't use global data (use members)'</li>
  <li><a href="CppJarrodHollingworth.htm"> Jarrod Hollingworth</a> , Bob Swart, Mark Cashman, Paul Gustavson. Sams C++ Builder 6 Developer's Guide. ISBN: 0-672-32480-6. Chapter 3: 'Avoid using global variables'</li>
  <li><a href="CppJesseLiberty.htm">Jesse Liberty</a> . Sams teach yourself C++ in 24 hours. ISBN: 0-672-32224-2. Hour 5, paragraph 'Global variables': 'In C++, global variables are avoided because they can create very confusing code that is hard to maintain.'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Item 4.10.1: 'Keep scopes small'.</li>
  <li><a href="CppBjarneStroustrup.htm"> Bjarne Stroustrup</a> . The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4.  Item 4.10.2: 'Don't use the same name in both a scope and an enclosing scope'.</li>
  <li>Stephen C. Dewhurst. C++ Gotchas. 2003. ISBN: 0-321-12518-5. Gotcha #3: 'Avoid global variables'.</li>
  <li><a href="http://www.parashift.com/c++-faq/global-vars.html">C++ FAQ Lite</a>: 'The names of global variables should start with //' and 'Instead of using a global variable, you should seriously consider if there are ways to limit the variable's visibility and/or lifetime'.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
