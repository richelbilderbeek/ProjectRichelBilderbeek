<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>WtTimedServerPusher</title>
  <meta name="description" content="C++ WtTimedServerPusher"/>
  <meta name="keywords" content="C++ WtTimedServerPusher "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.636 at Sat Apr 26 14:32:32 2014
 -->
<p><img src="PicWt.png" alt="Wt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppWtShapeGroupWidget.htm">WtShapeGroupWidget</a> is a <a href="CppWt.htm">Wt</a> 
<a href="CppClass.htm">class</a> used for notifying all clients from different IP addresses.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtTimedServerPusher/wttimedserverpusher.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtTimedServerPusher/wttimedserverpusher.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>, server to broadcast to all its <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>s<br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtTimedServerPusher.htm">CppWtTimedServerPusher</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> WTTIMEDSERVERPUSHER_H<br/>
<a href="CppDefine.htm">#define</a> WTTIMEDSERVERPUSHER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMutexH.htm">regex</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThreadH.htm">thread</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAny.htm">any</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppFunction.htm">function</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>;<br/>
<br/>
<a href="CppComment.htm">///</a>A Server that broadcasts its messages<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let a <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> have its supplied <a href="CppFunction.htm">function</a> called by <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Run<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Connect(<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> * <b><a href="CppConst.htm">const</a></b> client, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostFunction.htm">boost::function</a>&lt;<b><a href="CppVoid.htm">void</a></b>()&gt;&amp; <a href="CppFunction.htm">function</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Stop a <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> have its supplied <a href="CppFunction.htm">function</a> called by <a href="ToolTimePoll.htm">TimePoll</a>Server::Run<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Disconnect(<b><a href="CppConst.htm">const</a></b> <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>* <b><a href="CppConst.htm">const</a></b> client);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the only instace to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a> * GetInstance();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/\brief<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppTime.htm">time</a> (in milliseconds) <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::UpdatePage is to be called<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use a <a href="CppTime.htm">time</a> of zero to only let <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::UpdatePage be<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/called upon Post<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connection is a <a href="CppPod.htm">POD</a><br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Connection<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Connection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; session_id,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> * client,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostFunction.htm">boost::function</a>&lt;<b><a href="CppVoid.htm">void</a></b>()&gt;&amp; <a href="CppFunction.htm">function</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: m_session_id(session_id),m_client(client),m_function(<a href="CppFunction.htm">function</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Connection(<b><a href="CppConst.htm">const</a></b> Connection&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Connection&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Connection&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_session_id;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> * <b><a href="CppConst.htm">const</a></b> m_client;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostFunction.htm">boost::function</a>&lt;<b><a href="CppVoid.htm">void</a></b>()&gt; m_function;<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a> <a href="CppConstructor.htm">constructor</a>, which is <b><a href="CppPrivate.htm">private</a></b>, because <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a> follows<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the <a href="CppDesignPatternSingleton.htm">Singleton</a> <a href="CppDesignPattern.htm">design pattern</a><br/>
&nbsp;&nbsp;<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a> <a href="CppDestructor.htm">destructor</a><br/>
&nbsp;&nbsp;~<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Only let a <a href="CppSmartPointer.htm">smart pointer</a> (that is, <a href="CppInstance.htm">m_instance</a>) <b><a href="CppDelete.htm">delete</a></b> <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All connections to the <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>s<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Connection&gt; &gt; m_connections;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a> its only <a href="CppInstance.htm">instance</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>&gt; <a href="CppInstance.htm">m_instance</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The data, can be <a href="CppAny.htm">any</a>thing<br/>
&nbsp;&nbsp;<a href="CppBoostAny.htm">boost::any</a> m_data;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A <a href="CppMutex.htm">mutex</a><br/>
&nbsp;&nbsp;<b><a href="CppMutable.htm">mutable</a></b> <a href="CppStdMutex.htm">std::mutex</a> m_mutex;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If the Server is running<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_running;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppThread.htm">thread</a> <b><a href="CppFor.htm">for</a></b> <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Run<br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> m_<a href="CppThread.htm">thread</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of milliseconds before Run triggers Post<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_<a href="CppTime.htm">time</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppMemberFunction.htm">member function</a> that is called every 100 msecs<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Run();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WTTIMEDSERVERPUSHER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtTimedServerPusher/wttimedserverpusher.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtTimedServerPusher/wttimedserverpusher.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>, server to broadcast to all its <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>s<br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtTimedServerPusher.htm">CppWtTimedServerPusher</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppChronoH.htm">chrono</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWServer.htm">WServer</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusher.htm">wttimedserverpusher</a>.h"<br/>
<br/>
<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::<a href="CppInstance.htm">m_instance</a>;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>()<br/>
&nbsp;&nbsp;: m_connections{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_data{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mutex{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_running(<b><a href="CppTrue.htm">true</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppThread.htm">thread</a>(<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Run, <b><a href="CppThis.htm">this</a></b>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>(1000)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::~<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>()<br/>
{<br/>
&nbsp;&nbsp;m_running <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;m_<a href="CppThread.htm">thread</a>.join();<br/>
}<br/>
<br/>
 <b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Connect(<br/>
&nbsp;&nbsp; <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> * <b><a href="CppConst.htm">const</a></b> client,<br/>
&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> <a href="CppBoostFunction.htm">boost::function</a>&lt;<b><a href="CppVoid.htm">void</a></b>()&gt;&amp; <a href="CppFunction.htm">function</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdMutex.htm">std::mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Connection&gt; connection {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Connection(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWApplication.htm">Wt::WApplication</a>::<a href="CppInstance.htm">instance</a>()-&gt;sessionId(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;m_connections.push_back(connection);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Disconnect(<b><a href="CppConst.htm">const</a></b> <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>* <b><a href="CppConst.htm">const</a></b> client)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdMutex.htm">std::mutex</a>&gt; lock(m_mutex);<br/>
&nbsp;&nbsp;m_connections.erase(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove_if.htm">std::remove_if</a>(m_connections.begin(),m_connections.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[client](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Connection&gt;&nbsp;&nbsp;c) { <b><a href="CppReturn.htm">return</a></b> c-&gt;m_client <a href="CppOperatorEqual.htm">==</a> client; } ));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a> * <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::GetInstance()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppInstance.htm">m_instance</a>) <a href="CppInstance.htm">m_instance</a>.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppInstance.htm">m_instance</a>.get();<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-08-05: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Run()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (m_running)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdThis_thread.htm">std::this_thread</a>::sleep_for(<a href="CppStdChrono.htm">std::chrono</a>::milliseconds(m_<a href="CppTime.htm">time</a>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdMutex.htm">std::mutex</a>&gt; lock(m_mutex);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_connections.begin(),m_connections.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Connection&gt; i) { <a href="CppWServer.htm">Wt::WServer</a>::<a href="CppInstance.htm">instance</a>()-&gt;post(i-&gt;m_session_id, i-&gt;m_function); });<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdLock_guard.htm">std::lock_guard</a>&lt;<a href="CppStdMutex.htm">std::mutex</a>&gt; lock(m_mutex);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_running)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>stop <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>, although <a href="CppThread.htm">thread</a> needs to finish first<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_running <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change <a href="CppTime.htm">time</a>, although <a href="CppThread.htm">thread</a> needs to finish first<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppTime.htm">time</a> <a href="CppOperatorLessEqual.htm">&lt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>stop stopped <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start stopped <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_running <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppThread.htm">thread</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppThread.htm">std::thread</a>(<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::Run, <b><a href="CppThis.htm">this</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtTimedServerPusher/wttimedserverpusherclient.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtTimedServerPusher/wttimedserverpusherclient.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> WTTIMEDSERVERPUSHERCLIENT_H<br/>
<a href="CppDefine.htm">#define</a> WTTIMEDSERVERPUSHERCLIENT_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> is a client responding to <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
<a href="CppComment.htm">///</a>and to be used as a <a href="CppBaseClass.htm">base class</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/UpdatePage is called when the <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a> triggers an update by <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>dServerPush() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a> <a href="CppConstructor.htm">constructor</a> is <b><a href="CppProtected.htm">protected</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/because it is to be used as a <a href="CppBaseClass.htm">base class</a><br/>
&nbsp;&nbsp;<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to the server<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnServer();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WTTIMEDSERVERPUSHERCLIENT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtTimedServerPusher/wttimedserverpusherclient.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtTimedServerPusher/wttimedserverpusherclient.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>, client of <a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a><br/>
Copyright (C) 2011 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusher.htm">wttimedserverpusher</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtTimedServerPusherClient.htm">wttimedserverpusherclient</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWApplication.htm">Wt::WApplication</a>::<a href="CppInstance.htm">instance</a>()-&gt;enableUpdates(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::GetInstance()-&gt;Connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::OnServer,<b><a href="CppThis.htm">this</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Never call <b><a href="CppVirtual.htm">virtual</a></b> <a href="CppFunction.htm">function</a>s during <a href="CppConstructor.htm">construct</a>ion or <a href="CppDestructor.htm">destruct</a>ion<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppScottMeyers.htm">Scott Meyers</a>, Effective <a href="Cpp.htm">C++</a>, item 9<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>OnServer();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::~<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWApplication.htm">Wt::WApplication</a>::<a href="CppInstance.htm">instance</a>()-&gt;enableUpdates(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusher.htm">WtTimedServerPusher</a>::GetInstance()-&gt;Disconnect(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("2011-08-05: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtTimedServerPusherClient.htm">WtTimedServerPusherClient</a>::OnServer()<br/>
{<br/>
&nbsp;&nbsp;On<a href="CppTime.htm">Time</a>dServerPush();<br/>
&nbsp;&nbsp;<a href="CppWApplication.htm">Wt::WApplication</a>::<a href="CppInstance.htm">instance</a>()-&gt;triggerUpdate();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
