<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>WtExercise</title>
  <meta name="description" content="C++ WtExercise"/>
  <meta name="keywords" content="C++ WtExercise "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppWtExercise.htm">WtExercise</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug  5 11:58:59 2014
 -->
<p><img src="PicWt.png" alt="Wt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppWtChess.htm">CppWtChess</a> is a <a href="CppWt.htm">Wt</a> 
<a href="CppClass.htm">class</a> to display an exercise.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtExercise/CppWtExercise.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtExercise/CppWtExercise.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtExercise.htm">CppWtExercise</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtExercise.htm">CppWtExercise</a>/<a href="CppWtExercise.htm">wtexercise</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtExercise.htm">CppWtExercise</a>/<a href="CppWtExercise.htm">wtexercise</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtExercise.htm">CppWtExercise</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtExercise/wtexercise.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtExercise/wtexercise.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtExercise.htm">WtExercise</a>, <a href="CppWt.htm">Wt</a> GUI of <a href="CppExercise.htm">Exercise</a><br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtExercise.htm">CppWtExercise</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> WTEXERCISE_H<br/>
<a href="CppDefine.htm">#define</a> WTEXERCISE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-variable"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppExercise.htm">Exercise</a>;<br/>
<br/>
<a href="CppComment.htm">///</a>A <a href="CppWtExercise.htm">WtExercise</a> is the <a href="CppWt.htm">Wt</a> dialog of <a href="CppExercise.htm">Exercise</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtExercise.htm">WtExercise</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppWContainerWidget.htm">Wt::WContainerWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> a <a href="CppWtExercise.htm">WtExercise</a> without <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<a href="CppWtExercise.htm">WtExercise</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the user its score: its number of correctly answered<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppQuestion.htm">question</a>s and the total number of <a href="CppQuestion.htm">question</a>s answered<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; GetCurrentScore() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppExercise.htm">Exercise</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppExercise.htm">Exercise</a> * Get<a href="CppExercise.htm">Exercise</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppQuestion.htm">Question</a>s(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppTime.htm">time</a> the user has to wait when he/she answered correctly, in milliseconds<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWaiting<a href="CppTime.htm">Time</a>Correct(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> msecs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the <a href="CppTime.htm">time</a> the user has to wait when he/she answered incorrectly, in milliseconds<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWaiting<a href="CppTime.htm">Time</a>Incorrect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> msecs);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppExercise.htm">Exercise</a><br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppExercise.htm">Exercise</a>&gt; m_exercise;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of answered <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_answered;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of correctly answered <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_n_correct;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> Ui<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ui();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWGroupBox.htm">Wt::WGroupBox</a> * <b><a href="CppConst.htm">const</a></b> m_box;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWLabel.htm">Wt::WLabel</a> * <b><a href="CppConst.htm">const</a></b> m_label_score;<br/>
&nbsp;&nbsp;} m_ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppTime.htm">time</a> the user has to wait when he/she answered correctly, in milliseconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_waiting_<a href="CppTime.htm">time</a>_correct;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppTime.htm">time</a> the user has to wait when he/she answered incorrectly, in milliseconds<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_waiting_<a href="CppTime.htm">time</a>_incorrect;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Displays m_dialog its current <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DisplayCurrent<a href="CppQuestion.htm">Question</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to the client having answered a <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnSubmittedAnswer(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> answered_correct);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to the client having viewed the answer of a <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnViewedAnswer();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WTEXERCISE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtExercise/wtexercise.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtExercise/wtexercise.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtExercise.htm">WtExercise</a>, <a href="CppWt.htm">Wt</a> GUI of <a href="CppExercise.htm">Exercise</a><br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtExercise.htm">CppWtExercise</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-variable"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWGroupBox.htm">WGroupBox</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLabel.htm">WLabel</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWTimer.htm">WTimer</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppExercise.htm">exercise</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQuestion.htm">question</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQuestionDialog.htm">questiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtExercise.htm">wtexercise</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtMultipleChoiceQuestionDialog.htm">wtmultiplechoicequestiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtOpenQuestionDialog.htm">wtopenquestiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtQuestionDialog.htm">wtquestiondialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::<a href="CppUi.htm">Ui</a>::Ui()<br/>
&nbsp;&nbsp;: m_box(<b><a href="CppNew.htm">new</a></b> <a href="CppWGroupBox.htm">Wt::WGroupBox</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_label_score(<b><a href="CppNew.htm">new</a></b> <a href="CppWLabel.htm">Wt::WLabel</a>)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::<a href="CppWtExercise.htm">WtExercise</a>()<br/>
&nbsp;&nbsp;: m_exercise{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_answered(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_correct(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_ui{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_waiting_<a href="CppTime.htm">time</a>_correct(1000),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_waiting_<a href="CppTime.htm">time</a>_incorrect(5000)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_box);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_label_score);<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>_FUNC();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;clear();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(m_ui.m_box);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;addWidget(m_ui.m_label_score);<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::<a href="CppWtExercise.htm">WtExercise</a> #1");<br/>
<br/>
&nbsp;&nbsp;m_ui.m_label_score-&gt;setText("Score: 0/0");<br/>
<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("<a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::<a href="CppWtExercise.htm">WtExercise</a> end");<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::DisplayCurrent<a href="CppQuestion.htm">Question</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> m_exercise-&gt;GetCurrent<a href="CppQuestion.htm">Question</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppWt.htm">Wt</a><a href="CppQuestionDialog.htm">QuestionDialog</a> * <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtOpenQuestionDialog.htm">WtOpenQuestionDialog</a>(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdException.htm">std::exception</a>&amp;) {}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppQuestion.htm">question</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWtMultipleChoiceQuestionDialog.htm">WtMultipleChoiceQuestionDialog</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdException.htm">std::exception</a>&amp;) {}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQuestion.htm">question</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppExercise.htm">Exercise</a> only contains valid <a href="CppQuestion.htm">question</a>");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ui.m_box);<br/>
&nbsp;&nbsp;m_ui.m_box-&gt;clear();<br/>
&nbsp;&nbsp;m_ui.m_box-&gt;setContentAlignment(<a href="CppWt.htm">Wt</a>::AlignLeft);<br/>
&nbsp;&nbsp;m_ui.m_box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>-&gt;m_signal_submitted.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::OnSubmittedAnswer,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1));<br/>
&nbsp;&nbsp;m_ui.m_box-&gt;addWidget(<a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;m_ui.m_box-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">Wt::WBreak</a>);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppExercise.htm">Exercise</a> * <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::Get<a href="CppExercise.htm">Exercise</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_exercise);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_exercise.get();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-26: <a href="CppVersion.htm">Version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::OnSubmittedAnswer(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> answered_correct)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (answered_correct) <a href="CppOperatorIncrement.htm">++</a>m_n_correct;<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_n_answered;<br/>
&nbsp;&nbsp;m_ui.m_label_score-&gt;setText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWString.htm">Wt::WString</a>("Score: {1}/{2}").arg(m_n_correct).arg(m_n_answered));<br/>
&nbsp;&nbsp;<a href="CppWTimer.htm">Wt::WTimer</a>::singleShot(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;answered_correct ? m_waiting_<a href="CppTime.htm">time</a>_correct : m_waiting_<a href="CppTime.htm">time</a>_incorrect,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::OnViewedAnswer,<b><a href="CppThis.htm">this</a></b>));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::OnViewedAnswer()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_exercise-&gt;Next();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;DisplayCurrent<a href="CppQuestion.htm">Question</a>();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::Set<a href="CppQuestion.htm">Question</a>s(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;m_exercise.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppExercise.htm">Exercise</a>(filename));<br/>
&nbsp;&nbsp;DisplayCurrent<a href="CppQuestion.htm">Question</a>();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::SetWaiting<a href="CppTime.htm">Time</a>Correct(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> msecs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(msecs <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;m_waiting_<a href="CppTime.htm">time</a>_correct <a href="CppOperatorAssign.htm">=</a> msecs;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtExercise.htm">WtExercise</a>::SetWaiting<a href="CppTime.htm">Time</a>Incorrect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> msecs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(msecs <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;m_waiting_<a href="CppTime.htm">time</a>_incorrect <a href="CppOperatorAssign.htm">=</a> msecs;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
