<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Books</title>
  <meta name="description" content="C++ Books"/>
  <meta name="keywords" content="C++ Books book literature"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBooks.htm">Which books should I read when I learn C++?</a></h1>
<p>&nbsp;</p>
<p> There are many C++ books for starters. I would
recommend to start with a book you just like the writing style of. However,
there are many programming books out there that get you into bad habits. When
selecting for a book, pay attention to the following:</p>
<p>&nbsp;</p>
<ul>
  <li>It should use '<a href="CppInt.htm">int</a> <a href="CppMain.htm">main</a>' instead of '<a href="CppVoid.htm">void</a> <a href="CppMain.htm">main</a>' [1-5]</li>
  <li>It should use '<a href="CppString.htm">string</a>', instead of '<a href="CppChar.htm">char</a> *' [6-10]</li>
  <li>It should use '<a href="CppVector.htm">vector</a>', instead of <a href="CppArray.htm">arrays</a> [6-10]</li>
  <li>It should use '<a href="CppCout.htm">cout</a>', instead of '<a href="CppPrintf.htm">printf</a>' (which is an unsafe C function)</li>
  <li>It should not encourage the use of <a href="CppMacro.htm">macro</a>'s [11,12]</li>
  <li>It should encourage the use of <a href="CppConst.htm">const</a>[13-17]</li>
</ul>
<p>&nbsp;</p>
<p>A book that does all of the above is 'Thinking C++' by <a href="CppBruceEckel.htm">Bruce Eckel</a>, can be downloaded <b>for free</b>. Try Google!</p>
<p>&nbsp;</p>
<p>When getting the hang of programming and wondering
about 'good practices', 'good naming conventions' and so on, I strongly
recommend 'C++ coding standards: 101 rules, guidelines, and best practices'[6].
Put it under your pillow, read some pages once in a while and gain huge
benfits.</p>
<p>&nbsp;</p>
<p>To deepen your knowledge about C++, I'd recommend 'The C++ Programming Language' [10] from <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>.</p>
<p>&nbsp;</p>
<p>To improve you <a href="CppClassDesign.htm">class design</a> using <a href="CppDesignPattern.htm">design patterns</a>, I'd recommend the book 'Design Patterns' [18].</p>
<p>&nbsp;</p>
<p>To deepen your insight about the philosphy behind C++, read 'The design and evolution of C++' [19], also from <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>The most important C++ books ...ever</h2>
<p>&nbsp;</p>
<p>The most important C++ books are (according to [20]):</p>
<ul>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language. 3rd edition. ISBN: 0-201-88954-4. 1997</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++. 3rd edition. 2005.</li>
  <li><a href="CppErichGamma.htm">Erich Gamma</a>, <a href="CppRichardHelm.htm">Richard Helm</a>, <a href="CppRalphJohnson.htm">Ralph Johnson</a>, <a href="CppJohnVlissides.htm">John Vlissides</a>. Design Patterns. (1st edition) 1995. ISBN: 0201633612</li>
  <li>Iternational standard for C++. ISO/IEC 14882. 2nd edition, 2003.</li>
  <li><a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. Modern C++ design. 2001.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://en.wikibooks.org/wiki/C%2B%2B">WikiBooks about C++</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>C++. International Standard. ISO/IEC 14882. Second edition. Paragraph 3.6.1.2</li>
  <li>From http://www.parashift.com/c++-faq-lite/newbie.html#faq-29.3:<br/>&nbsp;<br/>
    <!-- start of code -->
    <table border = "1"><tr><td><code>
    <a href="CppMain.htm">main</a>() must <b><a href="CppReturn.htm">return</a></b> <b><a href="CppInt.htm">int</a></b>. Not <b><a href="CppVoid.htm">void</a></b>, not <b><a href="CppBool.htm">bool</a></b>, not <b><a href="CppFloat.htm">float</a></b>. <b><a href="CppInt.htm">int</a></b>. Just <b><a href="CppInt.htm">int</a></b>, nothing but <b><a href="CppInt.htm">int</a></b>, only<br/>
    <b><a href="CppInt.htm">int</a></b>. Some <a href="CppCompiler.htm">compiler</a>s accept <b><a href="CppVoid.htm">void</a></b> <a href="CppMain.htm">main</a>(), but that is non-standard and shouldn't<br/>
    be used. Instead use <b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>().<br/>
    </code></td></tr></table>
    <!-- end of the code -->
    &nbsp;
  </li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>. Exceptional C++. ISBN:0-201-61562-2. Item 21: void main() is nonstandard and nonportable.</li>
  <li>From <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>'s homepage (http://www.research.att.com/~bs/bs_faq2.html#void-main):<br/>&nbsp;<br/>
    <!-- start of code -->
    <table border = "1"><tr><td><code>
    The <a href="CppDefinition.htm">definition</a><br/>
    <br/>
    <b><a href="CppVoid.htm">void</a></b> <a href="CppMain.htm">main</a>() { <a href="CppComment.htm">/*</a> ... <a href="CppComment.htm">*/</a> }<br/>
    <br/>
    is not and never has been <a href="Cpp.htm">C++</a>, nor has it even been C.<br/>
    </code></td></tr></table>
    <!-- end of the code -->
    &nbsp;
  </li>
  <li>From the The alt.comp.lang.learn.c-c++ FAQ: http://ma.rtij.nl/acllc-c++.FAQ.html#q3.4: 3.4: Why does everyone make so much fuss about &quot;void main()&quot;?<br/>&nbsp;<br/>
    <!-- start of code -->
    <table border = "1"><tr><td><code>
    Because the <a href="CppReturnType.htm">return type</a> of the <a href="CppMain.htm">main</a>() <a href="CppFunction.htm">function</a> must be <b><a href="CppInt.htm">int</a></b> in both C and <a href="Cpp.htm">C++</a>. Anything <b><a href="CppElse.htm">else</a></b> is undefined. Bottom line <a href="CppOperatorMinus.htm">-</a> don't <b><a href="CppTry.htm">try</a></b> to start a thread about <b><a href="CppThis.htm">this</a></b> in alt.comp.lang.learn.c-c<a href="CppOperatorIncrement.htm">++</a> as it has already been discussed many, many times and generates more flamage than any other topic.<br/>
    </code></td></tr></table>
    <!-- end of the code -->
    &nbsp;
  </li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 77: 'Use vector and string instead of arrays</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition).ISBN: 0-201-88954-4</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6, chapter 76: 'Use vector by default. Otherwise, choose an appropriate container', chapter 77: 'Use vector and string instead of arrays.'</li>
  <li><a href="CppMarshallCline.htm">Marshall Cline</a>, <a href="CppGregLomow.htm">Greg Lomow</a> and <a href="CppMikeGirou.htm">Mike Girou</a>. C++ FAQs. ISBN:0-201-3098301, FAQ 28.02: 'Are arrays good or evil?' (Answer: 'Arrays are evil')</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition).ISBN: 0-201-88954-4 Chapter C.14.11 'Prefer vector over array'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition).ISBN: 0-201-88954-4, chapter 7.9.4: 'Avoid macros'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 16: 'Avoid macros'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition).ISBN: 0-201-88954-4 7.9.3: 'Use const extensively and consistently'</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN:0-321-33487-6. Item 3: 'Use const whenever possible'</li>
  <li><a href="CppJarrodHollingworth.htm">Jarrod Hollingworth</a>, <a href="CppBobSwart.htm">Bob Swart</a>, <a href="CppMarkCashman.htm">Mark Cashman</a>, <a href="CppPaulGustavson.htm">Paul Gustavson</a>. Sams C++ Builder 6 Developer's Guide. ISBN:0-672-32480-6. Chapter 3: 'Understand and use const in your code'</li>
  <li><a href="CppJesseLiberty.htm">Jesse Liberty</a>. Sams teach yourself C++ in 24 hours. ISBN:0-672-32224-2. Hour 8, chapter 'Const member functions': 'Use const whenever possible.'</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN:0-321-33487-6. Item 2: 'Prefer consts, enums and inlines to #defines'</li>
  <li><a href="CppErichGamma.htm">Erich Gamma</a>, <a href="CppRichardHelm.htm">Richard Helm</a>, <a href="CppRalphJohnson.htm">Ralph Johnson</a>, <a href="CppJohnVlissides.htm">John Vlissides</a>. Design Patterns. (1st edition) 1995. ISBN: 0201633612</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The Design and Evolution of C++ ISBN: 0-201-54330-3</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. The most important C++ books ...ever. 2006. Online at: http://www.artima.com/cppsource/top_cpp_books.html</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
