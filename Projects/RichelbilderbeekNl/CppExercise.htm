<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Exercise</title>
  <meta name="description" content="C++ Exercise"/>
  <meta name="keywords" content="C++ Exercise "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExercise.htm">Exercise</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug  5 11:57:37 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  On this page you can find some exercises about correct programming,
  inspired by <a href="CppHerbSutter.htm">Herb Sutter</a>'s 'Guru Of The Week' pages.
</p>
<p>&nbsp;</p>
<p>
  These <a href="CppExercise.htm">exercises</a> are suitable for experienced beginners, 
  that want to learn to think in the C++ way. As a side-result they will learn more 
  advanced concepts in a playful way. I try to work on the same difficulty 
  scale as <a href="CppHerbSutter.htm">Herb Sutter</a>.
</p>
<p>&nbsp;</p>
<ul>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseDivide.htm">Exercise #0: A correct Divide function</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseFoolproofFunction.htm">Exercise #1: A foolproof function</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseCorrectFunctionDeclarations.htm">Exercise #2: Correct function declarations</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseDontGiveAwayYourInternals.htm">Exercise #3: Don't give away your internals</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseReadingFromAvectorSafely.htm">Exercise #4: Reading from a std::vector safely</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseTheManyTypesOfConst.htm">Exercise #5: The many types of const</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseRefactoringQuadraticSolver.htm">Exercise #6: refactoring quadratic solver</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseAddOne.htm">Exercise #7: add one</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicCppBuilder.png" alt="C++ Builder"/>
    <a href="CppExerciseLibraryTrouble.htm">Exercise #8: library trouble</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseNoForLoops.htm">Exercise #9: no for-loops</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseReadonlyPointer.htm">Exercise #10: Obtaining a read-only (smart?) pointer</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/>
    <a href="CppExerciseReadonlyVectorOfPointers.htm">Exercise #11: Obtaining a std::vector of read-only (smart?) pointers</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicQt.png" alt="Qt"/>
    <a href="CppExerciseQtHideAndShow1.htm">Exercise #12: Qt hide and show #1: intro</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicQt.png" alt="Qt"/>
    <a href="CppExerciseQtHideAndShow2.htm">Exercise #13: Qt hide and show #2: the real problem</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicQt.png" alt="Qt"/>
    <a href="CppExerciseQtHideAndShow3.htm">Exercise #14: Qt hide and show #3: refactoring</a>
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://www.gotw.ca/gotw/">Herb Sutter's Guru Of The Week archive</a></li>
</ol>
<p>
  Additionally, <a href="CppExercise.htm">Exercise</a> is a
  <a href="CppClass.htm">class</a> for an
  exercise.
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppExercise/CppExercise.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppExercise/CppExercise.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppExercise.htm">CppExercise</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppExercise.htm">CppExercise</a>/<a href="CppExercise.htm">exercise</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppExercise.htm">CppExercise</a>/<a href="CppExercise.htm">exercise</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppExercise.htm">CppExercise</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppExercise/exercise.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppExercise/exercise.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppExercise.htm">Exercise</a>, a collection of <a href="CppQuestion.htm">Question</a>s<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppExercise.htm">CppExercise</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> EXERCISE_H<br/>
<a href="CppDefine.htm">#define</a> EXERCISE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>A <a href="CppExercise.htm">Exercise</a> is a collection of <a href="CppQuestion.htm">question</a>s<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppExercise.htm">Exercise</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConstructor.htm">Construct</a> a <a href="CppExercise.htm">Exercise</a> from file<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The file needs to contain at least one <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdLogic_error.htm">std::logic_error</a> <b><a href="CppIf.htm">if</a></b> file does not exist<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws <a href="CppStdRuntime_error.htm">std::runtime_error</a> <b><a href="CppIf.htm">if</a></b> file does not contain a single <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppExercise.htm">Exercise</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Read the current <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetCurrent<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the number of <a href="CppQuestion.htm">question</a>s, will be at least one<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOf<a href="CppQuestion.htm">Question</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> its <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Go to the next <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Next() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~<a href="CppExercise.htm">Exercise</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppExercise.htm">Exercise</a> *);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppExercise.htm">Exercise</a> *);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An <a href="CppIterator.htm">iterator</a> <a href="CppPointer.htm">point</a>ing to the current <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;::<a href="CppIterator.htm">iterator</a> m_current;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppQuestion.htm">question</a>s<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_<a href="CppQuestion.htm">question</a>s;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> EXERCISE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppExercise/exercise.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppExercise/exercise.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppExercise.htm">Exercise</a>, a collection of <a href="CppQuestion.htm">Question</a>s<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppExercise.htm">CppExercise</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppExercise.htm">exercise</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMultipleChoiceQuestionDialog.htm">multiplechoicequestiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppOpenQuestion.htm">openquestion</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppOpenQuestionDialog.htm">openquestiondialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppOpenQuestionDialog.htm">openquestiondialog</a>factory.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppExercise.htm">Exercise</a>::<a href="CppExercise.htm">Exercise</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;: m_current{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppQFile.htm">QFile</a>::exists(filename.c_str()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("File does not exist");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppFileToVector.htm">FileToVector</a>(filename)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.reserve(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestionDialog.htm">QuestionDialog</a>&gt; tmp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOpenQuestionDialog.htm">OpenQuestionDialog</a>Factory().Create(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQuestionDialog.htm">QuestionDialog</a>&gt; tmp(<b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestionDialog.htm">MultipleChoiceQuestionDialog</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppQuestion.htm">question</a>s.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No problem<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppQuestion.htm">question</a>s.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("No <a href="CppQuestion.htm">question</a>s found in loading the <a href="CppExercise.htm">Exercise</a>");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_<a href="CppQuestion.htm">question</a>s.empty());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shuffle the <a href="CppQuestion.htm">question</a>s at start<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(m_<a href="CppQuestion.htm">question</a>s.begin(),m_<a href="CppQuestion.htm">question</a>s.end());<br/>
&nbsp;&nbsp;m_current <a href="CppOperatorAssign.htm">=</a> m_<a href="CppQuestion.htm">question</a>s.begin();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_current <a href="CppOperatorNotEqual.htm">!=</a> m_<a href="CppQuestion.htm">question</a>s.end());<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppExercise.htm">Exercise</a>::GetCurrent<a href="CppQuestion.htm">Question</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_current <a href="CppOperatorNotEqual.htm">!=</a> m_<a href="CppQuestion.htm">question</a>s.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *m_current;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppExercise.htm">Exercise</a>::GetNumberOf<a href="CppQuestion.htm">Question</a>s() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_<a href="CppQuestion.htm">question</a>s.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_<a href="CppQuestion.htm">question</a>s.size());<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppExercise.htm">Exercise</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppExercise.htm">Exercise</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-26: <a href="CppVersion.htm">Version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-10-30: <a href="CppVersion.htm">Version</a> 1.1: shuffle <a href="CppQuestion.htm">question</a>s at start"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppExercise.htm">Exercise</a>::Next() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_current;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_current <a href="CppOperatorEqual.htm">==</a> m_<a href="CppQuestion.htm">question</a>s.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(m_<a href="CppQuestion.htm">question</a>s.begin(),m_<a href="CppQuestion.htm">question</a>s.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current <a href="CppOperatorAssign.htm">=</a> m_<a href="CppQuestion.htm">question</a>s.begin();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
