<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>boost::numeric_cast</title>
  <meta name="description" content="C++ boost::numeric_cast"/>
  <meta name="keywords" content="C++ boost::numeric_cast boost numeric_cast numeric numerical cast code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppNumeric_cast.htm">boost::numeric_cast</a></h1>
<p>&nbsp;</p>
<p><a href="CppNumeric_cast.htm">boost::numeric_cast</a> is a safe number <a href="CppConvert.htm">conversion</a>
<a href="CppFunction.htm">function</a> that <a href="CppThrow.htm">throws</a> an 
<a href="CppException.htm">exception</a> if the <a href="CppConvert.htm">conversion</a> cannot succeed.</p>
<p>&nbsp;</p>
<p>In the example below, the highest possible <a href="CppInt.htm">int</a> is <a href="CppConvert.htm">converted</a> 
to a <a href="CppShort.htm">short</a>. Because this will fail, <a href="CppNumeric_cast.htm">boost::numeric_cast</a>
<a href="CppThrow.htm">throws</a> an <a href="CppException.htm">exception</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/static_assert.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/limits.hpp&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume that <b><a href="CppShort.htm">short</a></b> occupies less storage in <a href="CppMemory.htm">memory</a> than <b><a href="CppInt.htm">int</a></b>.<br/>
&nbsp;&nbsp;<a href="CppBOOST_STATIC_ASSERT.htm">BOOST_STATIC_ASSERT</a>(<b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppShort.htm">short</a></b>) &lt; <b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the highest <a href="CppInt.htm">integer</a> value.<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::numeric::bounds&lt;<b><a href="CppInt.htm">int</a></b>&gt;::highest();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Try to store the highest <a href="CppInt.htm">integer</a> value as a <b><a href="CppShort.htm">short</a></b>.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This will <b><a href="CppThrow.htm">throw</a></b> <a href="CppBoost.htm">boost</a>::numeric::positive_overflow,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>because a <b><a href="CppShort.htm">short</a></b> occupies to few <a href="CppMemory.htm">memory</a> to store such<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>a large number.<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppShort.htm">short</a></b> y <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppShort.htm">short</a></b>&gt;(x);<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
