<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>purpose of using functions</title>
  <meta name="description" content="C++ purpose of using functions"/>
  <meta name="keywords" content="C++ purpose of using functions code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppFunctionPurpose.htm">purpose of using functions</a></h1>
<p>&nbsp;</p>
<p>Possible purposes of using <a href="CppFunction.htm">functions</a> are (incomplete list):</p>
<ul>
  <li>Avoid code duplication</li>
  <li>Improving the readability of your code</li>
  <li>Decrease <a href="CppScope.htm">scope</a> bloat</li>
  <li>Increasing <a href="CppConstCorrect.htm">const-correctness</a></li>
</ul>
<p>&nbsp;</p>
<p>Below is an example that asks the user for two values and calculates whether these
and the sum of these values are <a href="CppPrime.htm">prime</a>. The first piece of code does not use
<a href="CppFunction.htm">functions</a>, the second does. In comment is shown which of the four purposes are served.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example without <a href="CppFunction.htm">functions</a></h2> 
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>code has twice as m<a href="CppAny.htm">any</a> lines!<br/>
<a href="CppComment.htm">//</a>Less clear what <a href="CppMain.htm">main</a>() does<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> value1 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1; <a href="CppComment.htm">//</a>value1 cannot be <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>value1 must be at <a href="CppMain.htm">main</a>() <a href="CppScope.htm">scope</a> to be summed (<a href="CppScope.htm">scope</a> bloat)<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> value2 <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1; <a href="CppComment.htm">//</a>value2 cannot be <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>value2 must be at a <a href="CppMain.htm">main</a>() <a href="CppScope.htm">scope</a> to be summed (<a href="CppScope.htm">scope</a> bloat)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>This code is copied three <a href="CppTime.htm">time</a>s and modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unclear what the code fragment does<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCin.htm">std::cin</a> <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isPrime <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; <a href="CppComment.htm">//</a>Extra variable needed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppSqrt.htm">std::sqrt</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(value1))) <a href="CppOperatorPlus.htm">+</a> 1;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=2; i<a href="CppOperatorNotEqual.htm">!=</a>max; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value1 <a href="CppOperatorModulus.htm">%</a> i <a href="CppOperatorEqual.htm">==</a> 0) { isPrime <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>; <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Value1 is " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (isPrime ? "" : "not ") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "prime\n";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>This code is copied three <a href="CppTime.htm">time</a>s and modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unclear what the code fragment does<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCin.htm">std::cin</a> <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isPrime <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; <a href="CppComment.htm">//</a>Extra variable needed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppSqrt.htm">std::sqrt</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(value2))) <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=2; i<a href="CppOperatorNotEqual.htm">!=</a>max; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value2 <a href="CppOperatorModulus.htm">%</a> i <a href="CppOperatorEqual.htm">==</a> 0) { isPrime <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>; <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Value2 is " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (isPrime ? "" : "not ") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "prime";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>This code is copied three <a href="CppTime.htm">time</a>s and modified<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unclear what the code fragment does<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> valueSum <a href="CppOperatorAssign.htm">=</a> value1 <a href="CppOperatorPlus.htm">+</a> value2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> isPrime <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; <a href="CppComment.htm">//</a>Extra variable needed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppSqrt.htm">std::sqrt</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(valueSum))) <a href="CppOperatorPlus.htm">+</a> 1;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=2; i<a href="CppOperatorNotEqual.htm">!=</a>max; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(valueSum <a href="CppOperatorModulus.htm">%</a> i <a href="CppOperatorEqual.htm">==</a> 0) { isPrime <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>; <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Value1 <a href="CppOperatorPlus.htm">+</a> value2 is " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (isPrime ? "" : "not ") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "prime\n";<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example with <a href="CppFunction.htm">functions</a></h2> 
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppIsPrime.htm">IsPrime</a>.htm<br/>
<a href="CppComment.htm">//</a>Clear what the code fragment does<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppIsPrime.htm">IsPrime</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppSqrt.htm">std::sqrt</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x))) <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=2; i<a href="CppOperatorNotEqual.htm">!=</a>max; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>(x <a href="CppOperatorModulus.htm">%</a> i <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Clear what the code fragment does<br/>
<b><a href="CppInt.htm">int</a></b> AskUserInput()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x; <a href="CppComment.htm">//</a>Temporary variable 'x' as local as possible<br/>
&nbsp;&nbsp;<a href="CppCin.htm">std::cin</a> <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> x;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> x;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>code has twice as few lines!<br/>
<a href="CppComment.htm">//</a>Clear(er) what <a href="CppMain.htm">main</a>() does<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value1 <a href="CppOperatorAssign.htm">=</a> AskUserInput(); <a href="CppComment.htm">//</a>value1 is <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value2 <a href="CppOperatorAssign.htm">=</a> AskUserInput(); <a href="CppComment.htm">//</a>value2 is <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Value1 is " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (<a href="CppIsPrime.htm">IsPrime</a>(value1) ? "" : "not ") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "prime\n";<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Value2 is " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (<a href="CppIsPrime.htm">IsPrime</a>(value2) ? "" : "not ") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "prime\n";<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Value1 <a href="CppOperatorPlus.htm">+</a> value2 is " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (<a href="CppIsPrime.htm">IsPrime</a>(value1 <a href="CppOperatorPlus.htm">+</a> value2) ? "" : "not ") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "prime\n";<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
