<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>scope</title>
  <meta name="description" content="C++ scope"/>
  <meta name="keywords" content="C++ scope code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppScope.htm">scope</a></h1>
<p>&nbsp;</p>
<p>The <a href="CppScope.htm">scope</a> of a <a href="CppVariable.htm">variable</a>
is the area where its name is valid.</p>
<p>&nbsp;</p>
<p>There are multiple types of <a href="CppScope.htm">scope</a> [10]:</p>
<ul>
  <li><a href="CppLocalScope.htm">local scope</a></li>
  <li><a href="CppClassScope.htm">class scope</a></li>
  <li><a href="CppNamespaceScope.htm">namespace scope</a></li>
  <li><a href="CppGlobalScope.htm">global scope</a></li>
  <li><a href="CppStatementScope.htm">statement scope</a></li>
  <li><a href="CppFunctionScope.htm">function scope</a></li>
</ul>
<p>&nbsp;</p>
<p>A <a href="CppVariable.htm">variable</a> <a
href="CppDeclaration.htm">declared</a> inside a <a href="CppFunction.htm">function</a>
is only valid inside that <a href="CppFunction.htm">function</a>. Thus its <a
href="CppScope.htm">scope</a> is inside the <a href="CppFunction.htm">function</a>.</p>
<p>&nbsp;</p>
<p>A <a href="CppScope.htm">scope</a> is defined by accolades, as shown in the commented example below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start of <a href="CppMain.htm">main</a>() <a href="CppScope.htm">scope</a><br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> a <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start of <a href="CppScope.htm">scope</a> inside of <a href="CppMain.htm">main</a>() <a href="CppScope.htm">scope</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> b <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>b goes out of <a href="CppScope.htm">scope</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start of <b><a href="CppFor.htm">for</a></b>-loop <a href="CppScope.htm">scope</a> in <a href="CppMain.htm">main</a>() <a href="CppScope.htm">scope</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Note: i is <a href="CppScope.htm">scope</a>d to here<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": Hello world\n";<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>A <a href="CppVariable.htm">variable</a> 'without scope' is called a 
<a href="CppGlobal.htm">global</a> <a href="CppVariable.htm">variable</a>. Avoid using 
<a href="CppGlobal.htm">global</a> data [1-5,8-9]. When the <a href="CppCompiler.htm">compiler</a> can
choose between a <a href="CppGlobal.htm">global</a> and <a href="CppLocal.htm">local</a>
<a href="CppVariable.htm">variable</a> with the same name, the <a
href="CppLocal.htm">local</a> will be used, as shown in the example below:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> a <a href="CppOperatorAssign.htm">=</a> 1; <a href="CppComment.htm">//</a>Global 'a'<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> a <a href="CppOperatorAssign.htm">=</a> 2; <a href="CppComment.htm">//</a>Local 'a'<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(::a<a href="CppOperatorEqual.htm">==</a>1); <a href="CppComment.htm">//</a>Use <a href="CppScope.htm">scope</a> <b><a href="CppOperator.htm">operator</a></b> to get global 'a'<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Keep scopes small [6,11] . Don't use the same name in both a scope and an enclosing scope [7,12].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 10: 'Minimize global and shared data'.</li>
  <li><!--  2 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a> . C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 18: 'Declare variables as locally as possible'.</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition).ISBN: 0-201-88954-4. Chapter 1.8.2.a: 'Don't use global data (use members)'</li>
  <li><!--  4 --><a href="CppJarrodHollingworth.htm"> Jarrod Hollingworth</a> , Bob Swart, Mark Cashman, Paul Gustavson. Sams C++ Builder 6 Developer's Guide. ISBN: 0-672-32480-6. Chapter 3: 'Avoid using global variables'</li>
  <li><!--  5 --><a href="CppJesseLiberty.htm">Jesse Liberty</a> . Sams teach yourself C++ in 24 hours. ISBN: 0-672-32224-2. Hour 5, paragraph 'Global variables': 'In C++, global variables are avoided because they can create very confusing code that is hard to maintain.'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Item 4.10.1: 'Keep scopes small'.</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm"> Bjarne Stroustrup</a> . The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4.  Item 4.10.2: 'Don't use the same name in both a scope and an enclosing scope'.</li>
  <li><!--  8 -->Stephen C. Dewhurst. C++ Gotchas. 2003. ISBN: 0-321-12518-5. Gotcha #3: 'Avoid global variables'.</li>
  <li><!--  9 --><a href="http://www.parashift.com/c++-faq/global-vars.html">C++ FAQ Lite</a>: 'The names of global variables should start with //' and 'Instead of using a global variable, you should seriously consider if there are ways to limit the variable's visibility and/or lifetime'.</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.3.4. Scope, page 157</li>
  <li><!-- 11 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice. page 169: '[17] Keep scopes small'</li>
  <li><!-- 12 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice. page 169: '[18] Don't use the same name in both a scope and its enclosing scope'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

