<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>WtAutoConfig</title>
  <meta name="description" content="C++ WtAutoConfig"/>
  <meta name="keywords" content="C++ WtAutoConfig "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppWtAutoConfig.htm">WtAutoConfig</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.637 at Thu May  1 21:03:43 2014
 -->
<p><img src="PicWt.png" alt="Wt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppWtAutoConfig.htm">WtAutoConfig</a> is a <a href="CppWt.htm">Wt</a> <a href="CppClass.htm">class</a>
that allows to start a <a href="CppWt.htm">Wt</a> application without the need of a user giving 
command-line parameters. It is a fine starting point for a <a href="CppWt.htm">Wt</a> application.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtAutoConfig/CppWtAutoConfig.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtAutoConfig/CppWtAutoConfig.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>/<a href="CppWtAutoConfig.htm">wtautoconfig</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>/<a href="CppWtAutoConfig.htm">wtautoconfig</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtAutoConfig/wtautoconfig.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtAutoConfig/wtautoconfig.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtAutoConfig.htm">WtAutoConfig</a>, configures a <a href="CppWt.htm">Wt</a> server in a <b><a href="CppDefault.htm">default</a></b> way<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> WTAUTO<a href="CppQmakeConfig.htm">CONFIG</a>_H<br/>
<a href="CppDefine.htm">#define</a> WTAUTO<a href="CppQmakeConfig.htm">CONFIG</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWApplication.htm">WApplication</a>;<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> <a href="CppWEnvironment.htm">WEnvironment</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppWtAutoConfig.htm">WtAutoConfig</a> is a <b><a href="CppClass.htm">class</a></b> to automatically start a <a href="CppWt.htm">Wt</a><br/>
<a href="CppComment.htm">///</a>server in a <b><a href="CppDefault.htm">default</a></b> configuration.<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWtAutoConfig.htm">WtAutoConfig</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppWApplication.htm">Wt::WApplication</a> * (*<a href="CppFunction.htm">Function</a>Type)(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppWtAutoConfig.htm">WtAutoConfig</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> ** <b><a href="CppConst.htm">const</a></b> <a href="CppArgc.htm">argv</a>, <b><a href="CppConst.htm">const</a></b> <a href="CppFunction.htm">Function</a>Type <a href="CppFunction.htm">function</a>);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Run();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_<a href="CppArgc.htm">argc</a>;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> ** <b><a href="CppConst.htm">const</a></b> m_<a href="CppArgc.htm">argv</a>; <a href="CppComment.htm">//</a>m_<a href="CppArgc.htm">argv</a> must be non-<b><a href="CppConst.htm">const</a></b> <b><a href="CppFor.htm">for</a></b> <a href="CppBoostProgram_options.htm">boost::program_options</a>::parse_command_line<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppFunction.htm">Function</a>Type m_function;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateDefaultStylesheet();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> SaveDefaultStylesheet();<br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WTAUTO<a href="CppQmakeConfig.htm">CONFIG</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppWtAutoConfig/wtautoconfig.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppWtAutoConfig/wtautoconfig.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppWtAutoConfig.htm">WtAutoConfig</a>, configures a <a href="CppWt.htm">Wt</a> server in a <b><a href="CppDefault.htm">default</a></b> way<br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppWtAutoConfig.htm">CppWtAutoConfig</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppProgram_options.htm">boost/program_options.hpp</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWEnvironment.htm">WEnvironment</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppWtAutoConfig.htm">wtautoconfig</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppWtAutoConfig.htm">WtAutoConfig</a>::<a href="CppWtAutoConfig.htm">WtAutoConfig</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> ** <b><a href="CppConst.htm">const</a></b> <a href="CppArgc.htm">argv</a>,<b><a href="CppConst.htm">const</a></b> <a href="CppFunction.htm">Function</a>Type <a href="CppFunction.htm">function</a>)<br/>
&nbsp;&nbsp;: m_<a href="CppArgc.htm">argc</a>(<a href="CppArgc.htm">argc</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppArgc.htm">argv</a>(<a href="CppArgc.htm">argv</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_function(<a href="CppFunction.htm">function</a>)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppWtAutoConfig.htm">WtAutoConfig</a>::Get<a href="CppVersion.htm">Version</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppWtAutoConfig.htm">WtAutoConfig</a>::Get<a href="CppVersion.htm">Version</a>History()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-04-16: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-04-18: <a href="CppVersion.htm">version</a> 1.1: added CreateDefaultStylesheet and SaveDefaultStylesheet <a href="CppMemberFunction.htm">member function</a>s"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtAutoConfig.htm">WtAutoConfig</a>::Run()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Declare the supported options.<br/>
&nbsp;&nbsp;<a href="CppBoostProgram_options.htm">boost::program_options</a>::options_description d(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Allowed options <b><a href="CppFor.htm">for</a></b> <a href="ToolTestLed.htm">TestLed</a>");<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> docroot;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> http_address;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> http_port;<br/>
&nbsp;&nbsp;d.add_options()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("help",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"produce <b><a href="CppThis.htm">this</a></b> help message")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("docroot",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoostProgram_options.htm">boost::program_options</a>::value&lt;<a href="CppStdString.htm">std::string</a>&gt;(&amp;docroot)-&gt;default_value("."),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "the docroot")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("http-address",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoostProgram_options.htm">boost::program_options</a>::value&lt;<a href="CppStdString.htm">std::string</a>&gt;(&amp;http_address)-&gt;default_value("0.0.0.0"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "the server's http <a href="CppAddress.htm">address</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("http-port",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppBoostProgram_options.htm">boost::program_options</a>::value&lt;<a href="CppStdString.htm">std::string</a>&gt;(&amp;http_port)-&gt;default_value("8080"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "the server's http port")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoostProgram_options.htm">boost::program_options</a>::variables_map m;<br/>
&nbsp;&nbsp;<a href="CppBoostProgram_options.htm">boost::program_options</a>::store(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostProgram_options.htm">boost::program_options</a>::parse_command_line(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppArgc.htm">argc</a>, m_<a href="CppArgc.htm">argv</a>, d), m);<br/>
&nbsp;&nbsp;<a href="CppBoostProgram_options.htm">boost::program_options</a>::notify(m);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m.count("help"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the options_description<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the arguments in <a href="CppStdString.htm">std::string</a> format<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v(7);<br/>
&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> m_<a href="CppArgc.htm">argv</a>[0];<br/>
&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> "<a href="CppOperatorDecrement.htm">--</a>docroot";<br/>
&nbsp;&nbsp;v[2] <a href="CppOperatorAssign.htm">=</a> docroot;<br/>
&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a> "<a href="CppOperatorDecrement.htm">--</a>http-address";<br/>
&nbsp;&nbsp;v[4] <a href="CppOperatorAssign.htm">=</a> http_address;<br/>
&nbsp;&nbsp;v[5] <a href="CppOperatorAssign.htm">=</a> "<a href="CppOperatorDecrement.htm">--</a>http-port";<br/>
&nbsp;&nbsp;v[6] <a href="CppOperatorAssign.htm">=</a> http_port;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> the arguments to <b><a href="CppChar.htm">char</a></b>* format<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>*&gt; w(7);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>7; <a href="CppOperatorIncrement.htm">++</a>i) w[i] <a href="CppOperatorAssign.htm">=</a> &amp;v[i][0];<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Give <a href="CppWt.htm">Wt</a> the modified parameters<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WRun(w.size(), &amp;w[0], m_function);<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppWtAutoConfig.htm">WtAutoConfig</a>::CreateDefaultStylesheet()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
<br/>
&nbsp;&nbsp;v.push_back("* { font-family:\"Courier New\"; }");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("body");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;background-image:url('RichelbilderbeekNlBackground.png');");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;background-position:center center;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".title");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-weight:bold;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:xx-large;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("table, th, td");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;border: 1px solid black;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("td");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:12px;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".menu * .item");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;cursor: <a href="CppPointer.htm">pointer</a>; cursor: hand;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:x-large;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;color: black;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:12px;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".menu * .itemselected {");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:x-large;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-weight: bold;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;color: blue;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:12px;");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".<a href="ProjectWtWebsite.htm">wtwebsite</a>menu * .item");<br/>
&nbsp;&nbsp;v.push_back("{");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;cursor: <a href="CppPointer.htm">pointer</a>; cursor: hand;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:small;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;color: black;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:4px;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;background-color:rgb(160,160,160);");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;border:0px");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back(".<a href="ProjectWtWebsite.htm">wtwebsite</a>menu * .itemselected {");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-size:small;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;font-weight:bold;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;color: blue;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;padding:4px;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;background-color:rgb(196,196,196);");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;border:0px");<br/>
&nbsp;&nbsp;v.push_back("}");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppWtAutoConfig.htm">WtAutoConfig</a>::SaveDefaultStylesheet()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> CreateDefaultStylesheet();<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f("wt.css");<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(f,"\n"));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
