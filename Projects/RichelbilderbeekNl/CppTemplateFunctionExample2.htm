<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>TemplateFunctionExample2</title>
  <meta name="description" content="C++ TemplateFunctionExample2"/>
  <meta name="keywords" content="C++ TemplateFunctionExample2 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppTemplateFunctionExample2.htm">TemplateFunctionExample2</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppTemplateFunctionExample2-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppTemplateFunctionExample2/CppTemplateFunctionExample2.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTemplateFunctionExample2/CppTemplateFunctionExample2.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG<br/>
}<br/>
<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
<br/>
unix {<br/>
&nbsp;&nbsp;<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
}<br/>
<br/>
win32 {<br/>
&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppTemplateFunctionExample2/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppTemplateFunctionExample2/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Data<br/>
{<br/>
&nbsp;&nbsp;Data(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_int(i), m_<b><a href="CppDouble.htm">double</a></b>(d), m_string(s) {}<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_int;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_<b><a href="CppDouble.htm">double</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_string;<br/>
};<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppConst.htm">const</a></b> T&amp; Get(<b><a href="CppConst.htm">const</a></b> Data&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;&gt; <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; Get&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> Data&amp; d) { <b><a href="CppReturn.htm">return</a></b> d.m_int; }<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;&gt; <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Get&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> Data&amp; d) { <b><a href="CppReturn.htm">return</a></b> d.m_<b><a href="CppDouble.htm">double</a></b>; }<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;&gt; <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; Get&lt;<a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppConst.htm">const</a></b> Data&amp; d) { <b><a href="CppReturn.htm">return</a></b> d.m_string; }<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Data d(42,<a href="CppM_PI.htm">M_PI</a>,"<a href="CppHelloWorld.htm">Hello world</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Get&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d) <a href="CppOperatorEqual.htm">==</a> 42);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Get&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(d) <a href="CppOperatorEqual.htm">==</a> <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( Get&lt;<a href="CppStdString.htm">std::string</a>&gt;(d) <a href="CppOperatorEqual.htm">==</a> "<a href="CppHelloWorld.htm">Hello world</a>");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
