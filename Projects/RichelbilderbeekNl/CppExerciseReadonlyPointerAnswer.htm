<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #10: Obtaining a read-only (smart?) pointer</title>
  <meta name="description" content="C++ Answer of exercise #10: Obtaining a read-only (smart?) pointer"/>
  <meta name="keywords" content="C++ Answer of exercise #10: Obtaining a read-only (smart?) pointer code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>
  (<a href="Cpp.htm">C++</a>) 
  <img src="PicCpp98.png" alt="C++98"/>
  <a href="CppExerciseReadonlyPointerAnswer.htm">Answer of exercise #10: Obtaining a read-only (smart?) pointer</a>
</h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseReadonlyPointer.htm">Exercise #10: Obtaining a read-only (smart?) pointer</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/shared_ptr.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyStruct<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_x;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;~MyStruct() {}<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(MyStruct *);<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyStructKeeper<br/>
{<br/>
&nbsp;&nbsp;MyStructKeeper() : m_s(<b><a href="CppNew.htm">new</a></b> MyStruct) {}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MyStruct * Get() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_s.get(); }<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;MyStruct&gt; m_s;<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;MyStructKeeper k;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MyStruct * s <a href="CppOperatorAssign.htm">=</a> k.Get(); <a href="CppComment.htm">//</a>Should be required to write '<b><a href="CppConst.htm">const</a></b> MyStruct'<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> s-&gt;m_x; <a href="CppComment.htm">//</a>Must <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>s-&gt;m_x <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Should not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> s;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Should not <a href="CppCompile.htm">compile</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
