<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>BoostGraphExample2</title>
  <meta name="description" content="C++ BoostGraphExample2"/>
  <meta name="keywords" content="C++ BoostGraphExample2 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBoostGraphExample2.htm">BoostGraphExample2</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.647 at Fri Jun  6 17:16:12 2014
 -->
<p><img src="PicBoost.png" alt="Boost"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppBoostGraphExample2.htm">Boost.Graph example 2: four human names and their relationships + plotting</a>
  is a <a href="CppBoostGraph.htm">Boost.Graph</a> <a href="CppExample.htm">example</a>.
  It defines a graph of person names and their relationships. Then the graph is written to .dot file and plotted using KGraphViewer.
</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppBoostGraphExample2.png">View the graph of this example (png)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppBoostGraphExample2/CppBoostGraphExample2.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostGraphExample2/CppBoostGraphExample2.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri) #Or use the code below<br/>
# QT += core<br/>
# QT += gui<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
# <a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
#&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
# }<br/>
# <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=c++1y <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
# unix {<br/>
#&nbsp;&nbsp; <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
# }<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri)<br/>
# win32 {<br/>
#&nbsp;&nbsp; <a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
# }<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBoostGraphExample2/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostGraphExample2/main.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/graph/adjacency_list.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/graph/graphviz.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Define the type of graph:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBoostAdjacency_list.htm">boost::adjacency_list</a> is the 'Swiss army knife' graph<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostAdjacency_list.htm">boost::adjacency_list</a><br/>
&nbsp;&nbsp;&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store all edges as a <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::vecS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store all vertices in a <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::vecS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Relations are both ways (in <b><a href="CppThis.htm">this</a></b> example)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(note: but you can freely change it to <a href="CppBoost.htm">boost</a>::directedS)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::undirectedS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All vertices are person names of type <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt;<a href="CppBoost.htm">boost</a>::vertex_name_t,<a href="CppStdString.htm">std::string</a>&gt;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All edges are relation of type <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt;<a href="CppBoost.htm">boost</a>::edge_name_t,<a href="CppStdString.htm">std::string</a>&gt;<br/>
&nbsp;&nbsp;&gt; Graph;<br/>
<br/>
&nbsp;&nbsp;Graph&nbsp;&nbsp;g;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; names;<br/>
&nbsp;&nbsp;names.push_back("Mr. A");<br/>
&nbsp;&nbsp;names.push_back("Mrs. B");<br/>
&nbsp;&nbsp;names.push_back("Dr. C");<br/>
&nbsp;&nbsp;names.push_back("Prof. D");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Graph::vertex_descriptor v0 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::add_vertex(names[0],g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Graph::vertex_descriptor v1 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::add_vertex(names[1],g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Graph::vertex_descriptor v2 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::add_vertex(names[2],g);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Graph::vertex_descriptor v3 <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::add_vertex(names[3],g);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; relations;<br/>
&nbsp;&nbsp;relations.push_back("Married");<br/>
&nbsp;&nbsp;relations.push_back("Lovers");<br/>
&nbsp;&nbsp;relations.push_back("Collegues");<br/>
&nbsp;&nbsp;relations.push_back("Roommates");<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(v0,v1,relations[0],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(v1,v2,relations[1],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(v2,v3,relations[2],g);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::add_edge(v0,v3,relations[3],g);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Writing graph to file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f("test.dot");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Problems:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-</a> All relationships are omitted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostWrite_graphviz.htm">boost::write_graphviz</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::make_label_writer(&amp;(names[0])));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>View the output directly <b><a href="CppUsing.htm">using</a></b> KGraphViewerer<br/>
&nbsp;&nbsp;<a href="CppStdSystem.htm">std::system</a>("kgraphviewer test.dot");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
