<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>VectorToXml</title>
  <meta name="description" content="C++ VectorToXml"/>
  <meta name="keywords" content="C++ VectorToXml "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppVectorToXml.htm">VectorToXml</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppVectorToXml-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.10 (utopic)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppVectorToXml/CppVectorToXml.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVectorToXml/CppVectorToXml.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
<br/>
#<br/>
#<br/>
# Type of compile<br/>
#<br/>
#<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
}<br/>
<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
<br/>
unix {<br/>
&nbsp;&nbsp;<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
}<br/>
<br/>
#<br/>
#<br/>
# <a href="CppBoost.htm">Boost</a><br/>
#<br/>
#<br/>
<br/>
win32 {<br/>
&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppVectorToXml/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppVectorToXml/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a <a href="CppStdVector.htm">std::vector</a> to single-line <a href="CppXml.htm">XML</a><br/>
<a href="CppComment.htm">///</a>For example, a <a href="CppStdVector.htm">std::vector</a> with elements {"cat","dog"} and name "animals" becomes<br/>
/<a href="CppComment.htm">//</a> &lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with <a href="CppXml.htm">Xml</a>ToVector<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> VectorTo<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;"&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a single-line <a href="CppXml.htm">XML</a> to a <a href="CppStdVector.htm">std::vector</a> and its name<br/>
<a href="CppComment.htm">///</a>For example, the <a href="CppXml.htm">XML</a> line "&lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;"<br/>
<a href="CppComment.htm">///</a>becomes a <a href="CppStdVector.htm">std::vector</a> with elements {"cat","dog"} and the name "animals"<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with VectorTo<a href="CppXml.htm">Xml</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppXml.htm">Xml</a>ToVector(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[s.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the name tag<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&lt;name&gt;...&lt;/name&gt;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> name_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> s.substr(1,name_sz);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove the name tags<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(name_sz <a href="CppOperatorPlus.htm">+</a> 2,s.size() <a href="CppOperatorMinus.htm">-</a> (2 * name_sz) <a href="CppOperatorMinus.htm">-</a> 5);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !t.empty(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the index tags and item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&lt;index&gt;item&lt;/index&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t[0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t[t.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> index <a href="CppOperatorAssign.htm">=</a> t.substr(1,index_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.find('/') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> item_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.find('/')) <a href="CppOperatorMinus.htm">-</a> index_sz <a href="CppOperatorMinus.htm">-</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> item <a href="CppOperatorAssign.htm">=</a> t.substr(index.size() <a href="CppOperatorPlus.htm">+</a> 2,item_sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> total_sz <a href="CppOperatorAssign.htm">=</a> (2 * index_sz) <a href="CppOperatorPlus.htm">+</a> item_sz <a href="CppOperatorPlus.htm">+</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> t.substr(total_sz,t.size() <a href="CppOperatorMinus.htm">-</a> total_sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(v,name);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { "cats", "dog", "zebrafinch" };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> "animals";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> VectorTo<a href="CppXml.htm">Xml</a>(v,name);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;,<a href="CppStdString.htm">std::string</a>&gt; p { <a href="CppXml.htm">Xml</a>ToVector(s) };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.first <a href="CppOperatorEqual.htm">==</a> v);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.second <a href="CppOperatorEqual.htm">==</a> name);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
