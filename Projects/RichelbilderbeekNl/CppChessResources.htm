<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>ChessResources</title>
  <meta name="description" content="C++ ChessResources"/>
  <meta name="keywords" content="C++ ChessResources "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppChessResources.htm">ChessResources</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.647 at Fri Jun  6 17:12:24 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppChessResources.htm">ChessResources</a> contains and manages
  <a href="CppChess.htm">chess</a> resources
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChessResources/CppChessResources.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChessResources/CppChessResources.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppChessResources.htm">CppChessResources</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppChessResources.htm">CppChessResources</a>/<a href="CppChess.htm">chess</a>resources.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppChessResources.htm">CppChessResources</a>/<a href="CppChess.htm">chess</a>resources.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppChessResources.htm">CppChessResources</a>/Licence.txt<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppChessResources.htm">CppChessResources</a>/<a href="CppChess.htm">chess</a>resources.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChessResources/chessresources.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChessResources/chessresources.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_CHESS<a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_CHESS<a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppChess.htm">chess</a>fwd.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppChess.htm">chess</a>color.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppChess.htm">Chess</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Resources contains the resources filenames<br/>
<b><a href="CppStruct.htm">struct</a></b> Resources<br/>
{<br/>
&nbsp;&nbsp;Resources() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Resources() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the filename <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> piece<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Find(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppChess.htm">Chess</a>::Piece&gt;&amp; piece,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppChess.htm">Chess</a>::Color selection_color <a href="CppOperatorAssign.htm">=</a> Color::<a href="CppIndeterminate.htm">indeterminate</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> big <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the filename <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> square<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Find(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Square&gt; square,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppChess.htm">Chess</a>::Color selection_color <a href="CppOperatorAssign.htm">=</a> Color::<a href="CppIndeterminate.htm">indeterminate</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the filename <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> selected piece<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> FindSelected(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppChess.htm">Chess</a>::Piece&gt;&amp; piece) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Resources its only <a href="CppInstance.htm">instance</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> Resources * Get();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain all the resources' filenames<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetFilenames() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Resources its <a href="CppConstructor.htm">constructor</a>, <b><a href="CppPrivate.htm">private</a></b> because Resources is a <a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resources();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Resources its only <a href="CppInstance.htm">instance</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> Resources * <a href="CppInstance.htm">m_instance</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Tests <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> all files being present<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~ <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppChess.htm">Chess</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_CHESS<a href="CppQmakeResources.htm">RESOURCES</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppChessResources/chessresources.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppChessResources/chessresources.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppChess.htm">chess</a>resources.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> MXE_SUPPORTS_THREADS<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThreadH.htm">thread</a>&gt;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppChess.htm">chess</a>color.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppChess.htm">chess</a>piece.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppChess.htm">chess</a>square.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppChess.htm">Chess</a>::Resources::Find(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppChess.htm">Chess</a>::Piece&gt;&amp; piece,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppChess.htm">Chess</a>::Color selection_color,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> big)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(piece);<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Piece its color<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(piece-&gt;GetColor() <a href="CppOperatorNotEqual.htm">!=</a> Color::<a href="CppIndeterminate.htm">indeterminate</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (piece-&gt;GetColor() <a href="CppOperatorEqual.htm">==</a> Color::black) filename<a href="CppOperatorPlusAssign.htm">+=</a>"b";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (piece-&gt;GetColor() <a href="CppOperatorEqual.htm">==</a> Color::white) filename<a href="CppOperatorPlusAssign.htm">+=</a>"w";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Piece its type<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PieceBishop*&gt;(piece.get())) filename<a href="CppOperatorPlusAssign.htm">+=</a>"b";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PieceKing*&nbsp;&nbsp;&gt;(piece.get())) filename<a href="CppOperatorPlusAssign.htm">+=</a>"k";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PieceKnight*&gt;(piece.get())) filename<a href="CppOperatorPlusAssign.htm">+=</a>"n";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PiecePawn*&nbsp;&nbsp;&gt;(piece.get())) filename<a href="CppOperatorPlusAssign.htm">+=</a>"p";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PieceQueen* &gt;(piece.get())) filename<a href="CppOperatorPlusAssign.htm">+=</a>"q";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> PieceRook*&nbsp;&nbsp;&gt;(piece.get())) filename<a href="CppOperatorPlusAssign.htm">+=</a>"r";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The square the piece is standing on<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(piece-&gt;GetSquare()-&gt;GetColor() <a href="CppOperatorNotEqual.htm">!=</a> Color::<a href="CppIndeterminate.htm">indeterminate</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (piece-&gt;GetSquare()-&gt;GetColor() <a href="CppOperatorEqual.htm">==</a> Color::black) filename<a href="CppOperatorPlusAssign.htm">+=</a>"ds";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (piece-&gt;GetSquare()-&gt;GetColor() <a href="CppOperatorEqual.htm">==</a> Color::white) filename<a href="CppOperatorPlusAssign.htm">+=</a>"ls";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The selection color<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(selection_color <a href="CppOperatorNotEqual.htm">!=</a> Color::black);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(selection_color <a href="CppOperatorNotEqual.htm">!=</a> Color::white);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (selection_color <a href="CppOperatorEqual.htm">==</a> Color::<a href="CppIndeterminate.htm">indeterminate</a>) {;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (selection_color <a href="CppOperatorEqual.htm">==</a> Color::red) filename<a href="CppOperatorPlusAssign.htm">+=</a>"r";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (selection_color <a href="CppOperatorEqual.htm">==</a> Color::green) filename<a href="CppOperatorPlusAssign.htm">+=</a>"g";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (selection_color <a href="CppOperatorEqual.htm">==</a> Color::blue) filename<a href="CppOperatorPlusAssign.htm">+=</a>"b";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (big) filename<a href="CppOperatorPlusAssign.htm">+=</a>"_big";<br/>
<br/>
&nbsp;&nbsp;filename<a href="CppOperatorPlusAssign.htm">+=</a>".png";<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!filename.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there is a graphic <b><a href="CppFor.htm">for</a></b> the piece");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename)) { <a href="CppTRACE.htm">TRACE</a>(filename); }<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppChess.htm">Chess</a>::Resources::Find(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Square&gt; square,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppChess.htm">Chess</a>::Color selection_color)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The square<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(square-&gt;GetColor() <a href="CppOperatorNotEqual.htm">!=</a> Color::<a href="CppIndeterminate.htm">indeterminate</a>);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (square-&gt;GetColor() <a href="CppOperatorEqual.htm">==</a> Color::black) filename<a href="CppOperatorPlusAssign.htm">+=</a>"ds";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (square-&gt;GetColor() <a href="CppOperatorEqual.htm">==</a> Color::white) filename<a href="CppOperatorPlusAssign.htm">+=</a>"ls";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The selection color<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(selection_color <a href="CppOperatorNotEqual.htm">!=</a> Color::black);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(selection_color <a href="CppOperatorNotEqual.htm">!=</a> Color::white);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (selection_color <a href="CppOperatorEqual.htm">==</a> Color::<a href="CppIndeterminate.htm">indeterminate</a>) {;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (selection_color <a href="CppOperatorEqual.htm">==</a> Color::red) filename<a href="CppOperatorPlusAssign.htm">+=</a>"r";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (selection_color <a href="CppOperatorEqual.htm">==</a> Color::green) filename<a href="CppOperatorPlusAssign.htm">+=</a>"g";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (selection_color <a href="CppOperatorEqual.htm">==</a> Color::blue) filename<a href="CppOperatorPlusAssign.htm">+=</a>"b";<br/>
<br/>
&nbsp;&nbsp;filename<a href="CppOperatorPlusAssign.htm">+=</a>".png";<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!filename.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume there is a graphic <b><a href="CppFor.htm">for</a></b> the piece");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename)) { <a href="CppTRACE.htm">TRACE</a>(filename); }<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filename;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppChess.htm">Chess</a>::Resources::GetFilenames() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test(); <a href="CppComment.htm">//</a>Cannot <b><a href="CppDo.htm">do</a></b> <b><a href="CppThis.htm">this</a></b>: <a href="CppQt.htm">Qt</a>Resources calls <b><a href="CppThis.htm">this</a></b> <a href="CppMemberFunction.htm">member function</a> to create the resources<br/>
<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; filenames;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>2*6*2*4*2; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename;<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Piece its color<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 0) filename<a href="CppOperatorPlusAssign.htm">+=</a>"b";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 1) filename<a href="CppOperatorPlusAssign.htm">+=</a>"w";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorDivideAssign.htm">/=</a>2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Piece its type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 6 <a href="CppOperatorEqual.htm">==</a> 0) filename<a href="CppOperatorPlusAssign.htm">+=</a>"b";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 6 <a href="CppOperatorEqual.htm">==</a> 1) filename<a href="CppOperatorPlusAssign.htm">+=</a>"k";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 6 <a href="CppOperatorEqual.htm">==</a> 2) filename<a href="CppOperatorPlusAssign.htm">+=</a>"n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 6 <a href="CppOperatorEqual.htm">==</a> 3) filename<a href="CppOperatorPlusAssign.htm">+=</a>"p";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 6 <a href="CppOperatorEqual.htm">==</a> 4) filename<a href="CppOperatorPlusAssign.htm">+=</a>"q";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 6 <a href="CppOperatorEqual.htm">==</a> 5) filename<a href="CppOperatorPlusAssign.htm">+=</a>"r";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorDivideAssign.htm">/=</a>6;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The square the piece is standing on<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 0) filename<a href="CppOperatorPlusAssign.htm">+=</a>"ds";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 1) filename<a href="CppOperatorPlusAssign.htm">+=</a>"ls";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorDivideAssign.htm">/=</a>2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The selection color<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 4 <a href="CppOperatorEqual.htm">==</a> 0) {;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 4 <a href="CppOperatorEqual.htm">==</a> 1) filename<a href="CppOperatorPlusAssign.htm">+=</a>"r";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 4 <a href="CppOperatorEqual.htm">==</a> 2) filename<a href="CppOperatorPlusAssign.htm">+=</a>"g";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 4 <a href="CppOperatorEqual.htm">==</a> 3) filename<a href="CppOperatorPlusAssign.htm">+=</a>"b";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorDivideAssign.htm">/=</a> 4;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bigger or not?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 0) {;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 1) filename<a href="CppOperatorPlusAssign.htm">+=</a>"_big";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename<a href="CppOperatorPlusAssign.htm">+=</a>".png";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filenames.push_back(filename);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>2*4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> filename;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 0) filename<a href="CppOperatorPlusAssign.htm">+=</a>"ds";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 1) filename<a href="CppOperatorPlusAssign.htm">+=</a>"ls";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;j<a href="CppOperatorDivideAssign.htm">/=</a>2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The selection color<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 4 <a href="CppOperatorEqual.htm">==</a> 0) {;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 4 <a href="CppOperatorEqual.htm">==</a> 1) filename<a href="CppOperatorPlusAssign.htm">+=</a>"r";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 4 <a href="CppOperatorEqual.htm">==</a> 2) filename<a href="CppOperatorPlusAssign.htm">+=</a>"g";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorModulus.htm">%</a> 4 <a href="CppOperatorEqual.htm">==</a> 3) filename<a href="CppOperatorPlusAssign.htm">+=</a>"b";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filename<a href="CppOperatorPlusAssign.htm">+=</a>".png";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;filenames.push_back(filename);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;filenames.push_back("<a href="CppQuestion.htm">question</a>_mark.png");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> filenames;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppChess.htm">Chess</a>::Resources::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppChess.htm">Chess</a>::Resources::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-01-25: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-02-07: <a href="CppVersion.htm">version</a> 1.1: added resources <b><a href="CppFor.htm">for</a></b> selection"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
Resources * <a href="CppRibi.htm">ribi</a>::<a href="CppChess.htm">Chess</a>::Resources::Get()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppInstance.htm">m_instance</a> <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppInstance.htm">m_instance</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Resources;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppInstance.htm">m_instance</a>;<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppChess.htm">Chess</a>::Resources::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> t(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[]<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; filenames <a href="CppOperatorAssign.htm">=</a> GetFilenames();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> MXE_SUPPORTS_THREADS<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;t.join();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
