<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::equal_to</title>
  <meta name="description" content="C++ std::equal_to"/>
  <meta name="keywords" content="C++ std::equal_to std equal_to equal to equals"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppEqual_to.htm">std::equal_to</a></h1>
<p>&nbsp;</p>
<p><a href="CppPredicate.htm">Predicate</a> to perform <a href="CppOperatorEqual.htm">operator==</a> on two values.</p>
<p>&nbsp;</p>
<p><a href="CppEqual_to.htm">std::equal_to</a> works better on <a href="CppInt.htm">int</a> than on <a href="CppDouble.htm">double</a>,
because of rounding errors. <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a> can be used for testing two <a href="CppDouble.htm">double</a>
for equality with some tolerance.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>The code below shows how to replace values that are equal to a zero by a one. Note: this is not a preferred version of <a href="CppReplaceZeroByOne.htm">ReplaceZeroByOne</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppReplaceZeroByOne.htm">ReplaceZeroByOne</a>(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppReplace_if.htm">std::replace_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(),0),1);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Another exaple</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a <a href="CppVector.htm">std::vector</a> of 99 zeros and a single 42<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(99,0);<br/>
&nbsp;&nbsp;v.push_back(42);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Shuffle the <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Count the zeros and 42 <b><a href="CppUsing.htm">using</a></b> <a href="CppFind_if.htm">std::find_if</a> and <a href="CppStd.htm">std</a>::bind_2nd<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> (though <b><a href="CppUsing.htm">using</a></b> <a href="CppCount.htm">std::count</a> would be easier)<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCount_if.htm">std::count_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(),0)) <a href="CppOperatorEqual.htm">==</a> 99);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCount_if.htm">std::count_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(),42)) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
