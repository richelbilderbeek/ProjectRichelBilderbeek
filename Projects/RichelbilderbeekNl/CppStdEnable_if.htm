<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::enable_if</title>
  <meta name="description" content="C++ std::enable_if"/>
  <meta name="keywords" content="C++ std::enable_if std enable_if enable if"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStdEnable_if.htm">std::enable_if</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppStdEnable_if.htm">std::enable_if</a> is a <a href="Cpp11.htm">C++11</a>  ...
</p>
<p>&nbsp;</p>
<p>
  <a href="CppStdEnable_if.htm">std::enable_if</a> is a convenient way to leverage 
  <a href="CppSfinae.htm">SFINAE</a> to conditionally remove 
  <a href="CppFunction.htm">functions</a> from 
  <a href="CppOverloadResolution.htm">overload resolution</a> based on 
  <a href="CppTypeTrait.htm">type traits</a> and to provide separate 
  <a href="CppFunction.htm">function</a> overloads and specializations for 
  different <a href="CppTypeTrait.htm">type traits</a>. 
  <a href="CppStdEnable_if.htm">std::enable_if</a> can be used as an 
  additional function argument (not applicable to operator overloads), 
  as a return type (not applicable to constructors and destructors), 
  or as a class template or function template parameter' [2].
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppExample.htm">Examples</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppStdEnable_ifExample1.htm">std::enable_if example 1: basics</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Distinguish among <a href="CppStdEnable_if.htm">std::enable_if</a>, 
    <a href="CppStatic_assert.htm">static_assert</a>, and =delete [1]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="http://en.cppreference.com/w/cpp/types/enable_if">cppreference.com its page about std::enable_if</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppScottMeyers.htm">Scott Meyers</a>. <a href="http://cppandbeyond.com/2012/04/16/session-topic-initial-thoughts-on-effective-c11">C++ And Beyond 2012 session: 'Initial thoughts on Effective C++11'. 2012. 'Distinguish among std::enable_if, static_assert, and =delete'</li>
  <li><!--  2 --><a href="http://en.cppreference.com/w/cpp/types/enable_if">cppreference.com its page about std::enable_if</a>: 'This metafunction is a convenient way to leverage SFINAE to conditionally remove functions from overload resolution based on type traits and to provide separate function overloads and specializations for different type traits. std::enable_if can be used as an additional function argument (not applicable to operator overloads), as a return type (not applicable to constructors and destructors), or as a class template or function template parameter.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
