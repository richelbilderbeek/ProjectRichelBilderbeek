<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Dynamic_cast</title>
  <meta name="description" content="C++ Dynamic_cast"/>
  <meta name="keywords" content="C++ Dynamic_cast code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppDynamic_cast.htm">dynamic_cast</a></h1>
<p>&nbsp;</p>
<p><a href="CppDynamic_cast.htm">dynamic_cast</a></h1> is a <a href="CppKeyword.htm">keyword</a> to <a href="CppCast.htm">cast</a> 
<a href="CppDataType.htm">data types</a> in the same <a href="CppInheritance.htm">inheritance</a> hierarchy, for example
an Animal to a Monkey.</p><p>&nbsp;</p>
<p>&nbsp;</p>
<p>There are two types of <a href="CppDynamic_cast.htm">dynamic_cast</a>:</p>
<ol>
  <li>
    From a <a href="CppDerivedClass.htm">derived class</a> to a <a href="CppBaseClass.htm">base class</a> (for example, from a Monkey to an Animal):
    this is called an <a href="CppUpcast.htm">upcast</a> and will always succeed (as every Monkey is an Animal)
  </li>
  <li>
    From a <a href="CppBaseClass.htm">base class</a> to a <a href="CppDerivedClass.htm">derived class</a> (for example, from an Animal to a Monkey):
    this is called a <a href="CppDowncast.htm">downcast</a> and will not always succeed (as not every Animal is a Monkey). If a 
    <a href="CppDowncast.htm">downcast</a> cannot succeed, <a href="CppDynamic_cast.htm">dynamic_cast</a> <a href="CppReturn.htm">returns</a>
    an empty <a href="CppPointer.htm">pointer</a>
  </li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>It is not possible to use <a href="CppDynamic_cast.htm">dynamic_cast</a> on <a href="CppSmartPointer.htm">smart pointers</a>, use 
<a href="CppDynamic_pointer_cast.htm">boost::dynamic_pointer_cast</a> instead.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppExample.htm">Example</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppDynamic_castExample1.htm">dynamic_cast example 1: basics</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Use <a href="CppDynamic_cast.htm">dynamic_cast</a> where class hierarchy navigation is unavoidable [1]
  </li>
  <li>
    Use <a href="CppDynamic_cast.htm">dynamic_cast</a> for type-safe explicit navigation of a class hierarchy [2]
  </li>
  <li>
    Use <a href="CppDynamic_cast.htm">dynamic_cast</a> to a reference type when failure to find the required class is considered a failure [3]
  </li>
  <li>
    Use <a href="CppDynamic_cast.htm">dynamic_cast</a> to a reference type when failure to find the required class is considered a valid alternative [4]
  </li>
  <li>
    Prefer <a href="CppVirtual.htm">virtual</a> functions to repeated <a href="CppSwitch.htm">switch</a>-statements based on <a href="CppTypeid.htm">typeid</a> or <a href="CppDynamic_cast.htm">dynamic_cast</a> [5]    
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 22.7. Advice. page 663: '[2] Use dynamic_cast where class hierarchy navigation is unavoidable'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 22.7. Advice. page 663: '[3] Use dynamic_cast for type-safe explicit navigation of a class hierarchy'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 22.7. Advice. page 663: '[4] Use dynamic_cast to a reference type when failure to find the required class is considered a failure'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 22.7. Advice. page 663: '[5] Use dynamic_cast to a reference type when failure to find the required class is considered a valid alternative'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 22.7. Advice. page 663: '[10] Prefer virtual functions to repeated switch-statements based on typeid or dynamic_cast'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
