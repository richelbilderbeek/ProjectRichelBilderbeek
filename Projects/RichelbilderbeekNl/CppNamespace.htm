<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>namespace</title>
  <meta name="description" content="C++ namespace"/>
  <meta name="keywords" content="C++ namespace code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppNamespace.htm">namespace</a></h1>
<p>&nbsp;</p>
<p><a href="CppNamespace.htm">namespace</a> is a <a href="CppKeyword.htm">keyword</a> to 
group <a href="CppFunction.htm">functions</a> and <a href="CppClass.htm">classes</a>.</p>
<p>&nbsp;</p>
<p>
  To call something from a certain <a href="CppNamespace.htm">namespace</a>, write
  the <a href="CppNamespace.htm">namespace</a>'s name in front, followed by the <a
  href="CppOperatorScope.htm">scope operator, ::</a>.
</p>
<p>&nbsp;</p>
<p>
  <a href="CppFunction.htm">Functions</a> and <a href="CppClass.htm">classes</a>
  that are not put into a <a href="CppNamespace.htm">namespace</a> reside in the <a
  href="CppGlobal.htm">global</a> <a href="CppNamespace.htm">namespace</a>.
</p>
<p>&nbsp;</p>
<p>
  The default <a href="CppNamespace.htm">namespace</a> used is the <a href="CppGlobal.htm">global</a> <a href="CppNamespace.htm">namespace</a>. 
  You can change this by using the <a href="CppKeyword.htm">keyword</a> <a href="CppUsing.htm">using</a>.
</p>
<p>&nbsp;</p>
<p>
  All <a href="CppStl.htm">STL</a> <a href="CppFunction.htm">functions</a> and 
  <a href="CppClass.htm">classes</a> are in the <a href="CppNamespace.htm">namespace</a>
  <a href="CppStd.htm">std</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppExample.htm">Examples</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppNamespaceExample1.htm">namespace example 1: scope</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Use <a href="CppNamespace.htm">namespaces</a> to express logical structure [1]
  </li>
  <li>
    Use <a href="CppNamespace.htm">namespaces</a> to associate <a href="CppHelperFunction.htm">helper functions</a> with the <a href="CppClass.htm">class</a> they work on [12]
  </li>
  <li>
    Place every nonlocal name, except <a href="CppMain.htm">main</a>, in some <a href="CppNamespace.htm">namespace</a> [2]
  </li>
  <li>
    Design a <a href="CppNamespace.htm">namespace</a> so that you can conveniently us it without accidentally gaining access to unrelated <a href="CppNamespace.htm">namespaces</a> [3]
  </li>
  <li>
    Avoid very short names for <a href="CppNamespace.htm">namespaces</a> [4]
  </li>
  <li>
    If necessary, use <a href="CppNamespace.htm">namespace</a> aliases to abbreviate long <a href="CppNamespace.htm">namespace</a> names [5]
  </li>
  <li>
    Avoid placing heavy notational burdens on users of your <a href="CppNamespace.htm">namespaces</a> [6]
  </li>
  <li>
    Use seperate <a href="CppNamespace.htm">namespaces</a> for <a href="CppInterface.htm">interfaces</a> and <a href="CppImplementation.htm">implementations</a> [7]
  </li>
  <li>
  Use the Namespace::member notation when <a href="CppDefinition.htm">defining</a> <a href="CppNamespace.htm">namespace</a> members [8], as this
    avoids the possibility to accidentally add new members to the namespace
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">Reference</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 14.5. Advice. page 417: '[1] Use namespaces to express logical structure'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 14.5. Advice. page 417: '[2] Place every nonlocal name, except main(), in some namespace'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 14.5. Advice. page 417: '[3] Design a namespace so that you can conveniently us it without accidentally gaining access to unrelated namespaces'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 14.5. Advice. page 417: '[4] Avoid very short names for namespaces'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 14.5. Advice. page 417: '[5] If necessary, use namespace aliases to abbreviate long namespace names'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 14.5. Advice. page 417: '[6] Avoid placing heavy notational burdens on users of your namespaces'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 14.5. Advice. page 417: '[7] Use seperate namespaces for interfaces and implementations'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 14.5. Advice. page 417: '[8] Use the Namespace::member notation when defining namespace members'</li>
  <li><!--  9 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Item 57: 'Keep a type and its nonmember function interface in the same namespace'</li>
  <li><!-- 10 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Item 58: 'Keep types and functions in seperate namespaces unless they're specifically intended to work together'</li>
  <li><!-- 11 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Item 59: 'Don't write namespace usings in a header file or before an #include'</li>
  <li><!-- 12 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 18.5. Advice. page 548: '[7] Use namespaces to associate helper functions with "their" class'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
