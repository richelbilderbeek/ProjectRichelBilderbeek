<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>function</title>
  <meta name="description" content="C++ function"/>
  <meta name="keywords" content="C++ function boost::function code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppFunction.htm">function</a></h1>
<p>&nbsp;</p>
<p>There are multiple classes with the name '<a href="CppFunction.htm">function</a>':</p>
<ol>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoostFunction.htm">Boost.Function</a>: the <a href="CppBoost.htm">Boost</a> <a href="CppLibrary.htm">library</a></li>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoostFunction.htm">boost::function</a>: the function wrapper in the <a href="CppBoostFunction.htm">Boost.Function</a> <a href="CppLibrary.htm">library</a></li>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="CppStdFunction.htm">std::function</a>: the function wrapper in the <a href="Cpp11.htm">C++11</a> <a href="CppStl.htm">STL</a></li>
</ol>
<p>&nbsp;</p>
<p>
  A <a href="CppFunction.htm">function</a> (in general) is a callable piece of code that performs a specific
  general task with as little information as possible (<a href="CppFunctionPurpose.htm">Why would you want this? Go to this page to view
  the purpose of using functions</a>).
</p>
<p>&nbsp;</p>
<p>There are multiple types of functions:</p>
<ul>
  <li>Free functions: synonym for <a href="CppHelperFunction.htm">helper function</a></li>
  <li><a href="CppHelperFunction.htm">Helper functions</a></li>
  <li><a href="CppMemberFunction.htm">Member functions</a></li>
  <li><a href="CppTemplateFunction.htm">Template functions</a></li>
</ul>

<p>&nbsp;</p>
<p>
  A <a href="CppFunctionDeclaration.htm">function declaration</a> states what a 
  <a href="CppFunction.htm">function</a> needs and <a href="CppReturn.htm">returns</a>.
  A <a href="CppFunctionDefinition.htm">function definition</a> states how a 
  <a href="CppFunction.htm">function</a> uses its <a href="CppArgument.htm">arguments</a>
  and calculates what to <a href="CppReturn.htm">return</a>.
</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>SayHello is a <a href="CppFunction.htm">function</a> that takes no arguments and <a href="CppReturn.htm">returns</a> nothing<br/>
<b><a href="CppVoid.htm">void</a></b> SayHello()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Hello world" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppMain.htm">main</a> is a special <a href="CppFunction.htm">function</a>: <b><a href="CppThis.htm">this</a></b> form of <a href="CppMain.htm">main</a> takes no arguments<br/>
<a href="CppComment.htm">//</a>and <a href="CppReturn.htm">returns</a> the program's error code<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;SayHello();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>A <a href="CppFunction.htm">function</a> that accompanies a <a href="CppClass.htm">class</a> (and is 
non-<a href="CppFriend.htm">friend</a>) is called a <a href="CppFreeFunction.htm">free function</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Consider using proper <a href="CppFunctionDesign.htm">function design</a>. Note: many points of <a href="CppAdvice.htm">advice</a>!
  </li>
  <li>
    Assume that every <a href="CppException.htm">exception</a> that can be <a href="CppThrow.htm">thrown</a> by a 
    <a href="CppFunction.htm">function</a> will be <a href="CppThrow.htm">thrown</a> [1]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://en.wikipedia.org/wiki/Function_%28computer_science%29">WikiPedia's page about functions</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">Reference</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[33] Assume that every exception that can be thrown by a function will be thrown'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
