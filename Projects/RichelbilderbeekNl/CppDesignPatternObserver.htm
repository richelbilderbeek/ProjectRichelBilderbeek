<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Design Pattern: Observer</title>
  <meta name="description" content="C++ Observer"/>
  <meta name="keywords" content="C++ Observer design pattern code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppDesignPatternObserver.htm">Observer</a> (<a href="CppDesignPattern.htm">Design Pattern</a>)</h1>
<p>&nbsp;</p>
<p>The <a href="CppDesignPatternObserver.htm">Observer</a> <a href="CppDesignPattern.htm">Design Pattern</a> 
allows to 'define a one-to-many dependency between objects so that when one object changes state, 
all its dependents are notified and updated automatically' [1].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> <a href="CppDesignPatternObserver.htm">Observer</a> example using <a href="CppSignals2.htm">Boost.Signals2</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppDesignPatternObserverBoost.zip">Download the Qt Creator project 'CppDesignPatternObserverBoost' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>Note that this version is shorter than the one below using the hand-crafted slot management.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<b><a href="CppQtSignals.htm">signals</a></b>2.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Subject<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_string <a href="CppOperatorAssign.htm">=</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppSignal.htm">signal</a>_notify(m_string);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppSignals2.htm">boost::signals2</a>::<a href="CppSignal.htm">signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)&gt; m_<a href="CppSignal.htm">signal</a>_notify;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> m_string;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> CoutObserver<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnNotice(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LengthObserver<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnNotice(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Length of s: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;Subject s;<br/>
<br/>
&nbsp;&nbsp;CoutObserver observer1;<br/>
&nbsp;&nbsp;LengthObserver observer2;<br/>
<br/>
&nbsp;&nbsp;s.m_<a href="CppSignal.htm">signal</a>_notify.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;CoutObserver::OnNotice,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;observer1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_1));<br/>
<br/>
&nbsp;&nbsp;s.Set("I will be echoed");<br/>
<br/>
&nbsp;&nbsp;s.m_<a href="CppSignal.htm">signal</a>_notify.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;LengthObserver::OnNotice,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_1));<br/>
<br/>
&nbsp;&nbsp;s.Set("I will be echoed and my length will be shown");<br/>
<br/>
&nbsp;&nbsp;s.m_<a href="CppSignal.htm">signal</a>_notify.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;CoutObserver::OnNotice,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;observer1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_1));<br/>
<br/>
&nbsp;&nbsp;s.Set("Only my length will be shown");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
I will be echoed<br/>
I will be echoed and my length will be shown<br/>
Length of s: 44<br/>
Length of s: 28<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicStl.png" alt="STL"/> <a href="CppDesignPatternObserver.htm">Observer</a> example using the <a href="CppStl.htm">STL</a> only</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppDesignPatternObserverStl.zip">Download the Qt Creator project 'CppDesignPatternObserverStl' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>The name of this example is misleading: this version uses hand-crafted slot management, instead of
using <a href="CppSignals2.htm">Boost.Signals2</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppListH.htm">list</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/checked_delete.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/foreach.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/shared_ptr.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Subject;<br/>
<b><a href="CppStruct.htm">struct</a></b> Couter;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Observer<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> onNotice(<b><a href="CppConst.htm">const</a></b> Subject&amp; ) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>All abstract base <b><a href="CppClass.htm">classes</a></b> must have a <b><a href="CppVirtual.htm">virtual</a></b> <a href="CppDestructor.htm">destructor</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Protected, because only derived <b><a href="CppClass.htm">classes</a></b> may <b><a href="CppDelete.htm">delete</a></b> Observer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>(preventing that Subject can <b><a href="CppDo.htm">do</a></b> so)<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Observer() {}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Subject<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> add(Observer * <b><a href="CppConst.htm">const</a></b> observer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(observer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_observers.push_back(observer);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> remove(Observer * <b><a href="CppConst.htm">const</a></b> observer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(observer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_observers.remove(observer);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; get() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_string;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> set(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_string <a href="CppOperatorAssign.htm">=</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;notify();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> m_string;<br/>
<br/>
&nbsp;&nbsp;<a href="CppList.htm">std::list</a>&lt;Observer*&gt; m_observers;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> notify()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(Observer* <b><a href="CppConst.htm">const</a></b> i,m_observers)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i-&gt;onNotice(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Couter: <b><a href="CppPublic.htm">public</a></b> Observer<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> onNotice(<b><a href="CppConst.htm">const</a></b> Subject&amp; s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.get() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> LengthCouter: <b><a href="CppPublic.htm">public</a></b> Observer<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> onNotice(<b><a href="CppConst.htm">const</a></b> Subject&amp; s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Length of s: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.get().length() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;Subject s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Observer&gt; observer1(<b><a href="CppNew.htm">new</a></b> Couter);<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;Observer&gt; observer2(<b><a href="CppNew.htm">new</a></b> LengthCouter);<br/>
<br/>
&nbsp;&nbsp;s.add( observer1.get() );<br/>
&nbsp;&nbsp;s.set("I will be echoed");<br/>
<br/>
&nbsp;&nbsp;s.add( observer2.get() );<br/>
&nbsp;&nbsp;s.set("I will be echoed and my length will be shown");<br/>
<br/>
&nbsp;&nbsp;s.remove( observer1.get() );<br/>
&nbsp;&nbsp;s.set("Only my length will be shown");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
I will be echoed<br/>
I will be echoed and my length will be shown<br/>
Length of s: 44<br/>
Length of s: 28<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppErichGamma.htm">Erich Gamma</a>, <a href="CppRichardHelm.htm">Richard Helm</a>, <a href="CppRalphJohnson.htm">Ralph Johnson</a>, <a href="CppJohnVlissides.htm">John Vlissides</a>. Design Patterns. 1995. ISBN: 0201633612.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
