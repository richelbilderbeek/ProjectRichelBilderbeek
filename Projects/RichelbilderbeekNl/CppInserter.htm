<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Inserter</title>
  <meta name="description" content="C++ Inserter"/>
  <meta name="keywords" content="C++ C++11 C++0x Inserter Inserters std::inserter code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppInserter.htm">Inserter</a></h1>
<p>&nbsp;</p>
<p>This page is about two different <a href="CppInserter.htm">inserters</a>:</p>
<ol>
  <li>
    <a href="CppInserter.htm">Inserters</a> (general): an output <a href="CppIterator.htm">iterator</a> 
    that inserts elements in a <a href="CppContainer.htm">container</a>
  </li>
  <li>
    <a href="CppStdInserter.htm">std::inserter</a>: a type of <a href="CppInserter.htm">inserter</a> that inserts 
    at a certain <a href="CppIterator.htm">iterator</a>
  </li>
</ol>
<p>&nbsp;</p>
<p>There are three types of <a href="CppInserter.htm">inserters</a>:</p>
<ol>
  <li><a href="CppStdBack_inserter.htm">std::back_inserter</a></li>
  <li><a href="CppStdFront_inserter.htm">std::front_inserter</a></li>
  <li><a href="CppStdInserter.htm">std::inserter</a></li>
</ol>
<p>&nbsp;</p>
<p><a href="CppInserter.htm">Inserters</a> can be found in the <a href="CppHeaderFile.htm">header file</a> <a href="CppIteratorH.htm">iterator.h</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppInserters.zip">Download the Qt Creator project 'CppInserters' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppInserters.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppInserters.pro" border = "1"><tr><td><code>
TEMPLATE = app<br/>
CONFIG += console<br/>
CONFIG -= qt<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp11.htm">c++11</a><br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppListH.htm">list</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppBack_inserter.htm">std::back_inserter</a>: applies push_back<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w { 0,1,2 };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; to_append { 3,4,5 };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(to_append.begin(),to_append.end(),<a href="CppBack_inserter.htm">std::back_inserter</a>(w));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected { 0,1,2,3,4,5 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> expected);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStd.htm">std</a>::front_inserter: applies push_front<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppList.htm">std::list</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w { 3,4,5 };<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppList.htm">std::list</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; to_prepend { 2,1,0 }; <a href="CppComment.htm">//</a>Must be reversed<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(to_prepend.begin(),to_prepend.end(),<a href="CppStd.htm">std</a>::front_inserter(w));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppList.htm">std::list</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected { 0,1,2,3,4,5 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> expected);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStd.htm">std</a>::inserter: applies insert<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSet.htm">std::set</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w { 1,3,5 }; <a href="CppComment.htm">//</a>Don't care <a href="CppAbout.htm">about</a> the order<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSet.htm">std::set</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; to_insert { 4,0,2 }; <a href="CppComment.htm">//</a>Don't care <a href="CppAbout.htm">about</a> the order<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(to_insert.begin(),to_insert.end(),<a href="CppStd.htm">std</a>::inserter(w,w.begin()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSet.htm">std::set</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; expected { 0,1,2,3,4,5 };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> expected);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

