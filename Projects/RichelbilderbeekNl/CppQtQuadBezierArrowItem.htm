<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtQuadBezierArrowItem</title>
  <meta name="description" content="C++ QtQuadBezierArrowItem"/>
  <meta name="keywords" content="C++ QtQuadBezierArrowItem "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug 12 15:38:13 2014
 -->
<p><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a> is a <a href="CppQGraphicsItem.htm">QGraphicsItem</a> for displaying a arrow that has a quadratic Bezier curve as its body.</p>
<p>&nbsp;</p>
<p>For the math, see <a href="CppQGraphicsPathItemExample5.htm">QGraphicsPathItem example 5: Bezier quadratic lines with arrow heads</a>.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtQuadBezierArrowItem/CppQtQuadBezierArrowItem.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtQuadBezierArrowItem/CppQtQuadBezierArrowItem.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/qtquadbezierarrowdialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/qtquadbezierarrowdialog.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/Licence.txt<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>/qtquadbezierarrowdialog.ui<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtQuadBezierArrowItem/qtquadbezierarrowdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtQuadBezierArrowItem/qtquadbezierarrowdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTQUADBEZIERARROWDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTQUADBEZIERARROWDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>QuadBezierArrowDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>;<br/>
<br/>
<a href="CppComment.htm">///</a>Dialog to display the members of a <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a><br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>QuadBezierArrowDialog <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&gt; Arrow;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>QuadBezierArrowDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>QuadBezierArrowDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>QuadBezierArrowDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;Arrow GetArrow() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_arrow; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetUiMidX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetUiMidY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the arrow to work on<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetArrow(<b><a href="CppConst.htm">const</a></b> Arrow&amp; arrow) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetUiMidX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetUiMidY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_focus_pen_width_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_from_x_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_from_y_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_has_head_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_has_tail_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_mid_x_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_mid_y_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_normal_pen_width_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_to_x_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_to_y_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The arrow to work on<br/>
&nbsp;&nbsp;Arrow m_arrow;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnItemUpdated(<b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a> * <b><a href="CppConst.htm">const</a></b> item) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTQUADBEZIERARROWDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtQuadBezierArrowItem/qtquadbezierarrowdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtQuadBezierArrowItem/qtquadbezierarrowdialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "qtquadbezierarrowdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtquadbezierarrowdialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::~<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::GetUiMidX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_mid_x-&gt;value();<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::GetUiMidY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_mid_y-&gt;value();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-07-29: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_from_x_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;SetFromX(arg1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_from_y_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;SetFromY(arg1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_has_head_clicked()<br/>
{<br/>
&nbsp;&nbsp;m_arrow-&gt;SetHasHead(ui-&gt;box_has_head-&gt;isChecked());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_has_tail_clicked()<br/>
{<br/>
&nbsp;&nbsp;m_arrow-&gt;SetHasTail(ui-&gt;box_has_tail-&gt;isChecked());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_mid_x_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;SetMidX(arg1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_mid_y_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;SetMidY(arg1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_normal_pen_width_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> new_pen <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;GetPen();<br/>
&nbsp;&nbsp;new_pen.setWidthF(arg1);<br/>
&nbsp;&nbsp;m_arrow-&gt;SetPen(new_pen);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_focus_pen_width_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> new_pen <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;GetFocusPen();<br/>
&nbsp;&nbsp;new_pen.setWidthF(arg1);<br/>
&nbsp;&nbsp;m_arrow-&gt;SetFocusPen(new_pen);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_to_x_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;SetToX(arg1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::on_box_to_y_valueChanged(<b><a href="CppDouble.htm">double</a></b> arg1)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_arrow-&gt;SetToY(arg1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnItemUpdated(<b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a> * <b><a href="CppConst.htm">const</a></b> item) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_focus_pen_width-&gt;setValue(item-&gt;GetFocusPen().widthF());<br/>
&nbsp;&nbsp;ui-&gt;box_from_x-&gt;setValue(item-&gt;GetFromItem()-&gt;x());<br/>
&nbsp;&nbsp;ui-&gt;box_from_y-&gt;setValue(item-&gt;GetFromItem()-&gt;y());<br/>
&nbsp;&nbsp;ui-&gt;box_has_head-&gt;setChecked(item-&gt;HasHead());<br/>
&nbsp;&nbsp;ui-&gt;box_has_tail-&gt;setChecked(item-&gt;HasTail());<br/>
&nbsp;&nbsp;ui-&gt;box_mid_x-&gt;setValue(item-&gt;GetMidItem()-&gt;x());<br/>
&nbsp;&nbsp;ui-&gt;box_mid_y-&gt;setValue(item-&gt;GetMidItem()-&gt;y());<br/>
&nbsp;&nbsp;ui-&gt;box_normal_pen_width-&gt;setValue(item-&gt;GetPen().widthF());<br/>
&nbsp;&nbsp;ui-&gt;box_to_x-&gt;setValue(item-&gt;GetToItem()-&gt;x());<br/>
&nbsp;&nbsp;ui-&gt;box_to_y-&gt;setValue(item-&gt;GetToItem()-&gt;y());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) { close(); <b><a href="CppReturn.htm">return</a></b>; }<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::SetArrow(<b><a href="CppConst.htm">const</a></b> Arrow&amp; arrow) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(arrow);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_arrow <a href="CppOperatorEqual.htm">==</a> arrow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Setting arrow '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*arrow) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'\n";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> focus_pen_after <a href="CppOperatorAssign.htm">=</a> arrow-&gt;GetFocusPen();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> from_item_after <a href="CppOperatorAssign.htm">=</a> arrow-&gt;GetFromItem();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> has_head_after <a href="CppOperatorAssign.htm">=</a> arrow-&gt;HasHead();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> mid_item_after <a href="CppOperatorAssign.htm">=</a> arrow-&gt;GetMidItem();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pen_after <a href="CppOperatorAssign.htm">=</a> arrow-&gt;GetPen();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> has_tail_after <a href="CppOperatorAssign.htm">=</a> arrow-&gt;HasTail();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> to_item_after <a href="CppOperatorAssign.htm">=</a> arrow-&gt;GetToItem();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> focus_pen_changed{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> from_item_changed{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> has_head_changed{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mid_item_changed{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> pen_changed{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> has_tail_changed{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> to_item_changed{<b><a href="CppTrue.htm">true</a></b>};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_arrow)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> focus_pen_before <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;GetFocusPen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> from_item_before <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;GetFromItem();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> has_head_before <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;HasHead();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> mid_item_before <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;GetMidItem();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pen_before <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;GetPen();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> has_tail_before <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;HasTail();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> to_item_before <a href="CppOperatorAssign.htm">=</a> m_arrow-&gt;GetToItem();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;focus_pen_changed <a href="CppOperatorAssign.htm">=</a> focus_pen_before <a href="CppOperatorNotEqual.htm">!=</a> focus_pen_after;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;from_item_changed <a href="CppOperatorAssign.htm">=</a> from_item_before <a href="CppOperatorNotEqual.htm">!=</a> from_item_after;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;has_head_changed <a href="CppOperatorAssign.htm">=</a> has_head_before <a href="CppOperatorNotEqual.htm">!=</a> has_head_after;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mid_item_changed <a href="CppOperatorAssign.htm">=</a> mid_item_before <a href="CppOperatorNotEqual.htm">!=</a> mid_item_after;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pen_changed <a href="CppOperatorAssign.htm">=</a> pen_before <a href="CppOperatorNotEqual.htm">!=</a> pen_after;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;has_tail_changed <a href="CppOperatorAssign.htm">=</a> has_tail_before <a href="CppOperatorNotEqual.htm">!=</a> has_tail_after;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;to_item_changed <a href="CppOperatorAssign.htm">=</a> to_item_before <a href="CppOperatorNotEqual.htm">!=</a> to_item_after;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (focus_pen_changed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Focus pen will change from width "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> focus_pen_before.widthF()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> focus_pen_after.widthF()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (from_item_changed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "From item will change from " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> from_item_before<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> from_item_after <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (has_head_changed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Has head will change from '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> has_head_before<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' to '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> has_head_after <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mid_item_changed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Mid item will change from " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mid_item_before<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mid_item_after <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pen_changed)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Normal pen will change from " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pen_before.widthF()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pen_after.widthF() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Disconnect m_arrow<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_item_updated.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnItemUpdated,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Not sure <b><a href="CppIf.htm">if</a></b> I need <b><a href="CppThis.htm">this</a></b> high detailed granulity<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_base_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnBaseChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_font_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnFontChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_padding_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnPaddingChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_text_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnTextChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_text_pen_changed.disconnect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnTextPenChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace m_arrow by the <b><a href="CppNew.htm">new</a></b> one<br/>
&nbsp;&nbsp;m_arrow <a href="CppOperatorAssign.htm">=</a> arrow;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_arrow-&gt;GetFocusPen() <a href="CppOperatorEqual.htm">==</a> focus_pen_after);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_arrow-&gt;GetFromItem() <a href="CppOperatorEqual.htm">==</a> from_item_after);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_arrow-&gt;GetMidItem() <a href="CppOperatorEqual.htm">==</a> mid_item_after);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_arrow-&gt;GetPen() <a href="CppOperatorEqual.htm">==</a> pen_after);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_arrow-&gt;GetToItem() <a href="CppOperatorEqual.htm">==</a> to_item_after);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_arrow-&gt;HasHead() <a href="CppOperatorEqual.htm">==</a> has_head_after);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_arrow-&gt;HasTail() <a href="CppOperatorEqual.htm">==</a> has_tail_after);<br/>
<br/>
&nbsp;&nbsp;m_arrow-&gt;m_signal_item_updated.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnItemUpdated,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not sure <b><a href="CppIf.htm">if</a></b> I need <b><a href="CppThis.htm">this</a></b> high detailed granulity<br/>
<br/>
&nbsp;&nbsp;m_arrow-&gt;m_signal_base_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnBaseChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_arrow-&gt;m_signal_font_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnFontChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_arrow-&gt;m_signal_padding_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnPaddingChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_arrow-&gt;m_signal_text_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnTextChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_arrow-&gt;m_signal_text_pen_changed.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostBind.htm">boost::bind</a>(&amp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::OnTextPenChanged,<b><a href="CppThis.htm">this</a></b>,<a href="CppBoostLambda.htm">boost::lambda</a>::_1)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppEmit.htm">Emit</a> everything that has changed<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp; focus_pen_changed<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> from_item_changed<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> has_head_changed<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> mid_item_changed<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> pen_changed<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> has_tail_changed<br/>
&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> to_item_changed<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; m_arrow-&gt;m_signal_item_updated(m_arrow.get());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a> Not sure <b><a href="CppIf.htm">if</a></b> I need <b><a href="CppThis.htm">this</a></b> high detailed granulity<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (focus_pen_changed)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_base_changed(m_arrow.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (from_item_changed)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_font_changed(m_arrow.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (has_head_changed)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_padding_changed(m_arrow.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mid_item_changed)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_text_changed(m_arrow.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pen_changed)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow-&gt;m_signal_text_pen_changed(m_arrow.get());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( arrow <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;m_arrow);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*arrow <a href="CppOperatorEqual.htm">==</a> *m_arrow);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::SetUiMidX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_mid_x-&gt;setValue(x);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::SetUiMidY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_mid_y-&gt;setValue(y);<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt; from{<b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsSimpleTextItem.htm">QGraphicsSimpleTextItem</a>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt; mid{<b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsSimpleTextItem.htm">QGraphicsSimpleTextItem</a>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt; to{<b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsSimpleTextItem.htm">QGraphicsSimpleTextItem</a>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&gt; arrow{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>(from.get(),tail,mid.get(),head,to.get())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(arrow);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt; from{<b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsSimpleTextItem.htm">QGraphicsSimpleTextItem</a>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt; mid{<b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsSimpleTextItem.htm">QGraphicsSimpleTextItem</a>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt; to{<b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsSimpleTextItem.htm">QGraphicsSimpleTextItem</a>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&gt; arrow{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>(from.get(),tail,mid.get(),head,to.get())<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>QuadBezierArrowDialog d;<br/>
&nbsp;&nbsp;d.SetArrow(arrow);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("Get/SetUiMidX must be symmetric"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> old_x{d.GetUiMidX()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_x{old_x <a href="CppOperatorPlus.htm">+</a> 10.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.SetUiMidX(new_x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d.GetUiMidX() <a href="CppOperatorMinus.htm">-</a> new_x) &lt; 2.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("Get/SetUiMidY must be symmetric"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> old_y{d.GetUiMidY()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_y{old_y <a href="CppOperatorPlus.htm">+</a> 10.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.SetUiMidY(new_y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(d.GetUiMidY() <a href="CppOperatorMinus.htm">-</a> new_y) &lt; 2.0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(ui-&gt;box_focus_pen_width-&gt;value() <a href="CppOperatorMinus.htm">-</a> m_arrow-&gt;GetFocusPen().widthF()) &lt; 2.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(ui-&gt;box_from_x-&gt;value() <a href="CppOperatorMinus.htm">-</a> m_arrow-&gt;GetFromItem()-&gt;x()) &lt; 2.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(ui-&gt;box_from_y-&gt;value() <a href="CppOperatorMinus.htm">-</a> m_arrow-&gt;GetFromItem()-&gt;y()) &lt; 2.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_has_head-&gt;isChecked() <a href="CppOperatorEqual.htm">==</a> m_arrow-&gt;HasHead());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;box_has_tail-&gt;isChecked() <a href="CppOperatorEqual.htm">==</a> m_arrow-&gt;HasTail());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(ui-&gt;box_mid_x-&gt;value() <a href="CppOperatorMinus.htm">-</a> m_arrow-&gt;GetMidItem()-&gt;x()) &lt; 2.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(ui-&gt;box_mid_y-&gt;value() <a href="CppOperatorMinus.htm">-</a> m_arrow-&gt;GetMidItem()-&gt;y()) &lt; 2.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(ui-&gt;box_normal_pen_width-&gt;value() <a href="CppOperatorMinus.htm">-</a> m_arrow-&gt;GetPen().widthF()) &lt; 2.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(ui-&gt;box_to_x-&gt;value() <a href="CppOperatorMinus.htm">-</a> m_arrow-&gt;GetToItem()-&gt;x()) &lt; 2.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(ui-&gt;box_to_y-&gt;value() <a href="CppOperatorMinus.htm">-</a> m_arrow-&gt;GetToItem()-&gt;y()) &lt; 2.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtQuadBezierArrowItem/qtquadbezierarrowitem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtQuadBezierArrowItem/qtquadbezierarrowitem.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>, an quadratic Bezier arrow <a href="CppQGraphicsItem.htm">QGraphicsItem</a><br/>
Copyright (C) 2012-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTQUADBEZIERARROWITEM_H<br/>
<a href="CppDefine.htm">#define</a> QTQUADBEZIERARROWITEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsPathItem.htm">QGraphicsPathItem</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPen.htm">QPen</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a> is a <a href="CppQGraphicsItem.htm">QGraphicsItem</a> that<br/>
<a href="CppComment.htm">///</a>follows the three <a href="CppQGraphicsItem.htm">QGraphicsItem</a> positions<br/>
<a href="CppComment.htm">///</a>If mid is <b><a href="CppNullptr.htm">nullptr</a></b>, the line will be straight<br/>
<a href="CppComment.htm">///</a>The <a href="CppQGraphicsItem.htm">QGraphicsItem</a>s supplied will not be deleted by <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> from,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> mid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> to,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* parent <a href="CppOperatorAssign.htm">=</a> 0<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppQPen.htm">QPen</a> used to indicate that the arrow has focus<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; GetFocusPen() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_focus_pen; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the item where the arrow originates from<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(would the arrow and tail heads not be <a href="GameReversi.htm">reversi</a>ble)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use the specific GetFrom* <a href="CppMemberFunction.htm">member functions</a> to modify <b><a href="CppThis.htm">this</a></b> item<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* GetFromItem() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_from; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetFromX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_from-&gt;x(); }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetFromY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_from-&gt;y(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the head <a href="CppPointer.htm">point</a> of the arrow, on the edge of the <a href="CppRectangle.htm">rectangle</a> m_from<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> GetHead() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the item where the arrow pass through in the middle<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use the specific GetMid* <a href="CppMemberFunction.htm">member functions</a> to modify <b><a href="CppThis.htm">this</a></b> item<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* GetMidItem() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_mid; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetMidX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_mid-&gt;x(); }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetMidY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_mid-&gt;y(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the <a href="CppQPen.htm">QPen</a> used to draw a regular, non-focused, arrow<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; GetPen() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_pen; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the tail <a href="CppPointer.htm">point</a> of the arrow, on the edge of the <a href="CppRectangle.htm">rectangle</a> m_from<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> GetTail() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the item where the arrow <a href="CppPointer.htm">point</a>s to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(would the arrow and tail heads not be <a href="GameReversi.htm">reversi</a>ble)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use the specific GetTo* <a href="CppMemberFunction.htm">member functions</a> to modify <b><a href="CppThis.htm">this</a></b> item<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>* GetToItem() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_to; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetToX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_to-&gt;x(); }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetToY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_to-&gt;y(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is there an arrow at the 'to' <a href="CppPointer.htm">point</a> (x2,y2)?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasHead() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_head; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Is there an arrow at the 'from' <a href="CppPointer.htm">point</a> (x1,y1)?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> HasTail() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_tail; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to key press<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Respond to mouse press<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppRectangle.htm">rectangle</a> that containg the item, used <b><a href="CppFor.htm">for</a></b> rough calculations like<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/collision detection<br/>
&nbsp;&nbsp;<a href="CppQRect.htm">QRect</a>F boundingRect() <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppPaint.htm">Paint</a> a <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *, <a href="CppQWidget.htm">QWidget</a> *) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> the arrow has a <a href="CppPointer.htm">point</a> at the head<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHasHead(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_head) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set <b><a href="CppIf.htm">if</a></b> the arrow has a <a href="CppPointer.htm">point</a> at the tail<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHasTail(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_tail) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the pen used to show focus<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFocusPen(<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; pen) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the position of the from item<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFromPos(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; pos) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFromPos(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetFromPos(<a href="CppQPointF.htm">QPointF</a>(x,y)); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFromX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetFromPos(x,GetFromY()); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetFromY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; y) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetFromPos(GetFromX(),y); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the position of the middle item<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMidPos(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; pos) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMidPos(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetMidPos(<a href="CppQPointF.htm">QPointF</a>(x,y)); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMidX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetMidPos(x,GetMidY()); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMidY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; y) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetMidPos(GetMidX(),y); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the regular pen used to draw the arrow<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPen(<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; pen) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the position of the from item<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetToPos(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; pos) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetToPos(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetToPos(<a href="CppQPointF.htm">QPointF</a>(x,y)); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetToX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetToPos(x,GetToY()); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetToY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; y) <b><a href="CppNoexcept.htm">noexcept</a></b> { SetToPos(GetToX(),y); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/More precise <a href="CppShape.htm">shape</a> compared to boundingRect<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/In <b><a href="CppThis.htm">this</a></b> example, it is redefined to ease selecting those thin lines<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a> <a href="CppShape.htm">shape</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppEmit.htm">Emitted</a> when the item has called<br/>
&nbsp;&nbsp;<a href="CppBoostSignal.htm">boost::signals2::signal</a>&lt;<b><a href="CppVoid.htm">void</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>*)&gt; m_signal_item_updated;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Change the cursor when the user moves the mouse cursor in the bounding <a href="CppRectangle.htm">rectangle</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> hoverEnterEvent(<a href="CppQGraphicsSceneHoverEvent.htm">QGraphicsSceneHoverEvent</a> *event) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b> <b><a href="CppFinal.htm">final</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The extra width given to the line <b><a href="CppFor.htm">for</a></b> easier clicking<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_click_easy_width;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The arrow used <b><a href="CppFor.htm">for</a></b> indicating focus<br/>
&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> m_focus_pen;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item where the arrow originates from<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> m_from;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show arrow at head<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_head;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item where the arrow pass through in the middle<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> m_mid;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The regular pen<br/>
&nbsp;&nbsp;<a href="CppQPen.htm">QPen</a> m_pen;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Show arrow at tail<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_tail;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The item where the arrow <a href="CppPointer.htm">point</a>s to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(would the arrow and tail heads not be <a href="GameReversi.htm">reversi</a>ble)<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> m_to;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <a href="CppPointer.htm">point</a> 'beyond'<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> GetBeyond() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain <a href="CppPointer.htm">point</a> 'center'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;F<br/>
&nbsp;&nbsp; \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;C&nbsp;&nbsp;M&nbsp;&nbsp;B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp; <a href="CppOperatorDivide.htm">/</a><br/>
&nbsp;&nbsp;T<br/>
<br/>
&nbsp;&nbsp;F <a href="CppOperatorAssign.htm">=</a> From<br/>
&nbsp;&nbsp;T <a href="CppOperatorAssign.htm">=</a> To<br/>
&nbsp;&nbsp;M <a href="CppOperatorAssign.htm">=</a> Mid<br/>
&nbsp;&nbsp;C <a href="CppOperatorAssign.htm">=</a> Center<br/>
&nbsp;&nbsp;B <a href="CppOperatorAssign.htm">=</a> Beyond<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> GetCenter() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> pos() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setPos(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setX(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> setY(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&amp; arrow) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&amp; arrow) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTQUADBEZIERARROWITEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtQuadBezierArrowItem/qtquadbezierarrowitem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtQuadBezierArrowItem/qtquadbezierarrowitem.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>, an quadratic Bezier arrow <a href="CppQGraphicsItem.htm">QGraphicsItem</a><br/>
Copyright (C) 2012-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppQtQuadBezierArrowItem.htm">CppQtQuadBezierArrowItem</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtQuadBezierArrowItem.htm">qtquadbezierarrowitem</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/linestring.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQCursor.htm">QCursor</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsScene.htm">QGraphicsScene</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::equals(a,b);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> a.x() <a href="CppOperatorEqual.htm">==</a> b.x() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a.y() <a href="CppOperatorEqual.htm">==</a> b.y();<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;&amp; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::equals(a,b);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> (a[0] <a href="CppOperatorEqual.htm">==</a> b[0] <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a[1] <a href="CppOperatorEqual.htm">==</a> b[1])<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a>&nbsp;&nbsp; (a[0] <a href="CppOperatorEqual.htm">==</a> b[1] <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a[1] <a href="CppOperatorEqual.htm">==</a> b[0]);<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt; a,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(a<a href="CppOperatorEqual.htm">==</a>b);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the zero or one intersections between two finite lines<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetLineLineIntersections.htm">GetLineLineIntersections</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&gt;<br/>
<a href="CppGetLineLineIntersections.htm">GetLineLineIntersections</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt; line1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt; line2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; <a href="CppPoint.htm">Point</a>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::intersection(line1,line2,<a href="CppPointer.htm">point</a>s);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.empty() <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPointer.htm">point</a>s;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Helper <a href="CppFunction.htm">function</a> to create a <b><a href="CppConst.htm">const</a></b> line without a temporary <a href="CppStdVector.htm">std::vector</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&gt;<br/>
CreateLine(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt;(v.begin(),v.end());<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Obtain the zero, one or two intersections between a line and a rectanle<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetLineRectIntersections.htm">GetLineRectIntersections</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&gt;<br/>
<a href="CppGetLineRectIntersections.htm">GetLineRectIntersections</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt; line,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::box&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt;<br/>
&nbsp;&nbsp;&gt; rect)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; <a href="CppPoint.htm">Point</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppPoint.htm">Point</a>&gt; Line;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::box&lt;<a href="CppPoint.htm">Point</a>&gt; Rect;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a> p0 <a href="CppOperatorAssign.htm">=</a> <a href="CppPoint.htm">Point</a>(rect.min_corner().x(), rect.min_corner().y());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a> p1 <a href="CppOperatorAssign.htm">=</a> <a href="CppPoint.htm">Point</a>(rect.max_corner().x(), rect.min_corner().y());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a> p2 <a href="CppOperatorAssign.htm">=</a> <a href="CppPoint.htm">Point</a>(rect.min_corner().x(), rect.max_corner().y());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a> p3 <a href="CppOperatorAssign.htm">=</a> <a href="CppPoint.htm">Point</a>(rect.max_corner().x(), rect.max_corner().y());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p0 <a href="CppOperatorNotEqual.htm">!=</a> p1); <a href="CppAssert.htm">assert</a>(p0 <a href="CppOperatorNotEqual.htm">!=</a> p2); <a href="CppAssert.htm">assert</a>(p0 <a href="CppOperatorNotEqual.htm">!=</a> p3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1 <a href="CppOperatorNotEqual.htm">!=</a> p0); <a href="CppAssert.htm">assert</a>(p1 <a href="CppOperatorNotEqual.htm">!=</a> p2); <a href="CppAssert.htm">assert</a>(p1 <a href="CppOperatorNotEqual.htm">!=</a> p3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2 <a href="CppOperatorNotEqual.htm">!=</a> p0); <a href="CppAssert.htm">assert</a>(p2 <a href="CppOperatorNotEqual.htm">!=</a> p1); <a href="CppAssert.htm">assert</a>(p2 <a href="CppOperatorNotEqual.htm">!=</a> p3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p3 <a href="CppOperatorNotEqual.htm">!=</a> p0); <a href="CppAssert.htm">assert</a>(p3 <a href="CppOperatorNotEqual.htm">!=</a> p1); <a href="CppAssert.htm">assert</a>(p3 <a href="CppOperatorNotEqual.htm">!=</a> p2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Line&gt; rect_sides<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateLine(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;( {p0,p1} )),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateLine(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;( {p0,p2} )),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateLine(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;( {p1,p3} )),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateLine(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;( {p2,p3} ))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; <a href="CppPointer.htm">point</a>s;<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(rect_sides.begin(),rect_sides.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;<a href="CppPointer.htm">point</a>s,line](<b><a href="CppConst.htm">const</a></b> Line&amp; side)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppGetLineLineIntersections.htm">GetLineLineIntersections</a>(line,side);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(<a href="CppPointer.htm">point</a>s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove doublures<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put '<b><a href="CppTypename.htm">typename</a></b>' before '<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;::<a href="CppIterator.htm">iterator</a>type' to prevent getting the error below:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>error: need '<b><a href="CppTypename.htm">typename</a></b>' before '<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt;::<a href="CppIterator.htm">iterator</a>'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;because '<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;T&gt; &gt;' is a dependent <a href="CppScope.htm">scope</a><br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;::<a href="CppIterator.htm">iterator</a> new_end <a href="CppOperatorAssign.htm">=</a> <a href="CppStdUnique.htm">std::unique</a>( <a href="CppPointer.htm">point</a>s.begin(),<a href="CppPointer.htm">point</a>s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppPoint.htm">Point</a>&amp; rhs)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.x() <a href="CppOperatorEqual.htm">==</a> rhs.x() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.y() <a href="CppOperatorEqual.htm">==</a> rhs.y();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppPointer.htm">point</a>s.erase(new_end,<a href="CppPointer.htm">point</a>s.end());<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPointer.htm">point</a>s.size() <a href="CppOperatorLessEqual.htm">&lt;=</a> 2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppPointer.htm">point</a>s;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::m_click_easy_width <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>(<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> tail,<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> mid,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> head,<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* <b><a href="CppConst.htm">const</a></b> to,<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>* parent<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: <a href="CppQGraphicsItem.htm">QGraphicsItem</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_updated{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_focus_pen{<a href="CppQPen.htm">QPen</a>(<a href="CppQt.htm">Qt</a>::DashLine)},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from{from},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_head{head},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mid{mid},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pen{<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0))},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tail{tail},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to{to}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((mid <a href="CppOperatorLogicalOr.htm">||</a> !mid) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "No mid results in a straight arrow");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorNotEqual.htm">!=</a> to);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(from <a href="CppOperatorNotEqual.htm">!=</a> mid);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mid <a href="CppOperatorNotEqual.htm">!=</a> to);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setFlags(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsFocusable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;| <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!(flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsMovable) );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (flags() &amp; <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::ItemIsSelectable) );<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setAcceptHoverEvents(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put <b><a href="CppThis.htm">this</a></b> arrow item under the rect<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mid) { setZValue(mid-&gt;zValue() <a href="CppOperatorMinus.htm">-</a> 1.0); }<br/>
}<br/>
<br/>
<a href="CppQRect.htm">QRect</a>F <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::boundingRect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppShape.htm">shape</a>().boundingRect();<br/>
}<br/>
<br/>
<a href="CppQPointF.htm">QPointF</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::GetBeyond() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> center <a href="CppOperatorAssign.htm">=</a> GetCenter();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx_mid_center <a href="CppOperatorAssign.htm">=</a> GetMidItem() ? (GetMidItem()-&gt;pos().x() <a href="CppOperatorMinus.htm">-</a> center.x()) : 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy_mid_center <a href="CppOperatorAssign.htm">=</a> GetMidItem() ? (GetMidItem()-&gt;pos().y() <a href="CppOperatorMinus.htm">-</a> center.y()) : 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> beyond(center.x() <a href="CppOperatorPlus.htm">+</a> dx_mid_center <a href="CppOperatorPlus.htm">+</a> dx_mid_center, center.y() <a href="CppOperatorPlus.htm">+</a> dy_mid_center <a href="CppOperatorPlus.htm">+</a> dy_mid_center);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> beyond;<br/>
}<br/>
<br/>
<a href="CppQPointF.htm">QPointF</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::GetCenter() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> center((m_from-&gt;pos() <a href="CppOperatorPlus.htm">+</a> m_to-&gt;pos()) <a href="CppOperatorDivide.htm">/</a> 2.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> center;<br/>
}<br/>
<br/>
<a href="CppQPointF.htm">QPointF</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::GetHead() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppPoint.htm">Point</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppPoint.htm">Point</a>&gt; Line;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::box&lt;<a href="CppPoint.htm">Point</a>&gt; Rect;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> beyond <a href="CppOperatorAssign.htm">=</a> GetBeyond();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Line line_head <a href="CppOperatorAssign.htm">=</a> CreateLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(beyond.x(),beyond.y()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(m_to-&gt;pos().x(),m_to-&gt;pos().y()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a>F qr_to <a href="CppOperatorAssign.htm">=</a> m_to-&gt;boundingRect().translated(m_to-&gt;pos());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rect r_to(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(qr_to.topLeft().x()&nbsp;&nbsp;&nbsp;&nbsp;,qr_to.topLeft().y()&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(qr_to.bottomRight().x(),qr_to.bottomRight().y())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; p_head_end <a href="CppOperatorAssign.htm">=</a> <a href="CppGetLineRectIntersections.htm">GetLineRectIntersections</a>(line_head,r_to);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p_head_end.size() <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQPointF.htm">QPointF</a>(p_head_end[0].x(),p_head_end[0].y());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p_head_end.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p_head_end.push_back(<a href="CppPoint.htm">Point</a>(m_to-&gt;pos().x(),m_to-&gt;pos().y()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Yes,it happens, when the line does not leave the <a href="CppRectangle.htm">rectangle</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> happens when the two node rectanges overlap<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p_head_end.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p_head_end.size() <a href="CppOperatorEqual.htm">==</a> 1); <a href="CppComment.htm">//</a>/BUG?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQPointF.htm">QPointF</a>(p_head_end[0].x(),p_head_end[0].y());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p_head_end.size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose <a href="CppPointer.htm">point</a> closest to beyond<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d1 <a href="CppOperatorAssign.htm">=</a> Geometry().<a href="CppGetDistance.htm">GetDistance</a>(beyond.x(),beyond.y(),p_head_end[0].x(),p_head_end[0].x());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d2 <a href="CppOperatorAssign.htm">=</a> Geometry().<a href="CppGetDistance.htm">GetDistance</a>(beyond.x(),beyond.y(),p_head_end[1].x(),p_head_end[1].x());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d1 <a href="CppOperatorLessEqual.htm">&lt;=</a> d2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQPointF.htm">QPointF</a>(p_head_end[0].x(),p_head_end[0].y());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQPointF.htm">QPointF</a>(p_head_end[1].x(),p_head_end[1].y());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQPointF.htm">QPointF</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::GetTail() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppPoint.htm">Point</a>;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::linestring&lt;<a href="CppPoint.htm">Point</a>&gt; Line;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::box&lt;<a href="CppPoint.htm">Point</a>&gt; Rect;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> beyond <a href="CppOperatorAssign.htm">=</a> GetBeyond();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Line line_tail <a href="CppOperatorAssign.htm">=</a> CreateLine(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(m_from-&gt;pos().x(),m_from-&gt;pos().y()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(beyond.x(),beyond.y()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a>F qr_from <a href="CppOperatorAssign.htm">=</a> m_from-&gt;boundingRect().translated(m_from-&gt;pos());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rect r_from(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(qr_from.topLeft().x()&nbsp;&nbsp;&nbsp;&nbsp;,qr_from.topLeft().y()&nbsp;&nbsp;&nbsp;&nbsp;),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPoint.htm">Point</a>(qr_from.bottomRight().x(),qr_from.bottomRight().y())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppPoint.htm">Point</a>&gt; p_tail_end <a href="CppOperatorAssign.htm">=</a> <a href="CppGetLineRectIntersections.htm">GetLineRectIntersections</a>(line_tail,r_from);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p_tail_end.size() <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQPointF.htm">QPointF</a>(p_tail_end[0].x(),p_tail_end[0].y());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p_tail_end.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Yes,it happens, when the line does not leave the <a href="CppRectangle.htm">rectangle</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> happens when the two node rectanges overlap<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p_tail_end.push_back(<a href="CppPoint.htm">Point</a>(m_from-&gt;pos().x(),m_from-&gt;pos().y()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!p_tail_end.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p_tail_end.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQPointF.htm">QPointF</a>(p_tail_end[0].x(),p_tail_end[0].y());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p_tail_end.size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Choose <a href="CppPointer.htm">point</a> closest to beyond<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d1 <a href="CppOperatorAssign.htm">=</a> Geometry().<a href="CppGetDistance.htm">GetDistance</a>(beyond.x(),beyond.y(),p_tail_end[0].x(),p_tail_end[0].x());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d2 <a href="CppOperatorAssign.htm">=</a> Geometry().<a href="CppGetDistance.htm">GetDistance</a>(beyond.x(),beyond.y(),p_tail_end[1].x(),p_tail_end[1].x());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d1 <a href="CppOperatorLessEqual.htm">&lt;=</a> d2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQPointF.htm">QPointF</a>(p_tail_end[0].x(),p_tail_end[0].y());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQPointF.htm">QPointF</a>(p_tail_end[1].x(),p_tail_end[1].y());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.5";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-12-07: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-12-13: <a href="CppVersion.htm">version</a> 1.1: respond to focus",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-12-29: <a href="CppVersion.htm">version</a> 1.2: fixed <a href="CppBug.htm">bug</a> in GetHead and GetTail that occurs when <a href="CppGetLineRectIntersections.htm">GetLineRectIntersections</a> <a href="CppReturn.htm">returns</a> two <a href="CppPointer.htm">point</a>s",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-01-01: <a href="CppVersion.htm">version</a> 1.3: added <a href="CppQGraphicsItem.htm">QGraphicsItem</a> getters",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-07-10: <a href="CppVersion.htm">version</a> 1.4: setting arrow heads emits a notification <a href="CppSignal.htm">signal</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-03-18: <a href="CppVersion.htm">version</a> 1.5: allow arrow to be straight"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::hoverEnterEvent(<a href="CppQGraphicsSceneHoverEvent.htm">QGraphicsSceneHoverEvent</a> *) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setCursor(<a href="CppQCursor.htm">QCursor</a>(<a href="CppQt.htm">Qt</a>::<a href="CppPoint.htm">Point</a>ingHandCursor));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_T:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Minus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetHasTail(!HasTail());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_F2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_H:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Plus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetHasHead(!HasHead());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::keyPressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;modifiers() &amp; <a href="CppQt.htm">Qt</a>::ShiftModifier)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((event-&gt;pos() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_from-&gt;pos()).manhattanLength() &lt; 10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetHasTail(!HasTail());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> ((event-&gt;pos() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;m_to-&gt;pos()).manhattanLength() &lt; 10.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetHasHead(!HasHead());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::mousePressEvent(event);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::paint(<a href="CppQPainter.htm">QPainter</a>* painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *, <a href="CppQWidget.htm">QWidget</a> *) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;painter-&gt;setRenderH<b><a href="CppInt.htm">int</a></b>(<a href="CppQPainter.htm">QPainter</a>::Antialiasing);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetMidItem()) painter-&gt;drawEllipse(GetMidItem()-&gt;pos(),1,1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;isSelected() <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppThis.htm">this</a></b>-&gt;hasFocus())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;setPen(m_focus_pen);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;setPen(m_pen);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Line must go _though_ mid pos, instead of <b><a href="CppUsing.htm">using</a></b> it as a <b><a href="CppVirtual.htm">virtual</a></b> hinge <a href="CppPointer.htm">point</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Solution:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> define <a href="CppPointer.htm">point</a> 'center' as the middle between from and to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a> define <a href="CppPointer.htm">point</a> 'beyond' as the mirror <a href="CppPointer.htm">point</a> of 'center', <b><a href="CppUsing.htm">using</a></b> mid_pos as a mirror<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> beyond{GetBeyond()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p_tail_end{GetTail()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p_head_end{GetHead()};<br/>
<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a> curve;<br/>
&nbsp;&nbsp;curve.moveTo(p_tail_end);<br/>
&nbsp;&nbsp;curve.quadTo(beyond,p_head_end);<br/>
&nbsp;&nbsp;painter-&gt;drawPath(curve);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sz <a href="CppOperatorAssign.htm">=</a> 10.0; <a href="CppComment.htm">//</a>pixels<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_tail)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angle from mid<a href="CppPointer.htm">point</a> to tail<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Thanks goes out to Toine van den Bogaart and Theo van den Bogaart <b><a href="CppFor.htm">for</a></b> being happy to help with the math<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi{<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx{beyond.x() <a href="CppOperatorMinus.htm">-</a> m_from-&gt;pos().x()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy{beyond.y() <a href="CppOperatorMinus.htm">-</a> m_from-&gt;pos().y()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> arrowangle{0.1*pi};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle1{0.5*pi <a href="CppOperatorPlus.htm">+</a> arrowangle <a href="CppOperatorMinus.htm">-</a> Geometry().<a href="CppGetAngle.htm">GetAngle</a>ClockScreen(-dx,-dy)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle2{0.5*pi <a href="CppOperatorPlus.htm">+</a> arrowangle <a href="CppOperatorMinus.htm">-</a> Geometry().<a href="CppGetAngle.htm">GetAngle</a>ClockScreen(-dx,-dy)};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p0{p_tail_end.x(),p_tail_end.y()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p0 <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdCos.htm">std::cos</a>(angle1) * sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppStdSin.htm">std::sin</a>(angle1) * sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p0 <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdCos.htm">std::cos</a>(angle2) * sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppStdSin.htm">std::sin</a>(angle2) * sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawPolygon(QPolygonF() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p0 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_head)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The angle from mid<a href="CppPointer.htm">point</a> to head<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Thanks goes out to Toine van den Bogaart and Theo van den Bogaart <b><a href="CppFor.htm">for</a></b> being happy to help with the math<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi{<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx{m_to-&gt;pos().x() <a href="CppOperatorMinus.htm">-</a> beyond.x()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy{(m_to-&gt;pos().y() <a href="CppOperatorMinus.htm">-</a> beyond.y())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle1{0.6*pi <a href="CppOperatorMinus.htm">-</a> Geometry().<a href="CppGetAngle.htm">GetAngle</a>ClockScreen(-dx,-dy)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle2{0.4*pi <a href="CppOperatorMinus.htm">-</a> Geometry().<a href="CppGetAngle.htm">GetAngle</a>ClockScreen(-dx,-dy)};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p0(p_head_end.x(),p_head_end.y());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p0 <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>( <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdCos.htm">std::cos</a>(angle1) * sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppStdSin.htm">std::sin</a>(angle1) * sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p0 <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppStdCos.htm">std::cos</a>(angle2) * sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a><a href="CppStdSin.htm">std::sin</a>(angle2) * sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter-&gt;drawPolygon(QPolygonF() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p0 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::SetFocusPen(<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; pen) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_focus_pen <a href="CppOperatorNotEqual.htm">!=</a> pen)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_focus_pen <a href="CppOperatorAssign.htm">=</a> pen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::SetFromPos(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; pos) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_from);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_from-&gt;pos() <a href="CppOperatorNotEqual.htm">!=</a> pos)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_from-&gt;setPos(pos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::SetHasHead(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_head) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_head <a href="CppOperatorNotEqual.htm">!=</a> has_head)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_head <a href="CppOperatorAssign.htm">=</a> has_head;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::SetHasTail(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> has_tail) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_tail <a href="CppOperatorNotEqual.htm">!=</a> has_tail)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tail <a href="CppOperatorAssign.htm">=</a> has_tail;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::SetMidPos(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; pos) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_mid);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_mid-&gt;pos() <a href="CppOperatorNotEqual.htm">!=</a> pos)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mid-&gt;setPos(pos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::SetPen(<b><a href="CppConst.htm">const</a></b> <a href="CppQPen.htm">QPen</a>&amp; pen) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pen <a href="CppOperatorNotEqual.htm">!=</a> pen)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pen <a href="CppOperatorAssign.htm">=</a> pen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::SetToPos(<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a>&amp; pos) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_to);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_to-&gt;pos() <a href="CppOperatorNotEqual.htm">!=</a> pos)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_to-&gt;setPos(pos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_item_updated(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<a href="CppQPainterPath.htm">QPainterPath</a> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::<a href="CppShape.htm">shape</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> beyond <a href="CppOperatorAssign.htm">=</a> GetBeyond();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p_tail_end <a href="CppOperatorAssign.htm">=</a> GetTail();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> p_head_end <a href="CppOperatorAssign.htm">=</a> GetHead();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a> curve;<br/>
&nbsp;&nbsp;curve.moveTo(p_tail_end);<br/>
&nbsp;&nbsp;curve.quadTo(beyond,p_head_end);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a>Stroker stroker;<br/>
&nbsp;&nbsp;stroker.setWidth(m_click_easy_width);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> stroker.createStroke(curve);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Geometry();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&amp; arrow) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '(' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> arrow.m_from-&gt;x() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ',' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> arrow.m_from-&gt;y() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ')'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (arrow.m_tail ? '&lt;' : '-') <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppOperatorDecrement.htm">--</a> "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '(' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> arrow.m_mid-&gt;x() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ',' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> arrow.m_mid-&gt;y() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ')'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppOperatorDecrement.htm">--</a>" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (arrow.m_head ? '&gt;' : '-') <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ' '<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '(' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> arrow.m_to-&gt;x() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ',' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> arrow.m_to-&gt;y() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ')'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppQtQuadBezierArrowItem.htm">QtQuadBezierArrowItem</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetFocusPen() <a href="CppOperatorEqual.htm">==</a> rhs.GetFocusPen()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetFromItem() <a href="CppOperatorEqual.htm">==</a> rhs.GetFromItem()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.HasHead() <a href="CppOperatorEqual.htm">==</a> rhs.HasHead()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetMidItem() <a href="CppOperatorEqual.htm">==</a> rhs.GetMidItem()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetPen() <a href="CppOperatorEqual.htm">==</a> rhs.GetPen()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.HasTail() <a href="CppOperatorEqual.htm">==</a> rhs.HasTail()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetToItem() <a href="CppOperatorEqual.htm">==</a> rhs.GetToItem()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
