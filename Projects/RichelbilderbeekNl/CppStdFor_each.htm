<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::for_each</title>
  <meta name="description" content="C++ std::for_each"/>
  <meta name="keywords" content="C++ std::for_each"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a> ) <a href="CppFor_each.htm">std::for_each</a></h1>
<p>&nbsp;</p>
<p><a href="CppAlgorithm.htm">Algorithm</a> to perform a non-modifying <a href="CppFunction.htm">function</a> 
on the elements of a sequence (on a <a href="CppVector.htm">std::vector</a>, for example). Use 
<a href="CppTransform.htm">std::transform</a> to perform modifying <a href="CppFunction.htm">functions</a> on the elements of a sequence.</p>
<p>&nbsp;</p>
<p>Prefer <a href="CppAlgorithm.htm">algorithms</a> over hand-written loops [1-3]. 
View <a href="CppExerciseNoForLoops.htm">Exercise #9: No for-loops</a> to learn how to remove hand-written loops  .</p>
<p>&nbsp;</p>
<p>Note: <a href="CppFor_each.htm">std::for_each</a> is supposed to be non-modifying [1], but I use it for modifying my sequences anyway.</p>
<p>&nbsp;</p>
<p>There are two kinds of examples below. The first uses <a href="CppFor_each.htm">std::for_each</a> combined with simple <a href="CppFunction.htm">functions</a>.</p>
<p>&nbsp;</p>
<p>The second piece of code shows the use of <a href="CppFunctor.htm">functors</a> for more advanced functionality. It is advised to use the latter [3], but I
will show the first as an example. There are also <a href="CppStl.htm">STL</a> <a href="CppFunctor.htm">functors</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example: Use of plain <a href="CppFunction.htm">functions</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filemeX4Bw.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;algorith&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> SetToOne(<b><a href="CppInt.htm">int</a></b>&amp; i)<br/>
{<br/>
&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> 1;<br/>
}<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMultiply.htm">Multiply</a>ByTwo(<b><a href="CppInt.htm">int</a></b>&amp; i)<br/>
{<br/>
&nbsp;&nbsp;i<a href="CppOperatorMultiplyAssign.htm">*=</a>2;<br/>
}<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> SetToRandom(<b><a href="CppInt.htm">int</a></b>&amp; i)<br/>
{<br/>
&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 10;<br/>
}<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCoutVector.htm">CoutVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(myVector.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; myVector(size);<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(myVector.begin(),myVector.end(), SetToOne);<br/>
&nbsp;&nbsp;<a href="CppCoutVector.htm">CoutVector</a>(myVector);<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(myVector.begin(),myVector.end(), <a href="CppMultiply.htm">Multiply</a>ByTwo);<br/>
&nbsp;&nbsp;<a href="CppCoutVector.htm">CoutVector</a>(myVector);<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(myVector.begin(),myVector.end(), SetToRandom);<br/>
&nbsp;&nbsp;<a href="CppCoutVector.htm">CoutVector</a>(myVector);<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(myVector.begin(),myVector.end(), <a href="CppMultiply.htm">Multiply</a>ByTwo);<br/>
&nbsp;&nbsp;<a href="CppCoutVector.htm">CoutVector</a>(myVector);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example: Use of non-<a href="CppStl.htm">STL</a> <a href="CppFunctor.htm">functors</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filer3eWzP.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;algorith&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> MyInitializer<br/>
{<br/>
&nbsp;&nbsp;MyInitializer() : index(0) {}<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperator.htm">operator</a></b> () (T &amp; a)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a <a href="CppOperatorAssign.htm">=</a> index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+index;<br/>
&nbsp;&nbsp;}<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
};<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> MyIndexCout<br/>
{<br/>
&nbsp;&nbsp;MyIndexCout() : index(0) {}<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperator.htm">operator</a></b> () (<b><a href="CppConst.htm">const</a></b> T &amp; a)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> index <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+index;<br/>
&nbsp;&nbsp;}<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index;<br/>
};<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> MySquarer<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperator.htm">operator</a></b> () (T &amp; a)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a<a href="CppOperatorMultiplyAssign.htm">*=</a>a;<br/>
&nbsp;&nbsp;}<br/>
};<br/>
 <br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 10;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; myVector(size);<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(myVector.begin(), myVector.end(), MyInitializer());<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(myVector.begin(), myVector.end(), MyIndexCout());<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "---------<a href="CppOperatorDecrement.htm">--</a>" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(myVector.begin(), myVector.end(), MySquarer());<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(myVector.begin(), myVector.end(), MyIndexCout());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>Bjarne Stroustrup. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4. Chapter 18.12.1 : 'Prefer algorithms over loops'</li>
  <li>Herb Sutter and Andrei Alexandrescu. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 84: 'Prefer algorithm calls to handwritten loops.'</li>
  <li>Herb Sutter and Andrei Alexandrescu. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 88: 'Prefer function objects over functions as algorithm and comparer arguments.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
