<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>auto</title>
  <meta name="description" content="C++ C++0x auto"/>
  <meta name="keywords" content="C++ C++0x auto keyword"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppAuto.htm">auto</a></h1>
<p>&nbsp;</p>
<p><a href="CppAuto.htm">auto</a> is a <a href="CppKeyword.htm">keyword</a> that has different meanings, depending
on the <a href="CppStandard.htm">standard</a> used:</p>
<ul>
  <li>
    <img src="PicCpp11.png" alt="C++11"/> 
    <a href="CppAuto.htm">auto</a> in the <a href="Cpp11.htm">C++11</a> <a href="CppStandard.htm">standard</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/> 
    <a href="CppAuto.htm">auto</a> in the <a href="Cpp98.htm">C++98</a> <a href="CppStandard.htm">standard</a>
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp11.png" alt="C++11"/> 
  <a href="CppAuto.htm">auto</a> in the <a href="Cpp11.htm">C++11</a> <a href="CppStandard.htm">standard</a>
</h2>
<p>&nbsp;</p>
<p>
  In the <a href="Cpp11.htm">C++11</a> Standard, <a href="CppAuto.htm">auto</a> is useful
  to let the <a href="CppCompiler.htm">compiler</a> determine a 
  <a href="CppVariable.htm">variable</a>'s <a href="CppDataType.htm">data type</a>
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp98.png" alt="C++98"/> 
  <a href="CppAuto.htm">auto</a> in the <a href="Cpp98.htm">C++98</a> <a href="CppStandard.htm">standard</a>
</h2>
<p>&nbsp;</p>
<p>
  <a href="CppAuto.htm">auto</a> as described in the ISO/IEC 14882:2003 C++ Standard is a <a href="CppKeyword.htm">keyword</a> 
  to specify that a <a href="CppLocal.htm">locally</a> <a href="CppDeclaration.htm">declared</a> <a href="CppVariable.htm">variable</a> 
  is destroyed at the end of its <a href="CppScope.htm">scope</a>. In other words: to specify to do, what already will be done. 
  In <a href="Cpp98.htm">C++98</a>, never write <a href="CppAuto.htm">auto</a> [1]
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppExample.htm">Example</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppAutoExample1.htm">auto example 1: basics</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Use <a href="CppAuto.htm">auto</a> to avoid verbosity and typos when you use <a href="CppIterator.htm">iterators</a> [2]
  </li>
  <li>
    Prefer <a href="CppAuto.htm">auto</a> to explicit type <a href="CppDeclaration.htm">declarations</a> [3]
  </li>
  <li>
    Prefer the <a href="CppOperatorAssign.htm">=</a> <a href="CppSyntax.htm">syntax</a> 
    for the <a href="CppListInitialization.htm">initialization</a> in 
    <a href="CppDeclaration.htm">declarations</a> using <a href="CppAuto.htm">auto</a> [5]
  </li>
  <li>
    Remember that <a href="CppAuto.htm">auto</a> + { expr } == <a href="CppStdInitializer_list.htm">std::initializer_list</a> [4]
  </li>
  <li>
    In <a href="Cpp98.htm">C++98</a>, never write <a href="CppAuto.htm">auto</a> [1]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppHerbSutter.htm">Herb Sutter</a>. Exceptional C++ style. 2005. ISBN: 0-201-76042-8. Item 28 guideline: 'Never write auto'.</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 31.6. Advice. page 924: '[17] Use auto to avoid verbosity and typos when you use iterators'</li>
  <li><!--  3 --><a href="CppScottMeyers.htm">Scott Meyers</a>. <a href="http://cppandbeyond.com/2012/04/16/session-topic-initial-thoughts-on-effective-c11">C++ And Beyond 2012 session: 'Initial thoughts on Effective C++11'. 2012. 'Prefer auto to Explicit Type Declarations'</a></li>
  <li><!--  4 --><a href="CppScottMeyers.htm">Scott Meyers</a>. <a href="http://cppandbeyond.com/2012/04/16/session-topic-initial-thoughts-on-effective-c11">C++ And Beyond 2012 session: 'Initial thoughts on Effective C++11'. 2012. 'Remember that auto + { expr } == std::initializer_list'</a></li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 6.6. Advice, page 169: '[20] Prefer the = syntax for the initialization in declarations using auto'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
