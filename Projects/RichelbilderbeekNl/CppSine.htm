<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Sine</title>
  <meta name="description" content="C++ Sine"/>
  <meta name="keywords" content="C++ Sine"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSine.htm">Sine</a></h1>
<p>&nbsp;</p>
<p>Class to calculate the value of a sine (the standard <a href="CppFunction.htm">function</a> <a href="CppSin.htm">std::sin</a>) by using a look-up table. 
You can view all code below or download the source code.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppSine.zip">Download the 'Sine' source code, including C++ Builder 6.0 project (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="s2l0.2k.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a><a href="CppMain.htm">main</a>.cpp<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppLimitsH.htm">limits</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitSine.h"<br/>
<br/>
<a href="CppComment.htm">//</a>From htpp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/Cpp<a href="CppGetRandomUniform.htm">GetRandomUniform</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppGetRandomUniform.htm">GetRandomUniform</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRand.htm">std::rand</a>())/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Range from [ <a href="CppOperatorMinus.htm">-</a> 3.0 * <a href="CppM_PI.htm">M_PI</a> , 3.0 * <a href="CppM_PI.htm">M_PI</a> ]<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetRandomNumber()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (-3.0 * <a href="CppM_PI.htm">M_PI</a>) <a href="CppOperatorPlus.htm">+</a> (<a href="CppGetRandomUniform.htm">GetRandomUniform</a>() * 6.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;Sine s;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check special values<br/>
&nbsp;&nbsp;s( 0.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s( 0.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s( 1.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s( 1.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s( 2.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s(-0.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s(-0.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s(-1.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s(-1.5 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;s(-2.0 * <a href="CppM_PI.htm">M_PI</a>);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>1000000; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorModulus.htm">%</a> 100000 <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0) <a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> GetRandomNumber();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> s(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yToo <a href="CppOperatorAssign.htm">=</a> <a href="CppSin.htm">std::sin</a>(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> error <a href="CppOperatorAssign.htm">=</a> <a href="CppFabs.htm">std::fabs</a>(y <a href="CppOperatorMinus.htm">-</a> yToo);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( error &lt; s.GetMaxError());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Sine tested as safe" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
}<br/>
<br/>
 <br/>
<br/>
<br/>
<br/>
UnitSine.h<br/>
 <br/>
<a href="CppIfndef.htm">#ifndef</a> UnitSineH<br/>
<a href="CppDefine.htm">#define</a> UnitSineH<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Sine<br/>
{<br/>
&nbsp;&nbsp;Sine(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> 1000, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> notInitializedValue <a href="CppOperatorAssign.htm">=</a> 123.0);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> GetMaxError() <b><a href="CppConst.htm">const</a></b>;<br/>
 <br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mLut; <a href="CppComment.htm">//</a>Look-up table<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mNotInitializedValue;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Transform(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> CalculateIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f) <b><a href="CppConst.htm">const</a></b>;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
 <br/>
<br/>
<br/>
UnitSine.cpp<br/>
 <br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
 <br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
 <br/>
<a href="CppInclude.htm">#include</a> "UnitSine.h"<br/>
<br/>
Sine::Sine(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> notInitializedValue)<br/>
&nbsp;&nbsp;: mLut(size,notInitializedValue),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mNotInitializedValue(notInitializedValue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the value of mLut[1]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> the GetErrorMax method<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<b><a href="CppOperatorFunctionCall.htm">operator()</a></b>( (<a href="CppM_PI.htm">M_PI</a> * 0.5) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(mLut.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mLut[1] <a href="CppOperatorNotEqual.htm">!=</a> mNotInitializedValue);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Sine::<b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> di <a href="CppOperatorAssign.htm">=</a> 2.0 * <a href="CppM_PI.htm">M_PI</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>preY e [ <a href="CppOperatorMinus.htm">-</a>di, di &gt;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> preY <a href="CppOperatorAssign.htm">=</a> <a href="CppFmod.htm">std::fmod</a>(x,di);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>y e [ 0.0 , di &gt;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> (preY &lt; 0.0 ? preY <a href="CppOperatorPlus.htm">+</a> di : preY);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; di );<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>f <a href="CppOperatorAssign.htm">=</a> fractional part e [ 0.0, 4.0 &gt;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> 4.0 * (y <a href="CppOperatorDivide.htm">/</a> di);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( f <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( f &lt; 4.0 );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> addMinus <a href="CppOperatorAssign.htm">=</a> ( f &lt; 2.0 ? <b><a href="CppFalse.htm">false</a></b> : <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> CalculateIndex(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
 <br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (index <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mLut.size()) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ( addMinus <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b> ? <a href="CppOperatorMinus.htm">-</a>1.0 : 1.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mLut.size()) );<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> already calculated<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mLut[index] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> mNotInitializedValue)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mLut[index] <a href="CppOperatorAssign.htm">=</a> <a href="CppSin.htm">std::sin</a>( <a href="CppFmod.htm">std::fmod</a>(y,<a href="CppM_PI.htm">M_PI</a>) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mLut[index] <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mLut[index] <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (addMinus <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorMinus.htm">-</a>mLut[index];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mLut[index];<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Sine::GetMaxError() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The maximal error is twice the distance between<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mLut[0] and mLut[1], because the sine is steepest there<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Because mLut[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0, it is twice the value of mLut[1]<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mLut[1] <a href="CppOperatorNotEqual.htm">!=</a> mNotInitializedValue);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mLut[1] * 2.0;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> Sine::CalculateIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> mLut.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( f <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( f &lt; 4.0 );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fTransformed <a href="CppOperatorAssign.htm">=</a> Transform(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fTransformed <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fTransformed <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(fTransformed * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(size));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorLessEqual.htm">&lt;=</a> size); <a href="CppComment.htm">//</a> index <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> size is handled by caller (i.e. <b><a href="CppOperatorFunctionCall.htm">operator()</a></b> )<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> index;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> Sine::Transform(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( f <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( f &lt; 4.0 );<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f &lt; 1.0) <b><a href="CppReturn.htm">return</a></b> f;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (f &lt; 2.0) <b><a href="CppReturn.htm">return</a></b> 1.0 <a href="CppOperatorMinus.htm">-</a> (f <a href="CppOperatorMinus.htm">-</a> 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Transform(f <a href="CppOperatorMinus.htm">-</a> 2.0);<br/>
}<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<br/>
 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
