<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::replace_copy_if</title>
  <meta name="description" content="C++ std::replace_copy_if"/>
  <meta name="keywords" content="C++ std::replace_copy_if code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppReplace_copy_if.htm">std::replace_copy_if</a></h1>
<p>&nbsp;</p>
<p><a href="CppReplace_copy_if.htm">std::replace_copy_if</a> is an <a href="CppStl.htm">STL</a> 
<a href="CppAlgorithm.htm">algorithm</a> to copy a range
of elements and, while doing so, replace elements that satisfy a certain <a href="CppPredicate.htm">predicate</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a vector with negative odd numbers<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v;<br/>
&nbsp;&nbsp;v.push_back( 0);<br/>
&nbsp;&nbsp;v.push_back(-1);<br/>
&nbsp;&nbsp;v.push_back( 2);<br/>
&nbsp;&nbsp;v.push_back(-3);<br/>
&nbsp;&nbsp;v.push_back( 4);<br/>
&nbsp;&nbsp;v.push_back(-5);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace negatives by zero, simular to <a href="CppReplaceNegativeByZero.htm">ReplaceNegativeByZero</a><br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppReplace_copy_if.htm">std::replace_copy_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check v from its first element ...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> ... to its last element<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBack_inserter.htm">std::back_inserter</a>(w),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAppend.htm">Append</a> result at w<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppLess.htm">std::less</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(),0), <a href="CppComment.htm">//</a>If the value is less than zero...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> ... set it to zero<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> <a href="CppReplace_copy_if.htm">std::replace_copy_if</a> works as expected<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w.size() <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w[0] <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w[1] <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Replaced<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w[2] <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w[3] <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Replaced<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w[4] <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(w[5] <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Replaced<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.cplusplus.com/reference/algorithm/replace_copy_if">Cplusplus.com page about std::replace_copy_if</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
