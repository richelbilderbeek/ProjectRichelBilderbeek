<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Double buffering</title>
  <meta name="description" content="C++ Double buffering"/>
  <meta name="keywords" content="C++ Double buffering"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppDoubleBuffering.htm">Double buffering</a></h1>
<p>&nbsp;</p>
<p>Technique to prevent flicker when working with <a href="CppGraphics.htm">graphics</a> 
(it has nothing to do with the <a href="CppDataType.htm">data type</a> <a href="CppDouble.htm">double</a>).</p>
<p>&nbsp;</p>
<p>The idea of double buffering is to first paint all screen graphics to an invisible buffer, then drawing this buffer to screen.</p>
<p>&nbsp;</p>
<p>Drawing to screen directly is called single buffering and causes flicker. Single buffering and <a href="CppDoubleBuffering.htm">double buffering</a> can be compared using the
program <a href="CppDemoBuffering.htm">DemoBuffering</a>.</p>
<p>&nbsp;</p>
<p>To clean a buffer, often the background is drawn on the buffer first.</p>
<p>&nbsp;</p>
<p>In C++ Builder, this looks somewhat like the code below (but see the program <a href="CppDemoBuffering.htm">DemoBuffering</a> for a complete program):</p>
 <p>&nbsp;</p>
<!-- start of code -->
<table summary="file8w4t3c.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
 <br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppDouble.htm">Double</a>Buffering.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm1 *Form1;<br/>
<br/>
__fastcall TForm1::TForm1(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;OnResize(0);<br/>
}<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::<a href="CppTime.htm">Time</a>r1<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clean the buffer by drawing the background on the buffer<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Canvas-&gt;Draw(0,0,ImageBackground-&gt;Picture-&gt;Graphic);<br/>
 <br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the sprites on the buffer<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSprites <a href="CppOperatorAssign.htm">=</a> 100;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSprites; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> (ClientWidth <a href="CppOperatorMinus.htm">-</a> ImageSprite-&gt;Width );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <a href="CppRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> (ClientHeight <a href="CppOperatorMinus.htm">-</a> ImageSprite-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;Canvas-&gt;Draw(x,y,ImageSprite-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Finally, copy the buffer to the Form<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Canvas-&gt;Draw(0,0,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
}<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume all Images are invisible<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ImageBuffer-&gt;Visible);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ImageBackground-&gt;Visible);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ImageSprite-&gt;Visible);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the Buffer and Background to the right size<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Width <a href="CppOperatorAssign.htm">=</a> ClientWidth;<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight;<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Width <a href="CppOperatorAssign.htm">=</a> ClientWidth;<br/>
&nbsp;&nbsp;ImageBackground-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
