<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::unary_function</title>
  <meta name="description" content="C++ std::unary_function"/>
  <meta name="keywords" content="C++ std::unary_function std unary_function unary function object functor base class"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStdUnary_function.htm">std::unary_function</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppStdUnary_function.htm">std::unary_function</a> is deprecated [2,3].
</p>
<p>&nbsp;</p>
<p>
  <a href="CppStdUnary_function.htm">std::unary_function</a> is an empty <a href="CppClass.htm">class</a> 
  that serves as the <a href="CppBaseClass.htm">base class</a> of a unary <a href="CppFunctor.htm">functor</a>. 
  A unary <a href="CppFunctor.htm">functor</a> defines <a href="CppOperatorFunctionCall.htm">operator()</a>, 
  where <a href="CppOperatorFunctionCall.htm">operator()</a> takes one <a href="CppArgument.htm">argument</a>.
</p>
<p>&nbsp;</p>
<p>
  The advantage of using <a href="CppStdUnary_function.htm">std::unary_function</a> is its (two) 
  <a href="CppTypedef.htm">typedef</a>s, so that the <a href="CppDerivedClass.htm">derived</a> 
  <a href="CppFunctor.htm">functors</a> fits into more <a href="CppAlgorithm.htm">algorithms</a>.
  Make <a href="CppFunctor.htm">functors</a> adaptable [1].
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example: <a href="CppMakeAbs.htm">MakeAbs</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppStruct.htm">struct</a></b> Abs : <b><a href="CppPublic.htm">public</a></b> <a href="CppStdUnary_function.htm">std::unary_function</a>&lt;T,T&gt;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T <b><a href="CppOperator.htm">operator</a></b>()(<b><a href="CppConst.htm">const</a></b> T&amp; x) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppAbs.htm">std::abs</a>(x); }<br/>
};<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMakeAbs.htm">MakeAbs</a>(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),Abs&lt;<b><a href="CppInt.htm">int</a></b>&gt;());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example <a href="CppDefinition.htm">definition</a> of <a href="CppStdUnary_function.htm">std::unary_function</a></h2>
<p>&nbsp;</p>
<p>Simplified from the GNU ISO C++ Library, version 4.7.2:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="Simplified std::unary_function definition" border = "1"><tr><td><code>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppTypename.htm">typename</a></b> _Arg, <b><a href="CppTypename.htm">typename</a></b> _Result&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> unary_function<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> _Arg argument_type;&nbsp;&nbsp; <br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> _Result result_type;&nbsp;&nbsp;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective STL. ISBN: 0-201-74962-9. Item 40: 'Make functor classes adaptable'</li>
  <li><!--  2 -->Programming Language C++, Library Working Group. 2010-10-06. Document number: N3145=10-0135</li>
  <li><!--  3 --><!-- C++14 -->Working Draft, Standard for Programming Language C++. 2014-08-22. N3936. Paragraph D.8.2. 'The class templates unary_function and binary_function are deprecated. A program shall not declare specializations of these templates.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
