 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Why do you use [a certain style/syntax]?</title>
  <meta name="description" content="C++ Why do you use [a certain style/syntax]?"/>
  <meta name="keywords" content="C++ Why do you use [a certain style/syntax]? code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStyle.htm">Why do you use [a certain style/syntax]?</a></h1>
<p>&nbsp;</p>
<p><a href="CppFaq.htm">FAQ</a> about my personal style and syntax.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Not returning const int in main</h2>
<p>&nbsp;</p>
<p>I use <a href="CppConst.htm">const</a> whenever possible [3-8], so I nearly always use 
<a href="CppConstReturnType.htm">const return types</a>.</p>
<p>&nbsp;</p>
<p>I do write:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Code<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>I do not write:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>() <a href="CppComment.htm">//</a>Not my style and non-standard<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Code<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This is because the standard states that main has one of the following syntaxes [1] :</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>() { <a href="CppComment.htm">/*</a> Your code <a href="CppComment.htm">*/</a> }<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>and</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <a href="CppArgc.htm">argv</a>[]) { <a href="CppComment.htm">/*</a> Your code <a href="CppComment.htm">*/</a> }<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>I choose to stick with the standard.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Not returning zero in main</h2>
<p>&nbsp;</p>
<p>When main reaches its closing bracket, I never write explicity to let main return a zero.</p>
<p>&nbsp;</p>
<p>I do write:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Code<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>I do not write:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Code<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0; <a href="CppComment.htm">//</a>Not my style<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This is because the standard states that the closing bracket of main() must have the
same effect of returning zero [2]. Therefore, return zero can be omitted. And I do so.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReference.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>C++. International Standard. ISO/IEC 14882. Second edition. Paragraph 3.6.1.2</li>
  <li>C++. International Standard. ISO/IEC 14882. Second edition. Paragraph 3.6.1.5</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 7.9.3: 'Use const extensively and consistently'</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN: 0-321-33487-6. Item 3: 'Use const whenever possible'</li>
  <li><a href="CppJarrodHollingworth.htm">Jarrod Hollingworth</a>, <a href="CppBobSwart.htm">Bob Swart</a>, <a href="CppMarkCashman.htm">Mark Cashman</a>, <a href="CppPaulGustavson.htm">Paul Gustavson</a>. Sams C++ Builder 6 Developer's Guide. ISBN: 0-672-32480-6. Chapter 3: 'Understand and use const in your code'</li>
  <li><a href="CppJesseLiberty.htm">Jesse Liberty</a>. Sams teach yourself C++ in 24 hours. ISBN: 0-672-32224-2. Hour 8, chapter 'Const member functions': 'Use const whenever possible.'</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 2: 'Prefer consts, enums and inlines to #defines'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 15: 'Use const proactively'</li>
</ol><p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
