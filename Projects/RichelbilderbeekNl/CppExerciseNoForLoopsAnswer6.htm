<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Answer of exercise #9: No for-loops #6</title>
  <meta name="description" content="C++ Answer of exercise #9: No for-loops #6"/>
  <meta name="keywords" content="C++ Answer of exercise #9: No for-loops #6"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppExerciseNoForLoopsAnswer6.htm">Answer of exercise #9: No for-loops #6</a></h1>
<p>&nbsp;</p>
<p>This is the answer of <a href="CppExerciseNoForLoops.htm">Exercise #9: No for-loops</a>.</p>
<p>&nbsp;</p>
<h2>Question #6: Widget::DoIt on Widget*</h2>
<p>&nbsp;</p>
<p>Replace the <a href="CppFor.htm">for</a>-loop. You will need:</p>
<ul>
  <li><a href="CppFor_each.htm">std::for_each</a></li>
  <li><a href="CppMem_fun.htm">std::mem_fun</a> (or <a href="CppMem_fn.htm">boost::mem_fn</a>)</li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="fileBGcU6L.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoIt() <b><a href="CppConst.htm">const</a></b> { <a href="CppOperatorDivide.htm">/</a>* <b><a href="CppDo.htm">do</a></b> it <a href="CppComment.htm">*/</a> }<br/>
};<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> DoIt(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppWidget.htm">Widget</a>*&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i]-&gt;DoIt();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Answer <a href="CppStl.htm">STL</a>-only</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="file0TH4zs.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoIt() <b><a href="CppConst.htm">const</a></b> { <a href="CppOperatorDivide.htm">/</a>* <b><a href="CppDo.htm">do</a></b> it <a href="CppComment.htm">*/</a> }<br/>
};<br/>
 <br/>
<b><a href="CppVoid.htm">void</a></b> DoIt(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppWidget.htm">Widget</a>*&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<a href="CppMem_fun.htm">std::mem_fun</a>(&amp;<a href="CppWidget.htm">Widget</a>::DoIt));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Answer using <a href="CppBoost.htm">Boost</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="filef0i5dL.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/mem_fn.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppWidget.htm">Widget</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoIt() <b><a href="CppConst.htm">const</a></b> { <a href="CppOperatorDivide.htm">/</a>* <b><a href="CppDo.htm">do</a></b> it <a href="CppComment.htm">*/</a> }<br/>
};<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DoIt(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppWidget.htm">Widget</a>*&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<a href="CppMem_fn.htm">boost::mem_fn</a>(&amp;<a href="CppWidget.htm">Widget</a>::DoIt));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
