<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SortedBinaryNewickVector</title>
  <meta name="description" content="C++ SortedBinaryNewickVector"/>
  <meta name="keywords" content="C++ SortedBinaryNewickVector "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.680 at Sun Jul  6 18:32:10 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> is a <a href="CppNewick.htm">Newick</a> <a href="CppClass.htm">class</a>.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppSortedBinaryNewickVector/CppSortedBinaryNewickVector.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppSortedBinaryNewickVector/CppSortedBinaryNewickVector.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppSortedBinaryNewickVector.htm">CppSortedBinaryNewickVector</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppSortedBinaryNewickVector.htm">CppSortedBinaryNewickVector</a>/<a href="CppSortedBinaryNewickVector.htm">sortedbinarynewickvector</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppSortedBinaryNewickVector.htm">CppSortedBinaryNewickVector</a>/<a href="CppSortedBinaryNewickVector.htm">sortedbinarynewickvector</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppSortedBinaryNewickVector.htm">CppSortedBinaryNewickVector</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppSortedBinaryNewickVector/sortedbinarynewickvector.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppSortedBinaryNewickVector/sortedbinarynewickvector.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Rampal Etienne Project, calculates the probability of a phylogeny<br/>
&nbsp;&nbsp;(C) 2009-2014 Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> SORTEDBINARYNEWICKVECTOR_H<br/>
<a href="CppDefine.htm">#define</a> SORTEDBINARYNEWICKVECTOR_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppBinaryNewickVector.htm">binarynewickvector</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppNewick.htm">newick</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">//</a>A <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> is a Short<a href="CppNewick.htm">Newick</a> with its internal storage hided<br/>
<a href="CppComment.htm">//</a>All <a href="CppFunction.htm">function</a>s that needed a Short<a href="CppNewick.htm">Newick</a>'s internals<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;are members of <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; rhs);<br/>
&nbsp;&nbsp;<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>&amp; rhs);<br/>
&nbsp;&nbsp;<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; <a href="CppAny.htm">any</a>_v);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> Empty() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_v.empty(); }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalcDenominator(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> theta) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalcProbabilitySimple<a href="CppNewick.htm">Newick</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> theta) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsSimple() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Size() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_v.size(); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> TermIsNotOne(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> TermIsOne(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> LoseBrackets(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; Peek() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_v;}<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_v;<br/>
&nbsp;&nbsp; <b><a href="CppBool.htm">bool</a></b> IsCloseBracketRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp; <b><a href="CppBool.htm">bool</a></b> IsOpenBracketLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b>&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; rhs);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Sort();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; Sort(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator b,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator e) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> FindPosBefore(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> FindPosAfter(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> CalculateProbability(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppNewick.htm">newick</a>_str,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> theta);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppNewick.htm">Newick</a>Compare(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; lhs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; rhs);<br/>
<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; rhs);<br/>
<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToString(<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; n,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> add_brackets <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a>SORTEDBINARYNEWICKVECTOR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppSortedBinaryNewickVector/sortedbinarynewickvector.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppSortedBinaryNewickVector/sortedbinarynewickvector.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Rampal Etienne Project, calculates the probability of a phylogeny<br/>
&nbsp;&nbsp;(C) 2009-2014 Richel Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppSortedBinaryNewickVector.htm">sortedbinarynewickvector</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppBinaryNewickVector.htm">binarynewickvector</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppNewick.htm">newick</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; rhs)<br/>
&nbsp;&nbsp;: m_v(rhs.Peek())<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppNewick.htm">Newick</a>::<a href="CppIsNewick.htm">IsNewick</a>(m_v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppNewick.htm">Newick</a>::IsUnary<a href="CppNewick.htm">Newick</a>(m_v) <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppNewick.htm">Newick</a>::<a href="CppIsBinaryNewick.htm">IsBinaryNewick</a>(m_v));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume rhs is sorted<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; <a href="CppAny.htm">any</a>_v)<br/>
&nbsp;&nbsp;: m_v(<a href="CppAny.htm">any</a>_v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> ( <a href="CppNewick.htm">Newick</a>::<a href="CppIsNewick.htm">IsNewick</a>(m_v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (<a href="CppNewick.htm">Newick</a>::IsUnary<a href="CppNewick.htm">Newick</a>(m_v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <a href="CppNewick.htm">Newick</a>::<a href="CppIsBinaryNewick.htm">IsBinaryNewick</a>(m_v))));<br/>
&nbsp;&nbsp;Sort();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>&amp; rhs)<br/>
&nbsp;&nbsp;: m_v(rhs.Peek())<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppNewick.htm">Newick</a>::<a href="CppIsNewick.htm">IsNewick</a>(m_v));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppNewick.htm">Newick</a>::IsUnary<a href="CppNewick.htm">Newick</a>(m_v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <a href="CppNewick.htm">Newick</a>::<a href="CppIsBinaryNewick.htm">IsBinaryNewick</a>(m_v));<br/>
&nbsp;&nbsp;Sort();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> lhs.v &lt; rhs.v;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::<a href="CppNewick.htm">Newick</a>Compare(lhs.Peek(),rhs.Peek());<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::CalculateProbability(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppNewick.htm">newick</a>_str,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> theta)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppNewick.htm">Newick</a>::<a href="CppIsNewick.htm">IsNewick</a>(<a href="CppNewick.htm">newick</a>_str));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppNewick.htm">Newick</a>::IsUnary<a href="CppNewick.htm">Newick</a>(<a href="CppNewick.htm">Newick</a>::<a href="CppStringToNewick.htm">StringToNewick</a>(<a href="CppNewick.htm">newick</a>_str))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> <a href="CppNewick.htm">Newick</a>::<a href="CppIsBinaryNewick.htm">IsBinaryNewick</a>(<a href="CppNewick.htm">Newick</a>::<a href="CppStringToNewick.htm">StringToNewick</a>(<a href="CppNewick.htm">newick</a>_str)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(theta &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> <a href="CppNewick.htm">newick</a>(<a href="CppNewick.htm">newick</a>_str);<br/>
&nbsp;&nbsp;<a href="CppNewick.htm">Newick</a>Storage&lt;<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>&gt; storage(<a href="CppNewick.htm">newick</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppNewick.htm">Newick</a>::CalculateProbability(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppNewick.htm">newick</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;theta,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;storage);<br/>
<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::ToStr() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppNewick.htm">Newick</a>::<a href="CppNewickToString.htm">NewickToString</a>(Peek());<br/>
}<br/>
<br/>
 <b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::CalcDenominator(<br/>
&nbsp;&nbsp; <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> theta) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppNewick.htm">Newick</a>::CalcDenominator(Peek(),theta);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From a certain <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>,<br/>
<a href="CppComment.htm">//</a><a href="CppReturn.htm">returns</a> the probability<br/>
 <b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::CalcProbabilitySimple<a href="CppNewick.htm">Newick</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> theta) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsSimple());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_v.size();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n=0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> k=0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> probability <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_v[i]&gt;0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> ni <a href="CppOperatorAssign.htm">=</a> m_v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>k;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> p=1; p<a href="CppOperatorNotEqual.htm">!=</a>ni; <a href="CppOperatorIncrement.htm">++</a>p, <a href="CppOperatorIncrement.htm">++</a>n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probability <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(p) <a href="CppOperatorDivide.htm">/</a> ( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n) <a href="CppOperatorPlus.htm">+</a> theta));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probability <a href="CppOperatorDivideAssign.htm">/=</a> ( <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n) <a href="CppOperatorPlus.htm">+</a> theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;probability <a href="CppOperatorMultiplyAssign.htm">*=</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)+theta)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppStdPow.htm">std::pow</a>(theta,<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(k-1));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> probability;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::FindPosAfter(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=index; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[i]<a href="CppOperatorEqual.htm">==</a>x) <b><a href="CppReturn.htm">return</a></b> i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sz;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::FindPosBefore(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v,<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index)<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=index; i<a href="CppOperatorNotEqual.htm">!=</a>-1; <a href="CppOperatorDecrement.htm">--</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[i]<a href="CppOperatorEqual.htm">==</a>x) <b><a href="CppReturn.htm">return</a></b> i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppOperatorMinus.htm">-</a>1;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "3.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-03-11: <a href="CppVersion.htm">Version</a> 3.0: initial <a href="CppVersion.htm">version</a>ing, following <a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::IsCloseBracketRight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_v.size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pos &lt; sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_v[pos]<a href="CppOperatorEqual.htm">==</a>1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=pos+1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>+1 because v[pos]<a href="CppOperatorEqual.htm">==</a>1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> m_v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorEqual.htm">==</a> <a href="CppNewick.htm">Newick</a>::bracket_close) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorEqual.htm">==</a> <a href="CppNewick.htm">Newick</a>::bracket_open) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>There will always be a <b><a href="CppFinal.htm">final</a></b> closing bracket at the right<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> that is not stored in a <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>'s <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
 <b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::IsOpenBracketLeft(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pos) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(pos &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_v[pos]<a href="CppOperatorEqual.htm">==</a>1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=pos-1; i<a href="CppOperatorNotEqual.htm">!=</a>-1; <a href="CppOperatorDecrement.htm">--</a>i) <a href="CppComment.htm">//</a>-1, because v[pos]<a href="CppOperatorEqual.htm">==</a>1<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> m_v[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorEqual.htm">==</a> <a href="CppNewick.htm">Newick</a>::bracket_open) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorEqual.htm">==</a> <a href="CppNewick.htm">Newick</a>::bracket_close) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>There will always be a trailing opening bracket at the left<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> that is not stored in a <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>'s <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>If there is at least one bracket open<br/>
 <b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::IsSimple() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppNewick.htm">Newick</a>::IsSimple(Peek());<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Does the following conversions:<br/>
<a href="CppComment.htm">//</a> (5,(5,1)) <a href="CppOperatorMinus.htm">-</a>&gt; (5,6)<br/>
<a href="CppComment.htm">//</a> (4,(5,1)) <a href="CppOperatorMinus.htm">-</a>&gt; (4,6)<br/>
<a href="CppComment.htm">//</a> (4,(3,1)) <a href="CppOperatorMinus.htm">-</a>&gt; (4,4)<br/>
<a href="CppComment.htm">//</a> (4,(1,1)) <a href="CppOperatorMinus.htm">-</a>&gt; (4,2)<br/>
<a href="CppComment.htm">//</a> string_pos <a href="CppPointer.htm">point</a>s at an index in the string current.<a href="CppNewick.htm">newick</a> after the '1'<br/>
<a href="CppComment.htm">//</a> For example, <b><a href="CppFor.htm">for</a></b> (4,(3,1)) the string_pos equals 7<br/>
<a href="CppComment.htm">//</a> num is the other value between brackets<br/>
<a href="CppComment.htm">//</a> For example, <b><a href="CppFor.htm">for</a></b> (4,(3,1)) num will equal 3<br/>
<a href="CppComment.htm">//</a> (5,(5,1)) <a href="CppOperatorMinus.htm">-</a>&gt; (5,6)<br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>&gt; sz <a href="CppOperatorAssign.htm">=</a> 9<br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>&gt; bracket_open_pos&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 3<br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>&gt; bracket_close_pos <a href="CppOperatorAssign.htm">=</a> 7<br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>&gt; sz_loss <a href="CppOperatorAssign.htm">=</a> 4 <a href="CppOperatorAssign.htm">=</a> 7 <a href="CppOperatorMinus.htm">-</a> 3 <a href="CppOperatorAssign.htm">=</a> bracket_close_pos <a href="CppOperatorMinus.htm">-</a> bracket_open_pos<br/>
<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>&gt; new_sz <a href="CppOperatorAssign.htm">=</a> 5<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::LoseBrackets(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; Size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_v[i] <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x&gt;0);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v_copy <a href="CppOperatorAssign.htm">=</a> m_v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> bracket_open_pos<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> FindPosBefore(m_v,<a href="CppNewick.htm">Newick</a>::bracket_open,i);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_open_pos &gt; <a href="CppOperatorMinus.htm">-</a>1);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> bracket_close_pos<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> FindPosAfter(m_v,<a href="CppNewick.htm">Newick</a>::bracket_close,i);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(bracket_close_pos &lt; Size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> Size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz_lose <a href="CppOperatorAssign.htm">=</a> bracket_close_pos <a href="CppOperatorMinus.htm">-</a> bracket_open_pos;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz_new <a href="CppOperatorAssign.htm">=</a> sz <a href="CppOperatorMinus.htm">-</a> sz_lose;<br/>
&nbsp;&nbsp;v_copy[bracket_open_pos] <a href="CppOperatorAssign.htm">=</a> x+1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a> begin_iter(&amp;v_copy[bracket_close_pos+1]);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a> output_iter(&amp;v_copy[bracket_open_pos+1]);<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(begin_iter,v_copy.end(),output_iter);<br/>
&nbsp;&nbsp;v_copy.resize(sz_new);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(v_copy);<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::TermIsNotOne(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_v[i]&gt;1);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(m_v);<br/>
&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>v[i];<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(v);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>TermIsOne is called whenever a '1' is found in a <a href="CppNewick.htm">newick</a> structure<br/>
<a href="CppComment.htm">//</a>string_pos has the index of the <a href="CppChar.htm">character</a> after <b><a href="CppThis.htm">this</a></b> '1'<br/>
<a href="CppComment.htm">//</a> (when a string has multiple 1's, TermIsOne is called <b><a href="CppFor.htm">for</a></b> each '1',<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;with each <a href="CppTime.htm">time</a> a different string_pos)<br/>
<a href="CppComment.htm">//</a>If <b><a href="CppThis.htm">this</a></b> '1' is between two brackets, with one other number,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;these two numbers are added and the brackets are removed<br/>
<a href="CppComment.htm">//</a>If <b><a href="CppThis.htm">this</a></b> '1' is not between two brackets,<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;the <a href="CppNewick.htm">newick</a> string <b><a href="CppReturn.htm">return</a></b>ed is empty<br/>
<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a> examples<br/>
<a href="CppComment.htm">//</a> (3,(15,1)), string_pos 8 <a href="CppOperatorMinus.htm">-</a>&gt; (3,16)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^&nbsp;&nbsp; EXIT1<br/>
<a href="CppComment.htm">//</a> (2,(23,1)), string_pos 8 <a href="CppOperatorMinus.htm">-</a>&gt; (2,24)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^&nbsp;&nbsp; EXIT1<br/>
<a href="CppComment.htm">//</a> (1,(20,5)), string_pos 2 <a href="CppOperatorMinus.htm">-</a>&gt; [empty]<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; ^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXIT-2<br/>
<a href="CppComment.htm">//</a> (1,(1,1)), string_pos 2 <a href="CppOperatorMinus.htm">-</a>&gt; [empty]<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp; ^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXIT-2<br/>
<a href="CppComment.htm">//</a> (1,(1,1)), string_pos 5 <a href="CppOperatorMinus.htm">-</a>&gt; (1,2)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EXIT-2<br/>
<a href="CppComment.htm">//</a> (1,(1,1)), string_pos 7 <a href="CppOperatorMinus.htm">-</a>&gt; (1,2)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;&nbsp;&nbsp;&nbsp;EXIT-1<br/>
<a href="CppComment.htm">//</a> ((1,2,3),3), string_pos 3 <a href="CppOperatorMinus.htm">-</a>&gt; (3,3) <a href="CppComment.htm">//</a>Might be incorrect: <a href="CppAlgorithm.htm">algorithm</a> holds <b><a href="CppFor.htm">for</a></b> two numbers between brackets<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;^<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::TermIsOne(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_v.size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(new_<a href="CppNewick.htm">newick</a>.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_v[i] <a href="CppOperatorEqual.htm">==</a> 1); <a href="CppComment.htm">//</a>Must be a 1<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> open_bracket_left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> IsOpenBracketLeft(i);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> close_bracket_right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> IsCloseBracketRight(i);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (open_bracket_left <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> close_bracket_right <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find other_value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> other_value <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If adjecent to the left is a comma<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> and subsequently a value,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i &gt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_v[i-1]&nbsp;&nbsp;&gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_value <a href="CppOperatorAssign.htm">=</a> m_v[i-1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorPlus.htm">+</a> 1 &lt; sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_v[i+1]&nbsp;&nbsp;&gt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_value <a href="CppOperatorAssign.htm">=</a> m_v[i+1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(other_value <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> LoseBrackets(other_value,i);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Return an empty <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::Sort()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> _WIN32<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>g<a href="CppOperatorIncrement.htm">++</a> has some trouble with type conversions<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator Iter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Iter b <a href="CppOperatorAssign.htm">=</a> m_v.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Iter e <a href="CppOperatorAssign.htm">=</a> m_v.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v <a href="CppOperatorAssign.htm">=</a> Sort(b,e);<br/>
&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v <a href="CppOperatorAssign.htm">=</a> Sort(m_v.begin(),m_v.end());<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::Sort(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator b,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator e) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> level <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v_sub;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator b_sub(e); <a href="CppComment.htm">//</a>e, because g<a href="CppOperatorIncrement.htm">++</a> does not allow a null<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator i <a href="CppOperatorAssign.htm">=</a> b; i<a href="CppOperatorNotEqual.htm">!=</a>e; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> *i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorEqual.htm">==</a> <a href="CppNewick.htm">Newick</a>::bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>level;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (level <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>i+1, because the branch starts directly after the bracket open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b_sub <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorPlus.htm">+</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorEqual.htm">==</a> <a href="CppNewick.htm">Newick</a>::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (level <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>i, because the branch ends directly before the bracket open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(ToString(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(b_sub,i),<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v_sub.push_back(Sort(b_sub,i));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b_sub <a href="CppOperatorAssign.htm">=</a> e; <a href="CppComment.htm">//</a>e, because g<a href="CppOperatorIncrement.htm">++</a> does not allow a null<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>level;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (level<a href="CppOperatorEqual.htm">==</a>0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>x is a value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdFind.htm">std::find</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppStdBind1st.htm">std::bind1st</a>(<a href="CppStdEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppNewick.htm">Newick</a>::bracket_open)))<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> v.end()); <a href="CppComment.htm">//</a>v must not contain brackets open<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppStdFind.htm">std::find</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppStdBind1st.htm">std::bind1st</a>(<a href="CppStdEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppNewick.htm">Newick</a>::bracket_close)))<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> v.end()); <a href="CppComment.htm">//</a>v must not contain brackets close<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(v.begin(),v.end()); <a href="CppComment.htm">//</a>v only contains values<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(v_sub.begin(),v_sub.end(),<a href="CppNewick.htm">Newick</a>Compare);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Level 0 entries: " <a href="CppOperatorPlus.htm">+</a> ToString(v,<b><a href="CppFalse.htm">false</a></b>));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concatenate the values in v with the sorted branches in v_sub<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_subs <a href="CppOperatorAssign.htm">=</a> v_sub.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_subs; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Level 1 entries: " <a href="CppOperatorPlus.htm">+</a> ToString(<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v_sub[i].begin(),v_sub[i].end()),<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppNewick.htm">Newick</a>::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v_sub[i].begin(),v_sub[i].end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppNewick.htm">Newick</a>::bracket_close);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>("Sort to <a href="CppStdVector.htm">std::vector</a>: " <a href="CppOperatorPlus.htm">+</a> ToString(v,<b><a href="CppFalse.htm">false</a></b>));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e <a href="CppOperatorMinus.htm">-</a> b <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppSortedBinaryNewickVector.htm">SortedBinaryNewickVector</a>::<a href="CppNewick.htm">Newick</a>Compare(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> l_sz <a href="CppOperatorAssign.htm">=</a> lhs.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> r_sz <a href="CppOperatorAssign.htm">=</a> rhs.size();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (l_sz &lt; r_sz) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (l_sz &gt; r_sz) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::const_iterator Iter;<br/>
&nbsp;&nbsp;Iter lhs_iter <a href="CppOperatorAssign.htm">=</a> lhs.begin();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Iter lhs_end <a href="CppOperatorAssign.htm">=</a> lhs.end();<br/>
&nbsp;&nbsp;Iter rhs_iter <a href="CppOperatorAssign.htm">=</a> rhs.begin();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; lhs_iter <a href="CppOperatorNotEqual.htm">!=</a> lhs_end; <a href="CppOperatorIncrement.htm">++</a>lhs_iter, <a href="CppOperatorIncrement.htm">++</a>rhs_iter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_l <a href="CppOperatorAssign.htm">=</a> *lhs_iter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_r <a href="CppOperatorAssign.htm">=</a> *rhs_iter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x_l &lt; x_r) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x_l &gt; x_r) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
