<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Bristol</title>
  <meta name="description" content="C++ Bristol"/>
  <meta name="keywords" content="C++ Bristol "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ProjectBristol.htm">Bristol</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.694 at Fri Jan  2 09:59:57 2015
 -->
<p><a href="ProjectBristol.htm">The Bristol Project</a> was my third student project. It took place at the <a href="http://www.bristol.ac.uk/biology/">School of Biological Sciences</a> at the <a href="http://www.bristol.ac.uk/">University of Bristol</a> in the UK.</p>
<p>&nbsp;</p>
<p>The goal of <a href="ProjectBristol.htm">The Bristol Project</a> was to investigate the influence of phenotypic plasticity on population dynamics.</p>
<p>&nbsp;</p>
<p><a href="ProjectBristol.htm">The Bristol Project</a> has been developed by:</p>
<ul>
  <li><a href="http://seis.bris.ac.uk/~bzrjhp/index.html">Robert JH Payne</a>: supervisor, expert knowledge</li>
  <li><a href="http://www.richelbilderbeek.nl/">Richel Bilderbeek</a>: student,programmer</li>
</ul>
<p>&nbsp;</p>
<p><a href="ProjectBristol.htm">The Bristol Project</a> lasted from about May 2005 to about the 12th of August of 2005.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="ProjectBristolReport.pdf">Download the 'The Bristol Project' report (pdf)</a></li>
  <li><a href="ProjectBristolSource_1_0.zip">Download the 'The Bristol Project' source code (zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/ComputerGenerated.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/ComputerGenerated.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;ComputerGenerated<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 30 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "Sim4Interpreter.h"<br/>
<a href="CppInclude.htm">#include</a> "OptionsFile.h"<br/>
<a href="CppInclude.htm">#include</a> "SimulationFile.h"<br/>
<br/>
<a href="CppComment.htm">//</a>Below, only computer generated code...<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;COMPUTER GENERATED CODE<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetD<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setD<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation D's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation D's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation D's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setD<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetF<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setF<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation F's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation F's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation F's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setF<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetG<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setG<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation G's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation G's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation G's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setG<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetM<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setM<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation M's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation M's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation M's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setM<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetN<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setN<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation N's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation N's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation N's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setN<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetP<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setP<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation P's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation P's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation P's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setP<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetQ<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQ<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation Q's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation Q's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation Q's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setQ<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetR<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setR<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation R's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation R's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation R's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setR<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetW<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setW<b><a href="CppConst.htm">const</a></b>A' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation W's parameter A." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>A=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>A)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstA [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation W's parameter A as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>A&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstA [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation W's parameter A to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>A 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setW<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>A);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetD<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setD<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation D's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation D's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation D's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setD<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetF<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setF<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation F's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation F's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation F's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setF<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetG<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setG<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation G's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation G's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation G's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setG<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetM<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setM<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation M's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation M's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation M's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setM<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetN<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setN<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation N's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation N's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation N's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setN<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetP<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setP<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation P's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation P's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation P's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setP<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetQ<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQ<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation Q's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation Q's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation Q's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setQ<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetR<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setR<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation R's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation R's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation R's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setR<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetW<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setW<b><a href="CppConst.htm">const</a></b>B' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation W's parameter B." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>B=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>B)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstB [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation W's parameter B as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>B&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstB [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation W's parameter B to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>B 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setW<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>B);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetD<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setD<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation D's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation D's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation D's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setD<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetF<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setF<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation F's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation F's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation F's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setF<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetG<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setG<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation G's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation G's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation G's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setG<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetM<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setM<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation M's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation M's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation M's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setM<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetN<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setN<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation N's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation N's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation N's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setN<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetP<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setP<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation P's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation P's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation P's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setP<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetQ<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQ<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation Q's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation Q's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation Q's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setQ<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetR<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setR<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation R's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation R's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation R's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setR<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetW<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setW<b><a href="CppConst.htm">const</a></b>C' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation W's parameter C." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>C=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>C)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstC [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation W's parameter C as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>C&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstC [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation W's parameter C to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>C 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setW<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>C);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetD<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setD<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation D's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation D's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation D's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setD<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetF<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setF<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation F's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation F's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation F's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setF<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetG<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setG<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation G's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation G's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation G's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setG<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetM<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setM<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation M's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation M's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation M's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setM<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetN<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setN<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation N's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation N's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation N's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setN<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetP<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setP<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation P's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation P's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation P's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setP<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetQ<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQ<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation Q's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation Q's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation Q's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setQ<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetR<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setR<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation R's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation R's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation R's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setR<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetW<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setW<b><a href="CppConst.htm">const</a></b>D' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation W's parameter D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>D=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>D)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstD [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation W's parameter D as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>D&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstD [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation W's parameter D to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>D 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setW<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>D);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetD<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setD<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation D's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation D's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setDConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation D's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setD<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>D<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetF<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setF<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation F's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation F's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setFConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation F's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setF<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>F<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetG<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setG<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation G's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation G's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setGConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation G's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setG<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>G<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetM<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setM<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation M's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation M's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setMConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation M's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setM<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>M<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetN<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setN<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation N's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation N's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setNConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation N's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setN<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>N<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetP<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setP<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation P's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation P's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation P's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setP<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>P<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetQ<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQ<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation Q's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation Q's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation Q's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setQ<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>Q<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetR<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setR<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation R's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation R's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setRConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation R's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setR<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>R<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetW<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)										<br/>
{																											<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())																			<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setW<b><a href="CppConst.htm">const</a></b>E' only																		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the VALUE of equation W's parameter E." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];														<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>E=-1.0;																					<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>E)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstE [non-<b><a href="CppDouble.htm">double</a></b>]'																<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please specify the value of equation W's parameter E as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																					<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
																											<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>E&lt;0.0)																						<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWConstE [non-posive <b><a href="CppDouble.htm">double</a></b>]'														<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																				<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please set the VALUE of equation W's parameter E to a POSITIVE number." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW<b><a href="CppConst.htm">const</a></b>E 1.5'"	<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>											<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																		<br/>
		<b><a href="CppReturn.htm">return</a></b>;																								<br/>
	}																										<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user													<br/>
	mOptionsFile.setW<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppNew.htm">new</a></b>W<b><a href="CppConst.htm">const</a></b>E);																	<br/>
}																											<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------						<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> COMPUTER GENERATED CODE<br/>
<a href="CppComment.htm">//</a> OptionsFile<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;COMPUTER GENERATED CODE<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setD<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's D constant A to 'D<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setD<b><a href="CppConst.htm">const</a></b>A(D<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation D's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setD<b><a href="CppConst.htm">const</a></b>A(D<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation D's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setF<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's F constant A to 'F<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setF<b><a href="CppConst.htm">const</a></b>A(F<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation F's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setF<b><a href="CppConst.htm">const</a></b>A(F<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation F's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setG<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's G constant A to 'G<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setG<b><a href="CppConst.htm">const</a></b>A(G<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation G's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setG<b><a href="CppConst.htm">const</a></b>A(G<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation G's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setM<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's M constant A to 'M<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setM<b><a href="CppConst.htm">const</a></b>A(M<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation M's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setM<b><a href="CppConst.htm">const</a></b>A(M<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation M's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setN<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's N constant A to 'N<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setN<b><a href="CppConst.htm">const</a></b>A(N<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation N's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setN<b><a href="CppConst.htm">const</a></b>A(N<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation N's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setP<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's P constant A to 'P<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setP<b><a href="CppConst.htm">const</a></b>A(P<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation P's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setP<b><a href="CppConst.htm">const</a></b>A(P<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation P's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setQ<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's Q constant A to 'Q<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setQ<b><a href="CppConst.htm">const</a></b>A(Q<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation Q's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setQ<b><a href="CppConst.htm">const</a></b>A(Q<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation Q's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setR<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's R constant A to 'R<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setR<b><a href="CppConst.htm">const</a></b>A(R<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation R's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setR<b><a href="CppConst.htm">const</a></b>A(R<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation R's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setW<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>A)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's W constant A to 'W<b><a href="CppConst.htm">const</a></b>A'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setW<b><a href="CppConst.htm">const</a></b>A(W<b><a href="CppConst.htm">const</a></b>A);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation W's, constant A' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setW<b><a href="CppConst.htm">const</a></b>A(W<b><a href="CppConst.htm">const</a></b>A);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation W's, constant A' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setD<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's D constant B to 'D<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setD<b><a href="CppConst.htm">const</a></b>B(D<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation D's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setD<b><a href="CppConst.htm">const</a></b>B(D<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation D's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setF<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's F constant B to 'F<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setF<b><a href="CppConst.htm">const</a></b>B(F<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation F's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setF<b><a href="CppConst.htm">const</a></b>B(F<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation F's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setG<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's G constant B to 'G<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setG<b><a href="CppConst.htm">const</a></b>B(G<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation G's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setG<b><a href="CppConst.htm">const</a></b>B(G<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation G's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setM<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's M constant B to 'M<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setM<b><a href="CppConst.htm">const</a></b>B(M<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation M's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setM<b><a href="CppConst.htm">const</a></b>B(M<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation M's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setN<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's N constant B to 'N<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setN<b><a href="CppConst.htm">const</a></b>B(N<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation N's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setN<b><a href="CppConst.htm">const</a></b>B(N<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation N's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setP<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's P constant B to 'P<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setP<b><a href="CppConst.htm">const</a></b>B(P<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation P's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setP<b><a href="CppConst.htm">const</a></b>B(P<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation P's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setQ<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's Q constant B to 'Q<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setQ<b><a href="CppConst.htm">const</a></b>B(Q<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation Q's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setQ<b><a href="CppConst.htm">const</a></b>B(Q<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation Q's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setR<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's R constant B to 'R<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setR<b><a href="CppConst.htm">const</a></b>B(R<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation R's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setR<b><a href="CppConst.htm">const</a></b>B(R<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation R's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setW<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>B)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's W constant B to 'W<b><a href="CppConst.htm">const</a></b>B'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setW<b><a href="CppConst.htm">const</a></b>B(W<b><a href="CppConst.htm">const</a></b>B);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation W's, constant B' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setW<b><a href="CppConst.htm">const</a></b>B(W<b><a href="CppConst.htm">const</a></b>B);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation W's, constant B' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setD<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's D constant C to 'D<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setD<b><a href="CppConst.htm">const</a></b>C(D<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation D's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setD<b><a href="CppConst.htm">const</a></b>C(D<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation D's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setF<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's F constant C to 'F<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setF<b><a href="CppConst.htm">const</a></b>C(F<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation F's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setF<b><a href="CppConst.htm">const</a></b>C(F<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation F's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setG<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's G constant C to 'G<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setG<b><a href="CppConst.htm">const</a></b>C(G<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation G's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setG<b><a href="CppConst.htm">const</a></b>C(G<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation G's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setM<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's M constant C to 'M<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setM<b><a href="CppConst.htm">const</a></b>C(M<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation M's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setM<b><a href="CppConst.htm">const</a></b>C(M<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation M's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setN<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's N constant C to 'N<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setN<b><a href="CppConst.htm">const</a></b>C(N<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation N's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setN<b><a href="CppConst.htm">const</a></b>C(N<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation N's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setP<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's P constant C to 'P<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setP<b><a href="CppConst.htm">const</a></b>C(P<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation P's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setP<b><a href="CppConst.htm">const</a></b>C(P<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation P's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setQ<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's Q constant C to 'Q<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setQ<b><a href="CppConst.htm">const</a></b>C(Q<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation Q's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setQ<b><a href="CppConst.htm">const</a></b>C(Q<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation Q's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setR<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's R constant C to 'R<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setR<b><a href="CppConst.htm">const</a></b>C(R<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation R's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setR<b><a href="CppConst.htm">const</a></b>C(R<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation R's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setW<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>C)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's W constant C to 'W<b><a href="CppConst.htm">const</a></b>C'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setW<b><a href="CppConst.htm">const</a></b>C(W<b><a href="CppConst.htm">const</a></b>C);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation W's, constant C' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setW<b><a href="CppConst.htm">const</a></b>C(W<b><a href="CppConst.htm">const</a></b>C);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation W's, constant C' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setD<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's D constant D to 'D<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setD<b><a href="CppConst.htm">const</a></b>D(D<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation D's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setD<b><a href="CppConst.htm">const</a></b>D(D<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation D's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setF<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's F constant D to 'F<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setF<b><a href="CppConst.htm">const</a></b>D(F<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation F's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setF<b><a href="CppConst.htm">const</a></b>D(F<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation F's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setG<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's G constant D to 'G<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setG<b><a href="CppConst.htm">const</a></b>D(G<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation G's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setG<b><a href="CppConst.htm">const</a></b>D(G<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation G's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setM<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's M constant D to 'M<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setM<b><a href="CppConst.htm">const</a></b>D(M<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation M's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setM<b><a href="CppConst.htm">const</a></b>D(M<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation M's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setN<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's N constant D to 'N<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setN<b><a href="CppConst.htm">const</a></b>D(N<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation N's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setN<b><a href="CppConst.htm">const</a></b>D(N<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation N's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setP<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's P constant D to 'P<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setP<b><a href="CppConst.htm">const</a></b>D(P<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation P's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setP<b><a href="CppConst.htm">const</a></b>D(P<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation P's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setQ<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's Q constant D to 'Q<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setQ<b><a href="CppConst.htm">const</a></b>D(Q<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation Q's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setQ<b><a href="CppConst.htm">const</a></b>D(Q<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation Q's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setR<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's R constant D to 'R<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setR<b><a href="CppConst.htm">const</a></b>D(R<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation R's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setR<b><a href="CppConst.htm">const</a></b>D(R<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation R's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setW<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>D)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's W constant D to 'W<b><a href="CppConst.htm">const</a></b>D'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setW<b><a href="CppConst.htm">const</a></b>D(W<b><a href="CppConst.htm">const</a></b>D);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation W's, constant D' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setW<b><a href="CppConst.htm">const</a></b>D(W<b><a href="CppConst.htm">const</a></b>D);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation W's, constant D' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setD<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's D constant E to 'D<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setD<b><a href="CppConst.htm">const</a></b>E(D<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation D's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setD<b><a href="CppConst.htm">const</a></b>E(D<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation D's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setF<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's F constant E to 'F<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setF<b><a href="CppConst.htm">const</a></b>E(F<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation F's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setF<b><a href="CppConst.htm">const</a></b>E(F<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation F's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> F<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setG<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's G constant E to 'G<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setG<b><a href="CppConst.htm">const</a></b>E(G<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation G's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setG<b><a href="CppConst.htm">const</a></b>E(G<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation G's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> G<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setM<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's M constant E to 'M<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setM<b><a href="CppConst.htm">const</a></b>E(M<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation M's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setM<b><a href="CppConst.htm">const</a></b>E(M<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation M's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> M<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setN<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's N constant E to 'N<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setN<b><a href="CppConst.htm">const</a></b>E(N<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation N's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setN<b><a href="CppConst.htm">const</a></b>E(N<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation N's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> N<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setP<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's P constant E to 'P<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setP<b><a href="CppConst.htm">const</a></b>E(P<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation P's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setP<b><a href="CppConst.htm">const</a></b>E(P<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation P's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> P<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setQ<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's Q constant E to 'Q<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setQ<b><a href="CppConst.htm">const</a></b>E(Q<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation Q's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setQ<b><a href="CppConst.htm">const</a></b>E(Q<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation Q's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> Q<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setR<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's R constant E to 'R<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setR<b><a href="CppConst.htm">const</a></b>E(R<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation R's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setR<b><a href="CppConst.htm">const</a></b>E(R<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation R's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> R<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setW<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>E)										<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));&nbsp;&nbsp;<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all equation's W constant E to 'W<b><a href="CppConst.htm">const</a></b>E'									<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setW<b><a href="CppConst.htm">const</a></b>E(W<b><a href="CppConst.htm">const</a></b>E);&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set 'equation W's, constant E' of all Simulation Files to "			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setW<b><a href="CppConst.htm">const</a></b>E(W<b><a href="CppConst.htm">const</a></b>E);								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Set 'equation W's, constant E' of Simulation File #"				<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> W<b><a href="CppConst.htm">const</a></b>E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;		<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setD(<b><a href="CppConst.htm">const</a></b> EnumD&amp; <b><a href="CppEnum.htm">enum</a></b>D)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation D to '<b><a href="CppEnum.htm">enum</a></b>D'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setD(<b><a href="CppEnum.htm">enum</a></b>D);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation D of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>DtoString(<b><a href="CppEnum.htm">enum</a></b>D) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setD(<b><a href="CppEnum.htm">enum</a></b>D);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation D of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>DtoString(<b><a href="CppEnum.htm">enum</a></b>D)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setF(<b><a href="CppConst.htm">const</a></b> EnumF&amp; <b><a href="CppEnum.htm">enum</a></b>F)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation F to '<b><a href="CppEnum.htm">enum</a></b>F'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setF(<b><a href="CppEnum.htm">enum</a></b>F);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation F of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>FtoString(<b><a href="CppEnum.htm">enum</a></b>F) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setF(<b><a href="CppEnum.htm">enum</a></b>F);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation F of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>FtoString(<b><a href="CppEnum.htm">enum</a></b>F)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setG(<b><a href="CppConst.htm">const</a></b> EnumG&amp; <b><a href="CppEnum.htm">enum</a></b>G)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation G to '<b><a href="CppEnum.htm">enum</a></b>G'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setG(<b><a href="CppEnum.htm">enum</a></b>G);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation G of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>GtoString(<b><a href="CppEnum.htm">enum</a></b>G) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setG(<b><a href="CppEnum.htm">enum</a></b>G);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation G of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>GtoString(<b><a href="CppEnum.htm">enum</a></b>G)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setM(<b><a href="CppConst.htm">const</a></b> EnumM&amp; <b><a href="CppEnum.htm">enum</a></b>M)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation M to '<b><a href="CppEnum.htm">enum</a></b>M'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setM(<b><a href="CppEnum.htm">enum</a></b>M);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation M of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>MtoString(<b><a href="CppEnum.htm">enum</a></b>M) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setM(<b><a href="CppEnum.htm">enum</a></b>M);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation M of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>MtoString(<b><a href="CppEnum.htm">enum</a></b>M)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setN(<b><a href="CppConst.htm">const</a></b> EnumN&amp; <b><a href="CppEnum.htm">enum</a></b>N)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation N to '<b><a href="CppEnum.htm">enum</a></b>N'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setN(<b><a href="CppEnum.htm">enum</a></b>N);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation N of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>NtoString(<b><a href="CppEnum.htm">enum</a></b>N) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setN(<b><a href="CppEnum.htm">enum</a></b>N);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation N of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>NtoString(<b><a href="CppEnum.htm">enum</a></b>N)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setP(<b><a href="CppConst.htm">const</a></b> EnumP&amp; <b><a href="CppEnum.htm">enum</a></b>P)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation P to '<b><a href="CppEnum.htm">enum</a></b>P'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setP(<b><a href="CppEnum.htm">enum</a></b>P);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation P of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>PtoString(<b><a href="CppEnum.htm">enum</a></b>P) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setP(<b><a href="CppEnum.htm">enum</a></b>P);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation P of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>PtoString(<b><a href="CppEnum.htm">enum</a></b>P)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setQ(<b><a href="CppConst.htm">const</a></b> EnumQ&amp; <b><a href="CppEnum.htm">enum</a></b>Q)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation Q to '<b><a href="CppEnum.htm">enum</a></b>Q'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setQ(<b><a href="CppEnum.htm">enum</a></b>Q);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation Q of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppQt.htm">Qt</a>oString(<b><a href="CppEnum.htm">enum</a></b>Q) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setQ(<b><a href="CppEnum.htm">enum</a></b>Q);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation Q of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppQt.htm">Qt</a>oString(<b><a href="CppEnum.htm">enum</a></b>Q)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setR(<b><a href="CppConst.htm">const</a></b> EnumR&amp; <b><a href="CppEnum.htm">enum</a></b>R)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation R to '<b><a href="CppEnum.htm">enum</a></b>R'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setR(<b><a href="CppEnum.htm">enum</a></b>R);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation R of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>RtoString(<b><a href="CppEnum.htm">enum</a></b>R) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setR(<b><a href="CppEnum.htm">enum</a></b>R);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation R of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>RtoString(<b><a href="CppEnum.htm">enum</a></b>R)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setW(<b><a href="CppConst.htm">const</a></b> EnumW&amp; <b><a href="CppEnum.htm">enum</a></b>W)												<br/>
{																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));	<br/>
																							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)																	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's equation W to '<b><a href="CppEnum.htm">enum</a></b>W'											<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setW(<b><a href="CppEnum.htm">enum</a></b>W);			<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation W of all Simulation Files to "							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>WtoString(<b><a href="CppEnum.htm">enum</a></b>W) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>																					<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{																						<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSimulationFile[mUsesSimFile].setW(<b><a href="CppEnum.htm">enum</a></b>W);										<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>															<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Set equation W of Simulation File #"								<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>WtoString(<b><a href="CppEnum.htm">enum</a></b>W)							<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;													<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}																						<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> COMPUTER GENERATED CODE<br/>
<a href="CppComment.htm">//</a> SimulationFile<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;COMPUTER GENERATED CODE<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setD<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsD.A <a href="CppOperatorAssign.htm">=</a> D<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setF<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsF.A <a href="CppOperatorAssign.htm">=</a> F<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setG<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsG.A <a href="CppOperatorAssign.htm">=</a> G<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setM<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsM.A <a href="CppOperatorAssign.htm">=</a> M<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setN<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsN.A <a href="CppOperatorAssign.htm">=</a> N<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setP<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsP.A <a href="CppOperatorAssign.htm">=</a> P<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setQ<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsQ.A <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setR<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsR.A <a href="CppOperatorAssign.htm">=</a> R<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setW<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>A)									<br/>
{																						<br/>
	mParameters.paramsW.A <a href="CppOperatorAssign.htm">=</a> W<b><a href="CppConst.htm">const</a></b>A;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setD<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsD.B <a href="CppOperatorAssign.htm">=</a> D<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setF<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsF.B <a href="CppOperatorAssign.htm">=</a> F<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setG<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsG.B <a href="CppOperatorAssign.htm">=</a> G<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setM<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsM.B <a href="CppOperatorAssign.htm">=</a> M<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setN<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsN.B <a href="CppOperatorAssign.htm">=</a> N<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setP<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsP.B <a href="CppOperatorAssign.htm">=</a> P<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setQ<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsQ.B <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setR<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsR.B <a href="CppOperatorAssign.htm">=</a> R<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setW<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>B)									<br/>
{																						<br/>
	mParameters.paramsW.B <a href="CppOperatorAssign.htm">=</a> W<b><a href="CppConst.htm">const</a></b>B;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setD<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsD.C <a href="CppOperatorAssign.htm">=</a> D<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setF<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsF.C <a href="CppOperatorAssign.htm">=</a> F<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setG<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsG.C <a href="CppOperatorAssign.htm">=</a> G<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setM<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsM.C <a href="CppOperatorAssign.htm">=</a> M<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setN<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsN.C <a href="CppOperatorAssign.htm">=</a> N<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setP<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsP.C <a href="CppOperatorAssign.htm">=</a> P<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setQ<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsQ.C <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setR<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsR.C <a href="CppOperatorAssign.htm">=</a> R<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setW<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>C)									<br/>
{																						<br/>
	mParameters.paramsW.C <a href="CppOperatorAssign.htm">=</a> W<b><a href="CppConst.htm">const</a></b>C;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setD<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsD.D <a href="CppOperatorAssign.htm">=</a> D<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setF<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsF.D <a href="CppOperatorAssign.htm">=</a> F<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setG<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsG.D <a href="CppOperatorAssign.htm">=</a> G<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setM<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsM.D <a href="CppOperatorAssign.htm">=</a> M<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setN<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsN.D <a href="CppOperatorAssign.htm">=</a> N<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setP<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsP.D <a href="CppOperatorAssign.htm">=</a> P<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setQ<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsQ.D <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setR<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsR.D <a href="CppOperatorAssign.htm">=</a> R<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setW<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>D)									<br/>
{																						<br/>
	mParameters.paramsW.D <a href="CppOperatorAssign.htm">=</a> W<b><a href="CppConst.htm">const</a></b>D;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setD<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; D<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsD.E <a href="CppOperatorAssign.htm">=</a> D<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setF<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; F<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsF.E <a href="CppOperatorAssign.htm">=</a> F<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setG<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; G<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsG.E <a href="CppOperatorAssign.htm">=</a> G<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setM<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; M<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsM.E <a href="CppOperatorAssign.htm">=</a> M<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setN<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; N<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsN.E <a href="CppOperatorAssign.htm">=</a> N<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setP<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; P<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsP.E <a href="CppOperatorAssign.htm">=</a> P<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setQ<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; Q<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsQ.E <a href="CppOperatorAssign.htm">=</a> Q<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setR<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; R<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsR.E <a href="CppOperatorAssign.htm">=</a> R<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setW<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; W<b><a href="CppConst.htm">const</a></b>E)									<br/>
{																						<br/>
	mParameters.paramsW.E <a href="CppOperatorAssign.htm">=</a> W<b><a href="CppConst.htm">const</a></b>E;													<br/>
	writeToFile();																		<br/>
}																						<br/>
<a href="CppComment.htm">//</a>------------------------------------------------------------------------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp; <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Enumerations.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Enumerations.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Enumerations.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Wed Jun 01 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __ENUMERATIONS_H<br/>
<a href="CppDefine.htm">#define</a> __ENUMERATIONS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumD<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b><br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumF<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b><br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumG<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>Gplastic,<br/>
	<b><a href="CppEnum.htm">enum</a></b>Gconstant<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumM<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b>,<br/>
	<b><a href="CppEnum.htm">enum</a></b>Mconstant<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumN<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>Nplastic,<br/>
	<b><a href="CppEnum.htm">enum</a></b>Nconstant<br/>
};<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>NtoString(<b><a href="CppConst.htm">const</a></b> EnumN&amp;);<br/>
EnumN stringToEnumN(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumP<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>Pplastic,<br/>
	<b><a href="CppEnum.htm">enum</a></b>Pconstant<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumQ<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>,<br/>
	<b><a href="CppEnum.htm">enum</a></b>Qconstant<br/>
};<br/>
<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumR<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>Rconstant,<br/>
	<b><a href="CppEnum.htm">enum</a></b>Rlogistic,<br/>
	<b><a href="CppEnum.htm">enum</a></b>Rcosine<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumW<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>Wzero,<br/>
	<b><a href="CppEnum.htm">enum</a></b>Wuniform<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumReproductionMode<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction,<br/>
	<b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount<br/>
};<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> Enum<a href="CppInitialize.htm">Initialization</a>Mode<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeSame,<br/>
	<b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeUniform<br/>
};<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModetoString(<b><a href="CppConst.htm">const</a></b> Enum<a href="CppInitialize.htm">Initialization</a>Mode&amp;);<br/>
Enum<a href="CppInitialize.htm">Initialization</a>Mode stringToEnum<a href="CppInitialize.htm">Initialization</a>Mode(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<br/>
<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumConclusion<br/>
{<br/>
	CcNoError,<br/>
	CcNoOffspringProduced,<br/>
	CcPopExtinct,<br/>
	CcPopSizeTooBig,<br/>
	CcNoffspringTooBigSingleParent,<br/>
	CcNoffspringTooBigAllParents,<br/>
	CcMeanPopSizeSmall,<br/>
	CcMeanPopSizeLarge,<br/>
	CcMeanBodySizeSmall,<br/>
	CcMeanBodySizeLarge,<br/>
	CcChanceToDieSmall,<br/>
	CcChanceToDieLarge,<br/>
	CcFractionBiomassPerOffspringInitialLarge<br/>
};<br/>
<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumErrorCode<br/>
{<br/>
	EcNoError,<br/>
	EcPopExtinct,<br/>
	EcPopSizeTooBig,<br/>
	EcNoffspringTooBigSingleParent,<br/>
	EcNoffspringTooBigAllParents<br/>
};<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>DtoString(<b><a href="CppConst.htm">const</a></b> EnumD&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>FtoString(<b><a href="CppConst.htm">const</a></b> EnumF&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>GtoString(<b><a href="CppConst.htm">const</a></b> EnumG&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>MtoString(<b><a href="CppConst.htm">const</a></b> EnumM&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>PtoString(<b><a href="CppConst.htm">const</a></b> EnumP&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppQt.htm">Qt</a>oString(<b><a href="CppConst.htm">const</a></b> EnumQ&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>RtoString(<b><a href="CppConst.htm">const</a></b> EnumR&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>WtoString(<b><a href="CppConst.htm">const</a></b> EnumW&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>ConclusionToString(<b><a href="CppConst.htm">const</a></b> EnumConclusion&amp;);<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeToString(<b><a href="CppConst.htm">const</a></b> EnumReproductionMode&amp;);<br/>
<br/>
EnumD stringToEnumD(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
EnumF stringToEnumF(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
EnumG stringToEnumG(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
EnumM stringToEnumM(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
EnumP stringToEnumP(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
EnumQ stringToEnumQ(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
EnumR stringToEnumR(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
EnumW stringToEnumW(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
EnumReproductionMode stringToEnumReproductionMode(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<br/>
EnumD userInputToEnumD(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumF userInputToEnumF(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumG userInputToEnumG(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumM userInputToEnumM(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumN userInputToEnumN(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumP userInputToEnumP(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumQ userInputToEnumQ(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumR userInputToEnumR(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumW userInputToEnumW(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
EnumReproductionMode userInputToEnumReproductionMode(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
<a href="CppComment.htm">//</a>Misc<br/>
<b><a href="CppVoid.htm">void</a></b> coutConclusions(<a href="CppStdVector.htm">std::vector</a>&lt;EnumConclusion&gt;&amp;);<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __ENUMERATIONS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Enumerations.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Enumerations.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Enumerations<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue Jun 07 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "Enumerations.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> EnumD<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>DtoString(<b><a href="CppConst.htm">const</a></b> EnumD&amp; <b><a href="CppEnum.htm">enum</a></b>D)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>D)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>";<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>DsizeOnly: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>DsizeOnly";<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Dconstant: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Dconstant";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in '<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>DToString(<b><a href="CppConst.htm">const</a></b> EnumD&amp; <b><a href="CppEnum.htm">enum</a></b>D)'");<br/>
	exit(1);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumD stringToEnumD(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>;<br/>
	<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>DsizeOnly") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>DsizeOnly;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Dconstant") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>; <a href="CppComment.htm">//</a>Backwards compatible<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in 'EnumD StringToEnumD(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumD userInputToEnumD(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>;<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Dconstant;<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>DsizeOnly;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumD");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> EnumF<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>FtoString(<b><a href="CppConst.htm">const</a></b> EnumF&amp; <b><a href="CppEnum.htm">enum</a></b>F)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>F)<br/>
	{<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Fgauss: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Fgauss";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>";<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Fconstant: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Fconstant";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in '<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>FToString(<b><a href="CppConst.htm">const</a></b> EnumF&amp; <b><a href="CppEnum.htm">enum</a></b>F)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumF stringToEnumF(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Fgauss") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Fgauss;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Fconstant") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR: myString equals: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myString <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in 'EnumF StringToEnumF(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumF userInputToEnumF(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
<a href="CppComment.htm">//</a>		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Fconstant;<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>;<br/>
<a href="CppComment.htm">//</a>		<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Fgauss;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumF");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> EnumG<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>GtoString(<b><a href="CppConst.htm">const</a></b> EnumG&amp; <b><a href="CppEnum.htm">enum</a></b>G)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>G)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Gplastic: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Gplastic";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Gconstant: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Gconstant";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in '<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>GToString(<b><a href="CppConst.htm">const</a></b> EnumG&amp; <b><a href="CppEnum.htm">enum</a></b>G)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumG stringToEnumG(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Gplastic") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Gplastic;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Gconstant") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Gconstant;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Gfixed") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Gconstant; <a href="CppComment.htm">//</a>Backwards compatible<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in 'EnumG StringToEnumG(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumG userInputToEnumG(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Gconstant;<br/>
		<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Gplastic;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumG");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> EnumM<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>MtoString(<b><a href="CppConst.htm">const</a></b> EnumM&amp; <b><a href="CppEnum.htm">enum</a></b>M)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>M)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b> : <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b>";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Mconstant: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Mconstant";<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Mzero: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Mzero";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>MtoString(<b><a href="CppConst.htm">const</a></b> EnumM&amp; <b><a href="CppEnum.htm">enum</a></b>M)");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumM stringToEnumM(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b>") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b>;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Mconstant") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Mconstant;<br/>
	<a href="CppAssert.htm">assert</a>(!"EnumM StringToEnumM(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumM userInputToEnumM(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Mconstant;<br/>
		<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b>;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumM");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> EnumN<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>NtoString(<b><a href="CppConst.htm">const</a></b> EnumN&amp; <b><a href="CppEnum.htm">enum</a></b>N)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>N)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Nplastic : <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Nplastic";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Nconstant: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Nconstant";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown value of <b><a href="CppEnum.htm">enum</a></b>N");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumN stringToEnumN(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Nplastic") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Nplastic;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Nconstant") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Nconstant;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>N<b><a href="CppDefault.htm">default</a></b>") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Nplastic; <a href="CppComment.htm">//</a>Backwards compatibility<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR: myString equals: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myString <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppAssert.htm">assert</a>(!("Cannot <a href="CppConvert.htm">convert</a> myString to <b><a href="CppEnum.htm">enum</a></b>N"));<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumN userInputToEnumN(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Nplastic;<br/>
		<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Nconstant;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumN");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> EnumP<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>PtoString(<b><a href="CppConst.htm">const</a></b> EnumP&amp; <b><a href="CppEnum.htm">enum</a></b>P)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>P)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Pplastic: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Pplastic";<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>PplasticB: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>PplasticB";<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>PnonPlastic: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>PnonPlastic";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Pconstant: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Pconstant";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in '<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>PToString(<b><a href="CppConst.htm">const</a></b> EnumP&amp; <b><a href="CppEnum.htm">enum</a></b>P)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumP stringToEnumP(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Pplastic") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Pplastic;<br/>
	<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>PplasticB") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>PplasticB;<br/>
	<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>PnonPlastic") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>PnonPlastic;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Pconstant") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Pconstant; <a href="CppComment.htm">//</a>Backwards compatible<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Pplastic") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Pplastic; <a href="CppComment.htm">//</a>Backwards compatible<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR in 'EnumP StringToEnumP(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myString <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumP userInputToEnumP(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Pconstant;<br/>
		<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Pplastic;<br/>
<a href="CppComment.htm">//</a>		<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>PplasticB;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnump");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;EnumQ<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppQt.htm">Qt</a>oString(<b><a href="CppConst.htm">const</a></b> EnumQ&amp; <b><a href="CppEnum.htm">enum</a></b>Q)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>Q)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Qconstant: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Qconstant";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in '<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>QToString(<b><a href="CppConst.htm">const</a></b> EnumQ&amp; <b><a href="CppEnum.htm">enum</a></b>Q)'");<br/>
	exit(1);<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumQ stringToEnumQ(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Qconstant") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Qconstant;<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in 'EnumQ StringToEnumQ(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumQ userInputToEnumQ(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Qconstant;<br/>
		<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumQ");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;EnumR<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>RtoString(<b><a href="CppConst.htm">const</a></b> EnumR&amp; <b><a href="CppEnum.htm">enum</a></b>R)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>R)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Rconstant: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Rconstant";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Rlogistic: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Rlogistic";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Rcosine&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Rcosine";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in '<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>RToString(<b><a href="CppConst.htm">const</a></b> EnumR&amp; <b><a href="CppEnum.htm">enum</a></b>R)'");<br/>
	exit(1);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumR stringToEnumR(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Rconstant") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Rconstant;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Rlogistic") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Rlogistic;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Rcosine") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Rcosine;<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in 'EnumR StringToEnumR(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumR userInputToEnumR(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Rconstant;<br/>
		<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Rlogistic;<br/>
		<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Rcosine;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumR");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;EnumW<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>WtoString(<b><a href="CppConst.htm">const</a></b> EnumW&amp; <b><a href="CppEnum.htm">enum</a></b>W)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>W)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Wzero: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Wzero";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Wuniform: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>Wuniform";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in '<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>WToString(<b><a href="CppConst.htm">const</a></b> EnumW&amp; <b><a href="CppEnum.htm">enum</a></b>W)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumW stringToEnumW(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Wzero") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Wzero;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>Wuniform") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Wuniform;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>WZero") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Wzero; <a href="CppComment.htm">//</a>Backwards compampatible<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>WUniform") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Wuniform; <a href="CppComment.htm">//</a>Backwards compatible<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>SigmaZero") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Wzero; <a href="CppComment.htm">//</a>Backwards compatible<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>SigmaUniform") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Wuniform; <a href="CppComment.htm">//</a>Backwards compatible<br/>
<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR: myString: '"<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myString <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown myString <b><a href="CppFor.htm">for</a></b> EnumW");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumW userInputToEnumW(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Wzero;<br/>
		<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>Wuniform;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumW");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> EnumReproductionMode<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeToString(<b><a href="CppConst.htm">const</a></b> EnumReproductionMode&amp; <b><a href="CppEnum.htm">enum</a></b>ReproductionMode)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>ReproductionMode)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown <b><a href="CppEnum.htm">enum</a></b>ReproductionMode");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumReproductionMode stringToEnumReproductionMode(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR: myString: '"<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myString <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown myString <b><a href="CppFor.htm">for</a></b> EnumReprodictionMode");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumReproductionMode userInputToEnumReproductionMode(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(index)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction;<br/>
		<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount;<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"Unknown index in userInputToEnumReproductionMode");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Enum<a href="CppInitialize.htm">Initialization</a>Mode<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModetoString(<b><a href="CppConst.htm">const</a></b> Enum<a href="CppInitialize.htm">Initialization</a>Mode&amp; <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>Mode)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>Mode)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeSame: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeSame";<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeUniform: <b><a href="CppReturn.htm">return</a></b> "<b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeUniform";<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"ERROR in '<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeToString(<b><a href="CppConst.htm">const</a></b> Enum<a href="CppInitialize.htm">Initialization</a>Mode&amp; <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>Mode)'");<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
Enum<a href="CppInitialize.htm">Initialization</a>Mode stringToEnum<a href="CppInitialize.htm">Initialization</a>Mode(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeSame") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeSame;<br/>
	<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>"<b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeUniform") <b><a href="CppReturn.htm">return</a></b> <b><a href="CppEnum.htm">enum</a></b><a href="CppInitialize.htm">Initialization</a>ModeUniform;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR in 'Enum<a href="CppInitialize.htm">Initialization</a>Mode StringToEnum<a href="CppInitialize.htm">Initialization</a>Mode(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	exit(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;EnumConclusion<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>ConclusionToString(<b><a href="CppConst.htm">const</a></b> EnumConclusion&amp; conclusion)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (conclusion)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> CcNoError: <br/>
			<b><a href="CppReturn.htm">return</a></b> "No error";<br/>
		<b><a href="CppCase.htm">case</a></b> CcPopExtinct : <br/>
			<b><a href="CppReturn.htm">return</a></b> "Population went extinct";<br/>
		<b><a href="CppCase.htm">case</a></b> CcPopSizeTooBig : <br/>
			<b><a href="CppReturn.htm">return</a></b> "Population size got too big";<br/>
		<b><a href="CppCase.htm">case</a></b> CcNoffspringTooBigSingleParent : <br/>
			<b><a href="CppReturn.htm">return</a></b> "A single parent created too much offspring, in G: increase a";<br/>
		<b><a href="CppCase.htm">case</a></b> CcNoffspringTooBigAllParents : <br/>
			<b><a href="CppReturn.htm">return</a></b> "All parents together created too much offspring, in G: increase a";<br/>
		<b><a href="CppCase.htm">case</a></b> CcNoOffspringProduced :<br/>
			<b><a href="CppReturn.htm">return</a></b> "No offspring produced";<br/>
		<b><a href="CppCase.htm">case</a></b> CcMeanPopSizeSmall:<br/>
			<b><a href="CppReturn.htm">return</a></b> "Mean population size was small";<br/>
		<b><a href="CppCase.htm">case</a></b> CcMeanPopSizeLarge:<br/>
			<b><a href="CppReturn.htm">return</a></b> "Mean population size was large";<br/>
		<b><a href="CppCase.htm">case</a></b> CcMeanBodySizeSmall:<br/>
			<b><a href="CppReturn.htm">return</a></b> "Mean Body size remained small";<br/>
		<b><a href="CppCase.htm">case</a></b> CcMeanBodySizeLarge:<br/>
			<b><a href="CppReturn.htm">return</a></b> "Mean Body size remained large";<br/>
		<b><a href="CppCase.htm">case</a></b> CcChanceToDieSmall:<br/>
			<b><a href="CppReturn.htm">return</a></b> "Mean chance to die small, in D: increase a and c, decrease b";<br/>
		<b><a href="CppCase.htm">case</a></b> CcChanceToDieLarge:<br/>
			<b><a href="CppReturn.htm">return</a></b> "Mean chance to die large, in D: decrease a and c, increase b";<br/>
		<b><a href="CppCase.htm">case</a></b> CcFractionBiomassPerOffspringInitialLarge:<br/>
			<b><a href="CppReturn.htm">return</a></b> "Mean Fraction Biomass Per Offspring Initail Large, decrease G, by decreasing a";<br/>
<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(!"UNKNOWN Enum used in EnumConclusionToString");<br/>
	exit(1);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> coutConclusions(<a href="CppStdVector.htm">std::vector</a>&lt;EnumConclusion&gt;&amp; conclusions)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nConclusions <a href="CppOperatorAssign.htm">=</a> conclusions.size();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Drawing " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> nConclusions <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " conclusions..." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nConclusions; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>ConclusionToString(conclusions[i]) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Experiment.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Experiment.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Experiment.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Fri Jun 17 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
/<a href="CppComment.htm">//</a> Goal of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b> is to <b><a href="CppDo.htm">do</a></b> all simulations contained in an OptionsFile<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __EXPERIMENT_H<br/>
<a href="CppDefine.htm">#define</a> __EXPERIMENT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppTime.htm">time</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "OptionsFile.h"<br/>
<a href="CppInclude.htm">#include</a> "Simulation.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Experiment<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	Experiment(<b><a href="CppConst.htm">const</a></b> OptionsFile&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> execute() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	<b><a href="CppConst.htm">const</a></b> OptionsFile mOptionsFile;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __EXPERIMENT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Experiment.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Experiment.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Experiment<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Fri Jun 17 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "Experiment.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
Experiment::Experiment(<b><a href="CppConst.htm">const</a></b> OptionsFile&amp; optionsFile) :<br/>
	mOptionsFile(optionsFile)<br/>
{<br/>
	<a href="CppComment.htm">//</a>How RAII can you get?<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Experiment::execute() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	clock_t <a href="CppTime.htm">time</a>Start <a href="CppOperatorAssign.htm">=</a> clock();<br/>
<br/>
	<a href="CppIfdef.htm">#ifdef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Starting experiment in NO DEBUG mode" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppPreElse.htm">#else</a><br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Starting experiment in DEBUG mode" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppEndif.htm">#endif</a><br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSims <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getNsimFiles();<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;EnumConclusion&gt; &gt; conclusions(nSims);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;MeasurementsTable&gt; measurements(nSims);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;SimulationFile&gt; simFile(nSims);<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSims; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\nSTARTING SIMULATION "<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>i<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>"/"<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>nSims<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>"\n\n";<br/>
		simFile[i]=mOptionsFile.getSimFile(i);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;Simulation&gt; pSimulation(<b><a href="CppNew.htm">new</a></b> Simulation(mOptionsFile,simFile[i]));<br/>
		pSimulation-&gt;execute(measurements[i],conclusions[i]);<br/>
	}<br/>
	<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSims; <a href="CppOperatorIncrement.htm">++</a>i) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\nDRAWING CONCLUSIONS "<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>i<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>"/"<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>nSims<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>"\n\n";<br/>
		drawConclusions(measurements[i],conclusions[i]);<br/>
		coutConclusions(conclusions[i]);<br/>
	}<br/>
	<br/>
	<a href="CppComment.htm">//</a>Saving measurements in output file<br/>
	<b><a href="CppIf.htm">if</a></b> (mOptionsFile.getDoWriteOutputFile()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <br/>
	{<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSims; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
		{<br/>
			<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> outputFile <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getOutputFileName(i);<br/>
			measurements[i].saveToSingleFile(outputFile);<br/>
			measurements[i].saveToMultipleFiles(outputFile);<br/>
		}<br/>
	}<br/>
<br/>
	clock_t <a href="CppTime.htm">time</a>End <a href="CppOperatorAssign.htm">=</a> clock();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Simulation took " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (diff<a href="CppTime.htm">time</a>(<a href="CppTime.htm">time</a>End,<a href="CppTime.htm">time</a>Start) <a href="CppOperatorDivide.htm">/</a> CLK_TCK) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " seconds." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Program ended..." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<br/>
	<a href="CppComment.htm">//</a>Plotting output graphically<br/>
	<b><a href="CppIf.htm">if</a></b> (mOptionsFile.getDoPlot()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) plotMeasurementsTable(measurements);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/FunctionsSingleton.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/FunctionsSingleton.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Wed May 25 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>The <a href="CppFunction.htm">function</a> of <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> is to embody all formulae used in the simulation<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>To be sure a simulation has only one set of formulae, I used the <a href="CppDesignPatternSingleton.htm">Singleton</a> pattern (ref. 1).<br/>
<a href="CppComment.htm">///</a>The different kinds of <a href="CppFunction.htm">function</a>s it can contain, are put in the Strategy Pattern (ref. 1).<br/>
<a href="CppComment.htm">///</a>The Strategy pattern uses polymorphism, therefore a <a href="CppPointer.htm">pointer</a> to the derived Strategy <b><a href="CppClass.htm">class</a></b>.<br/>
<a href="CppComment.htm">///</a>Instead of the standard 'evil' <a href="CppPointer.htm">pointer</a>, I used the <a href="CppStdAuto_ptr.htm">std::auto_ptr</a> (ref. 2)<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> is <b><a href="CppDefault.htm">default</a></b> <a href="CppInitialize.htm">initialize</a>d and later it is set with an SimulationFile.<br/>
<a href="CppComment.htm">///</a>The SoilMite <b><a href="CppClass.htm">class</a></b> has a <b><a href="CppStatic.htm">static</a></b> <a href="CppPointer.htm">pointer</a> to <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>, so all individuals always have the same mathematical behaviour<br/>
<a href="CppComment.htm">///</a>Before the <b><a href="CppClass.htm">class</a></b> Experiment executes a Simulation, it changes the <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> with a SimulationFile.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>References:<br/>
<a href="CppComment.htm">///</a>1) <a href="CppDesignPattern.htm">Design Pattern</a>s. By Erich Gamma, Ri<b><a href="CppChar.htm">char</a></b>d Helm, Ralph Johnson, John Vlissides. ISBN: 0-201-63361-2<br/>
<a href="CppComment.htm">///</a>2) <a href="CppException.htm">Exception</a>al <a href="Cpp.htm">C++</a>: 47 Engineering Puzzles, Programming Problems, and Solutions. By <a href="CppHerbSutter.htm">Herb Sutter</a>. ISBN: 0-201-61562-2<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __FUNCTIONS_SINGLETON_H<br/>
<a href="CppDefine.htm">#define</a> __FUNCTIONS_SINGLETON_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "StrategyD.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyF.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyG.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyM.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyN.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyP.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyQ.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyR.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyW.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Enumerations.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "SimulationFile.h"<br/>
<a href="CppInclude.htm">#include</a> "random.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a><br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppStatic.htm">static</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> * <a href="CppInstance.htm">instance</a>();<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpD.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpD-&gt;eval(s,v); }<br/>
	<b><a href="CppDouble.htm">double</a></b> F(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; r, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpF.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpF-&gt;eval(r,s); }<br/>
	<b><a href="CppDouble.htm">double</a></b> G(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpG.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpG-&gt;eval(f,v); }<br/>
	<b><a href="CppDouble.htm">double</a></b> M(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpM.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpM-&gt;eval(s,v); }<br/>
	<b><a href="CppDouble.htm">double</a></b> N(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpN.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpN-&gt;eval(f,v); }<br/>
	<b><a href="CppDouble.htm">double</a></b> P(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpP.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpP-&gt;eval(f,v); }<br/>
	<b><a href="CppDouble.htm">double</a></b> Q(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpQ.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpQ-&gt;eval(v); }<br/>
	<b><a href="CppDouble.htm">double</a></b> R(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; t) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpR.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpR-&gt;eval(x,t); }<br/>
	<b><a href="CppDouble.htm">double</a></b> W(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; equalShare) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mpW.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>); <b><a href="CppReturn.htm">return</a></b> mpW-&gt;eval(s,equalShare); }<br/>
<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::distributeResources(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<a href="CppComment.htm">/*</a> 01-08-2005: Replaced by eval()<br/>
	<b><a href="CppVoid.htm">void</a></b> distributeResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; totalResources, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; vectorResources) <b><a href="CppConst.htm">const</a></b> <br/>
	{ <br/>
		mpW-&gt;distributeResources(totalResources, vectorResources);<br/>
	}<a href="CppComment.htm">*/</a><br/>
<br/>
	<a href="CppComment.htm">//</a>Setting <a href="CppFunction.htm">function</a>s and their parameters<br/>
	<b><a href="CppVoid.htm">void</a></b> setD(<b><a href="CppConst.htm">const</a></b> EnumD&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetD*);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF(<b><a href="CppConst.htm">const</a></b> EnumF&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetF*);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG(<b><a href="CppConst.htm">const</a></b> EnumG&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetG*);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM(<b><a href="CppConst.htm">const</a></b> EnumM&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetM*);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN(<b><a href="CppConst.htm">const</a></b> EnumN&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetN*);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP(<b><a href="CppConst.htm">const</a></b> EnumP&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetP*);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ(<b><a href="CppConst.htm">const</a></b> EnumQ&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetQ*);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR(<b><a href="CppConst.htm">const</a></b> EnumR&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetR*);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW(<b><a href="CppConst.htm">const</a></b> EnumW&amp;, <b><a href="CppConst.htm">const</a></b> ParameterSetW*);<br/>
<br/>
	<a href="CppComment.htm">//</a>Getting the formulas<br/>
	<a href="CppStdString.htm">std::string</a> getD() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpD-&gt;getString(); }<br/>
	<a href="CppStdString.htm">std::string</a> getF() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpF-&gt;getString(); }<br/>
	<a href="CppStdString.htm">std::string</a> getG() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpG-&gt;getString(); }<br/>
	<a href="CppStdString.htm">std::string</a> getM() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpM-&gt;getString(); }<br/>
	<a href="CppStdString.htm">std::string</a> getN() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpN-&gt;getString(); }<br/>
	<a href="CppStdString.htm">std::string</a> getP() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpP-&gt;getString(); }<br/>
	<a href="CppStdString.htm">std::string</a> getQ() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpQ-&gt;getString(); }<br/>
	<a href="CppStdString.htm">std::string</a> getR() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpR-&gt;getString(); }<br/>
	<a href="CppStdString.htm">std::string</a> getW() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpW-&gt;getString(); }<br/>
<br/>
	<a href="CppComment.htm">//</a>Getting the formulas<br/>
	<a href="CppStdString.htm">std::string</a> getD(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpD-&gt;getString(s,v); }<br/>
	<a href="CppStdString.htm">std::string</a> getF(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; r, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpF-&gt;getString(r,s); }<br/>
	<a href="CppStdString.htm">std::string</a> getG(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpG-&gt;getString(f,v); }<br/>
	<a href="CppStdString.htm">std::string</a> getM(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpM-&gt;getString(s,v); }<br/>
	<a href="CppStdString.htm">std::string</a> getN(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpN-&gt;getString(f,v); }<br/>
	<a href="CppStdString.htm">std::string</a> getP(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpP-&gt;getString(f,v); }<br/>
	<a href="CppStdString.htm">std::string</a> getQ(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpQ-&gt;getString(v); }<br/>
	<a href="CppStdString.htm">std::string</a> getR(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; t) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mpR-&gt;getString(x,t); }<br/>
<br/>
	<a href="CppComment.htm">//</a>Environmental parameters<br/>
	<b><a href="CppDouble.htm">double</a></b> getAlpha() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mAlpha; }<br/>
	<b><a href="CppDouble.htm">double</a></b> getBeta()&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mBeta ; }<br/>
	<b><a href="CppDouble.htm">double</a></b> getGamma() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mGamma; }<br/>
	<b><a href="CppVoid.htm">void</a></b> setAlpha(<b><a href="CppDouble.htm">double</a></b>);<br/>
	<b><a href="CppVoid.htm">void</a></b> setBeta( <b><a href="CppDouble.htm">double</a></b>);<br/>
	<b><a href="CppVoid.htm">void</a></b> setGamma(<b><a href="CppDouble.htm">double</a></b>);<br/>
<br/>
	<a href="CppComment.htm">//</a>Misc<br/>
	<b><a href="CppVoid.htm">void</a></b> coutAll() <b><a href="CppConst.htm">const</a></b>;<br/>
	<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>();<br/>
<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	<b><a href="CppStatic.htm">static</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> * mpInstance;<br/>
	<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyDbase&gt; mpD;<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyFbase&gt; mpF;<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyGbase&gt; mpG;<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyMbase&gt; mpM;<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyNbase&gt; mpN;<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyPbase&gt; mpP;<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyQbase&gt; mpQ;<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyRbase&gt; mpR;<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyWbase&gt; mpW;<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> mAlpha, mBeta, mGamma;<br/>
<br/>
	<br/>
	<a href="CppComment.htm">//</a>Misc<br/>
	<b><a href="CppVoid.htm">void</a></b> processError(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __FUNCTIONS_SINGLETON_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/FunctionsSingleton.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/FunctionsSingleton.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a><a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Wed May 25 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> * <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::mpInstance <a href="CppOperatorAssign.htm">=</a> <a href="CppNULL.htm">NULL</a>;<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>() :<br/>
	mAlpha(0.0),<br/>
	mBeta( 0.0),<br/>
	mGamma(0.0)<br/>
{ <br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetD&gt; paramsD(<b><a href="CppNew.htm">new</a></b> ParameterSetD);<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetF&gt; paramsF(<b><a href="CppNew.htm">new</a></b> ParameterSetF);<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetG&gt; paramsG(<b><a href="CppNew.htm">new</a></b> ParameterSetG);<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetM&gt; paramsM(<b><a href="CppNew.htm">new</a></b> ParameterSetM);<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetN&gt; paramsN(<b><a href="CppNew.htm">new</a></b> ParameterSetN);<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetP&gt; paramsP(<b><a href="CppNew.htm">new</a></b> ParameterSetP);<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetQ&gt; paramsQ(<b><a href="CppNew.htm">new</a></b> ParameterSetQ);<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetR&gt; paramsR(<b><a href="CppNew.htm">new</a></b> ParameterSetR);<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetW&gt; paramsW(<b><a href="CppNew.htm">new</a></b> ParameterSetW);<br/>
	mpD.reset(<b><a href="CppNew.htm">new</a></b> StrategyD<b><a href="CppDefault.htm">default</a></b>(paramsD.get()));<br/>
	mpF.reset(<b><a href="CppNew.htm">new</a></b> StrategyF<b><a href="CppDefault.htm">default</a></b>(paramsF.get()));<br/>
	mpG.reset(<b><a href="CppNew.htm">new</a></b> StrategyGconstant(paramsG.get()));<br/>
	mpM.reset(<b><a href="CppNew.htm">new</a></b> StrategyM<b><a href="CppDefault.htm">default</a></b>(paramsM.get()));<br/>
	mpN.reset(<b><a href="CppNew.htm">new</a></b> StrategyNplastic(paramsN.get()));<br/>
	mpP.reset(<b><a href="CppNew.htm">new</a></b> StrategyPconstant(paramsP.get()));<br/>
	mpQ.reset(<b><a href="CppNew.htm">new</a></b> StrategyQ<b><a href="CppDefault.htm">default</a></b>(paramsQ.get()));<br/>
	mpR.reset(<b><a href="CppNew.htm">new</a></b> StrategyRconstant(paramsR.get()));<br/>
	mpW.reset(<b><a href="CppNew.htm">new</a></b> StrategyWzero(paramsW.get()));<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> * <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::<a href="CppInstance.htm">instance</a>()<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mpInstance<a href="CppOperatorEqual.htm">==</a><a href="CppNULL.htm">NULL</a>) mpInstance <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>();<br/>
	<b><a href="CppReturn.htm">return</a></b> mpInstance;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::distributeResources(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; popBodySize, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; totalResources) <b><a href="CppConst.htm">const</a></b> <br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> popBodySize.size();<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> equalShare <a href="CppOperatorAssign.htm">=</a> totalResources <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(popSize);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; resource(popSize);<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> sumResources <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		resource[i] <a href="CppOperatorAssign.htm">=</a> W(popBodySize[i],equalShare);<br/>
		sumResources<a href="CppOperatorPlusAssign.htm">+=</a>resource[i];<br/>
	}<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (sumResources&gt;totalResources)<br/>
	{<br/>
		<a href="CppComment.htm">//</a>Scale down<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> scale <a href="CppOperatorAssign.htm">=</a> totalResources <a href="CppOperatorDivide.htm">/</a> sumResources;<br/>
		<a href="CppAssert.htm">assert</a>(scale&lt;1.0);<br/>
		<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i) <br/>
		{<br/>
			resource[i] <a href="CppOperatorMultiplyAssign.htm">*=</a> scale;<br/>
		}<br/>
	}<br/>
<br/>
	<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
	<a href="CppComment.htm">//</a>Check again to be sure<br/>
	<b><a href="CppDouble.htm">double</a></b> sumResources<a href="CppDebug.htm">Debug</a> <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		sumResources<a href="CppOperatorPlusAssign.htm">+=</a>resource[i];<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(sumResources<a href="CppDebug.htm">Debug</a><a href="CppOperatorLessEqual.htm">&lt;=</a>sumResources);<br/>
	<a href="CppEndif.htm">#endif</a><br/>
	<br/>
	<b><a href="CppReturn.htm">return</a></b> resource;<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setD(<b><a href="CppConst.htm">const</a></b> EnumD&amp; <b><a href="CppEnum.htm">enum</a></b>D, <b><a href="CppConst.htm">const</a></b> ParameterSetD* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppEnum.htm">enum</a></b>D)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>&nbsp;&nbsp;: mpD.reset(<b><a href="CppNew.htm">new</a></b> StrategyD<b><a href="CppDefault.htm">default</a></b>(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>DsizeOnly : mpD.reset(<b><a href="CppNew.htm">new</a></b> StrategyDsizeOnly(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Dconstant : mpD.reset(<b><a href="CppNew.htm">new</a></b> StrategyDconstant(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setD(<b><a href="CppConst.htm">const</a></b> EnumD&amp; <b><a href="CppEnum.htm">enum</a></b>D, <b><a href="CppConst.htm">const</a></b> ParameterSet&amp; params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setF(<b><a href="CppConst.htm">const</a></b> EnumF&amp; <b><a href="CppEnum.htm">enum</a></b>F, <b><a href="CppConst.htm">const</a></b> ParameterSetF* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppEnum.htm">enum</a></b>F)<br/>
	{<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Fgauss&nbsp;&nbsp;&nbsp;&nbsp;: mpF.reset(<b><a href="CppNew.htm">new</a></b> StrategyFgauss(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>&nbsp;&nbsp;: mpF.reset(<b><a href="CppNew.htm">new</a></b> StrategyF<b><a href="CppDefault.htm">default</a></b>(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Fconstant : mpF.reset(<b><a href="CppNew.htm">new</a></b> StrategyFconstant(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setF(<b><a href="CppConst.htm">const</a></b> EnumF&amp; <b><a href="CppEnum.htm">enum</a></b>F, <b><a href="CppConst.htm">const</a></b> ParameterSet&amp; params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setG(<b><a href="CppConst.htm">const</a></b> EnumG&amp; <b><a href="CppEnum.htm">enum</a></b>G, <b><a href="CppConst.htm">const</a></b> ParameterSetG* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppEnum.htm">enum</a></b>G)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Gplastic&nbsp;&nbsp;: mpG.reset(<b><a href="CppNew.htm">new</a></b> StrategyGplastic(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Gconstant : mpG.reset(<b><a href="CppNew.htm">new</a></b> StrategyGconstant(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setG(<b><a href="CppConst.htm">const</a></b> EnumG&amp; <b><a href="CppEnum.htm">enum</a></b>G, <b><a href="CppConst.htm">const</a></b> ParameterSet&amp; params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setM(<b><a href="CppConst.htm">const</a></b> EnumM&amp; <b><a href="CppEnum.htm">enum</a></b>M, <b><a href="CppConst.htm">const</a></b> ParameterSetM* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppEnum.htm">enum</a></b>M)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b> : mpM.reset(<b><a href="CppNew.htm">new</a></b> StrategyM<b><a href="CppDefault.htm">default</a></b>(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Mconstant: mpM.reset(<b><a href="CppNew.htm">new</a></b> StrategyMconstant(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setM(<b><a href="CppConst.htm">const</a></b> EnumM&amp; <b><a href="CppEnum.htm">enum</a></b>M, <b><a href="CppConst.htm">const</a></b> ParameterSetM&amp; params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setN(<b><a href="CppConst.htm">const</a></b> EnumN&amp; <b><a href="CppEnum.htm">enum</a></b>N, <b><a href="CppConst.htm">const</a></b> ParameterSetN* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppEnum.htm">enum</a></b>N)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Nplastic&nbsp;&nbsp;: mpN.reset(<b><a href="CppNew.htm">new</a></b> StrategyNplastic(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Nconstant : mpN.reset(<b><a href="CppNew.htm">new</a></b> StrategyNconstant(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setN(<b><a href="CppConst.htm">const</a></b> EnumN&amp; <b><a href="CppEnum.htm">enum</a></b>N, <b><a href="CppConst.htm">const</a></b> ParameterSetN&amp; params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setP(<b><a href="CppConst.htm">const</a></b> EnumP&amp; <b><a href="CppEnum.htm">enum</a></b>P, <b><a href="CppConst.htm">const</a></b> ParameterSetP* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppEnum.htm">enum</a></b>P)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Pplastic&nbsp;&nbsp;: mpP.reset(<b><a href="CppNew.htm">new</a></b> StrategyPplastic(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>PplasticB&nbsp;&nbsp;: mpP.reset(<b><a href="CppNew.htm">new</a></b> StrategyPplasticB(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<a href="CppComment.htm">//</a><b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>PnonPlastic: mpP.reset(<b><a href="CppNew.htm">new</a></b> StrategyPnonPlastic(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Pconstant&nbsp;&nbsp;: mpP.reset(<b><a href="CppNew.htm">new</a></b> StrategyPconstant(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setP(<b><a href="CppConst.htm">const</a></b> EnumP&amp; <b><a href="CppEnum.htm">enum</a></b>P, <b><a href="CppConst.htm">const</a></b> ParameterSet&amp; params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setQ(<b><a href="CppConst.htm">const</a></b> EnumQ&amp; <b><a href="CppEnum.htm">enum</a></b>Q, <b><a href="CppConst.htm">const</a></b> ParameterSetQ* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppEnum.htm">enum</a></b>Q)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>: mpQ.reset(<b><a href="CppNew.htm">new</a></b> StrategyQ<b><a href="CppDefault.htm">default</a></b>(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Qconstant: mpQ.reset(<b><a href="CppNew.htm">new</a></b> StrategyQconstant(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setQ(<b><a href="CppConst.htm">const</a></b> EnumQ&amp; <b><a href="CppEnum.htm">enum</a></b>Q, <b><a href="CppConst.htm">const</a></b> ParameterSet&amp; params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setR(<b><a href="CppConst.htm">const</a></b> EnumR&amp; <b><a href="CppEnum.htm">enum</a></b>R, <b><a href="CppConst.htm">const</a></b> ParameterSetR* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (<b><a href="CppEnum.htm">enum</a></b>R)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Rconstant: mpR.reset(<b><a href="CppNew.htm">new</a></b> StrategyRconstant(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Rlogistic: mpR.reset(<b><a href="CppNew.htm">new</a></b> StrategyRlogistic(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Rcosine&nbsp;&nbsp;: mpR.reset(<b><a href="CppNew.htm">new</a></b> StrategyRcosine(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setR(<b><a href="CppConst.htm">const</a></b> EnumR&amp; <b><a href="CppEnum.htm">enum</a></b>R, <b><a href="CppConst.htm">const</a></b> ParameterSet&amp; params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setW(<b><a href="CppConst.htm">const</a></b> EnumW&amp; <b><a href="CppEnum.htm">enum</a></b>W, <b><a href="CppConst.htm">const</a></b> ParameterSetW* params)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(<b><a href="CppEnum.htm">enum</a></b>W)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Wzero: mpW.reset(<b><a href="CppNew.htm">new</a></b> StrategyWzero(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>Wuniform: mpW.reset(<b><a href="CppNew.htm">new</a></b> StrategyWuniform(params)); <b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	processError("<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setW(<b><a href="CppConst.htm">const</a></b> EnumW&amp; <b><a href="CppEnum.htm">enum</a></b>W, <b><a href="CppConst.htm">const</a></b> ParameterSetW* params)");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setAlpha(<b><a href="CppDouble.htm">double</a></b> A)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (A<a href="CppOperatorLessEqual.htm">&lt;=</a>0.0) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "WARNING! A<a href="CppOperatorLessEqual.htm">&lt;=</a>0.0! Set to 1.0." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		A <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	}<br/>
	mAlpha <a href="CppOperatorAssign.htm">=</a> A;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setBeta(<b><a href="CppDouble.htm">double</a></b> B)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (B<a href="CppOperatorLessEqual.htm">&lt;=</a>0.0) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "WARNING! B<a href="CppOperatorLessEqual.htm">&lt;=</a>0.0! Set to 1.0." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		B <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	}<br/>
	mBeta <a href="CppOperatorAssign.htm">=</a> B;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::setGamma(<b><a href="CppDouble.htm">double</a></b> C)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (C<a href="CppOperatorLessEqual.htm">&lt;=</a>0.0) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "WARNING! A<a href="CppOperatorLessEqual.htm">&lt;=</a>0.0! Set to 1.0." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		C <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	}<br/>
	mGamma <a href="CppOperatorAssign.htm">=</a> C;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::coutAll() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getD() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getF() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getG() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getM() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getN() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getP() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getQ() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getR() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> getW() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Alpha: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mAlpha <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Beta: "&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mBeta&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Gamma: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mGamma <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::processError(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; errorMessage) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR!!!" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Message: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> errorMessage <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdExit.htm">std::exit</a>(1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Gnuplot.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Gnuplot.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppGnuplot.htm">Gnuplot</a> <a href="CppOperatorMinus.htm">-</a> a C<a href="CppOperatorIncrement.htm">++</a> <b><a href="CppClass.htm">class</a></b> <a href="CppInterface.htm">interface</a> with <a href="CppGnuplot.htm">Gnuplot</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Created by Richel Bilderbeek on Fri Jun 10 2005.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Open source.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Richel Bilderbeek<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Vinkenstraat 54b<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;9713 TJ Groningen<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;The Netherlands<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;(0031)-(0)50-3115529<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;E-mail: richelbilderbeek@fastmail.fm<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Feel free to contact me when having made additional <a href="CppFunction.htm">function</a>ality or<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;have outsmarted me on <b><a href="CppThis.htm">this</a></b> <a href="CppInterface.htm">interface</a><br/>
<a href="CppComment.htm">//</a> <br/>
<a href="CppComment.htm">//</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __GNUPLOT_H<br/>
<a href="CppDefine.htm">#define</a> __GNUPLOT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> <a href="CppGnuplot.htm">Gnuplot</a>Style<br/>
{<br/>
	styleLines,<br/>
	style<a href="CppPoint.htm">Point</a>s,<br/>
	styleLines<a href="CppPointer.htm">point</a>s,<br/>
	styleImpulses,<br/>
	styleDots,<br/>
	styleSteps,<br/>
	styleErrorbars,<br/>
	styleBoxes,<br/>
	styleBoxerrorbars,<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Fiund out more terminal types <b><a href="CppUsing.htm">using</a></b> 'set terminal' in <a href="CppGnuplot.htm">Gnuplot</a><br/>
<b><a href="CppEnum.htm">enum</a></b> <a href="CppGnuplot.htm">Gnuplot</a>Terminal<br/>
{<br/>
	terminalX11,<br/>
	terminalAqua<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> WindowData<br/>
{<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; tempFileName;<br/>
};<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppGnuplot.htm">Gnuplot</a><br/>
{<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	<a href="CppCfile.htm">FILE</a> * mGnuPipe;<br/>
	<a href="CppStdString.htm">std::string</a> mTerminal;<br/>
	<a href="CppStdString.htm">std::string</a> mStyle;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;WindowData&gt; mWindowData;<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> mCurrentWindowNumber;<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> mMaxCommandSize;<br/>
	<b><a href="CppStatic.htm">static</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> mTempFileNumber;<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> setLineStyles();<br/>
	<a href="CppStdString.htm">std::string</a> readFileName() <b><a href="CppConst.htm">const</a></b>;<br/>
	<a href="CppStdString.htm">std::string</a> createTempFileName();<br/>
	<b><a href="CppVoid.htm">void</a></b> createTempFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> createTempFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> createTempFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> plotTempFile2D(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> plotTempFile3D(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppDebug.htm">debug</a>String <a href="CppOperatorAssign.htm">=</a> ".") <b><a href="CppConst.htm">const</a></b>;<br/>
	<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<a href="CppGnuplot.htm">Gnuplot</a>();<br/>
	~<a href="CppGnuplot.htm">Gnuplot</a>();<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> execute(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> addWindow(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; n<a href="CppWindows.htm">Windows</a> <a href="CppOperatorAssign.htm">=</a> 1);<br/>
	<b><a href="CppVoid.htm">void</a></b> changeWindow(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> setTerminal(<b><a href="CppConst.htm">const</a></b> <a href="CppGnuplot.htm">Gnuplot</a>Terminal&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setStyle(<b><a href="CppConst.htm">const</a></b> <a href="CppGnuplot.htm">Gnuplot</a>Style&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setYlabel(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setXlabel(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title <a href="CppOperatorAssign.htm">=</a> "y");<br/>
	<b><a href="CppVoid.htm">void</a></b> plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title <a href="CppOperatorAssign.htm">=</a> "y");<br/>
	<b><a href="CppVoid.htm">void</a></b> plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title <a href="CppOperatorAssign.htm">=</a> "data");<br/>
	<b><a href="CppVoid.htm">void</a></b> plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title <a href="CppOperatorAssign.htm">=</a> "z");<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> emptyPlot();<br/>
<br/>
	<a href="CppComment.htm">//</a>Helper <a href="CppFunction.htm">function</a>s<br/>
	<a href="CppStdString.htm">std::string</a> itoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<a href="CppStdString.htm">std::string</a> ftoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppBool.htm">bool</a></b> fileExists(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
	<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Gnuplot.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Gnuplot.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppGnuplot.htm">Gnuplot</a> <a href="CppOperatorMinus.htm">-</a> a C<a href="CppOperatorIncrement.htm">++</a> <b><a href="CppClass.htm">class</a></b> <a href="CppInterface.htm">interface</a> with <a href="CppGnuplot.htm">Gnuplot</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Created by Richel Bilderbeek on Fri Jun 10 2005.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Open source.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Richel Bilderbeek<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Vinkenstraat 54b<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;9713 TJ Groningen<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;The Netherlands<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;(0031)-(0)50-3115529<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;E-mail: richelbilderbeek@fastmail.fm<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Feel free to contact me when having made additional <a href="CppFunction.htm">function</a>ality or<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;have outsmarted me on <b><a href="CppThis.htm">this</a></b> <a href="CppInterface.htm">interface</a><br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGnuplot.htm">Gnuplot</a>.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> EXTENSIVE_LOG<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::mTempFileNumber <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppGnuplot.htm">Gnuplot</a>::<a href="CppGnuplot.htm">Gnuplot</a>() :<br/>
	mGnuPipe(<a href="CppNULL.htm">NULL</a>),<br/>
	mTerminal("X11"),<br/>
	mStyle("lines"),<br/>
	mCurrentWindowNumber(0),<br/>
	mMaxCommandSize(4096)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> readFileName();<br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n<a href="CppGnuplot.htm">Gnuplot</a> location was not found"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nTherefore, change the line in '<a href="CppGnuplot.htm">Gnuplot</a>Location.txt"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nto your <a href="CppGnuplot.htm">Gnuplot</a> location.\n";<br/>
		exit(1);<br/>
	}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mGnuPipe <a href="CppOperatorAssign.htm">=</a> popen((fileName+" <a href="CppOperatorMinus.htm">-</a>persist").c_str(),"w");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mGnuPipe<a href="CppOperatorEqual.htm">==</a><a href="CppNULL.htm">NULL</a>) <a href="CppAssert.htm">assert</a>(!"Couldn't open connection to <a href="CppGnuplot.htm">gnuplot</a>");<br/>
	setLineStyles();<br/>
	addWindow();<br/>
	changeWindow(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>This reads the location of <a href="CppGnuplot.htm">Gnuplot</a> from the config file called <a href="CppGnuplot.htm">Gnuplot</a>Location.txt<br/>
<a href="CppComment.htm">///</a>If it cannot find <b><a href="CppThis.htm">this</a></b> file, it is created with a <b><a href="CppDefault.htm">default</a></b> value<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppGnuplot.htm">Gnuplot</a>::readFileName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> "<a href="CppGnuplot.htm">Gnuplot</a>Location.txt";<br/>
	<a href="CppStdString.htm">std::string</a> <b><a href="CppReturn.htm">return</a></b>FileName;<br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
	{<br/>
		<a href="CppStdIfstream.htm">std::ifstream</a> file(fileName.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		file <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <b><a href="CppReturn.htm">return</a></b>FileName;<br/>
		file.close();<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<b><a href="CppReturn.htm">return</a></b>FileName <a href="CppOperatorAssign.htm">=</a>"/sw/bin/<a href="CppGnuplot.htm">gnuplot</a>";<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppReturn.htm">return</a></b>FileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
		file.close();<br/>
	}<br/>
	<b><a href="CppReturn.htm">return</a></b> <b><a href="CppReturn.htm">return</a></b>FileName;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppGnuplot.htm">Gnuplot</a>::~<a href="CppGnuplot.htm">Gnuplot</a>()<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> n<a href="CppWindows.htm">Windows</a> <a href="CppOperatorAssign.htm">=</a> mWindowData.size();<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> i=0; i&lt;n<a href="CppWindows.htm">Windows</a>; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		mCurrentWindowNumber <a href="CppOperatorAssign.htm">=</a> i;<br/>
		emptyPlot();<br/>
	}<br/>
	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pclose(mGnuPipe) <a href="CppOperatorEqual.htm">==</a> <a href="CppOperatorMinus.htm">-</a>1) <a href="CppAssert.htm">assert</a>(!"Problem closing communication to <a href="CppGnuplot.htm">Gnuplot</a>");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::emptyPlot()<br/>
{&nbsp;&nbsp;&nbsp;&nbsp; <br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nPlots <a href="CppOperatorAssign.htm">=</a> mWindowData[mCurrentWindowNumber].tempFileName.size();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nPlots; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		dot("Removing file: " <a href="CppOperatorPlus.htm">+</a> mWindowData[mCurrentWindowNumber].tempFileName[i]);<br/>
		remove(mWindowData[mCurrentWindowNumber].tempFileName[i].c_str());<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Fiund out more terminal types <b><a href="CppUsing.htm">using</a></b> 'set terminal' in <a href="CppGnuplot.htm">Gnuplot</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::setTerminal(<b><a href="CppConst.htm">const</a></b> <a href="CppGnuplot.htm">Gnuplot</a>Terminal&amp; terminal)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(terminal)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> terminalAqua : mTerminal <a href="CppOperatorAssign.htm">=</a> "aqua"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> terminalX11&nbsp;&nbsp;: mTerminal <a href="CppOperatorAssign.htm">=</a> "x11" ; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown <a href="CppGnuplot.htm">Gnuplot</a>Terminal");<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::setStyle(<b><a href="CppConst.htm">const</a></b> <a href="CppGnuplot.htm">Gnuplot</a>Style&amp; style)<br/>
{<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(style)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> styleLines&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: mStyle <a href="CppOperatorAssign.htm">=</a> "lines"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> style<a href="CppPoint.htm">Point</a>s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : mStyle <a href="CppOperatorAssign.htm">=</a> "<a href="CppPointer.htm">point</a>s"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> styleLines<a href="CppPointer.htm">point</a>s&nbsp;&nbsp;: mStyle <a href="CppOperatorAssign.htm">=</a> "lines<a href="CppPointer.htm">point</a>s"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> styleImpulses&nbsp;&nbsp;&nbsp;&nbsp; : mStyle <a href="CppOperatorAssign.htm">=</a> "impulses"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> styleDots&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : mStyle <a href="CppOperatorAssign.htm">=</a> "dots"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> styleSteps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: mStyle <a href="CppOperatorAssign.htm">=</a> "steps"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> styleErrorbars&nbsp;&nbsp;&nbsp;&nbsp;: mStyle <a href="CppOperatorAssign.htm">=</a> "errorbars"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> styleBoxes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: mStyle <a href="CppOperatorAssign.htm">=</a> "boxes"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> styleBoxerrorbars : mStyle <a href="CppOperatorAssign.htm">=</a> "boxerrorbars"; <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown <a href="CppGnuplot.htm">Gnuplot</a>Style"); <br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::execute(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; cmdstr) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	dot("Command sent to <a href="CppGnuplot.htm">Gnuplot</a>: " <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<a href="CppStdString.htm">std::string</a>&gt;(cmdstr));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fputs((cmdstr+"\n").c_str(),mGnuPipe);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fflush(mGnuPipe);<br/>
	usleep(150000);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::setYlabel(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; label)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> command <a href="CppOperatorAssign.htm">=</a> "set ylabel \""+label+"\"";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;execute(command.c_str());<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::setXlabel(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; label)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> command <a href="CppOperatorAssign.htm">=</a> "set xlabel \""+label+"\"";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;execute(command.c_str());<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Change to plotting windows to 'windowNumber'. If <b><a href="CppThis.htm">this</a></b> window number is beyond<br/>
<a href="CppComment.htm">///</a>the amount of windows created, a <b><a href="CppNew.htm">new</a></b> window will be created and that window<br/>
<a href="CppComment.htm">///</a>will be set as the plotting window<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::changeWindow(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; windowNumber)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (windowNumber<a href="CppOperatorEqual.htm">==</a>mCurrentWindowNumber) <b><a href="CppReturn.htm">return</a></b>;<br/>
	<b><a href="CppIf.htm">if</a></b> (windowNumber<a href="CppOperatorGreaterEqual.htm">&gt;=</a>mWindowData.size()) <br/>
	{<br/>
		addWindow();<br/>
		mCurrentWindowNumber <a href="CppOperatorAssign.htm">=</a> mWindowData.size()-1;<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mCurrentWindowNumber=windowNumber;<br/>
	}<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> myCommand <a href="CppOperatorAssign.htm">=</a> "set terminal "+mTerminal+" "+itoa(mCurrentWindowNumber+1);<br/>
	execute(myCommand.c_str());<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Creates an extra 'n<a href="CppWindows.htm">Windows</a>' display windows. <br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::addWindow(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; n<a href="CppWindows.htm">Windows</a>)<br/>
{<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;n<a href="CppWindows.htm">Windows</a>; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		WindowData temp;<br/>
		mWindowData.push_back(temp);<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;equation, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;title)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> myCommand;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mWindowData[mCurrentWindowNumber].tempFileName.size() &gt; 0)<br/>
		myCommand <a href="CppOperatorAssign.htm">=</a> "replot " <a href="CppOperatorPlus.htm">+</a> equation <a href="CppOperatorPlus.htm">+</a> " title \"" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "\" with " <a href="CppOperatorPlus.htm">+</a> mStyle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
		myCommand <a href="CppOperatorAssign.htm">=</a> "plot " <a href="CppOperatorPlus.htm">+</a> equation <a href="CppOperatorPlus.htm">+</a> " title \"" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "\" with " <a href="CppOperatorPlus.htm">+</a> mStyle;<br/>
<br/>
	execute(myCommand.c_str());<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;title)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tempFileName <a href="CppOperatorAssign.htm">=</a> createTempFileName();<br/>
	createTempFile(tempFileName,x);<br/>
	plotTempFile2D(tempFileName,title);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;title)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tempFileName <a href="CppOperatorAssign.htm">=</a> createTempFileName();<br/>
	createTempFile(tempFileName,x,y);<br/>
	plotTempFile2D(tempFileName,title);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::plot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; z, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> &amp;title)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tempFileName <a href="CppOperatorAssign.htm">=</a> createTempFileName();<br/>
&nbsp;&nbsp; 	createTempFile(tempFileName,x,y,z);<br/>
	plotTempFile3D(tempFileName,title);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::plotTempFile2D(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tempFileName, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> myCommand;<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSerie <a href="CppOperatorAssign.htm">=</a> mWindowData[mCurrentWindowNumber].tempFileName.size();<br/>
	<a href="CppComment.htm">//</a>Linestyles are nice, but don't work on my terminal...<br/>
	<a href="CppComment.htm">///</a><b><a href="CppIf.htm">if</a></b> (nSerie&gt;12) <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "MAKE MORE LINESTYLES!!!" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> ( nSerie<a href="CppOperatorEqual.htm">==</a> 0)<br/>
	<a href="CppComment.htm">//</a>	myCommand <a href="CppOperatorAssign.htm">=</a> "plot \"" <a href="CppOperatorPlus.htm">+</a> tempFileName <a href="CppOperatorPlus.htm">+</a> "\" ls "+itoa(nSerie)+" title \"" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "\" with " <a href="CppOperatorPlus.htm">+</a> mStyle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppElse.htm">else</a></b><br/>
	<a href="CppComment.htm">//</a>	myCommand <a href="CppOperatorAssign.htm">=</a> "replot \"" <a href="CppOperatorPlus.htm">+</a> tempFileName <a href="CppOperatorPlus.htm">+</a> "\" ls "+itoa(nSerie)+" title \"" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "\" with " <a href="CppOperatorPlus.htm">+</a> mStyle;<br/>
	<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( nSerie<a href="CppOperatorEqual.htm">==</a> 0)<br/>
		myCommand <a href="CppOperatorAssign.htm">=</a> "plot \"" <a href="CppOperatorPlus.htm">+</a> tempFileName <a href="CppOperatorPlus.htm">+</a> "\" title \"" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "\" with " <a href="CppOperatorPlus.htm">+</a> mStyle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
		myCommand <a href="CppOperatorAssign.htm">=</a> "replot \"" <a href="CppOperatorPlus.htm">+</a> tempFileName <a href="CppOperatorPlus.htm">+</a> "\" title \"" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "\" with " <a href="CppOperatorPlus.htm">+</a> mStyle;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;execute(myCommand.c_str());<br/>
	usleep(500000);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mWindowData[mCurrentWindowNumber].tempFileName.push_back(tempFileName);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::plotTempFile3D(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tempFileName, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; title)<br/>
{<br/>
	<a href="CppComment.htm">//</a>Does not work on my computer. Should be something like <b><a href="CppThis.htm">this</a></b>...<br/>
	execute("set pm3d");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> myCommand;<br/>
&nbsp;&nbsp; <b><a href="CppIf.htm">if</a></b> (mWindowData[mCurrentWindowNumber].tempFileName.size() <a href="CppOperatorEqual.htm">==</a> 0)<br/>
		myCommand <a href="CppOperatorAssign.htm">=</a> "splot \"" <a href="CppOperatorPlus.htm">+</a> tempFileName <a href="CppOperatorPlus.htm">+</a> "\" title \"" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "\" with pm3d palette";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
		myCommand <a href="CppOperatorAssign.htm">=</a> "replot \"" <a href="CppOperatorPlus.htm">+</a> tempFileName <a href="CppOperatorPlus.htm">+</a> "\" title \"" <a href="CppOperatorPlus.htm">+</a> title <a href="CppOperatorPlus.htm">+</a> "\" with pm3d palette";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;execute(myCommand.c_str());<br/>
	usleep(500000);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mWindowData[mCurrentWindowNumber].tempFileName.push_back(tempFileName);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppGnuplot.htm">Gnuplot</a>::createTempFileName()<br/>
{<br/>
	<a href="CppOperatorIncrement.htm">++</a>mTempFileNumber;<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tempFileName <a href="CppOperatorAssign.htm">=</a> "<a href="CppGnuplot.htm">Gnuplot</a>Temp"+itoa(mTempFileNumber);<br/>
	dot("Created temp file '" <a href="CppOperatorPlus.htm">+</a> tempFileName);<br/>
	<b><a href="CppReturn.htm">return</a></b>(tempFileName);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::createTempFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tempFileName, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(tempFileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> x.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; size; i<a href="CppOperatorIncrement.htm">++</a>) file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.close();<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::createTempFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tempFileName, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; y)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(x.size()<a href="CppOperatorEqual.htm">==</a>y.size());<br/>
<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(tempFileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> x.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; size; i<a href="CppOperatorIncrement.htm">++</a>) file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::createTempFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tempFileName, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; y, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; z)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(x.size()<a href="CppOperatorEqual.htm">==</a>y.size());<br/>
	<a href="CppAssert.htm">assert</a>(y.size()<a href="CppOperatorEqual.htm">==</a>z.size());<br/>
<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(tempFileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> x.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; size; i<a href="CppOperatorIncrement.htm">++</a>) file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> z[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::setLineStyles()<br/>
{<br/>
	<a href="CppComment.htm">//</a>Does not work on all terminals. Like mine... :-(<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;1 lt pal frac 0.0 lw 2");<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;2 lt pal frac 0.0 lw 4");<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;3 lt pal frac 0.2 lw 2");<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;4 lt pal frac 0.2 lw 4");<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;5 lt pal frac 0.4 lw 2");<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;6 lt pal frac 0.4 lw 4");<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;7 lt pal frac 0.6 lw 2");<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;8 lt pal frac 0.6 lw 4");<br/>
	<a href="CppComment.htm">//</a>execute("set style line&nbsp;&nbsp;9 lt pal frac 0.8 lw 2");<br/>
	<a href="CppComment.htm">//</a>execute("set style line 10 lt pal frac 0.8 lw 4");<br/>
	<a href="CppComment.htm">//</a>execute("set style line 11 lt pal frac 1.0 lw 2");<br/>
	<a href="CppComment.htm">//</a>execute("set style line 12 lt pal frac 1.0 lw 4");<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Logging when in developmental phase<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppDebug.htm">debug</a>String) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppIfdef.htm">#ifdef</a> EXTENSIVE_LOG<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "DOT: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppDebug.htm">debug</a>String <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Converts</a> an <a href="CppInt.htm">integer</a> to a string<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppGnuplot.htm">Gnuplot</a>::itoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; number) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdOstringstream.htm">std::ostringstream</a> o;<br/>
	<b><a href="CppIf.htm">if</a></b> (!(o <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> number)) { <a href="CppAssert.htm">assert</a>(!"ERROR in itoa"); exit(1); }<br/>
	<b><a href="CppReturn.htm">return</a></b> o.str();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Converts</a> a <b><a href="CppDouble.htm">double</a></b> to a string<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppGnuplot.htm">Gnuplot</a>::ftoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; number) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdOstringstream.htm">std::ostringstream</a> o;<br/>
	<b><a href="CppIf.htm">if</a></b> (!(o <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> number)) { <a href="CppAssert.htm">assert</a>(!"ERROR in ftoa"); exit(1); }<br/>
	<b><a href="CppReturn.htm">return</a></b> o.str();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Checks <b><a href="CppIf.htm">if</a></b> a file exists<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppGnuplot.htm">Gnuplot</a>::fileExists(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdFstream.htm">std::fstream</a> fin;<br/>
	fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
	<b><a href="CppIf.htm">if</a></b>( fin.is_open() )<br/>
	{<br/>
		fin.close();<br/>
		<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
	}<br/>
	fin.close();<br/>
	<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/HelperFunctions.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/HelperFunctions.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Helper<a href="CppFunction.htm">Function</a>s.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 24 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> __HELPER_FUNCTIONS_H<br/>
<a href="CppDefine.htm">#define</a> __HELPER_FUNCTIONS_H<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> NDOT<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGnuplot.htm">gnuplot</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "MeasurementsTable.h"<br/>
<a href="CppInclude.htm">#include</a> "Enumerations.h"<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Structs <b><a href="CppFor.htm">for</a></b> upper and lower <b><a href="CppCase.htm">case</a></b> <a href="CppFunction.htm">function</a>s<br/>
<b><a href="CppStruct.htm">struct</a></b> ToUpper<br/>
{<br/>
	ToUpper(<a href="CppStd.htm">std</a>::locale <b><a href="CppConst.htm">const</a></b>&amp; l) : loc(l) {;}<br/>
	<b><a href="CppChar.htm">char</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b> (<b><a href="CppChar.htm">char</a></b> c) <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> <a href="CppStdToupper.htm">std::toupper</a>(c,loc); }<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	<a href="CppStd.htm">std</a>::locale <b><a href="CppConst.htm">const</a></b>&amp; loc;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> ToLower<br/>
{<br/>
	ToLower(<a href="CppStd.htm">std</a>::locale <b><a href="CppConst.htm">const</a></b>&amp; l) : loc(l) {;}<br/>
	<b><a href="CppChar.htm">char</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b> (<b><a href="CppChar.htm">char</a></b> c) <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> <a href="CppStdTolower.htm">std::tolower</a>(c,loc); }<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	<a href="CppStd.htm">std</a>::locale <b><a href="CppConst.htm">const</a></b>&amp; loc;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;, <b><a href="CppConst.htm">const</a></b> T&amp;);<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>Statistics<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppBool.htm">bool</a></b> SafeMeanAndStdDev(<b><a href="CppConst.htm">const</a></b> T *, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;, <b><a href="CppDouble.htm">double</a></b> &amp;, <b><a href="CppDouble.htm">double</a></b> &amp;);<br/>
<b><a href="CppBool.htm">bool</a></b> SafeMeanAndStdDev(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppDouble.htm">double</a></b> &amp;, <b><a href="CppDouble.htm">double</a></b> &amp;);<br/>
<b><a href="CppBool.htm">bool</a></b> SafeMean(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppDouble.htm">double</a></b> &amp;);<br/>
<b><a href="CppVoid.htm">void</a></b> SafeMeanSplit(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppDouble.htm">double</a></b>&amp; , <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
<b><a href="CppVoid.htm">void</a></b> SafeMeanSplit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppBool.htm">bool</a></b>&gt;&amp;, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppDouble.htm">double</a></b>&amp; , <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
<b><a href="CppVoid.htm">void</a></b> countSplit(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppInt.htm">int</a></b>&amp;, <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
<a href="CppComment.htm">//</a>Con<a href="CppVersion.htm">version</a>s<br/>
<a href="CppStdString.htm">std::string</a> itoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<a href="CppStdString.htm">std::string</a> ftoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
<b><a href="CppBool.htm">bool</a></b> is<a href="CppDouble.htm">Double</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
<b><a href="CppBool.htm">bool</a></b> isInt(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<a href="CppStdString.htm">std::string</a> stringToLower(<a href="CppStdString.htm">std::string</a> myString);<br/>
<a href="CppStdString.htm">std::string</a> stringToUpper(<a href="CppStdString.htm">std::string</a> myString);<br/>
<br/>
<a href="CppComment.htm">//</a>File I/O<br/>
<b><a href="CppVoid.htm">void</a></b> copyFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<b><a href="CppBool.htm">bool</a></b> fileExists(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<a href="CppStdString.htm">std::string</a> stripExtension(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<a href="CppStdString.htm">std::string</a> getExtension(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; fileToVector(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
<a href="CppComment.htm">//</a>Automatic code generation<br/>
<b><a href="CppVoid.htm">void</a></b> <b><a href="CppAuto.htm">auto</a></b>Enum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp;);<br/>
<br/>
<a href="CppComment.htm">//</a>Misc<br/>
<a href="CppStdString.htm">std::string</a> indexToPlasticity(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<b><a href="CppVoid.htm">void</a></b> coutVector(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp;);<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; <b><a href="CppVoid.htm">void</a></b> coutVector(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; myVector);<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __HELPER_FUNCTIONS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/HelperFunctions.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/HelperFunctions.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Helper<a href="CppFunction.htm">Function</a>s<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 24 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppDebug.htm">debug</a>Message)<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>	<a href="CppIfndef.htm">#ifndef</a> NDOT<br/>
<a href="CppComment.htm">//</a>	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppDebug.htm">debug</a>Message <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<a href="CppComment.htm">//</a>	<a href="CppEndif.htm">#endif</a><br/>
<a href="CppComment.htm">//</a>}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; outputMessage)<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> outputMessage <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<a href="CppComment.htm">//</a>}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (a&lt;b?a:b);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b, <b><a href="CppConst.htm">const</a></b> T&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T temp <a href="CppOperatorAssign.htm">=</a> min(a,b);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (temp&lt;c? temp:c);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b, <b><a href="CppConst.htm">const</a></b> T&amp; c, <b><a href="CppConst.htm">const</a></b> T&amp; d)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T temp <a href="CppOperatorAssign.htm">=</a> min(a,b,c);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (temp&lt;d? temp:d);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b, <b><a href="CppConst.htm">const</a></b> T&amp; c, <b><a href="CppConst.htm">const</a></b> T&amp; d, <b><a href="CppConst.htm">const</a></b> T&amp; e)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T temp <a href="CppOperatorAssign.htm">=</a> min(a,b,c,d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (temp&lt;e? temp:e);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b, <b><a href="CppConst.htm">const</a></b> T&amp; c, <b><a href="CppConst.htm">const</a></b> T&amp; d, <b><a href="CppConst.htm">const</a></b> T&amp; e, <b><a href="CppConst.htm">const</a></b> T&amp; f)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T temp <a href="CppOperatorAssign.htm">=</a> min(a,b,c,d,e);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (temp&lt;f? temp:f);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b, <b><a href="CppConst.htm">const</a></b> T&amp; c, <b><a href="CppConst.htm">const</a></b> T&amp; d, <b><a href="CppConst.htm">const</a></b> T&amp; e, <b><a href="CppConst.htm">const</a></b> T&amp; f, <b><a href="CppConst.htm">const</a></b> T&amp; g)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T temp <a href="CppOperatorAssign.htm">=</a> min(a,b,c,d,e,f);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (temp&lt;g? temp:g);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b, <b><a href="CppConst.htm">const</a></b> T&amp; c, <b><a href="CppConst.htm">const</a></b> T&amp; d, <b><a href="CppConst.htm">const</a></b> T&amp; e, <b><a href="CppConst.htm">const</a></b> T&amp; f, <b><a href="CppConst.htm">const</a></b> T&amp; g, <b><a href="CppConst.htm">const</a></b> T&amp; h)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T temp <a href="CppOperatorAssign.htm">=</a> min(a,b,c,d,e,f,g);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (temp&lt;h? temp:h);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b, <b><a href="CppConst.htm">const</a></b> T&amp; c, <b><a href="CppConst.htm">const</a></b> T&amp; d, <b><a href="CppConst.htm">const</a></b> T&amp; e, <b><a href="CppConst.htm">const</a></b> T&amp; f, <b><a href="CppConst.htm">const</a></b> T&amp; g, <b><a href="CppConst.htm">const</a></b> T&amp; h, <b><a href="CppConst.htm">const</a></b> T&amp; i)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T temp <a href="CppOperatorAssign.htm">=</a> min(a,b,c,d,e,f,g,h);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (temp&lt;i? temp:i);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; T min(<b><a href="CppConst.htm">const</a></b> T&amp; a, <b><a href="CppConst.htm">const</a></b> T&amp; b, <b><a href="CppConst.htm">const</a></b> T&amp; c, <b><a href="CppConst.htm">const</a></b> T&amp; d, <b><a href="CppConst.htm">const</a></b> T&amp; e, <b><a href="CppConst.htm">const</a></b> T&amp; f, <b><a href="CppConst.htm">const</a></b> T&amp; g, <b><a href="CppConst.htm">const</a></b> T&amp; h, <b><a href="CppConst.htm">const</a></b> T&amp; i, <b><a href="CppConst.htm">const</a></b> T&amp; j)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T temp <a href="CppOperatorAssign.htm">=</a> min(a,b,c,d,e,f,g,h,i);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (temp&lt;j? temp:j);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
/<a href="CppComment.htm">//</a> Determines the mean and standard deviation of an <a href="CppArray.htm">array</a><br/>
/<a href="CppComment.htm">//</a> Returns whether successfull<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> SafeMeanAndStdDev(<b><a href="CppConst.htm">const</a></b> T * p<a href="CppArray.htm">Array</a>, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <a href="CppArray.htm">array</a>size, <b><a href="CppDouble.htm">double</a></b> &amp;rMean, <b><a href="CppDouble.htm">double</a></b> &amp;rStdDev)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size&gt;1)<br/>
	{<br/>
		<b><a href="CppDouble.htm">double</a></b> Sum=0.0, SumSquared=0.0;<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppOperatorIncrement.htm">++</a><a href="CppCounter.htm">counter</a>)<br/>
		{<br/>
			Sum<a href="CppOperatorPlusAssign.htm">+=</a>p<a href="CppArray.htm">Array</a>[<a href="CppCounter.htm">counter</a>];<br/>
			SumSquared<a href="CppOperatorPlusAssign.htm">+=</a>(p<a href="CppArray.htm">Array</a>[<a href="CppCounter.htm">counter</a>]*p<a href="CppArray.htm">Array</a>[<a href="CppCounter.htm">counter</a>]);<br/>
		}<a href="CppComment.htm">//</a>Next <a href="CppCounter.htm">counter</a><br/>
		rMean=(Sum/<a href="CppArray.htm">array</a>size);<br/>
		<a href="CppComment.htm">//</a>Safe part:<br/>
		<b><a href="CppDouble.htm">double</a></b> numerator=((<a href="CppArray.htm">array</a>size*SumSquared)-(Sum*Sum));<br/>
		<b><a href="CppIf.htm">if</a></b> (numerator&lt;0) {numerator=0;}<br/>
		rStdDev=sqrt(numerator/(<a href="CppArray.htm">array</a>size*(<a href="CppArray.htm">array</a>size-1)));<br/>
		<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		rMean <a href="CppOperatorAssign.htm">=</a> 0.0; <br/>
		rStdDev <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		cout("<a href="CppArray.htm">Array</a>size must be larger then 1!");<br/>
		<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
/<a href="CppComment.htm">//</a> Determines the mean and standard deviation of a vector<br/>
/<a href="CppComment.htm">//</a> Returns whether successfull<br/>
<b><a href="CppBool.htm">bool</a></b> SafeMeanAndStdDev(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; p<a href="CppArray.htm">Array</a>, <b><a href="CppDouble.htm">double</a></b> &amp;rMean, <b><a href="CppDouble.htm">double</a></b> &amp;rStdDev)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size <a href="CppOperatorAssign.htm">=</a> p<a href="CppArray.htm">Array</a>.size();<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppArray.htm">array</a>sizeD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppArray.htm">array</a>size);<br/>
	<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size&lt;2)<br/>
	{<br/>
		rMean <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		rStdDev <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppArray.htm">Array</a>size must be larger then 1!" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
	}<br/>
	<br/>
	<b><a href="CppDouble.htm">double</a></b> Sum=0.0, SumSquared=0.0;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppOperatorIncrement.htm">++</a><a href="CppCounter.htm">counter</a>)<br/>
	{<br/>
		Sum<a href="CppOperatorPlusAssign.htm">+=</a>p<a href="CppArray.htm">Array</a>[<a href="CppCounter.htm">counter</a>];<br/>
		SumSquared<a href="CppOperatorPlusAssign.htm">+=</a>(p<a href="CppArray.htm">Array</a>[<a href="CppCounter.htm">counter</a>]*p<a href="CppArray.htm">Array</a>[<a href="CppCounter.htm">counter</a>]);<br/>
	}<br/>
	rMean=(Sum/<a href="CppArray.htm">array</a>size);<br/>
	<a href="CppComment.htm">//</a>Safe part:<br/>
	<b><a href="CppDouble.htm">double</a></b> numerator=((<a href="CppArray.htm">array</a>sizeD*SumSquared)-(Sum*Sum));<br/>
	<b><a href="CppIf.htm">if</a></b> (numerator&lt;0.0) {numerator=0.0;}<br/>
	rStdDev=sqrt(numerator/(<a href="CppArray.htm">array</a>sizeD*(<a href="CppArray.htm">array</a>sizeD-1.0)));<br/>
	<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
/<a href="CppComment.htm">//</a> Determines the mean and standard deviation of a vector<br/>
/<a href="CppComment.htm">//</a> Returns whether successfull<br/>
<b><a href="CppBool.htm">bool</a></b> SafeMean(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; p<a href="CppArray.htm">Array</a>, <b><a href="CppDouble.htm">double</a></b> &amp; rMean)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size <a href="CppOperatorAssign.htm">=</a> p<a href="CppArray.htm">Array</a>.size();<br/>
	<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size&lt;2)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppArray.htm">Array</a>size must be larger then 1!" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		rMean=0.0;<br/>
		<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
	}<br/>
	<b><a href="CppDouble.htm">double</a></b> Sum=0.0;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppCounter.htm">counter</a>=0;<a href="CppCounter.htm">counter</a>&lt;<a href="CppArray.htm">array</a>size;<a href="CppOperatorIncrement.htm">++</a><a href="CppCounter.htm">counter</a>)<br/>
	{<br/>
		Sum<a href="CppOperatorPlusAssign.htm">+=</a>p<a href="CppArray.htm">Array</a>[<a href="CppCounter.htm">counter</a>];<br/>
	}<br/>
	rMean=(Sum/<a href="CppArray.htm">array</a>size);<br/>
	<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SafeMeanSplit(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; splitValue, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; table, <b><a href="CppDouble.htm">double</a></b> &amp; rMeanTraitJuvenile, <b><a href="CppDouble.htm">double</a></b>&amp; rMeanTraitAdult)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size <a href="CppOperatorAssign.htm">=</a> table.size();<br/>
	<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size<a href="CppOperatorLessEqual.htm">&lt;=</a>1)<br/>
	{<br/>
		rMeanTraitJuvenile <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		rMeanTraitAdult&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppArray.htm">Array</a>size must be larger then 1!" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> sumJuvenile=0.0, sumAdult=0.0;<br/>
	<b><a href="CppInt.htm">int</a></b> nJuveniles=0, nAdults=0;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;<a href="CppArray.htm">array</a>size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> table[i];<br/>
		<b><a href="CppIf.htm">if</a></b> (value&lt;splitValue)<br/>
		{<br/>
			<a href="CppOperatorIncrement.htm">++</a>nJuveniles;<br/>
			sumJuvenile<a href="CppOperatorPlusAssign.htm">+=</a>value;<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b><br/>
		{<br/>
			<a href="CppOperatorIncrement.htm">++</a>nAdults;<br/>
			sumAdult<a href="CppOperatorPlusAssign.htm">+=</a>value;<br/>
		}<br/>
	}<br/>
	<b><a href="CppIf.htm">if</a></b> (nJuveniles<a href="CppOperatorEqual.htm">==</a>0) rMeanTraitJuvenile=0.0;<br/>
	<b><a href="CppElse.htm">else</a></b> rMeanTraitJuvenile <a href="CppOperatorAssign.htm">=</a> sumJuvenile/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nJuveniles);<br/>
	<b><a href="CppIf.htm">if</a></b> (nAdults<a href="CppOperatorEqual.htm">==</a>0) rMeanTraitAdult=splitValue;<br/>
	<b><a href="CppElse.htm">else</a></b> rMeanTraitAdult <a href="CppOperatorAssign.htm">=</a> sumAdult/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nAdults);<br/>
	<a href="CppAssert.htm">assert</a>(rMeanTraitJuvenile<a href="CppOperatorLessEqual.htm">&lt;=</a>splitValue);<br/>
	<a href="CppAssert.htm">assert</a>(rMeanTraitAdult<a href="CppOperatorGreaterEqual.htm">&gt;=</a>splitValue);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Calculates the mean traitValues <b><a href="CppFor.htm">for</a></b> juveniles and adults<br/>
<b><a href="CppVoid.htm">void</a></b> SafeMeanSplit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppBool.htm">bool</a></b>&gt;&amp; isAdultTable, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; table, <b><a href="CppDouble.htm">double</a></b> &amp; rMeanTraitJuvenile, <b><a href="CppDouble.htm">double</a></b>&amp; rMeanTraitAdult)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArray.htm">array</a>size <a href="CppOperatorAssign.htm">=</a> table.size();<br/>
	<b><a href="CppIf.htm">if</a></b> (<a href="CppArray.htm">array</a>size<a href="CppOperatorLessEqual.htm">&lt;=</a>1)<br/>
	{<br/>
		rMeanTraitJuvenile <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		rMeanTraitAdult&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppArray.htm">Array</a>size must be larger then 1!" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> sumJuvenile=0.0, sumAdult=0.0;<br/>
	<b><a href="CppInt.htm">int</a></b> nJuveniles=0, nAdults=0;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;<a href="CppArray.htm">array</a>size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> table[i];<br/>
		<b><a href="CppIf.htm">if</a></b> (isAdultTable[i]<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
		{<br/>
			<a href="CppOperatorIncrement.htm">++</a>nJuveniles;<br/>
			sumJuvenile<a href="CppOperatorPlusAssign.htm">+=</a>value;<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b><br/>
		{<br/>
			<a href="CppOperatorIncrement.htm">++</a>nAdults;<br/>
			sumAdult<a href="CppOperatorPlusAssign.htm">+=</a>value;<br/>
		}<br/>
	}<br/>
	<b><a href="CppIf.htm">if</a></b> (nJuveniles<a href="CppOperatorEqual.htm">==</a>0) rMeanTraitJuvenile=0.0;<br/>
	<b><a href="CppElse.htm">else</a></b> rMeanTraitJuvenile <a href="CppOperatorAssign.htm">=</a> sumJuvenile/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nJuveniles);<br/>
	<b><a href="CppIf.htm">if</a></b> (nAdults<a href="CppOperatorEqual.htm">==</a>0) rMeanTraitAdult=0.0;<br/>
	<b><a href="CppElse.htm">else</a></b> rMeanTraitAdult <a href="CppOperatorAssign.htm">=</a> sumAdult/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nAdults);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Counts the occurrence of juveniles with traitValues having values lower then splitValue<br/>
<a href="CppComment.htm">///</a>and adults with traitValues having <br/>
<b><a href="CppVoid.htm">void</a></b> countSplit(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; splitValue, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; table, <b><a href="CppInt.htm">int</a></b>&amp; rCountJuvenile, <b><a href="CppInt.htm">int</a></b>&amp; rCountAdult)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> table.size();<br/>
	rCountJuvenile=0;<br/>
	rCountAdult <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppIf.htm">if</a></b> (table[i]&lt;splitValue) <a href="CppOperatorIncrement.htm">++</a>rCountJuvenile;<br/>
		<b><a href="CppElse.htm">else</a></b> <a href="CppOperatorIncrement.htm">++</a>rCountAdult;<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Converts</a> an <a href="CppInt.htm">integer</a> to a string.<br/>
<a href="CppStdString.htm">std::string</a> itoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; x)<br/>
{<br/>
	<a href="CppStdOstringstream.htm">std::ostringstream</a> o;<br/>
	<b><a href="CppIf.htm">if</a></b> (!(o <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x)) <b><a href="CppReturn.htm">return</a></b> "ERROR";<br/>
	<b><a href="CppReturn.htm">return</a></b> o.str();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Converts</a> a <b><a href="CppDouble.htm">double</a></b> to a string.<br/>
<a href="CppStdString.htm">std::string</a> ftoa(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x)<br/>
 {<br/>
	<a href="CppStdOstringstream.htm">std::ostringstream</a> o;<br/>
	<b><a href="CppIf.htm">if</a></b> (!(o <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x)) <b><a href="CppReturn.htm">return</a></b> "ERROR";<br/>
	<b><a href="CppReturn.htm">return</a></b> o.str();<br/>
 }<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Checks whether a <a href="CppStdString.htm">std::string</a> can be <a href="CppConvert.htm">convert</a>ed to an <a href="CppInt.htm">integer</a>.<br/>
<a href="CppComment.htm">///</a>Returns <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> possible, also <b><a href="CppReturn.htm">return</a></b>ing <b><a href="CppThis.htm">this</a></b> <a href="CppInt.htm">integer</a> by referencing.<br/>
<a href="CppComment.htm">///</a>Returns <b><a href="CppFalse.htm">false</a></b> otherwise, setting the referenced <a href="CppInt.htm">integer</a> to zero.<br/>
<b><a href="CppBool.htm">bool</a></b> isInt(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppInt.htm">int</a></b>&amp; rInt)<br/>
 {<br/>
	<a href="CppStdIstringstream.htm">std::istringstream</a> i(s);<br/>
	<b><a href="CppIf.htm">if</a></b> (!(i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> rInt))<br/>
		{ rInt <a href="CppOperatorAssign.htm">=</a> 0; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
	<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Checks whether a <a href="CppStdString.htm">std::string</a> can be <a href="CppConvert.htm">convert</a>ed to a <b><a href="CppDouble.htm">double</a></b>.<br/>
<a href="CppComment.htm">///</a>Returns <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> possible, also <b><a href="CppReturn.htm">return</a></b>ing <b><a href="CppThis.htm">this</a></b> <b><a href="CppDouble.htm">double</a></b> by referencing.<br/>
<a href="CppComment.htm">///</a>Returns <b><a href="CppFalse.htm">false</a></b> otherwise, setting the referenced <b><a href="CppDouble.htm">double</a></b> to zero.<br/>
<b><a href="CppBool.htm">bool</a></b> is<a href="CppDouble.htm">Double</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppDouble.htm">double</a></b>&amp; r<a href="CppDouble.htm">Double</a>)<br/>
 {<br/>
	<a href="CppStdIstringstream.htm">std::istringstream</a> i(s);<br/>
	<b><a href="CppIf.htm">if</a></b> (!(i <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> r<a href="CppDouble.htm">Double</a>)) <br/>
		{ r<a href="CppDouble.htm">Double</a> <a href="CppOperatorAssign.htm">=</a> 0.0; <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
	<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> stringToUpper(<a href="CppStdString.htm">std::string</a> myString)<br/>
{<br/>
	<b><a href="CppStatic.htm">static</a></b> ToUpper up(<a href="CppStd.htm">std</a>::locale::classic());<br/>
	<a href="CppStdTransform.htm">std::transform</a>(myString.begin(), myString.end(), myString.begin(), up);<br/>
	<b><a href="CppReturn.htm">return</a></b> myString;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> stringToLower(<a href="CppStdString.htm">std::string</a> myString)<br/>
{<br/>
	<b><a href="CppStatic.htm">static</a></b> ToLower down(<a href="CppStd.htm">std</a>::locale::classic());<br/>
	<a href="CppStdTransform.htm">std::transform</a>(myString.begin(), myString.end(), myString.begin(), down);<br/>
	<b><a href="CppReturn.htm">return</a></b> myString;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> copyFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileNameFrom, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileNameTo)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(fileExists(fileNameFrom));<br/>
	<a href="CppStdIfstream.htm">std::ifstream</a> in (fileNameFrom.c_str());<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> out(fileNameTo.c_str());<br/>
	out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> in.rdbuf(); <br/>
	out.close();<br/>
	in.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Checks <b><a href="CppIf.htm">if</a></b> a file exists. <br/>
<b><a href="CppBool.htm">bool</a></b> fileExists(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
	<a href="CppStdFstream.htm">std::fstream</a> fin;<br/>
	fin.open(fileName.c_str(),<a href="CppStd.htm">std</a>::ios::in);<br/>
	<b><a href="CppIf.htm">if</a></b>( fin.is_open() )<br/>
	{<br/>
		fin.close();<br/>
		<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
	}<br/>
	fin.close();<br/>
	<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Removes the '.txt' or other extensions of a fileName.<br/>
<a href="CppComment.htm">///</a>Actually, it <a href="CppReturn.htm">returns</a> the fileName's part before the first dot en<a href="CppCounter.htm">counter</a>ed.<br/>
<a href="CppComment.htm">///</a>When no dot is en<a href="CppCounter.htm">counter</a>ed, it <a href="CppReturn.htm">returns</a> the entire fileName.<br/>
<a href="CppStdString.htm">std::string</a> stripExtension(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> length <a href="CppOperatorAssign.htm">=</a> fileName.length();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;length; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppIf.htm">if</a></b> (fileName[i]<a href="CppOperatorEqual.htm">==</a>'.') <br/>
		{<br/>
			<b><a href="CppReturn.htm">return</a></b> fileName.substr(0,i);<br/>
		}<br/>
	}<br/>
	<b><a href="CppReturn.htm">return</a></b> fileName;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Gets the '.txt' or other extensions of a fileName.<br/>
<a href="CppComment.htm">///</a>Actually, it <a href="CppReturn.htm">returns</a> the fileName's part after the first dot en<a href="CppCounter.htm">counter</a>ed.<br/>
<a href="CppComment.htm">///</a>When no dot is en<a href="CppCounter.htm">counter</a>ed, it <a href="CppReturn.htm">returns</a> the entire fileName.<br/>
<a href="CppStdString.htm">std::string</a> getExtension(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> length <a href="CppOperatorAssign.htm">=</a> fileName.length();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;length; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppIf.htm">if</a></b> (fileName[i]<a href="CppOperatorEqual.htm">==</a>'.') <br/>
		{<br/>
			<b><a href="CppReturn.htm">return</a></b> fileName.substr(i+1,length);<br/>
		}<br/>
	}<br/>
	<b><a href="CppReturn.htm">return</a></b> fileName;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Example program to use <b><a href="CppAuto.htm">auto</a></b>Enum:<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <b><a href="CppEnum.htm">enum</a></b>Values;<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> "/Volumes/RichelDrive/EnumSigma<a href="CppImplementationFile.htm">.cpp</a>";<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorAssign.htm">=</a> "EnumSigma";<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> variableName <a href="CppOperatorAssign.htm">=</a> "<b><a href="CppEnum.htm">enum</a></b>Sigma";<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Values.push_back("<b><a href="CppEnum.htm">enum</a></b>SigmaZero");<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Values.push_back("<b><a href="CppEnum.htm">enum</a></b>SigmaUniform");<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b>Enum(fileName, <b><a href="CppEnum.htm">enum</a></b>Name, variableName, <b><a href="CppEnum.htm">enum</a></b>Values);<br/>
<a href="CppComment.htm">///</a><br/>
<b><a href="CppVoid.htm">void</a></b> <b><a href="CppAuto.htm">auto</a></b>Enum(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <b><a href="CppEnum.htm">enum</a></b>Name, <br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; variableName, <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <b><a href="CppEnum.htm">enum</a></b>Values)<br/>
{<br/>
	<a href="CppComment.htm">//</a>Open file<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<a href="CppComment.htm">//</a>Enumeration<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppEnum.htm">enum</a></b> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;<b><a href="CppEnum.htm">enum</a></b>Values.size(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Values[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ( (i&lt;<b><a href="CppEnum.htm">enum</a></b>Values.size()-1) ? ",\n" : "\n" );<br/>
	}<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "};" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<a href="CppComment.htm">//</a>Headers<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppStdString.htm">std::string</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> variableName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "toString(<b><a href="CppConst.htm">const</a></b> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&amp;);" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " stringTo" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<a href="CppComment.htm">//</a>Implementation<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppStdString.htm">std::string</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> variableName <br/>
		 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "toString(<b><a href="CppConst.htm">const</a></b> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&amp; " <br/>
		 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> variableName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppSwitch.htm">switch</a></b>(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> variableName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;<b><a href="CppEnum.htm">enum</a></b>Values.size(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppCase.htm">case</a></b> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Values[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": <b><a href="CppReturn.htm">return</a></b> \"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Values[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\";" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' ;<br/>
	}<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppReturn.htm">return</a></b> \"ERROR in '<a href="CppStdString.htm">std::string</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> variableName <br/>
		 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ToString(<b><a href="CppConst.htm">const</a></b> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&amp; " <br/>
		 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> variableName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")'\";" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " stringTo" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "{" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;<b><a href="CppEnum.htm">enum</a></b>Values.size(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppIf.htm">if</a></b> (myString<a href="CppOperatorEqual.htm">==</a>\"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Values[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\") <b><a href="CppReturn.htm">return</a></b> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Values[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ";" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> \"ERROR in '"<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " StringTo" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; myString)'\" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "exit(1);" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "}" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<a href="CppComment.htm">//</a>Close file<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; fileToVector(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(fileExists(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; myVector;<br/>
	<br/>
	<a href="CppStdIfstream.htm">std::ifstream</a> in (fileName.c_str());<br/>
	<a href="CppStdString.htm">std::string</a> myString;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !in.eof(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		in <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> myString;<br/>
		myVector.push_back(myString);<br/>
		<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myString <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
	<b><a href="CppReturn.htm">return</a></b> myVector;<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>One vector<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector, <br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=startIndex; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Two vectors<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name1, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector1, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name2, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector2,<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;name1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> ( myVector1.size() &lt; myVector2.size() ? myVector1.size() : myVector2.size());<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=startIndex; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;myVector1[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector2[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Three vectors<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name1, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector1, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name2, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name3, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector3,<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;name1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name3 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> min(myVector1.size(),myVector2.size(),myVector3.size());<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=startIndex; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;myVector1[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector2[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector3[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>'\n';<br/>
	}<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name1, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector1, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name2, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name3, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name4, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector4,<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;name1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name3 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name4 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> min(myVector1.size(),myVector2.size(),myVector3.size(),myVector4.size());<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=startIndex; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;myVector1[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector2[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector3[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector4[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name1, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector1, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name2, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name3, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name4, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name5, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector5,<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;name1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name3 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name4 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name5 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> min(myVector1.size(),myVector2.size(),myVector3.size(),myVector4.size(),myVector5.size());<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=startIndex; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;myVector1[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector2[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector3[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector4[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector5[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name1, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector1, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name2, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name3, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name4, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name5, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name6, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector6,<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;name1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name3 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name4 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name5 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name6 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> min(myVector1.size(),myVector2.size(),myVector3.size(),myVector4.size(),myVector5.size(),myVector6.size());<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=startIndex; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;myVector1[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector2[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector3[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector4[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector5[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector6[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name1, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector1, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name2, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name3, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name4, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name5, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name6, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector6,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name7, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector7,<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;name1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name3 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name4 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name5 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name6 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name7 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> min(myVector1.size(),myVector2.size(),myVector3.size(),myVector4.size(),myVector5.size(),myVector6.size(),myVector7.size());<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=startIndex; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;myVector1[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector2[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector3[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector4[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector5[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector6[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector7[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> vectorToFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name1, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector1, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name2, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name3, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name4, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name5, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name6, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector6,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name7, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector7,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name8, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector8,<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; startIndex)<br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;name1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name2 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name3 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name4 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name5 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name6 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name7 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name8 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> min(myVector1.size(),myVector2.size(),myVector3.size(),myVector4.size(),myVector5.size(),myVector6.size(),myVector7.size(),myVector8.size());<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=startIndex; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;myVector1[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector2[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector3[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector4[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector5[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector6[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector7[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector8[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> coutVector(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; <b><a href="CppVoid.htm">void</a></b> coutVector(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;T&gt;&amp; myVector)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> myVector[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> indexToPlasticity(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index&gt;1) <b><a href="CppReturn.htm">return</a></b> "(P,"+itoa(index)+")";<br/>
	<b><a href="CppReturn.htm">return</a></b> "(NP,"+itoa(index)+")";<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/MeasurementsTable.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/MeasurementsTable.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;MeasurementsTable.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue Jun 07 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>Structure <b><a href="CppFor.htm">for</a></b> storing measurements. <br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Is plotted by <a href="CppFunction.htm">function</a>s in Helper<a href="CppFunction.htm">Function</a>s.h<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __MEASUREMENTS_TABLE_H<br/>
<a href="CppDefine.htm">#define</a> __MEASUREMENTS_TABLE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Enumerations.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> MeasurementsTable<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mPopSize;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mNoffspring;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mResources;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanBodySize;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mStdDevBodySize;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanReserves;	<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mStdDevReserves;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanChanceToDie;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mStdDevChanceToDie;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanFoodIntake;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mStdDevFoodIntake;<br/>
	<a href="CppComment.htm">//</a>Plus<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mPopSizeJuvenile;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mPopSizeAdult;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanBodySizeJuvenile;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanBodySizeAdult;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanReservesJuvenile;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanReservesAdult;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanChanceToDieJuvenile;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanChanceToDieAdult;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanFoodIntakeJuvenile;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanFoodIntakeAdult;<br/>
	<a href="CppComment.htm">//</a>Plus plus<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanAllocation;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanFractionBiomassPerOffspringInitial;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mMeanFractionBiomassPerOffspring;<br/>
	<a href="CppComment.htm">//</a><b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppVoid.htm">void</a></b> showYearLegend() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> showYear(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> showYearHorizontal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> saveToSingleFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> saveToMultipleFiles(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> vectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;,<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> addVectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;, <a href="CppStdOfstream.htm">std::ofstream</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> plotMeasurementsTable(<a href="CppStdVector.htm">std::vector</a>&lt;MeasurementsTable&gt;&amp;);<br/>
<b><a href="CppVoid.htm">void</a></b> drawConclusions(<b><a href="CppConst.htm">const</a></b> MeasurementsTable&amp;,<a href="CppStdVector.htm">std::vector</a>&lt;EnumConclusion&gt;&amp;) ;<br/>
<b><a href="CppVoid.htm">void</a></b> interpretMeasurementsTables(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;MeasurementsTable&gt;&amp; table);<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/MeasurementsTable.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/MeasurementsTable.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;MeasurementsTable<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue Jun 07 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "MeasurementsTable.h"<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MeasurementsTable::showYearLegend() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppTime.htm">time</a>" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "PopSize" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Noffspring" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Resources" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "MeanBodySize" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "MeanReserves" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MeasurementsTable::showYear(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <a href="CppTime.htm">time</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppTime.htm">time</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mPopSize[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mNoffspring[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mResources[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanBodySize[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanReserves[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MeasurementsTable::showYearHorizontal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <a href="CppTime.htm">time</a>) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mPopSize.size()<a href="CppOperatorEqual.htm">==</a>0) <br/>
	{ <br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "WARNING: Measurement table is shown before <a href="CppAny.htm">any</a> data in it!:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>; <br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a>&lt;mPopSize.size());<br/>
	<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a><a href="CppOperatorLessEqual.htm">&lt;=</a>mPopSize.size());<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "------------------------------------------<a href="CppOperatorDecrement.htm">--</a>" <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n<a href="CppTime.htm">time</a>: "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppTime.htm">time</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "PopSize: "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mPopSize[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Noffspring: "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mNoffspring[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Resources: "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mResources[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "MeanBodySize: "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanBodySize[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "MeanReserves: "&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanReserves[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "MeanChanceToDie: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanChanceToDie[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "MeanFoodIntake: "&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanFoodIntake[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "mMeanAllocation: "&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanAllocation[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "mMeanFractionBiomassPerOffspringInitial: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanFractionBiomassPerOffspringInitial[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "mMeanFractionBiomassPerOffspring: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMeanFractionBiomassPerOffspring[<a href="CppTime.htm">time</a>] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
		<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MeasurementsTable::saveToSingleFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file(fileName.c_str());<br/>
	<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Saving measurements as file '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'.\n";<br/>
	<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Progress:\n";<br/>
	<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "------------------------\n";<br/>
	addVectorToFile("Population size", mPopSize,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Amount of offspring",&nbsp;&nbsp;mNoffspring,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Resources",&nbsp;&nbsp; mResources,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean body size",mMeanBodySize,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("StdDev body size",mStdDevBodySize,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Means reserves",mMeanReserves,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Stddev reserves",mStdDevReserves,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean chance to die",mMeanChanceToDie,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("StdDev chance to die",mStdDevChanceToDie,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean food intake",mMeanFoodIntake,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("StdDev food intake",mStdDevFoodIntake,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Population size Juveniles",mPopSizeJuvenile,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Population size Adults",mPopSizeAdult,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean body size Juveniles",mMeanBodySizeJuvenile,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean body size Adults",mMeanBodySizeAdult,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean reserves Juveniles",mMeanReservesJuvenile,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean reserves Adults",mMeanReservesAdult,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean chance to die Juveniles",mMeanChanceToDieJuvenile,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean chance to die Adults",mMeanChanceToDieAdult,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean food intake Juveniles",mMeanFoodIntakeJuvenile,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean food intake Adults",mMeanFoodIntakeAdult,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean allocation",mMeanAllocation,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean fraction biomass per offspring Initial",mMeanFractionBiomassPerOffspringInitial,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
	addVectorToFile("Mean fraction biomass per offspring After rounding off",mMeanFractionBiomassPerOffspring,file);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".\nSaving done.\n";<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MeasurementsTable::saveToMultipleFiles(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> baseFileName <a href="CppOperatorAssign.htm">=</a> stripExtension(fileName); <br/>
	vectorToFile(mPopSize&nbsp;&nbsp;&nbsp;&nbsp; ,baseFileName+"PopSize.rda");<br/>
	vectorToFile(mResources&nbsp;&nbsp; ,baseFileName+"Resources.rda");<br/>
	vectorToFile(mMeanBodySize,baseFileName+"BodySize.rda");<br/>
	vectorToFile(mMeanReserves,baseFileName+"Reserves.rda");<br/>
	vectorToFile(mMeanFoodIntake,baseFileName+"FoodIntake.rda");<br/>
	VectorToFile(mMeanAllocation,baseFileName+"Partition.rda");<br/>
	vectorToFile("PopSize", mPopSize, "Resources" , mResources, baseFileName+"PopResScatter.rda");<br/>
	vectorToFile("PopSize"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , mPopSize, <br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Resources"&nbsp;&nbsp;&nbsp;&nbsp; , mResources,<br/>
				 "MeanBodySize"&nbsp;&nbsp;, mMeanBodySize,<br/>
				 "MeanReserves"&nbsp;&nbsp;, mMeanReserves,<br/>
				 "MeanFoodIntake", mMeanFoodIntake,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MeanPartition" , mMeanAllocation,<br/>
				&nbsp;&nbsp;baseFileName+"Scatter.rda");<br/>
	vectorToFile("PopSize"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , mPopSize, <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MeanPartition" , mMeanAllocation,<br/>
				&nbsp;&nbsp;baseFileName+"SubScatter.rda");<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".\nSaving done.\n";<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> MeasurementsTable::addVectorToFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; myVector, <a href="CppStdOfstream.htm">std::ofstream</a>&amp; file) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(file.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> myVector.size();<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Size of vector '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "':" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> size <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Contents of vector '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "':" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;myVector[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> plotMeasurementsTable(<a href="CppStdVector.htm">std::vector</a>&lt;MeasurementsTable&gt;&amp; tables)<br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Plotting started." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nTables <a href="CppOperatorAssign.htm">=</a> tables.size();<br/>
	<a href="CppStdString.htm">std::string</a> temp;<br/>
	<a href="CppGnuplot.htm">Gnuplot</a> myPlot;<br/>
	myPlot.setStyle(styleLines);<br/>
	usleep(150000); myPlot.changeWindow(0);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mPopSize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,"PopSize"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mPopSizeJuvenile,"PopSizeJuvenile"+indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mPopSizeAdult&nbsp;&nbsp; ,"PopSizeAdult"&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mNoffspring&nbsp;&nbsp;&nbsp;&nbsp; ,"Noffspring"&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	<br/>
	usleep(150000); myPlot.changeWindow(1);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mResources,"Resources"+indexToPlasticity(i));<br/>
	<a href="CppComment.htm">/*</a><br/>
	usleep(150000); myPlot.changeWindow(2);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanBodySize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,"Mean body size"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanBodySizeJuvenile,"Mean body sizeJuvenile"+indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanBodySizeAdult&nbsp;&nbsp; ,"Mean body sizeAdult"&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	usleep(150000); myPlot.changeWindow(3);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanReserves&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,"Mean reserves"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanReservesJuvenile,"Mean reservesJuvenile"+indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanReservesAdult&nbsp;&nbsp; ,"Mean reservesAdult"&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	usleep(150000); myPlot.changeWindow(4);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanChanceToDie&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,"Mean chance to die"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanChanceToDieJuvenile,"Mean chance to dieJuvenile"+indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanChanceToDieAdult&nbsp;&nbsp; ,"Mean chance to dieAdult"&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	usleep(150000); myPlot.changeWindow(5);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanFoodIntake,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Mean food intake"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanFoodIntakeJuvenile,"Mean food intakeJuvenile"+indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanFoodIntakeAdult,&nbsp;&nbsp; "Mean food intakeAdult"&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	usleep(150000); myPlot.changeWindow(6);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanAllocation,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Mean allocation"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanFractionBiomassPerOffspringInitial,"Mean fraction biomass per offspring initial"+indexToPlasticity(i));<br/>
	<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nTables; <a href="CppOperatorIncrement.htm">++</a>i) myPlot.plot(tables[i].mMeanFractionBiomassPerOffspring,"Mean fraction biomass per offspring"+indexToPlasticity(i));<br/>
	<a href="CppComment.htm">*/</a><br/>
	usleep(150000); <br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Done plotting." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> drawConclusions(<b><a href="CppConst.htm">const</a></b> MeasurementsTable&amp; table,<a href="CppStdVector.htm">std::vector</a>&lt;EnumConclusion&gt;&amp; conclusions)<br/>
{<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> meanPopSize&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	<b><a href="CppDouble.htm">double</a></b> meanNoffspring&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	<b><a href="CppDouble.htm">double</a></b> meanBodySize&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	<b><a href="CppDouble.htm">double</a></b> meanReserves&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	<b><a href="CppDouble.htm">double</a></b> meanChanceToDie <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	<b><a href="CppDouble.htm">double</a></b> meanFoodIntake&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	<b><a href="CppDouble.htm">double</a></b> meanAllocation&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	<b><a href="CppDouble.htm">double</a></b> meanFractionBiomassPerOffspringInitial <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	<b><a href="CppDouble.htm">double</a></b> meanFractionBiomassPerOffspring&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
	SafeMean(table.mPopSize,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meanPopSize);<br/>
	SafeMean(table.mNoffspring,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;meanNoffspring);<br/>
	SafeMean(table.mMeanBodySize,&nbsp;&nbsp;&nbsp;&nbsp;meanBodySize);<br/>
	SafeMean(table.mMeanReserves,&nbsp;&nbsp;&nbsp;&nbsp;meanReserves);<br/>
	SafeMean(table.mMeanChanceToDie, meanChanceToDie);<br/>
	SafeMean(table.mMeanFoodIntake,&nbsp;&nbsp;meanFoodIntake);<br/>
	SafeMean(table.mMeanAllocation,&nbsp;&nbsp;meanAllocation);<br/>
	SafeMean(table.mMeanFractionBiomassPerOffspringInitial, meanFractionBiomassPerOffspringInitial);<br/>
	SafeMean(table.mMeanFractionBiomassPerOffspring, meanFractionBiomassPerOffspring);<br/>
<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Mean population size: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanPopSize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<b><a href="CppIf.htm">if</a></b> (meanPopSize&lt;500.0) conclusions.push_back(CcMeanPopSizeSmall);<br/>
	<b><a href="CppIf.htm">if</a></b> (meanPopSize&gt;1500.0) conclusions.push_back(CcMeanPopSizeLarge);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Mean offspring produced: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanNoffspring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Mean body size: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanBodySize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Mean reserves: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanReserves <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Mean chance to die: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanChanceToDie <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<b><a href="CppIf.htm">if</a></b> (meanChanceToDie &lt; 0.001) conclusions.push_back(CcChanceToDieSmall);<br/>
	<b><a href="CppIf.htm">if</a></b> (meanChanceToDie &gt; 0.1) conclusions.push_back(CcChanceToDieLarge);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Mean food intake: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanFoodIntake <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "meanAllocation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanAllocation <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "meanFractionBiomassPerOffspringInitial: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanFractionBiomassPerOffspringInitial <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<b><a href="CppIf.htm">if</a></b> (meanFractionBiomassPerOffspringInitial&gt;0.99) conclusions.push_back(CcFractionBiomassPerOffspringInitialLarge);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "meanFractionBiomassPerOffspring: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> meanFractionBiomassPerOffspring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> interpretMeasurementsTables(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;MeasurementsTable&gt;&amp; table)<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> table.size();<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanPopSize(size);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanNoffspring(size);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanBodySize(size);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanReserves(size);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanChanceToDie(size);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanFoodIntake(size);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanAllocation(size);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanFractionBiomassPerOffspringInitial(size);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; meanFractionBiomassPerOffspring(size);<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		SafeMean(table[i].mPopSize,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meanPopSize[i]);<br/>
		SafeMean(table[i].mNoffspring,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;meanNoffspring[i]);<br/>
		SafeMean(table[i].mMeanBodySize,&nbsp;&nbsp;&nbsp;&nbsp;meanBodySize[i]);<br/>
		SafeMean(table[i].mMeanReserves,&nbsp;&nbsp;&nbsp;&nbsp;meanReserves[i]);<br/>
		SafeMean(table[i].mMeanChanceToDie, meanChanceToDie[i]);<br/>
		SafeMean(table[i].mMeanFoodIntake,&nbsp;&nbsp;meanFoodIntake[i]);<br/>
		SafeMean(table[i].mMeanAllocation,&nbsp;&nbsp;meanAllocation[i]);<br/>
		SafeMean(table[i].mMeanFractionBiomassPerOffspringInitial, meanFractionBiomassPerOffspringInitial[i]);<br/>
		SafeMean(table[i].mMeanFractionBiomassPerOffspring, meanFractionBiomassPerOffspring[i]);<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/OptionsFile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/OptionsFile.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;OptionsFile.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 16 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>OptionFile embodies the user options and one or more SimulationFiles.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>OptionsFile is used by Experiment, which runs a Simulation <b><a href="CppFor.htm">for</a></b> every SimulationFile.<br/>
<a href="CppComment.htm">///</a>OptionsFile is used by Simulation, which it e.g. tells to give intermediate output.<br/>
<a href="CppComment.htm">///</a>The SimulationFiles are the biological parameters used by a Simulation.<br/>
<br/>
 <br/>
<a href="CppIfndef.htm">#ifndef</a> __OPTIONS_<a href="CppCfile.htm">FILE</a><br/>
<a href="CppDefine.htm">#define</a> __OPTIONS_<a href="CppCfile.htm">FILE</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "SimulationFile.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> OptionsFileParameters<br/>
{<br/>
	<b><a href="CppBool.htm">bool</a></b> <b><a href="CppDo.htm">do</a></b>Plot;<br/>
	<b><a href="CppBool.htm">bool</a></b> <b><a href="CppDo.htm">do</a></b>WriteOutputFile;<br/>
	<b><a href="CppBool.htm">bool</a></b> showYearSummary;<br/>
};<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> OptionsFile<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	OptionsFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName <a href="CppOperatorAssign.htm">=</a> "<b><a href="CppDefault.htm">default</a></b>OptionsFile.txt");<br/>
	~OptionsFile();<br/>
	<b><a href="CppVoid.htm">void</a></b> showUser() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> showSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> addSimFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> removeSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
	<br/>
	<a href="CppComment.htm">//</a>Getters<br/>
	<a href="CppStdString.htm">std::string</a> getFileName() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> mFileName; }<br/>
	<b><a href="CppInt.htm">int</a></b> getUsesSimFile() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> mUsesSimFile; }<br/>
	ParameterSetSimulation getParameterSetSimulation() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppBool.htm">bool</a></b> getDoPlot() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <b><a href="CppReturn.htm">return</a></b> mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>Plot; }<br/>
	<b><a href="CppBool.htm">bool</a></b> getDoWriteOutputFile() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>WriteOutputFile; }<br/>
	<b><a href="CppBool.htm">bool</a></b> getShowYearSummary() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> mOptionsFileParameters.showYearSummary; }<br/>
	OptionsFileParameters getOptionsFileParameters() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mOptionsFileParameters; }<br/>
<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNsimFiles() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> mSimulationFile.size(); }<br/>
	<a href="CppStdString.htm">std::string</a> getOutputFileName(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mSimulationFile[index].getOutputFileName(); }<br/>
<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; getSimulationFileNames() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppConst.htm">const</a></b> SimulationFile&amp; getSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(index<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index&lt;mSimulationFile.size()); <b><a href="CppReturn.htm">return</a></b> mSimulationFile[index]; }<br/>
	<a href="CppStdString.htm">std::string</a> getSimFileName(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index) <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(index<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index&lt;mSimulationFile.size()); <b><a href="CppReturn.htm">return</a></b> mSimulationFile[index].getFileName(); }<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;SimulationFile&gt; getSimulationFiles() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mSimulationFile; }<br/>
<br/>
	<a href="CppComment.htm">//</a>Setters of OptionsFile data<br/>
	<b><a href="CppVoid.htm">void</a></b> setPlotting(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setWriteOutputFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setShowYearSummary(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setUsesSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
	<a href="CppComment.htm">//</a>Setters of SimFile data <br/>
	<b><a href="CppVoid.htm">void</a></b> setOutputFileName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setSim<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setStartPopSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setStartResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setBodySizeAdult(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setConstA(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setConstB(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setConstC(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setReproductionMode(<b><a href="CppConst.htm">const</a></b> EnumReproductionMode&amp;);<br/>
<br/>
	<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
	<a href="CppComment.htm">//</a><br/>
	<a href="CppComment.htm">//</a> COMPUTER GENERATED CODE<br/>
	<a href="CppComment.htm">//</a> OptionsFile<br/>
	<a href="CppComment.htm">//</a><br/>
	<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD(<b><a href="CppConst.htm">const</a></b> EnumD&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF(<b><a href="CppConst.htm">const</a></b> EnumF&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG(<b><a href="CppConst.htm">const</a></b> EnumG&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM(<b><a href="CppConst.htm">const</a></b> EnumM&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN(<b><a href="CppConst.htm">const</a></b> EnumN&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP(<b><a href="CppConst.htm">const</a></b> EnumP&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ(<b><a href="CppConst.htm">const</a></b> EnumQ&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR(<b><a href="CppConst.htm">const</a></b> EnumR&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW(<b><a href="CppConst.htm">const</a></b> EnumW&amp;);<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
	<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mFileName;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;SimulationFile&gt; mSimulationFile;<br/>
	<br/>
	<a href="CppComment.htm">//</a>Options<br/>
	<b><a href="CppInt.htm">int</a></b>&nbsp;&nbsp;mUsesSimFile; <a href="CppComment.htm">//</a>-1 <b><a href="CppIf.htm">if</a></b> 'all'<br/>
	OptionsFileParameters mOptionsFileParameters;<br/>
	<br/>
	<a href="CppComment.htm">//</a>File I/O<br/>
	<b><a href="CppVoid.htm">void</a></b> readFromFile();<br/>
	<b><a href="CppVoid.htm">void</a></b> writeToFile() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __OPTIONS_<a href="CppCfile.htm">FILE</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/OptionsFile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/OptionsFile.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;OptionsFile<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 16 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "OptionsFile.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
OptionsFile::OptionsFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName) :<br/>
	mFileName(fileName),<br/>
	mUsesSimFile(0)<br/>
	<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(mFileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
	{<br/>
		readFromFile();<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<a href="CppComment.htm">//</a>File does not exist, fill with <b><a href="CppDefault.htm">default</a></b> values and write<br/>
	<a href="CppComment.htm">//</a><br/>
	mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>Plot <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
	mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>WriteOutputFile <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
	mOptionsFileParameters.showYearSummary <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
	<br/>
	SimulationFile <b><a href="CppDefault.htm">default</a></b>SimFile;<br/>
	mSimulationFile.push_back(<b><a href="CppDefault.htm">default</a></b>SimFile);<br/>
	<a href="CppComment.htm">//</a>mSimulationFile.push_back(SimulationFile());<br/>
<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
OptionsFile::~OptionsFile()<br/>
{<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::readFromFile()<br/>
{<br/>
	<a href="CppStdIfstream.htm">std::ifstream</a> fileInput(mFileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(fileInput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimulationFiles;	<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; simulationFileName;<br/>
	<br/>
	fileInput <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> mUsesSimFile<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>Plot<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>WriteOutputFile<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> mOptionsFileParameters.showYearSummary<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> nSimulationFiles<br/>
		;<br/>
	<br/>
	simulationFileName.resize(nSimulationFiles);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimulationFiles; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		fileInput <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> simulationFileName[i];<br/>
	}<br/>
	<br/>
	mSimulationFile.clear();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimulationFiles; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		SimulationFile temp(simulationFileName[i]);<br/>
		mSimulationFile.push_back(temp);<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(mSimulationFile.size()<a href="CppOperatorEqual.htm">==</a>nSimulationFiles);<br/>
	fileInput.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Writes all members to disk. Does NOT <b><a href="CppDo.htm">do</a></b> so <b><a href="CppFor.htm">for</a></b> SimFile's.<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::writeToFile() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(mFileName.c_str());<br/>
	<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimulationFiles <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();	<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; simulationFileName;<br/>
	<br/>
	fileOutput<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>Plot <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>WriteOutputFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mOptionsFileParameters.showYearSummary <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> nSimulationFiles <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		;<br/>
		<br/>
	simulationFileName.resize(nSimulationFiles);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimulationFiles; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mSimulationFile[i].getFileName() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	}<br/>
<br/>
	fileOutput.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; OptionsFile::getSimulationFileNames() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nFileNames <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; simulationFileName(nFileNames);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nFileNames; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		simulationFileName[i] <a href="CppOperatorAssign.htm">=</a> mSimulationFile[i].getFileName();<br/>
	}<br/>
	<b><a href="CppIf.htm">if</a></b> (nFileNames<a href="CppOperatorEqual.htm">==</a>0) simulationFileName.push_back("&lt; None &gt;");<br/>
	<b><a href="CppReturn.htm">return</a></b> simulationFileName;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::showUser() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tShowing Option File '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mFileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "':"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tUsing Simulation File: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1 ? "all." : "#"+itoa(mUsesSimFile)+".")<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlot results at end of simulation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>Plot ? "yes." : "no.")<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tShow year summary: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (mOptionsFileParameters.showYearSummary ? "yes." : "no." )<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tWrite results to file at end of simulation: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>WriteOutputFile ? "yes." : "no.")<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; simFileName <a href="CppOperatorAssign.htm">=</a> getSimulationFileNames();<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFileNames <a href="CppOperatorAssign.htm">=</a> simFileName.size();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFileNames; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\tSimulation file #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> simFileName[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Shows the SimFile with index 'index' (brilliant naming).<br/>
<a href="CppComment.htm">///</a>Index <a href="CppOperatorMinus.htm">-</a>1 denotes to show all SimFiles.<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::showSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(index<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index&lt;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<b><a href="CppIf.htm">if</a></b> (index<a href="CppOperatorNotEqual.htm">!=</a>-1) <br/>
	{<br/>
		mSimulationFile[index].showUser();<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFiles <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFiles; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].showUser();<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::addSimFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
	mSimulationFile.push_back(SimulationFile(fileName));<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Removess the SimFile with index 'index' (brilliant naming).<br/>
<a href="CppComment.htm">///</a>Index <a href="CppOperatorMinus.htm">-</a>1 denotes to show all SimFiles.<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::removeSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(index<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index&lt;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<b><a href="CppIf.htm">if</a></b> (index<a href="CppOperatorNotEqual.htm">!=</a>-1) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tRemoving Simulation File '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mSimulationFile.at(index).getFileName()<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' from Options File.\n\n";<br/>
		mSimulationFile.erase(mSimulationFile.begin()+index);<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tRemoving all Simulation Files from Options File.\n\n";<br/>
		mSimulationFile.resize(0);<br/>
	}<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setPlotting(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>&amp; <b><a href="CppDo.htm">do</a></b>Plot)<br/>
{<br/>
	mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>Plot <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDo.htm">do</a></b>Plot;<br/>
	<a href="CppStdCout.htm">std::cout</a> <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tTurned plotting " <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>Plot <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? "on" : "off")<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".\n\n";<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setWriteOutputFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>&amp; <b><a href="CppDo.htm">do</a></b>WriteOutputFile)<br/>
{<br/>
	mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>WriteOutputFile <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDo.htm">do</a></b>WriteOutputFile;<br/>
	<a href="CppStdCout.htm">std::cout</a> <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tTurned writing to output file " <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (mOptionsFileParameters.<b><a href="CppDo.htm">do</a></b>WriteOutputFile <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? "on" : "off")<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".\n\n";<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setShowYearSummary(<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>&amp; showYearSummary)<br/>
{<br/>
	mOptionsFileParameters.showYearSummary <a href="CppOperatorAssign.htm">=</a> showYearSummary;<br/>
	<a href="CppStdCout.htm">std::cout</a> <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tTurned showing a year summary " <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (mOptionsFileParameters.showYearSummary <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> ? "on" : "off")<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".\n\n";<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setUsesSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>'all'<br/>
		mUsesSimFile <a href="CppOperatorAssign.htm">=</a> index;<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet files in focus to 'all'.\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (index &gt; <a href="CppOperatorMinus.htm">-</a>1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()))<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Valid index<br/>
		mUsesSimFile <a href="CppOperatorAssign.htm">=</a> index;<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet files in focus to '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'.\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Invalid index<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIndex '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> index <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' is out of range."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease give an index from 0 to (not including)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mSimulationFile.size()<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setOutputFileName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fileNameNoExt <a href="CppOperatorAssign.htm">=</a> stripExtension(fileName);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fileNameExt <a href="CppOperatorAssign.htm">=</a> getExtension(fileName);<br/>
		<a href="CppAssert.htm">assert</a>(stripExtension("test.txt")<a href="CppOperatorEqual.htm">==</a>"test");<br/>
		<a href="CppAssert.htm">assert</a>(getExtension("test.txt")<a href="CppOperatorEqual.htm">==</a>"txt");<br/>
		<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSetting 'simulation output file' of all Simulation Files." ;<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) <br/>
		{<br/>
			<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <b><a href="CppNew.htm">new</a></b>FileName <a href="CppOperatorAssign.htm">=</a> fileNameNoExt <a href="CppOperatorPlus.htm">+</a> itoa(i) <a href="CppOperatorPlus.htm">+</a> "." <a href="CppOperatorPlus.htm">+</a> fileNameExt;<br/>
			<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;&nbsp;&nbsp;Setting 'simulation output file' of simulation file #"<br/>
				<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppNew.htm">new</a></b>FileName;<br/>
			mSimulationFile[i].setOutputFileName(<b><a href="CppNew.htm">new</a></b>FileName);<br/>
		}<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setOutputFileName(fileName);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'simulation output file' of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; seed)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's seed to 'seed'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setSeed(seed);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'seed' of all Simulation Files to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> seed <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setSeed(seed);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'seed' of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> seed <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setSim<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; sim<a href="CppTime.htm">Time</a>)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setMax<a href="CppTime.htm">Time</a>(sim<a href="CppTime.htm">Time</a>);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'simulation running <a href="CppTime.htm">time</a>' of all Simulation Files to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sim<a href="CppTime.htm">Time</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setMax<a href="CppTime.htm">Time</a>(sim<a href="CppTime.htm">Time</a>);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'simulation running <a href="CppTime.htm">time</a>' of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sim<a href="CppTime.htm">Time</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setStartPopSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; popSize)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setStartPopSize(popSize);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'starting population size' of all Simulation Files to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> popSize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setStartPopSize(popSize);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'starting population size' of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> popSize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setStartResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; resources)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setStartResources(resources);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'starting resources' of all Simulation Files to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> resources <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setStartResources(resources);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'starting resources' of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> resources <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setBodySizeAdult(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; bodySize)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setBodySizeAdult(bodySize);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'body size of adult' of all Simulation Files to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> bodySize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setBodySizeAdult(bodySize);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'body size of adult' of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> bodySize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setConstA(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppConst.htm">const</a></b>A)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setConstA(<b><a href="CppConst.htm">const</a></b>A);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'constant A' of all Simulation Files to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setConstA(<b><a href="CppConst.htm">const</a></b>A);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet SimFile <a href="CppTime.htm">time</a> of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppConst.htm">const</a></b>A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setConstB(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppConst.htm">const</a></b>B)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setConstB(<b><a href="CppConst.htm">const</a></b>B);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'constant B' of all Simulation Files to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setConstB(<b><a href="CppConst.htm">const</a></b>B);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'constant B' of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppConst.htm">const</a></b>B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setConstC(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppConst.htm">const</a></b>C)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setConstC(<b><a href="CppConst.htm">const</a></b>C);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'constant A' of all Simulation Files to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setConstC(<b><a href="CppConst.htm">const</a></b>C);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet SimFile <a href="CppTime.htm">time</a> of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppConst.htm">const</a></b>C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> OptionsFile::setReproductionMode(<b><a href="CppConst.htm">const</a></b> EnumReproductionMode&amp; <b><a href="CppEnum.htm">enum</a></b>ReproductionMode)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>Set all SimFile's <a href="CppTime.htm">time</a> to 'sim<a href="CppTime.htm">Time</a>'<br/>
		<a href="CppComment.htm">//</a><a href="CppStdFor_each.htm">std::for_each</a>(mSimulationFile.begin(),mSimulationFile.end(), <a href="CppStdMem_fun.htm">std::mem_fun</a>(&amp;SimulationFile::setReproductionMode(<b><a href="CppEnum.htm">enum</a></b>ReproductionMode));<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFile <a href="CppOperatorAssign.htm">=</a> mSimulationFile.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFile; <a href="CppOperatorIncrement.htm">++</a>i) mSimulationFile[i].setReproductionMode(<b><a href="CppEnum.htm">enum</a></b>ReproductionMode);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet 'reproduction mode' of all Simulation Files to " <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeToString(<b><a href="CppEnum.htm">enum</a></b>ReproductionMode) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mSimulationFile[mUsesSimFile].setReproductionMode(<b><a href="CppEnum.htm">enum</a></b>ReproductionMode);<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet SimFile <a href="CppTime.htm">time</a> of Simulation File #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mUsesSimFile <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " to " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeToString(<b><a href="CppEnum.htm">enum</a></b>ReproductionMode) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\n";<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
ParameterSetSimulation OptionsFile::getParameterSetSimulation() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mSimulationFile.size()&gt;0);<br/>
	<a href="CppAssert.htm">assert</a>(mUsesSimFile<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mUsesSimFile &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mSimulationFile.size()));<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (mUsesSimFile<a href="CppOperatorEqual.htm">==</a>-1) <b><a href="CppReturn.htm">return</a></b> mSimulationFile[0].getParameterSetSimulation();<br/>
	<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> mSimulationFile[mUsesSimFile].getParameterSetSimulation();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/ParameterSets.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/ParameterSets.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;ParameterSets.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 31 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __PARAMETERSETS_H<br/>
<a href="CppDefine.htm">#define</a> __PARAMETERSETS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Enumerations.h"<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;COMPUTER GENERATED CODE, except <b><a href="CppFor.htm">for</a></b>:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> ParameterSetSimulation (at the bottom)<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetD<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetD() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetD&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;D.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;D.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;D.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;D.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;D.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetD* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetD&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetF<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetF() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetF&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;F.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;F.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;F.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;F.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;F.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetF* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetF&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetG<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetG() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetG&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;G.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;G.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;G.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;G.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;G.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetG* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetG&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetM<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetM() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetM&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;M.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;M.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;M.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;M.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;M.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetM* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetM&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetN<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetN() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetN&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;N.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;N.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;N.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;N.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;N.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetN* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetN&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetP<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetP() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetP&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;P.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;P.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;P.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;P.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;P.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetP* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetP&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetQ<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetQ() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetQ&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Q.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Q.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Q.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Q.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Q.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetQ* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetQ&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetR<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetR() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetR&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;R.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;R.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;R.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;R.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;R.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetR* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetR&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetW<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> A;<br/>
	<b><a href="CppDouble.htm">double</a></b> B;<br/>
	<b><a href="CppDouble.htm">double</a></b> C;<br/>
	<b><a href="CppDouble.htm">double</a></b> D;<br/>
	<b><a href="CppDouble.htm">double</a></b> E;<br/>
	ParameterSetW() : A(0.0), B(0.0), C(0.0), D(0.0), E(0.0) { ; }<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetW&amp; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;W.A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;W.B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;W.C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;W.D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;W.E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.E;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetW* pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *pParams; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetW&gt;&amp; pParams)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pParams.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> ParameterSetSimulation<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	ParameterSetSimulation() :<br/>
	outputFileName("<b><a href="CppDefault.htm">default</a></b>OutputFile.txt"),<br/>
	seed(0),<br/>
	reproductionMode(<b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount),<br/>
	startingPopSize(1000),<br/>
	startingResources(0.0),<br/>
	max<a href="CppTime.htm">Time</a>(100),<br/>
	A(1.0),<br/>
	B(1.0),<br/>
	C(1.0),<br/>
	bodySizeAdult(10.0),<br/>
	<b><a href="CppEnum.htm">enum</a></b>D(<b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>),<br/>
	<b><a href="CppEnum.htm">enum</a></b>F(<b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>),<br/>
	<b><a href="CppEnum.htm">enum</a></b>G(<b><a href="CppEnum.htm">enum</a></b>Gconstant),<br/>
	<b><a href="CppEnum.htm">enum</a></b>M(<b><a href="CppEnum.htm">enum</a></b>Mconstant),<br/>
	<b><a href="CppEnum.htm">enum</a></b>N(<b><a href="CppEnum.htm">enum</a></b>Nconstant),<br/>
	<b><a href="CppEnum.htm">enum</a></b>P(<b><a href="CppEnum.htm">enum</a></b>Pconstant),<br/>
	<b><a href="CppEnum.htm">enum</a></b>Q(<b><a href="CppEnum.htm">enum</a></b>Qconstant),<br/>
	<b><a href="CppEnum.htm">enum</a></b>R(<b><a href="CppEnum.htm">enum</a></b>Rconstant),<br/>
	<b><a href="CppEnum.htm">enum</a></b>W(<b><a href="CppEnum.htm">enum</a></b>Wzero)<br/>
	{<br/>
		<a href="CppComment.htm">//</a>Nothing<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> outputFileName;<br/>
	<b><a href="CppInt.htm">int</a></b> seed;<br/>
	EnumReproductionMode reproductionMode;<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> startingPopSize;<br/>
	<b><a href="CppDouble.htm">double</a></b> startingResources;<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> max<a href="CppTime.htm">Time</a>;<br/>
	<b><a href="CppDouble.htm">double</a></b> A, B, C;<br/>
	<b><a href="CppDouble.htm">double</a></b> bodySizeAdult;<br/>
	ParameterSetD paramsD; EnumD <b><a href="CppEnum.htm">enum</a></b>D;<br/>
	ParameterSetF paramsF; EnumF <b><a href="CppEnum.htm">enum</a></b>F;<br/>
	ParameterSetG paramsG; EnumG <b><a href="CppEnum.htm">enum</a></b>G;<br/>
	ParameterSetM paramsM; EnumM <b><a href="CppEnum.htm">enum</a></b>M;<br/>
	ParameterSetN paramsN; EnumN <b><a href="CppEnum.htm">enum</a></b>N;<br/>
	ParameterSetP paramsP; EnumP <b><a href="CppEnum.htm">enum</a></b>P;<br/>
	ParameterSetQ paramsQ; EnumQ <b><a href="CppEnum.htm">enum</a></b>Q;<br/>
	ParameterSetR paramsR; EnumR <b><a href="CppEnum.htm">enum</a></b>R;<br/>
	ParameterSetW paramsW; EnumW <b><a href="CppEnum.htm">enum</a></b>W;<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetSimulation&amp; params)<br/>
	{<br/>
		os<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tOutput file name: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.outputFileName<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t<a href="CppRandomNumber.htm">Random number</a> generator seed: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.seed<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tStarting PopSize: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.startingPopSize<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tStarting resources: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.startingResources<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tMax <a href="CppTime.htm">time</a>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.max<a href="CppTime.htm">Time</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\talpha: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.A<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tbeta: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.B<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tgamma: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.C<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tbody size adult: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.bodySizeAdult<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tReproductionMode: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeToString(params.reproductionMode) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>DtoString(params.<b><a href="CppEnum.htm">enum</a></b>D) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsD <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>FtoString(params.<b><a href="CppEnum.htm">enum</a></b>F) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsF <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>GtoString(params.<b><a href="CppEnum.htm">enum</a></b>G) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsG <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>MtoString(params.<b><a href="CppEnum.htm">enum</a></b>M) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsM <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>NtoString(params.<b><a href="CppEnum.htm">enum</a></b>N) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsN <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>PtoString(params.<b><a href="CppEnum.htm">enum</a></b>P) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsP <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppQt.htm">Qt</a>oString(params.<b><a href="CppEnum.htm">enum</a></b>Q) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsQ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>RtoString(params.<b><a href="CppEnum.htm">enum</a></b>R) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsR <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppEnum.htm">enum</a></b>WtoString(params.<b><a href="CppEnum.htm">enum</a></b>W) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.paramsW <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> ParameterSetSimulation *params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *params; <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
	<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetSimulation&gt; params)<br/>
	{<br/>
		os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> params.get(); <b><a href="CppReturn.htm">return</a></b> os;<br/>
	}<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __PARAMETERSETS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Random.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Random.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Random.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 24 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 *&nbsp;&nbsp;Obtained from Sander van Doorn<br/>
 *<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> __SANDER_RANDOM_H<br/>
<a href="CppDefine.htm">#define</a> __SANDER_RANDOM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStd.htm">std</a>lib.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> uniform();<br/>
<b><a href="CppDouble.htm">double</a></b> gasdev();<br/>
<b><a href="CppVoid.htm">void</a></b> setSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<b><a href="CppDouble.htm">double</a></b> normal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
<b><a href="CppInt.htm">int</a></b> randomNumber(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<b><a href="CppInt.htm">int</a></b> rando(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __SANDER_RANDOM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Random.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Random.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Random<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 24 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 *&nbsp;&nbsp;Obtained from Sander van Doorn<br/>
 *<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "Random.h"<br/>
<b><a href="CppLong.htm">long</a></b> <b><a href="CppInt.htm">int</a></b> idum;<br/>
<a href="CppDefine.htm">#define</a> MBIG 1000000000<br/>
<a href="CppDefine.htm">#define</a> MSEED 161803398<br/>
<a href="CppDefine.htm">#define</a> MZ 0<br/>
<a href="CppDefine.htm">#define</a> FAC (1.0/MBIG)<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> uniform()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> inext,inextp;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppLong.htm">long</a></b> ma[56];<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> iff=0;<br/>
&nbsp;&nbsp;<b><a href="CppLong.htm">long</a></b> mj,mk;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i,ii,k;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (idum &lt; 0 <a href="CppOperatorLogicalOr.htm">||</a> iff <a href="CppOperatorEqual.htm">==</a> 0) <br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iff=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mj=MSEED-(idum &lt; 0 ? <a href="CppOperatorMinus.htm">-</a>idum : idum);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mj <a href="CppOperatorModulusAssign.htm">%=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ma[55]=mj;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mk=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=1;i<a href="CppOperatorLessEqual.htm">&lt;=</a>54;i<a href="CppOperatorIncrement.htm">++</a>) <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ii=(21*i) <a href="CppOperatorModulus.htm">%</a> 55;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[ii]=mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mk=mj-mk;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mk &lt; MZ) mk <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mj=ma[ii];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (k=1;k<a href="CppOperatorLessEqual.htm">&lt;=</a>4;k<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=1;i<a href="CppOperatorLessEqual.htm">&lt;=</a>55;i<a href="CppOperatorIncrement.htm">++</a>) <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ma[i] <a href="CppOperatorMinusAssign.htm">-=</a> ma[1+(i+30) <a href="CppOperatorModulus.htm">%</a> 55];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ma[i] &lt; MZ) ma[i] <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inext=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inextp=31;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;idum=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppOperatorIncrement.htm">++</a>inext <a href="CppOperatorEqual.htm">==</a> 56) inext=1;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppOperatorIncrement.htm">++</a>inextp <a href="CppOperatorEqual.htm">==</a> 56) inextp=1;<br/>
&nbsp;&nbsp;mj=ma[inext]-ma[inextp];<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mj &lt; MZ) mj <a href="CppOperatorPlusAssign.htm">+=</a> MBIG;<br/>
&nbsp;&nbsp;ma[inext]=mj;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mj*FAC;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppDouble.htm">double</a></b> Uniform(<b><a href="CppVoid.htm">void</a></b>)<br/>
<br/>
<a href="CppUndef.htm">#undef</a> MBIG<br/>
<a href="CppUndef.htm">#undef</a> MSEED<br/>
<a href="CppUndef.htm">#undef</a> MZ<br/>
<a href="CppUndef.htm">#undef</a> FAC<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> gasdev()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> iset=0;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> gset;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> fac,r,v1,v2;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> uniform();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>&nbsp;&nbsp;(iset <a href="CppOperatorEqual.htm">==</a> 0) <br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDo.htm">do</a></b> <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1=2.0*uniform()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v2=2.0*uniform()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r=v1*v1+v2*v2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 1.0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fac=sqrt(-2.0*log(r)/r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;gset=v1*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iset=1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v2*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b> (iset <a href="CppOperatorEqual.htm">==</a> 0) <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iset=0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppIf.htm">if</a></b> (iset <a href="CppOperatorEqual.htm">==</a> 0) ELSE-part<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>End of: <b><a href="CppDouble.htm">double</a></b> gasdev(<b><a href="CppVoid.htm">void</a></b>)<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> setSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; seed) <br/>
&nbsp;&nbsp;{ <br/>
&nbsp;&nbsp;idum <a href="CppOperatorAssign.htm">=</a> <b><a href="CppLong.htm">long</a></b>(-abs(seed));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;100; i<a href="CppOperatorIncrement.htm">++</a>) uniform();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;} <br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> normal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; mean,<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <a href="CppStd.htm">std</a>ev)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> gasdev()*<a href="CppStd.htm">std</a>ev <a href="CppOperatorPlus.htm">+</a> mean;<br/>
&nbsp;&nbsp;} <br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> randomNumber(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; N)<br/>
&nbsp;&nbsp;{	<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> out;<br/>
&nbsp;&nbsp;x=floor(uniform()*N);<br/>
&nbsp;&nbsp;out=<b><a href="CppInt.htm">int</a></b> (x);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> out;<br/>
&nbsp;&nbsp;} <br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> rando(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; N)<br/>
&nbsp;&nbsp;{	<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> out;<br/>
&nbsp;&nbsp;x=floor(uniform()*N);<br/>
&nbsp;&nbsp;out=<b><a href="CppInt.htm">int</a></b> (x);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> out;<br/>
&nbsp;&nbsp;} <br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Sim4Interpreter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Sim4Interpreter.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Sim4Interpreter.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 16 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>Sim4Interpreter interprets the user's command line input.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The only members it has are mCommands and mOptionsFile.<br/>
<a href="CppComment.htm">///</a>mCommands contains the words the user typed.<br/>
<a href="CppComment.htm">///</a>mOptionsFile embodies the user's Options file, which can be <br/>
<a href="CppComment.htm">///</a>modified by the user via Sim4Interpreter.<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __SIM4_INTERPRETER<br/>
<a href="CppDefine.htm">#define</a> __SIM4_INTERPRETER<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "OptionsFile.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyD.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyF.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyG.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyM.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyN.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyP.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyQ.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyR.h"<br/>
<a href="CppInclude.htm">#include</a> "StrategyW.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Sim4Interpreter<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	Sim4Interpreter(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;, <b><a href="CppChar.htm">char</a></b>* <b><a href="CppConst.htm">const</a></b> []);<br/>
	OptionsFile getOptionsFile() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mOptionsFile; }<br/>
<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mIniFileName;<br/>
	OptionsFile mOptionsFile;<br/>
	<a href="CppStdString.htm">std::string</a> getOptionsFileName() <b><a href="CppConst.htm">const</a></b>;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; mCommand;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; mArgv;<br/>
	<b><a href="CppBool.htm">bool</a></b> mDoExit;<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> setOptionsFileName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
	<a href="CppComment.htm">//</a>'show' means that no next words must be interpreted<br/>
	<b><a href="CppVoid.htm">void</a></b> showHelp() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> showHelpOptionFile() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> showHelpSimFile() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> showUses() <b><a href="CppConst.htm">const</a></b>; <br/>
	<b><a href="CppVoid.htm">void</a></b> showOptionsFile() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> show<a href="CppAbout.htm">About</a>() <b><a href="CppConst.htm">const</a></b>; <br/>
<br/>
	<a href="CppComment.htm">//</a>'interpret' mean that also next words must be interpreted<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretCommandLine();<br/>
<br/>
	<a href="CppComment.htm">//</a>General <a href="CppInterface.htm">interface</a><br/>
	<b><a href="CppVoid.htm">void</a></b> interpretHelp(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretUseOptionsFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretShowSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretCopyOptionsFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretCopySimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> interpret<a href="CppAdd.htm">Add</a>SimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretRemoveSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretExecute(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> test<a href="CppFunction.htm">Function</a>s() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> extractCov() <b><a href="CppConst.htm">const</a></b>;<br/>
	<a href="CppComment.htm">//</a>Options File <a href="CppInterface.htm">interface</a><br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetOutputFileName(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetWriteOutputFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetWriteOutput(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetText(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetPlotting(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretUsesSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetSim<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetStartPopSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetStartResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetBodySizeAdult(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetConstA(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetConstB(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetConstC(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetReproductionMode(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
	<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
	<a href="CppComment.htm">//</a><br/>
	<a href="CppComment.htm">//</a> COMPUTER GENERATED CODE<br/>
	<a href="CppComment.htm">//</a> Sim4Interpreter<br/>
	<a href="CppComment.htm">//</a><br/>
	<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetD<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetF<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetG<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetM<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetN<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetP<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetQ<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetR<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetW<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetD<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetF<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetG<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetM<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetN<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetP<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetQ<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetR<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetW<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetD<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetF<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetG<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetM<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetN<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetP<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetQ<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetR<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetW<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetD<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetF<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetG<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetM<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetN<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetP<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetQ<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetR<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetW<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetD<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetF<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetG<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetM<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetN<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetP<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetQ<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetR<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetW<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetD(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetF(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetG(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetM(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetN(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetP(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetQ(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetR(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> interpretSetW(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
};<br/>
<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __SIM4_FLAGS_INTERPRETER<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Sim4Interpreter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Sim4Interpreter.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Sim4Interpreter<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 16 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "Sim4Interpreter.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
Sim4Interpreter::Sim4Interpreter(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b>* <b><a href="CppConst.htm">const</a></b> <a href="CppArgc.htm">argv</a>[]) :<br/>
	mIniFileName("Sim4.ini"),<br/>
	mOptionsFile(getOptionsFileName()),<br/>
	mDoExit(<b><a href="CppFalse.htm">false</a></b>)<br/>
{<br/>
	<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <b><a href="CppChar.htm">char</a></b>* to <a href="CppStdString.htm">std::string</a> in upper<b><a href="CppCase.htm">case</a></b> as commands<br/>
	<a href="CppComment.htm">//</a>Keep a backup (<b><a href="CppFor.htm">for</a></b> e.g. filenames) in mArgv.<br/>
	mCommand.resize(<a href="CppArgc.htm">argc</a>);<br/>
	mArgv.resize(<a href="CppArgc.htm">argc</a>);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;<a href="CppArgc.htm">argc</a>; <a href="CppOperatorIncrement.htm">++</a>i) <br/>
	{<br/>
		mArgv[i]&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppArgc.htm">argv</a>[i];<br/>
		mCommand[i] <a href="CppOperatorAssign.htm">=</a> stringToUpper(<a href="CppArgc.htm">argv</a>[i]);<br/>
	}<br/>
	<a href="CppComment.htm">//</a>Interpret it<br/>
	interpretCommandLine();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppStdString.htm">std::string</a> Sim4Interpreter::getOptionsFileName() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(mIniFileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(mIniFileName.c_str());<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> optionsFileName <a href="CppOperatorAssign.htm">=</a> "<b><a href="CppDefault.htm">default</a></b>OptionsFile.txt";<br/>
		fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> optionsFileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
		fileOutput.close();<br/>
		<b><a href="CppReturn.htm">return</a></b> optionsFileName;<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		<a href="CppStdIfstream.htm">std::ifstream</a> fileInput(mIniFileName.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileInput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<a href="CppStdString.htm">std::string</a> optionsFileName;<br/>
		fileInput <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> optionsFileName;<br/>
		fileInput.close();<br/>
		<b><a href="CppReturn.htm">return</a></b> optionsFileName;<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretCommandLine()<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nCommands <a href="CppOperatorAssign.htm">=</a> mCommand.size();<br/>
	<b><a href="CppIf.htm">if</a></b> (nCommands<a href="CppOperatorEqual.htm">==</a>1) <br/>
	{<br/>
		<a href="CppComment.htm">//</a>Just run the simulation...<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nCommands; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now interpreting: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mCommand[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"RUN" or mDoExit<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <br/>
		{<br/>
			<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "STARTING SIMULATION(S) NOW." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
			<b><a href="CppReturn.htm">return</a></b>;<br/>
		}<br/>
		<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"NOEXIT") <b><a href="CppDo.htm">do</a></b>Exit=<b><a href="CppFalse.htm">false</a></b>;<br/>
		<a href="CppComment.htm">//</a>Help<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"HELP")&nbsp;&nbsp;interpretHelp(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"-HELP") interpretHelp(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"-?")&nbsp;&nbsp;&nbsp;&nbsp;interpretHelp(i); <br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"?")&nbsp;&nbsp;&nbsp;&nbsp; interpretHelp(i);<br/>
		<a href="CppComment.htm">//</a>General <a href="CppInterface.htm">interface</a><br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"ABOUT") show<a href="CppAbout.htm">About</a>();<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"ADDSIM<a href="CppCfile.htm">FILE</a>") interpret<a href="CppAdd.htm">Add</a>SimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"ASF") interpret<a href="CppAdd.htm">Add</a>SimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"COPYOPTION<a href="CppCfile.htm">FILE</a>") interpretCopyOptionsFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"COF") interpretCopyOptionsFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"COPYOPTIONS<a href="CppCfile.htm">FILE</a>") interpretCopyOptionsFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"COPYSIM<a href="CppCfile.htm">FILE</a>") interpretCopySimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"CSF") interpretCopySimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"REMOVESIM<a href="CppCfile.htm">FILE</a>") interpretRemoveSimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"RSF") interpretRemoveSimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SHOWOPTIONS<a href="CppCfile.htm">FILE</a>") showOptionsFile(); <br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SHOWOPTION<a href="CppCfile.htm">FILE</a>") showOptionsFile(); <br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SOF") showOptionsFile(); <br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SHOWSIM<a href="CppCfile.htm">FILE</a>") interpretShowSimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SSF") interpretShowSimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SHOWUSES") showUses(); <br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SU") showUses(); <br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"USEOPTION<a href="CppCfile.htm">FILE</a>") interpretUseOptionsFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"USEOPTIONS<a href="CppCfile.htm">FILE</a>") interpretUseOptionsFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"UOF") interpretUseOptionsFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"EXECUTE") { interpretExecute(i); i=0; }<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"EXEC")&nbsp;&nbsp;&nbsp;&nbsp;{ interpretExecute(i); i=0; }<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"TEST") test<a href="CppFunction.htm">Function</a>s();<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"TESTFUNCTION") test<a href="CppFunction.htm">Function</a>s();<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"TESTFUNCTIONS") test<a href="CppFunction.htm">Function</a>s();<br/>
		<a href="CppComment.htm">//</a>Options File specific<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETPLOTTING") interpretSetPlotting(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETTEXT") interpretSetText(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"USESIM") interpretUsesSimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"USESIM<a href="CppCfile.htm">FILE</a>") interpretUsesSimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"USESSIM<a href="CppCfile.htm">FILE</a>") interpretUsesSimFile(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"USF") interpretUsesSimFile(i);<br/>
		<a href="CppComment.htm">//</a>Simulation File specific<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETSEED") interpretSetSeed(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SEED") interpretSetSeed(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"OUTPUT<a href="CppCfile.htm">FILE</a>NAME") interpretSetOutputFileName(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETWRITEOUTPUT<a href="CppCfile.htm">FILE</a>NAME") interpretSetOutputFileName(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETOUTPUT<a href="CppCfile.htm">FILE</a>NAME") interpretSetOutputFileName(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETWRITEOUTPUT<a href="CppCfile.htm">FILE</a>") interpretSetWriteOutput(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETWRITEOUTPUT") interpretSetWriteOutput(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"DOWRITEOUTPUT<a href="CppCfile.htm">FILE</a>") interpretSetWriteOutput(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"DOWRITEOUTPUT") interpretSetWriteOutput(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETBODYSIZEADULT") interpretSetBodySizeAdult(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETCONSTA") interpretSetConstA(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETCONSTB") interpretSetConstB(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETCONSTC") interpretSetConstC(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETREPRODUCTIONMODE") interpretSetReproductionMode(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETSIMTIME") interpretSetSim<a href="CppTime.htm">Time</a>(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"EXTRACTCOV") extractCov();<br/>
		<a href="CppComment.htm">//</a>PopSize<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETSTARTPOPSIZE") interpretSetStartPopSize(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETSTARTINGPOPSIZE") interpretSetStartPopSize(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"STARTPOPSIZE") interpretSetStartPopSize(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"STARTINGPOPSIZE") interpretSetStartPopSize(i);<br/>
		<a href="CppComment.htm">//</a>Start resources<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETSTART<a href="CppQmakeResources.htm">RESOURCES</a>") interpretSetStartResources(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETSTARTRESOURCE") interpretSetStartResources(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETSTARTING<a href="CppQmakeResources.htm">RESOURCES</a>") interpretSetStartResources(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETSTARTINGRESOURCE") interpretSetStartResources(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"START<a href="CppQmakeResources.htm">RESOURCES</a>") interpretSetStartResources(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"STARTRESOURCE") interpretSetStartResources(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"STARTING<a href="CppQmakeResources.htm">RESOURCES</a>") interpretSetStartResources(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"STARTINGRESOURCE") interpretSetStartResources(i);<br/>
		<a href="CppComment.htm">//</a>COMPUTER GENERATED<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETD") interpretSetD(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETF") interpretSetF(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETG") interpretSetG(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETM") interpretSetM(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETN") interpretSetN(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETP") interpretSetP(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETQ") interpretSetQ(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETR") interpretSetR(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETW") interpretSetW(i);<br/>
		<a href="CppComment.htm">//</a>&nbsp;&nbsp;COMPUTER GENERATED CODE<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETDCONSTA") interpretSetD<b><a href="CppConst.htm">const</a></b>A(i);<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETFCONSTA") interpretSetF<b><a href="CppConst.htm">const</a></b>A(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETGCONSTA") interpretSetG<b><a href="CppConst.htm">const</a></b>A(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETMCONSTA") interpretSetM<b><a href="CppConst.htm">const</a></b>A(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETNCONSTA") interpretSetN<b><a href="CppConst.htm">const</a></b>A(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETPCONSTA") interpretSetP<b><a href="CppConst.htm">const</a></b>A(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETQCONSTA") interpretSetQ<b><a href="CppConst.htm">const</a></b>A(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETRCONSTA") interpretSetR<b><a href="CppConst.htm">const</a></b>A(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETWCONSTA") interpretSetW<b><a href="CppConst.htm">const</a></b>A(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETDCONSTB") interpretSetD<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETFCONSTB") interpretSetF<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETGCONSTB") interpretSetG<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETMCONSTB") interpretSetM<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETNCONSTB") interpretSetN<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETPCONSTB") interpretSetP<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETQCONSTB") interpretSetQ<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETRCONSTB") interpretSetR<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETWCONSTB") interpretSetW<b><a href="CppConst.htm">const</a></b>B(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETDCONSTC") interpretSetD<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETFCONSTC") interpretSetF<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETGCONSTC") interpretSetG<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETMCONSTC") interpretSetM<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETNCONSTC") interpretSetN<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETPCONSTC") interpretSetP<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETQCONSTC") interpretSetQ<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETRCONSTC") interpretSetR<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETWCONSTC") interpretSetW<b><a href="CppConst.htm">const</a></b>C(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETDCONSTD") interpretSetD<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETFCONSTD") interpretSetF<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETGCONSTD") interpretSetG<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETMCONSTD") interpretSetM<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETNCONSTD") interpretSetN<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETPCONSTD") interpretSetP<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETQCONSTD") interpretSetQ<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETRCONSTD") interpretSetR<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETWCONSTD") interpretSetW<b><a href="CppConst.htm">const</a></b>D(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETDCONSTE") interpretSetD<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETFCONSTE") interpretSetF<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETGCONSTE") interpretSetG<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETMCONSTE") interpretSetM<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETNCONSTE") interpretSetN<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETPCONSTE") interpretSetP<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETQCONSTE") interpretSetQ<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETRCONSTE") interpretSetR<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
		<b><a href="CppIf.htm">if</a></b> (mCommand[i]<a href="CppOperatorEqual.htm">==</a>"SETWCONSTE") interpretSetW<b><a href="CppConst.htm">const</a></b>E(i);													<br/>
<br/>
	}<br/>
<br/>
	<a href="CppComment.htm">//</a>No simulation to be done, except when execute is calling <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a>.<br/>
	<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (<b><a href="CppDo.htm">do</a></b>Exit<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <br/>
	exit(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::setOptionsFileName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(fileExists(mIniFileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(mIniFileName.c_str());<br/>
	fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
	fileOutput.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretExecute(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease specify the file name of the file you want to execute.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<a href="CppAssert.htm">assert</a>(index+1&lt;mCommand.size());<br/>
	<a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> mArgv[index+1];<br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tFile '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' does not exist. Therefore, it cannot be used as an execution file.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	mArgv.resize(0); mCommand.resize(0);<br/>
	mArgv <a href="CppOperatorAssign.htm">=</a> fileToVector(fileName);<br/>
	coutVector(mArgv);<br/>
	mArgv.push_back("run");<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> mArgv.size();<br/>
	mCommand.resize(size);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;size; <a href="CppOperatorIncrement.htm">++</a>i) mCommand[i] <a href="CppOperatorAssign.htm">=</a> stringToUpper(mArgv[i]);<br/>
	interpretCommandLine();<br/>
	mDoExit <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::extractCov() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "NOT PROGRAMMED YET" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::test<a href="CppFunction.htm">Function</a>s() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	ParameterSetSimulation params; <a href="CppComment.htm">//</a>Default params<br/>
	<b><a href="CppIf.htm">if</a></b> (mOptionsFile.getNsimFiles() &gt; 0) params <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;mOptionsFile.getParameterSetSimulation();<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyD<b><a href="CppDefault.htm">default</a></b>&gt; pD<b><a href="CppDefault.htm">default</a></b>(<b><a href="CppNew.htm">new</a></b> StrategyD<b><a href="CppDefault.htm">default</a></b>(&amp;params.paramsD));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyF<b><a href="CppDefault.htm">default</a></b>&gt; pF<b><a href="CppDefault.htm">default</a></b>(<b><a href="CppNew.htm">new</a></b> StrategyF<b><a href="CppDefault.htm">default</a></b>(&amp;params.paramsF));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyGconstant&gt; pGconstant(<b><a href="CppNew.htm">new</a></b> StrategyGconstant(&amp;params.paramsG));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyGplastic&gt;&nbsp;&nbsp;pGplastic( <b><a href="CppNew.htm">new</a></b> StrategyGplastic( &amp;params.paramsG));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyM<b><a href="CppDefault.htm">default</a></b>&gt;&nbsp;&nbsp;pM<b><a href="CppDefault.htm">default</a></b>( <b><a href="CppNew.htm">new</a></b> StrategyM<b><a href="CppDefault.htm">default</a></b>( &amp;params.paramsM));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyMconstant&gt; pMconstant(<b><a href="CppNew.htm">new</a></b> StrategyMconstant(&amp;params.paramsM));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyNplastic&gt;&nbsp;&nbsp;pNplastic(<b><a href="CppNew.htm">new</a></b> StrategyNplastic(&amp;params.paramsN));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyNconstant&gt; pNconstant(<b><a href="CppNew.htm">new</a></b> StrategyNconstant(&amp;params.paramsN));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyPplastic&gt;&nbsp;&nbsp;pPplastic( <b><a href="CppNew.htm">new</a></b> StrategyPplastic( &amp;params.paramsP));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyPconstant&gt; pPconstant(<b><a href="CppNew.htm">new</a></b> StrategyPconstant(&amp;params.paramsP));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyQ<b><a href="CppDefault.htm">default</a></b>&gt;&nbsp;&nbsp;pQ<b><a href="CppDefault.htm">default</a></b>(<b><a href="CppNew.htm">new</a></b> StrategyQ<b><a href="CppDefault.htm">default</a></b>(&amp;params.paramsQ));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyQconstant&gt; pQconstant(<b><a href="CppNew.htm">new</a></b> StrategyQconstant(&amp;params.paramsQ));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyRconstant&gt; pRconstant(<b><a href="CppNew.htm">new</a></b> StrategyRconstant(&amp;params.paramsR));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyRlogistic&gt; pRlogistic(<b><a href="CppNew.htm">new</a></b> StrategyRlogistic(&amp;params.paramsR));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyRcosine&gt;&nbsp;&nbsp; pRcosine(&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StrategyRcosine(&nbsp;&nbsp;&amp;params.paramsR));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyWzero&gt;&nbsp;&nbsp;&nbsp;&nbsp;pWzero(<b><a href="CppNew.htm">new</a></b> StrategyWzero(&amp;params.paramsW));<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyWuniform&gt; pWuniform(<b><a href="CppNew.htm">new</a></b> StrategyWuniform(&amp;params.paramsW));<br/>
<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing D." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pD<b><a href="CppDefault.htm">default</a></b>-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing F." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pF<b><a href="CppDefault.htm">default</a></b>-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing G." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pGconstant-&gt;testMe();<br/>
	pGplastic-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing M." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pM<b><a href="CppDefault.htm">default</a></b>-&gt;testMe();<br/>
	pMconstant-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing N." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pNplastic-&gt;testMe();<br/>
	pNconstant-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing P." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pPplastic-&gt;testMe();<br/>
	pPconstant-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing Q." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pQ<b><a href="CppDefault.htm">default</a></b>-&gt;testMe();<br/>
	pQconstant-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing R." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pRconstant-&gt;testMe();<br/>
	pRlogistic-&gt;testMe();<br/>
	pRcosine-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Now testing W." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	pWzero-&gt;testMe();<br/>
	pWuniform-&gt;testMe();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Done testing." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretUseOptionsFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease specify the file name of the Options File you want to use.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<a href="CppAssert.htm">assert</a>(index+1&lt;mCommand.size());<br/>
	<a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> mArgv[index+1];<br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tFile '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' does not exist. Therefore, it cannot be used as an Options File.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	setOptionsFileName(fileName);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tFile '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' set to the Options File now used.\n\n";<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretShowSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppInt.htm">int</a></b> simFileNumber;<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> usesSimFile <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getUsesSimFile();<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tShowing Simulation File: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (usesSimFile<a href="CppOperatorEqual.htm">==</a>-1 ? "all." : "#"+itoa(usesSimFile)+".") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		simFileNumber <a href="CppOperatorAssign.htm">=</a> usesSimFile;<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b> <br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(index+1&lt;mCommand.size());<br/>
		<a href="CppStdString.htm">std::string</a> nextInput <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
		<b><a href="CppIf.htm">if</a></b> (isInt(nextInput,simFileNumber)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
		{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User gives SimFile index<br/>
			<b><a href="CppIf.htm">if</a></b> (simFileNumber&lt;0)<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, as they cannot be negative.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
			<b><a href="CppIf.htm">if</a></b> (simFileNumber<a href="CppOperatorGreaterEqual.htm">&gt;=</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mOptionsFile.getNsimFiles()))<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, as <b><a href="CppThis.htm">this</a></b> index does not exist.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
			<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tShowing Simulation File: #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> simFileNumber <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b><br/>
		{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'all' or bullshit<br/>
			<b><a href="CppIf.htm">if</a></b> (nextInput<a href="CppOperatorEqual.htm">==</a>"ALL")<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tShowing Simulation File: all." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
				simFileNumber=-1;<br/>
			}<br/>
			<b><a href="CppElse.htm">else</a></b><br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, can only be either an index or 'all'.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
		}<br/>
	<br/>
	}<br/>
<br/>
	mOptionsFile.showSimFile(simFileNumber);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Copies an Options File<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretCopyOptionsFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed only 'copyOptionsFile'<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease add the target's file name.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<b><a href="CppIf.htm">if</a></b> (index+2<a href="CppOperatorGreaterEqual.htm">&gt;=</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'copyOptionsFile [something]'<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> optionsFileNameFrom <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getFileName();<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> optionsFileNameTo&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mArgv[index+1];<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tCopying Options File: '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> optionsFileNameFrom <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' to '"<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> optionsFileNameTo <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'.\n\n";<br/>
		copyFile(optionsFileNameFrom,optionsFileNameTo);<br/>
	}<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Copies a SimFile<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretCopySimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mOptionsFile.getNsimFiles()<a href="CppOperatorEqual.htm">==</a>0)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tNo Simulation Files to copy. Please use 'addSimFile' command first.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> simFileNameFrom;<br/>
	<a href="CppStdString.htm">std::string</a> simFileNameTo;<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed only 'copySimfile'<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease add the target's file name.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<b><a href="CppIf.htm">if</a></b> (index+2<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'copySimfile [something]', use the SimFile in focus<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> usesSimFile <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getUsesSimFile();<br/>
		<b><a href="CppIf.htm">if</a></b> (usesSimFile<a href="CppOperatorEqual.htm">==</a>-1)<br/>
		{<br/>
			<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index 'all': cannot copy all files\n\n";<br/>
			<b><a href="CppReturn.htm">return</a></b>;<br/>
		}<br/>
		<a href="CppAssert.htm">assert</a>((usesSimFile&gt;-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> usesSimFile&lt;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mOptionsFile.getNsimFiles())));<br/>
		simFileNameFrom <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getSimFileName(usesSimFile);<br/>
		simFileNameTo&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mArgv[index+1];<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b> <br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'copySimfile [something] [something]' (and perhaps more [something]'s)<br/>
		<a href="CppAssert.htm">assert</a>(index+3<a href="CppOperatorLessEqual.htm">&lt;=</a>mCommand.size());<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextInput <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
		<b><a href="CppInt.htm">int</a></b> simFileNumber;<br/>
		<b><a href="CppIf.htm">if</a></b> (isInt(nextInput,simFileNumber)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
		{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User gives SimFile index<br/>
			<b><a href="CppIf.htm">if</a></b> (simFileNumber&lt;0)<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, as they cannot be negative.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
			<b><a href="CppIf.htm">if</a></b> (simFileNumber<a href="CppOperatorGreaterEqual.htm">&gt;=</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mOptionsFile.getNsimFiles()))<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, as <b><a href="CppThis.htm">this</a></b> index does not exist.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
			simFileNameFrom <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getSimFileName(simFileNumber);<br/>
			simFileNameTo&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> mArgv[index+2];<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b><br/>
		{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'all' or bullshit<br/>
			<b><a href="CppIf.htm">if</a></b> (nextInput<a href="CppOperatorEqual.htm">==</a>"ALL")<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tCannot copy 'all' files. Please use an index.\n\n";<br/>
			}<br/>
			<b><a href="CppElse.htm">else</a></b><br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, can only be an index.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
		}<br/>
	}<br/>
<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tCopying Simulation File: '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> simFileNameFrom <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' to '"<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> simFileNameTo <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'.\n\n";<br/>
	copyFile(simFileNameFrom,simFileNameTo);<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretRemoveSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppInt.htm">int</a></b> simFileNumber;<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> usesSimFile <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getUsesSimFile();<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tRemoving Simulation File: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (usesSimFile<a href="CppOperatorEqual.htm">==</a>-1 ? "all." : "#"+itoa(usesSimFile)+".") <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		simFileNumber <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b> <br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(index+1&lt;mCommand.size());<br/>
		<a href="CppStdString.htm">std::string</a> nextInput <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
		<b><a href="CppIf.htm">if</a></b> (isInt(nextInput,simFileNumber)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
		{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User gives SimFile index<br/>
			<b><a href="CppIf.htm">if</a></b> (simFileNumber&lt;0)<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, as they cannot be negative.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
			<b><a href="CppIf.htm">if</a></b> (simFileNumber<a href="CppOperatorGreaterEqual.htm">&gt;=</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mOptionsFile.getNsimFiles()))<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, as <b><a href="CppThis.htm">this</a></b> index does not exist.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
			<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tRemoving Simulation File: #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> simFileNumber <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		}<br/>
		<b><a href="CppElse.htm">else</a></b><br/>
		{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'all' or bullshit<br/>
			<b><a href="CppIf.htm">if</a></b> (nextInput<a href="CppOperatorEqual.htm">==</a>"ALL")<br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tRemoving Simulation File: all." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
				simFileNumber=-1;<br/>
			}<br/>
			<b><a href="CppElse.htm">else</a></b><br/>
			{<br/>
				<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tIncorrect Simulation file index, can only be either an index or 'all'.\n\n";<br/>
				<b><a href="CppReturn.htm">return</a></b>;<br/>
			}<br/>
		}<br/>
	<br/>
	}<br/>
<br/>
	mOptionsFile.removeSimFile(simFileNumber);<br/>
<br/>
	<a href="CppComment.htm">//</a>If all files are removed, 'usesSimFile' is set to 'all'<br/>
	<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> (mOptionsFile.getNsimFiles()<a href="CppOperatorEqual.htm">==</a>0)	mOptionsFile.setUsesSimFile(-1);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpret<a href="CppAdd.htm">Add</a>SimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease specify the file name of the Simulation file you want to add.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<a href="CppAssert.htm">assert</a>(index+1&lt;mCommand.size());<br/>
	<a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> mArgv[index+1];<br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(fileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tFile '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' does not exist. Therefore, it cannot be added to the Options File.\n\n";<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	mOptionsFile.addSimFile(fileName);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tFile '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> fileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' added to the Options File.\n\n";<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretUsesSimFile(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setUses' only<br/>
		<a href="CppStdCout.htm">std::cout</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease specify to INDEX or 'all' <b><a href="CppFor.htm">for</a></b> the Simulation File in focus.\n"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (nextCommand<a href="CppOperatorEqual.htm">==</a>"ALL") <br/>
	{<br/>
		mOptionsFile.setUsesSimFile(-1); <a href="CppComment.htm">//</a>-1 <a href="CppOperatorAssign.htm">=</a> 'all'<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppInt.htm">int</a></b> <b><a href="CppNew.htm">new</a></b>UsesNumber=-1;<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,<b><a href="CppNew.htm">new</a></b>UsesNumber)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setSim<a href="CppTime.htm">Time</a> [non-<a href="CppInt.htm">integer</a>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the index of the Simulation File you want to use as a NUMBER,"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setUses 0', or use './Sim4 setUses all'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
<br/>
	<a href="CppComment.htm">//</a>This sets the Uses to 'index'. OptionsFile handles <b><a href="CppIf.htm">if</a></b> 'index' is out of range<br/>
	mOptionsFile.setUsesSimFile(<b><a href="CppNew.htm">new</a></b>UsesNumber);<br/>
	<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tSet the files in focus to '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> index <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'.\n" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetText(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPlotting' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify <b><a href="CppIf.htm">if</a></b> you want to turn showing the year's summary 'on' or 'off',"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setText on' or './Sim4 setText off'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
	<b><a href="CppIf.htm">if</a></b> (nextCommand<a href="CppOperatorEqual.htm">==</a>"ON")<br/>
	{<br/>
		mOptionsFile.setShowYearSummary(<b><a href="CppTrue.htm">true</a></b>);<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	<b><a href="CppIf.htm">if</a></b> (nextCommand<a href="CppOperatorEqual.htm">==</a>"OFF")<br/>
	{<br/>
		mOptionsFile.setShowYearSummary(<b><a href="CppFalse.htm">false</a></b>);<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tShowing the year's summary can only be turned 'on' or 'off',"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setText on' or './Sim4 setText off'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetPlotting(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setPlotting' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify <b><a href="CppIf.htm">if</a></b> you want to turn plotting 'on' or 'off',"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setPlotting on' or './Sim4 setPlotting off'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
	<b><a href="CppIf.htm">if</a></b> (nextCommand<a href="CppOperatorEqual.htm">==</a>"ON")<br/>
	{<br/>
		mOptionsFile.setPlotting(<b><a href="CppTrue.htm">true</a></b>);<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	<b><a href="CppIf.htm">if</a></b> (nextCommand<a href="CppOperatorEqual.htm">==</a>"OFF")<br/>
	{<br/>
		mOptionsFile.setPlotting(<b><a href="CppFalse.htm">false</a></b>);<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlotting can only be turned 'on' or 'off',"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setPlotting on' or './Sim4 setPlotting off'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetSim<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setSim<a href="CppTime.htm">Time</a>' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the amount of <a href="CppTime.htm">time</a>steps you want to"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tset the simulation <a href="CppTime.htm">time</a> to, e.g. './Sim4 setSim<a href="CppTime.htm">Time</a> 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
	<b><a href="CppInt.htm">int</a></b> <b><a href="CppNew.htm">new</a></b><a href="CppTime.htm">Time</a>StepsNumber=-1;<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,<b><a href="CppNew.htm">new</a></b><a href="CppTime.htm">Time</a>StepsNumber)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setSim<a href="CppTime.htm">Time</a> [non-<a href="CppInt.htm">integer</a>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the amount of <a href="CppTime.htm">time</a>steps you want to set the"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t simulation <a href="CppTime.htm">time</a> to as a NUMBER, e.g. './Sim4 setSim<a href="CppTime.htm">Time</a> 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b><a href="CppTime.htm">Time</a>StepsNumber<a href="CppOperatorLessEqual.htm">&lt;=</a>0) <br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setSim<a href="CppTime.htm">Time</a> [zero or smaller]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the amount of <a href="CppTime.htm">time</a>steps you want to set the"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t simulation <a href="CppTime.htm">time</a> to as a POSITIVE NON_ZERO NUMBER, e.g. './Sim4 setSim<a href="CppTime.htm">Time</a> 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	mOptionsFile.setSim<a href="CppTime.htm">Time</a>(<b><a href="CppNew.htm">new</a></b><a href="CppTime.htm">Time</a>StepsNumber);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetOutputFileName(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setOutputFile' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the NAME of the output file."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setOutputFile myOutput1.rda'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	mOptionsFile.setOutputFileName(mArgv[index+1]);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setSeed' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the number of the seed you want to"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tset the <a href="CppRandomNumber.htm">random number</a> generator to, e.g. './Sim4 setSeed 0'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
	<b><a href="CppInt.htm">int</a></b> <b><a href="CppNew.htm">new</a></b>Seed=-1;<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,<b><a href="CppNew.htm">new</a></b>Seed)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setSeede [non-<a href="CppInt.htm">integer</a>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease specify the number of the seed you want to"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tset the <a href="CppRandomNumber.htm">random number</a> generator to as a NUMBER, e.g. './Sim4 setSeed 0'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	mOptionsFile.setSeed(<b><a href="CppNew.htm">new</a></b>Seed);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetWriteOutput(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setWriteOutput' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify <b><a href="CppIf.htm">if</a></b> you want to turn writing to a file 'on' or 'off',"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setWriteOutput on' or './Sim4 setWriteOutput off'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
	<b><a href="CppIf.htm">if</a></b> (nextCommand<a href="CppOperatorEqual.htm">==</a>"ON")<br/>
	{<br/>
		mOptionsFile.setWriteOutputFile(<b><a href="CppTrue.htm">true</a></b>);<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	<b><a href="CppIf.htm">if</a></b> (nextCommand<a href="CppOperatorEqual.htm">==</a>"OFF")<br/>
	{<br/>
		mOptionsFile.setWriteOutputFile(<b><a href="CppFalse.htm">false</a></b>);<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tWriting to an output file can only be turned 'on' or 'off',"<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setWriteOutput on' or './Sim4 setWriteOutput off'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetStartPopSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setStartPopSize' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the VALUE of the starting population size."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartPopSize 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
<br/>
	<b><a href="CppInt.htm">int</a></b> <b><a href="CppNew.htm">new</a></b>StartPopSize=-1;<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,<b><a href="CppNew.htm">new</a></b>StartPopSize)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setStartPopSize [non-<a href="CppInt.htm">integer</a>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the value of the starting population size as a NUMBER."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartPopSize 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>StartPopSize<a href="CppOperatorLessEqual.htm">&lt;=</a>0)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input <b><a href="CppFor.htm">for</a></b> the value of the starting population size a POSITIVE NON_ZERO number."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartPopSize 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output<br/>
	mOptionsFile.setStartPopSize(<b><a href="CppNew.htm">new</a></b>StartPopSize);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetStartResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setStartPopSize' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the VALUE of the starting population size."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartPopSize 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>StartResources=-1;<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>StartResources)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setStartResources [non-<a href="CppInt.htm">integer</a>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the amount of starting resources as a NUMBER."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartResources 0.1'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>StartResources&lt;0.0)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the amount of starting resources as a POSITIVE number."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartResources 0.1'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output<br/>
	mOptionsFile.setStartResources(<b><a href="CppNew.htm">new</a></b>StartResources);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetBodySizeAdult(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setStartPopSize' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the VALUE of the starting population size."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartPopSize 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>BodySize=-1.0;<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>BodySize)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setBodySizeAdult [non-<b><a href="CppDouble.htm">double</a></b>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the body size to become an adult as a NUMBER."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setBodySizeAdult 1.5'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>BodySize&lt;0.0)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setBodySizeAdult [non-<b><a href="CppDouble.htm">double</a></b>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input <b><a href="CppFor.htm">for</a></b> the body size to become an adult a POSITIVE number."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setBodySizeAdult 1.5'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user.<br/>
	mOptionsFile.setBodySizeAdult(<b><a href="CppNew.htm">new</a></b>BodySize);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetConstA(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setStartPopSize' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the VALUE of the starting population size."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartPopSize 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>ConstA=-1.0;<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>ConstA)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setConstA [non-<b><a href="CppDouble.htm">double</a></b>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the value of constant 'A' as a NUMBER."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setConstA 0.9'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>ConstA&lt;0.0) <a href="CppComment.htm">//</a> <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppNew.htm">new</a></b>ConstA&gt;1.0)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setConstA [non-fraction]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the value of constant 'A' as a POSITIVE VALUE."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\ti.e. a value from 0.0 to and including 1.0."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setConstA 0.9'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user<br/>
	mOptionsFile.setConstA(<b><a href="CppNew.htm">new</a></b>ConstA);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetConstB(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setStartPopSize' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the VALUE of the starting population size."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartPopSize 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>ConstB=-1.0;<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>ConstB)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setConstB [non-<b><a href="CppDouble.htm">double</a></b>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the value of constant 'B' as a NUMBER."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setConstB 0.9'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>ConstB&lt;0.0) <a href="CppComment.htm">//</a> <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppNew.htm">new</a></b>ConstB&gt;1.0)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setConstB [non-fraction]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the value of constant 'B' as a POSITIVE VALUE."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\ti.e. a value from 0.0 to and including 1.0."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setConstB 0.9'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user<br/>
	mOptionsFile.setConstB(<b><a href="CppNew.htm">new</a></b>ConstB);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetConstC(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setStartPopSize' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease also specify the VALUE of the starting population size."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setStartPopSize 1000'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];<br/>
	<b><a href="CppDouble.htm">double</a></b> <b><a href="CppNew.htm">new</a></b>ConstC=-1.0;<br/>
	<b><a href="CppIf.htm">if</a></b> (is<a href="CppDouble.htm">Double</a>(nextCommand,<b><a href="CppNew.htm">new</a></b>ConstC)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setConstC [non-<b><a href="CppDouble.htm">double</a></b>]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the value of constant 'C' as a NUMBER."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setConstC 0.9'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>ConstC&lt;0.0) <a href="CppComment.htm">//</a> <a href="CppOperatorLogicalOr.htm">||</a> <b><a href="CppNew.htm">new</a></b>ConstC&gt;1.0)<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setConstC [non-fraction]'<br/>
		<a href="CppStdCout.htm">std::cout</a> <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tPlease input the value of constant 'C' as a POSITIVE VALUE."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\ti.e. a value from 0.0 to and including 1.0."<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\te.g. './Sim4 setConstC 0.9'" <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile handles the feedback to the user<br/>
	mOptionsFile.setConstC(<b><a href="CppNew.htm">new</a></b>ConstC);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretHelp(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'help' only<br/>
		showHelp();<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (&nbsp;&nbsp; mCommand[index+1]<a href="CppOperatorEqual.htm">==</a>"OPTION<a href="CppCfile.htm">FILE</a>"&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> mCommand[index+1]<a href="CppOperatorEqual.htm">==</a>"OPTIONS<a href="CppCfile.htm">FILE</a>")<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'help OptionsFile'<br/>
		showHelpOptionFile();<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (&nbsp;&nbsp; mCommand[index+1]<a href="CppOperatorEqual.htm">==</a>"SIM<a href="CppCfile.htm">FILE</a>")<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'help SimFile'<br/>
		showHelpSimFile();<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::showHelp() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tHelp <b><a href="CppFor.htm">for</a></b> Sim4, by Richel Bilderbeek." <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tA simulation uses at least two files: "<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;1) A single Options file: options <b><a href="CppFor.htm">for</a></b> simulation, e.g. write results to disk."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;2) One or more Simulation files: parameters <b><a href="CppFor.htm">for</a></b> the simulation, e.g. the starting population size."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tThe Options file is connected to one or more Simulation files."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tWhen changing a Simulation file, you change only one (or all) of those the Options file is connected to."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tThis enables you to <b><a href="CppDo.htm">do</a></b> multiple simulations with your favorite options."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tWhen modifying SimFiles, you either specify the index of <b><a href="CppThis.htm">this</a></b> SimFile, or write 'all' <b><a href="CppFor.htm">for</a></b> all SimFiles."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tWhen giving neither, the focused Simulation file(s) is used."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tProgram usage options: "<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;./Sim4 [option1] [option2] [etc]"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;&nbsp;&nbsp; without options, the simulation is started with current Options file ('<b><a href="CppDefault.htm">default</a></b>OptionsFile.txt' at start) and its connected Simulation file(s)."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tOptions:" <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;showUses : shows Options file and the Simulation file(s) the simulation will use."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;showOptionsFile : shows current Options file and contents."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;showSimFile : shows the Simulation file(s) set by useSimFile."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;showSimFile {[n],all} : shows 'n'-th or all Simulation file(s) that current Options file is connected to."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;useOptionsFile \"optionsfilename\" : use Options file with 'optionsfilename'."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;addSimFile \"simulationfilename\" : adds Simulation file to current Options file."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;removeSimFile : removes Simulation file(s) set by useSimFile."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;removeSimFile {[n],all} : removes 'n'-th or all Simulation file(s) from current Options file. "<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;useSimFile {[n],all} : sets focus on Simulation file 'n' or all"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;copyOptionsFile \"filename\" : copies current Options file to 'filename'."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;copySimFile [n] \"filename\" : copies 'n'-th Simulation file to 'filename'."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tOptions <b><a href="CppFor.htm">for</a></b> modifying Options file:"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;help OptionFile : displays more options <b><a href="CppFor.htm">for</a></b> Options file."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setPlotting {on,off} : turns <b><a href="CppFinal.htm">final</a></b> plotting on or off."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setWriteOutput {on,off} : turns writing to outputfile on or off."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setWriteOutputFile \"filename\" : sets simulation output file to 'filename'."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tOptions <b><a href="CppFor.htm">for</a></b> modifying Simulation file:"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;help SimFile : displays more options <b><a href="CppFor.htm">for</a></b> Options file."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setSim<a href="CppTime.htm">Time</a> [number] {[n],all} : sets 'n'-th or all simulation(s) <a href="CppTime.htm">time</a>(s) to 'number' <a href="CppTime.htm">time</a>steps."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n" <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::showHelpOptionFile() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tHelp on Option Files."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tAn Option File contains options <b><a href="CppFor.htm">for</a></b> one or more Simulation Files. When an experiment is started,"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tfor every Simulation File one simulation is run, with the options from the Options File."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setText {on,off} : turns showing year summary on screen on or off."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setPlotting {on,off} : turns <b><a href="CppFinal.htm">final</a></b> plotting on or off."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setWriteOutput {on,off} : turns writing to outputfile on or off."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setWriteOutputFile \"filename\" : sets simulation output file to 'filename'."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::showHelpSimFile() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tHelp on Simulation File."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tA Simulation File comprises all simulation parameters and setup."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tEvery parameter can be changed by the following commands, and is"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tapplied on the simulation(s) in focus."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setSim<a href="CppTime.htm">Time</a> [n] : Sets running <a href="CppTime.htm">time</a> to 'n' <a href="CppTime.htm">time</a>steps."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setStartPopSize [n] : Sets starting population size to 'n' individuals."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setStartResources [n] : Sets starting resources to 'n' units."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setBodySizeAdult [n] : Sets body size to become adult to 'n' units of weight."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setConstA [n] : Sets efficiency to <a href="CppConvert.htm">convert</a> resources to body size to fraction 'n'."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setConstB [n] : Sets efficiency to <a href="CppConvert.htm">convert</a> resources to reserves to fraction 'n'."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setConstC [n] : Sets efficiency to <a href="CppConvert.htm">convert</a> reserves to egg mass to fraction 'n'."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setReproductionMode [n] : Sets 'n'-th reproduction mode. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setD [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> D, the death rate. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setF [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> F, the feeding rate. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setG [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> G, the fraction egg biomass per offspring. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setM [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> M, metabolic cost. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setN [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> N, amount of offspring. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setP [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> P, allocation of resources to body size. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setQ [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> Q, biomass investment in eggs. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setR [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> R, the resource inflow. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;setW [n]: Sets 'n'-th formula <b><a href="CppFor.htm">for</a></b> W, the way resources are (un)equally disributed over individuals. Without giving 'n' a menu appears."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tTo change a constant in each of the equations, use:"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;set{D,F,G,M,N,P,Q,R,W}<b><a href="CppConst.htm">const</a></b>{a,b,c,d} [n] : Sets constant in equation to 'n', e.g. 'setD<b><a href="CppConst.htm">const</a></b>A 0.5'"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::show<a href="CppAbout.htm">About</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tThis program was written by:"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;&nbsp;&nbsp;Richel Bilderbeek"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t&nbsp;&nbsp;&nbsp;&nbsp;richelbilderbeek@fastmail.fm"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t<b><a href="CppWhile.htm">while</a></b> in <a href="ProjectBristol.htm">Bristol</a> from the 9th of May 2005 to 14th of August 2005"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tunder supervision of Robert Payne."<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\t"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::showUses() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> usesSimFile <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getUsesSimFile();<br/>
	<a href="CppStdCout.htm">std::cout</a><br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tOptions file: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mOptionsFile.getFileName()<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tUsing Simulation File: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (usesSimFile<a href="CppOperatorEqual.htm">==</a>-1 ? "all." : "#"+itoa(usesSimFile)+".")<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; simFileName <a href="CppOperatorAssign.htm">=</a> mOptionsFile.getSimulationFileNames();<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nSimFileNames <a href="CppOperatorAssign.htm">=</a> simFileName.size();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nSimFileNames; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\tSimulation file #" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> simFileName[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::showOptionsFile() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	mOptionsFile.showUser();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetReproductionMode(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setReproductionMode' only<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of D" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction : Calculate fraction of egg biomass per offspring, eq. G." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>							<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount : Calculate amunt of offspring, eq. N." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>							<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumReproductionMode(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumReproductionMode(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setReproductionMode [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the ReproductionMode index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setReproductionMode 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;1)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select a ReproductionMode index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setReproductionMode 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setReproductionMode(userInputToEnumReproductionMode(userInput));											<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetD(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setD' only<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyDconstant&gt; pDconstant(<b><a href="CppNew.htm">new</a></b> StrategyDconstant);<br/>
		<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyDsizeOnly&gt; pDsizeOnly(<b><a href="CppNew.htm">new</a></b> StrategyDsizeOnly);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetD&gt; pDparams(<b><a href="CppNew.htm">new</a></b> ParameterSetD);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyD<b><a href="CppDefault.htm">default</a></b>&gt;&nbsp;&nbsp;pD<b><a href="CppDefault.htm">default</a></b>( <b><a href="CppNew.htm">new</a></b> StrategyD<b><a href="CppDefault.htm">default</a></b>(pDparams.get()));<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of D" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>&nbsp;&nbsp;: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pD<b><a href="CppDefault.htm">default</a></b>-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>Dconstant : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pDconstant-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppComment.htm">//</a><a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2] <b><a href="CppEnum.htm">enum</a></b>DsizeOnly : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pDsizeOnly-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumD(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>D<b><a href="CppDefault.htm">default</a></b>);<br/>
	<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(userInputToEnumD(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Dconstant);<br/>
	<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(userInputToEnumD(2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>DsizeOnly);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setD [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the D's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;2)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an D's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setD 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setD(userInputToEnumD(userInput));											<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetF(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setF' only															<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetF&gt; pFparams(<b><a href="CppNew.htm">new</a></b> ParameterSetF);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyFconstant&gt; pFconstant(<b><a href="CppNew.htm">new</a></b> StrategyFconstant(pFparams.get()));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyF<b><a href="CppDefault.htm">default</a></b>&gt;&nbsp;&nbsp;pF<b><a href="CppDefault.htm">default</a></b>( <b><a href="CppNew.htm">new</a></b> StrategyF<b><a href="CppDefault.htm">default</a></b>(pFparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyFgauss&gt;&nbsp;&nbsp;pFgauss( <b><a href="CppNew.htm">new</a></b> StrategyFgauss(pFparams.get()));<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of F" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>&nbsp;&nbsp;: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pF<b><a href="CppDefault.htm">default</a></b>-&gt;getString()&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumF(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>F<b><a href="CppDefault.htm">default</a></b>);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setF [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the F's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;2)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an F's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setF 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setF(userInputToEnumF(userInput));											<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetG(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setG' only															<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetG&gt; pGparams(<b><a href="CppNew.htm">new</a></b> ParameterSetG);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyGconstant&gt; pGconstant(<b><a href="CppNew.htm">new</a></b> StrategyGconstant(pGparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyGplastic&gt;&nbsp;&nbsp;pGplastic( <b><a href="CppNew.htm">new</a></b> StrategyGplastic(pGparams.get()));<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of G" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>Gconstant: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pGconstant-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>Gplastic : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pGplastic-&gt;getString()&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumG(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Gconstant);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumG(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Gplastic);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setG [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the G's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;1)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an G's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setG 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setG(userInputToEnumG(userInput));											<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetM(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setM' only															<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetM&gt; pMparams(<b><a href="CppNew.htm">new</a></b> ParameterSetM);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyMconstant&gt; pMconstant(<b><a href="CppNew.htm">new</a></b> StrategyMconstant(pMparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyM<b><a href="CppDefault.htm">default</a></b>&gt;&nbsp;&nbsp;pM<b><a href="CppDefault.htm">default</a></b>( <b><a href="CppNew.htm">new</a></b> StrategyM<b><a href="CppDefault.htm">default</a></b>(pMparams.get()));<br/>
<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of M" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>Mconstant : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pMconstant-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b>&nbsp;&nbsp;: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pM<b><a href="CppDefault.htm">default</a></b>-&gt;getString()&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumM(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Mconstant);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumM(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>M<b><a href="CppDefault.htm">default</a></b>);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setM [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the M's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;1)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an M's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setM 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setM(userInputToEnumM(userInput));											<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetN(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setN' only															<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetN&gt; pNparams(<b><a href="CppNew.htm">new</a></b> ParameterSetN);<br/>
		pNparams-&gt;C <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyNconstant&gt; pNconstant(<b><a href="CppNew.htm">new</a></b> StrategyNconstant(pNparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyNplastic&gt;&nbsp;&nbsp;pNplastic( <b><a href="CppNew.htm">new</a></b> StrategyNplastic(pNparams.get()));<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of N" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>Nplastic&nbsp;&nbsp;: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pNplastic-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>Nconstant : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pNconstant-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumN(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Nplastic);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumN(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Nconstant);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setN [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the N's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;1)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an N's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setN 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setN(userInputToEnumN(userInput));<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetP(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setP' only<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetP&gt; pPparams(<b><a href="CppNew.htm">new</a></b> ParameterSetP);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyPconstant&gt; pPconstant(<b><a href="CppNew.htm">new</a></b> StrategyPconstant(pPparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyPplastic&gt; pPplasticA(<b><a href="CppNew.htm">new</a></b> StrategyPplastic(pPparams.get()));<br/>
															<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of P" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>Pconstant : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pPconstant-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>Pplastic : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pPplasticA-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumP(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Pconstant);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumP(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Pplastic);<br/>
	<br/>
	<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setP [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the P's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;2)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an P's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setP 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setP(userInputToEnumP(userInput));											<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetQ(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQ' only															<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetQ&gt; pQparams(<b><a href="CppNew.htm">new</a></b> ParameterSetQ);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyQconstant&gt; pQconstant(<b><a href="CppNew.htm">new</a></b> StrategyQconstant(pQparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyQ<b><a href="CppDefault.htm">default</a></b> &gt; pQ<b><a href="CppDefault.htm">default</a></b>( <b><a href="CppNew.htm">new</a></b> StrategyQ<b><a href="CppDefault.htm">default</a></b>( pQparams.get()));<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of Q" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>Qconstant : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pQconstant-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>&nbsp;&nbsp;: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pQ<b><a href="CppDefault.htm">default</a></b>-&gt;getString()&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumQ(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Qconstant);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumQ(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Q<b><a href="CppDefault.htm">default</a></b>);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setQ [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the Q's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;1)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an Q's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setQ 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setQ(userInputToEnumQ(userInput));											<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetR(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setR' only															<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetR&gt; pRparams(<b><a href="CppNew.htm">new</a></b> ParameterSetR);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyRconstant&gt; pRconstant(<b><a href="CppNew.htm">new</a></b> StrategyRconstant(pRparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyRlogistic&gt; pRlogistic(<b><a href="CppNew.htm">new</a></b> StrategyRlogistic(pRparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyRcosine&nbsp;&nbsp;&gt; pRcosine(&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> StrategyRcosine(&nbsp;&nbsp;pRparams.get()));<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of R" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>Rconstant : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pRconstant-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>Rlogistic : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pRlogistic-&gt;getString() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2] <b><a href="CppEnum.htm">enum</a></b>Rcosine&nbsp;&nbsp; : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pRcosine-&gt;getString()&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumR(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Rconstant);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumR(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Rlogistic);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumR(2)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Rcosine);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setR [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the R's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;2)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an R's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setR 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setR(userInputToEnumR(userInput));											<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------		<br/>
<b><a href="CppVoid.htm">void</a></b> Sim4Interpreter::interpretSetW(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; index)							<br/>
{																							<br/>
	<b><a href="CppIf.htm">if</a></b> (index+1<a href="CppOperatorEqual.htm">==</a>mCommand.size())															<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setW' only															<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetW&gt; pWparams(<b><a href="CppNew.htm">new</a></b> ParameterSetW);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyWzero&gt;&nbsp;&nbsp;&nbsp;&nbsp;pWzero(&nbsp;&nbsp; <b><a href="CppNew.htm">new</a></b> StrategyWzero(pWparams.get()));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;StrategyWuniform&gt; pWuniform(<b><a href="CppNew.htm">new</a></b> StrategyWuniform(pWparams.get()));<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please also specify the index of the formula of W" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Optional indices are:" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0] <b><a href="CppEnum.htm">enum</a></b>Wzero&nbsp;&nbsp;&nbsp;&nbsp;: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pWzero-&gt;getString()&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] <b><a href="CppEnum.htm">enum</a></b>Wuniform : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pWuniform-&gt;getString() 	<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumW(0)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Wzero);<br/>
	<a href="CppAssert.htm">assert</a>(userInputToEnumW(1)<a href="CppOperatorEqual.htm">==</a><b><a href="CppEnum.htm">enum</a></b>Wuniform);<br/>
																							<br/>
	<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nextCommand <a href="CppOperatorAssign.htm">=</a> mCommand[index+1];										<br/>
																							<br/>
	<b><a href="CppInt.htm">int</a></b> userInput=-1;																		<br/>
	<b><a href="CppIf.htm">if</a></b> (isInt(nextCommand,userInput)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)												<br/>
	{&nbsp;&nbsp; <a href="CppComment.htm">//</a>User typed 'setW [non-<a href="CppInt.htm">integer</a>]'													<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please input the W's equation index as a NUMBER." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>		<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<b><a href="CppIf.htm">if</a></b> (userInput&lt;0 <a href="CppOperatorLogicalOr.htm">||</a> userInput&gt;1)															<br/>
	{																						<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>																<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;Please select an W's equation index that is IN RANGE." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>&nbsp;&nbsp; <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;e.g. './Sim4 setW 0'" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>									<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;																	<br/>
		<b><a href="CppReturn.htm">return</a></b>;																				<br/>
	}																						<br/>
																							<br/>
	<a href="CppComment.htm">//</a>Success. OptionsFile produces <b><a href="CppThis.htm">this</a></b> output.											<br/>
	mOptionsFile.setW(userInputToEnumW(userInput));											<br/>
}																							<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Simulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Simulation.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Simulation.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 24 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>The <a href="CppFunction.htm">function</a> of <b><a href="CppClass.htm">class</a></b> Simulation is to run a simulation<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>It is <a href="CppInitialize.htm">initialize</a>d with an OptionsFile and a SimulationFile<br/>
<a href="CppComment.htm">///</a>The OptionFiles is used <b><a href="CppFor.htm">for</a></b> e.g. display options during the simulation<br/>
<a href="CppComment.htm">///</a>The SimulationFile embodies the parameters and <a href="CppFunction.htm">function</a>s Simulation uses<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Technical notes:<br/>
<a href="CppComment.htm">///</a>-Do NOT put <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>'s in a <a href="CppStdVector.htm">std::vector</a>, as a <a href="CppStdAuto_ptr.htm">std::auto_ptr</a>'s copy is not the same as the original (ref. 1)<br/>
<a href="CppComment.htm">///</a>-Do NOT use <a href="CppStdAuto_ptr.htm">std::auto_ptr</a> <b><a href="CppFor.htm">for</a></b> <a href="CppPointer.htm">point</a>ing to <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>, as Simulation will NOT have the responsability to <b><a href="CppDelete.htm">delete</a></b> it.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>Reference:<br/>
<a href="CppComment.htm">///</a>1) <a href="CppException.htm">Exception</a>al <a href="Cpp.htm">C++</a>: 47 Engineering Puzzles, Programming Problems, and Solutions. By <a href="CppHerbSutter.htm">Herb Sutter</a>. ISBN: 0-201-61562-2<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __SIMULATION_H<br/>
<a href="CppDefine.htm">#define</a> __SIMULATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "SoilMite.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGnuplot.htm">Gnuplot</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Enumerations.h"<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "OptionsFile.h"<br/>
<a href="CppInclude.htm">#include</a> "SimulationFile.h"<br/>
<a href="CppInclude.htm">#include</a> "MeasurementsTable.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Simulation<br/>
{<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;SoilMiteBase*&gt; mPop;<br/>
	<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> * mp<a href="CppFunction.htm">Function</a>s;<br/>
	<b><a href="CppDouble.htm">double</a></b> mResources; <br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; mVectorResources;<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> mMax<a href="CppTime.htm">Time</a>;<br/>
	<a href="CppComment.htm">//</a>Measuring<br/>
	<b><a href="CppBool.htm">bool</a></b> mOffspringProduced;<br/>
<br/>
	<a href="CppComment.htm">//</a>Life stages<br/>
	<b><a href="CppVoid.htm">void</a></b> changeEnvironment(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;,MeasurementsTable&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> intake(MeasurementsTable&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> reproduction(MeasurementsTable&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> mortality();<br/>
<br/>
	<a href="CppComment.htm">//</a>Helpers<br/>
	<b><a href="CppVoid.htm">void</a></b> <a href="CppInitialize.htm">initialize</a>(); <br/>
	<b><a href="CppVoid.htm">void</a></b> measurePopulation(MeasurementsTable&amp;);<br/>
	<b><a href="CppDouble.htm">double</a></b> getSumFeedRate() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> checkPopSize(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> checkResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; logMessage) <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; errorMessage) <b><a href="CppConst.htm">const</a></b>;<br/>
	EnumErrorCode mErrorCode;<br/>
	<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<a href="CppComment.htm">//</a>Simulation(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
	<br/>
	Simulation(<b><a href="CppConst.htm">const</a></b> OptionsFile&amp;, <b><a href="CppConst.htm">const</a></b> SimulationFile&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> readParameters(<b><a href="CppConst.htm">const</a></b> ParameterSetSimulation&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> readOptions(<b><a href="CppConst.htm">const</a></b> OptionsFileParameters&amp;);<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> OptionsFileParameters mOptionsFileParameters;<br/>
	<br/>
	~Simulation();<br/>
	<b><a href="CppVoid.htm">void</a></b> execute(MeasurementsTable&amp;, <a href="CppStdVector.htm">std::vector</a>&lt;EnumConclusion&gt;&amp;);<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __SIMULATION_H<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Simulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Simulation.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Simulation<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 24 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "Simulation.h"<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> EXTREME_LOGGING<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> EXTREME_LOGGING_PLUS<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
Simulation::Simulation(<b><a href="CppConst.htm">const</a></b> OptionsFile&amp; optionsFile, <b><a href="CppConst.htm">const</a></b> SimulationFile&amp; simulationFile) :<br/>
	mp<a href="CppFunction.htm">Function</a>s(<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::<a href="CppInstance.htm">instance</a>()),<br/>
	mOptionsFileParameters(optionsFile.getOptionsFileParameters())<br/>
{<br/>
	simulationFile.coutAll();<br/>
	readParameters(simulationFile.getParameters());<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> mPop.size();<br/>
<br/>
	<b><a href="CppSwitch.htm">switch</a></b> (simulationFile.getReproductionMode())<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeFraction:<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i) <br/>
			{<br/>
				mPop[i] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> SoilMiteFraction("INIT");<br/>
				<a href="CppAssert.htm">assert</a>(mPop[i]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
			}<br/>
			<b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount:<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i) <br/>
			{<br/>
				mPop[i] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> SoilMiteAmount("INIT");<br/>
				<a href="CppAssert.htm">assert</a>(mPop[i]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
			}<br/>
			<b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Unknown value of: simulationFile.getReproductionMode()");<br/>
	}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::readParameters(<b><a href="CppConst.htm">const</a></b> ParameterSetSimulation&amp; params)<br/>
{<br/>
	srand(params.seed);<br/>
	mResources <a href="CppOperatorAssign.htm">=</a> params.startingResources;<br/>
	mMax<a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> params.max<a href="CppTime.htm">Time</a>;<br/>
	SoilMiteBase::setBodySizeAdult(params.bodySizeAdult);<br/>
	mOffspringProduced <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
	<a href="CppComment.htm">//</a>Make <a href="CppFunction.htm">function</a> <b><a href="CppClass.htm">class</a></b> ready<br/>
	mp<a href="CppFunction.htm">Function</a>s <a href="CppOperatorAssign.htm">=</a> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::<a href="CppInstance.htm">instance</a>();<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setAlpha(params.A);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setBeta(params.B);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setGamma(params.C);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setD(params.<b><a href="CppEnum.htm">enum</a></b>D, &amp;params.paramsD);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setF(params.<b><a href="CppEnum.htm">enum</a></b>F, &amp;params.paramsF);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setG(params.<b><a href="CppEnum.htm">enum</a></b>G, &amp;params.paramsG);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setM(params.<b><a href="CppEnum.htm">enum</a></b>M, &amp;params.paramsM);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setN(params.<b><a href="CppEnum.htm">enum</a></b>N, &amp;params.paramsN);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setP(params.<b><a href="CppEnum.htm">enum</a></b>P, &amp;params.paramsP);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setQ(params.<b><a href="CppEnum.htm">enum</a></b>Q, &amp;params.paramsQ);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setR(params.<b><a href="CppEnum.htm">enum</a></b>R, &amp;params.paramsR);<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;setW(params.<b><a href="CppEnum.htm">enum</a></b>W, &amp;params.paramsW);<br/>
	mPop.resize(params.startingPopSize);<br/>
	<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt; params.startingPopSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(mPop[i]<a href="CppOperatorEqual.htm">==</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
Simulation::~Simulation()<br/>
{<br/>
	checkPopSize("Simulation::~Simulation() <a href="CppOperatorMinus.htm">-</a> #1");<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> mPop.size();<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(mPop[i]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
		<b><a href="CppDelete.htm">delete</a></b> mPop[i];	mPop[i]=<a href="CppNULL.htm">NULL</a>;<br/>
	}<br/>
	<a href="CppComment.htm">//</a>The check below will give a <b><a href="CppFalse.htm">false</a></b> result...<br/>
	<a href="CppComment.htm">//</a>This is because it checks whether the <a href="CppStdVector.htm">std::vector</a> size matches<br/>
	<a href="CppComment.htm">//</a>the Soilmites' <a href="CppInstance.htm">instances</a>...<br/>
	<a href="CppComment.htm">//</a>checkPopSize("Simulation::~Simulation() <a href="CppOperatorMinus.htm">-</a> If you see me, than everything is good");<br/>
	mPop.resize(0);<br/>
	checkPopSize("Simulation::~Simulation() <a href="CppOperatorMinus.htm">-</a> #2");<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppStdVector.htm">std::vector</a>&lt;EnumConclusion&gt; Simulation::execute()<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::execute(MeasurementsTable&amp; table, <a href="CppStdVector.htm">std::vector</a>&lt;EnumConclusion&gt;&amp; conclusions)<br/>
{<br/>
<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::execute() <a href="CppOperatorMinus.htm">-</a> #1");<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Start of simulation, running <a href="CppTime.htm">time</a> (<a href="CppTime.htm">time</a>steps): " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mMax<a href="CppTime.htm">Time</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Starting population size: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SoilMiteBase::getPopSize() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
	mErrorCode <a href="CppOperatorAssign.htm">=</a> EcNoError;<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>=0; <a href="CppTime.htm">time</a>&lt;mMax<a href="CppTime.htm">Time</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mErrorCode<a href="CppOperatorEqual.htm">==</a>EcNoError; <a href="CppOperatorIncrement.htm">++</a><a href="CppTime.htm">time</a>)<br/>
	{<br/>
		changeEnvironment(<a href="CppTime.htm">time</a>,table);<br/>
		intake(table);<br/>
		reproduction(table);<br/>
		mortality();<br/>
		measurePopulation(table);<br/>
		<b><a href="CppIf.htm">if</a></b> (mOptionsFileParameters.showYearSummary<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) table.showYearHorizontal(<a href="CppTime.htm">time</a>);<br/>
	}<br/>
<br/>
	<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::execute() <a href="CppOperatorMinus.htm">-</a> #2");<br/>
	mp<a href="CppFunction.htm">Function</a>s-&gt;coutAll();<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Body size adult: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> SoilMiteBase::getBodySizeAdult() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>; <br/>
<br/>
	<a href="CppComment.htm">//</a>Some conclusions<br/>
	<b><a href="CppIf.htm">if</a></b> (mOffspringProduced<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) conclusions.push_back(CcNoOffspringProduced);<br/>
	<b><a href="CppSwitch.htm">switch</a></b>(mErrorCode)<br/>
	{<br/>
		<b><a href="CppCase.htm">case</a></b> EcNoError: conclusions.push_back(CcNoError); <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> EcPopExtinct: conclusions.push_back(CcPopExtinct); <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> EcPopSizeTooBig: conclusions.push_back(CcPopSizeTooBig); <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> EcNoffspringTooBigSingleParent: conclusions.push_back(CcNoffspringTooBigSingleParent); <b><a href="CppBreak.htm">break</a></b>;<br/>
		<b><a href="CppCase.htm">case</a></b> EcNoffspringTooBigAllParents: conclusions.push_back(CcNoffspringTooBigAllParents); <b><a href="CppBreak.htm">break</a></b>;<br/>
	}<br/>
<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::changeEnvironment(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <a href="CppTime.htm">time</a>,MeasurementsTable&amp; table)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mErrorCode<a href="CppOperatorNotEqual.htm">!=</a>EcNoError) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
	dot("Current resources: "+ftoa(mResources));<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> inflow <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;R(mResources,<a href="CppTime.htm">time</a>);<br/>
	dot("Inflow: "+ftoa(inflow));<br/>
	<a href="CppComment.htm">//</a>Note: Inflow can also be negative<br/>
	mResources<a href="CppOperatorPlusAssign.htm">+=</a>inflow;<br/>
	dot("New resources: "+ftoa(mResources));<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::changeEnvironment(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <a href="CppTime.htm">time</a>)");<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> SoilMiteBase::getPopSize();<br/>
	<b><a href="CppIf.htm">if</a></b> (popSize<a href="CppOperatorEqual.htm">==</a>0) { mErrorCode <a href="CppOperatorAssign.htm">=</a> EcPopExtinct; <b><a href="CppReturn.htm">return</a></b>; }<br/>
	<a href="CppComment.htm">//</a>Create a vector of bodySizes...<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; popBodySize(popSize);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i) popBodySize[i] <a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getBodySize();<br/>
	mVectorResources <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;distributeResources(popBodySize, mResources);<br/>
	<a href="CppAssert.htm">assert</a>(mVectorResources.size()<a href="CppOperatorEqual.htm">==</a>popBodySize.size());<br/>
	checkResources(mResources);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::intake(MeasurementsTable&amp; table)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mErrorCode<a href="CppOperatorNotEqual.htm">!=</a>EcNoError) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::intake() <a href="CppOperatorMinus.htm">-</a> #1");<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> SoilMiteBase::getPopSize();<br/>
	<br/>
	<b><a href="CppIf.htm">if</a></b> (popSize<a href="CppOperatorEqual.htm">==</a>0) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Population went extinct" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		mErrorCode <a href="CppOperatorAssign.htm">=</a> EcPopExtinct;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
	<b><a href="CppIf.htm">if</a></b> (popSize&gt;100000) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Population went bigger then 100,000" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		mErrorCode <a href="CppOperatorAssign.htm">=</a> EcPopSizeTooBig;<br/>
		<b><a href="CppReturn.htm">return</a></b>;<br/>
	}<br/>
<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		mPop[i]-&gt;intake(mVectorResources[i]);<br/>
	}<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> foodIntake <a href="CppOperatorAssign.htm">=</a> getSumFeedRate();<br/>
	<a href="CppAssert.htm">assert</a>(foodIntake<a href="CppOperatorGreaterEqual.htm">&gt;=</a>-0.001 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> foodIntake<a href="CppOperatorLessEqual.htm">&lt;=</a>mResources*1.0001);<br/>
	dot("Intake: "+ftoa(foodIntake));<br/>
	mResources<a href="CppOperatorMinusAssign.htm">-=</a>foodIntake;<br/>
	dot("New resources: "+ftoa(mResources));<br/>
	table.mResources.push_back(mResources); <a href="CppComment.htm">//</a>Measure<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::reproduction(MeasurementsTable&amp; table)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mErrorCode<a href="CppOperatorNotEqual.htm">!=</a>EcNoError) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::intake() <a href="CppOperatorMinus.htm">-</a> #1");<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> SoilMiteBase::getPopSize();<br/>
	table.mPopSize.push_back(popSize); <a href="CppComment.htm">//</a>Measure mPopSize<br/>
<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;SoilMiteBase*&gt; offspring;<br/>
<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		EnumErrorCode error <a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;reproduce(offspring);<br/>
		<b><a href="CppIf.htm">if</a></b> (error<a href="CppOperatorNotEqual.htm">!=</a>EcNoError) <br/>
		{<br/>
			<a href="CppComment.htm">//</a>Delete the offspring produced <b><a href="CppThis.htm">this</a></b> far<br/>
			<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring <a href="CppOperatorAssign.htm">=</a> offspring.size();<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i) { <b><a href="CppDelete.htm">delete</a></b> offspring[i]; offspring[i]=<a href="CppNULL.htm">NULL</a>; }<br/>
			offspring.resize(0);<br/>
			mErrorCode <a href="CppOperatorAssign.htm">=</a> error; <br/>
			<b><a href="CppReturn.htm">return</a></b>; <br/>
		}<br/>
	}<br/>
<br/>
	<a href="CppComment.htm">//</a>Put offspring in population<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring <a href="CppOperatorAssign.htm">=</a> offspring.size();<br/>
	<b><a href="CppIf.htm">if</a></b> (nOffspring&gt;0) mOffspringProduced <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;<b><a href="CppTrue.htm">true</a></b>;<br/>
	<b><a href="CppIf.htm">if</a></b> (nOffspring&gt;100000) <br/>
	{&nbsp;&nbsp; <br/>
		mErrorCode <a href="CppOperatorAssign.htm">=</a> EcNoffspringTooBigAllParents;	<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i) { <b><a href="CppDelete.htm">delete</a></b> offspring[i]; offspring[i]=<a href="CppNULL.htm">NULL</a>; }<br/>
		<b><a href="CppReturn.htm">return</a></b>;	<br/>
	}<br/>
<br/>
	table.mNoffspring.push_back(nOffspring); <a href="CppComment.htm">//</a>Measuring nOffspring<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(offspring[i]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
		mPop.push_back(offspring[i]);<br/>
	}<br/>
<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::intake() <a href="CppOperatorMinus.htm">-</a> #2");<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::mortality()<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mErrorCode<a href="CppOperatorNotEqual.htm">!=</a>EcNoError) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::mortality() <a href="CppOperatorMinus.htm">-</a> #1");<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> SoilMiteBase::getPopSize();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppIf.htm">if</a></b> (mPop[i]-&gt;<b><a href="CppDo.htm">do</a></b>Idie()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>)<br/>
		{<br/>
			<b><a href="CppDelete.htm">delete</a></b> mPop[i]; mPop[i]=<a href="CppNULL.htm">NULL</a>;<br/>
		}<br/>
	}<br/>
<br/>
	<a href="CppComment.htm">//</a>DO NOT: checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::mortality() <a href="CppOperatorMinus.htm">-</a> #1.5");<br/>
	<a href="CppComment.htm">//</a>This will not be correct, because the <a href="CppStdVector.htm">std::vector</a> mPop then<br/>
	<a href="CppComment.htm">//</a>has individuals deleted, but is not yet shrunk<br/>
<br/>
	<a href="CppComment.htm">//</a>Remove <a href="CppNULL.htm">NULL</a>s<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i &lt; mPop.size() ; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppWhile.htm">while</a></b> (mPop[i]<a href="CppOperatorEqual.htm">==</a><a href="CppNULL.htm">NULL</a> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i&lt;mPop.size())<br/>
		{<br/>
			mPop[i]=mPop.back();<br/>
			mPop.pop_back();<br/>
		}<br/>
	}<br/>
<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::mortality() <a href="CppOperatorMinus.htm">-</a> #2");<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppDouble.htm">double</a></b> Simulation::getSumFeedRate() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	checkPopSize("<b><a href="CppDouble.htm">double</a></b> Simulation::getSumFeedRate() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorMinus.htm">-</a> #1");<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> SoilMiteBase::getPopSize();<br/>
	<b><a href="CppDouble.htm">double</a></b> sumFeedRate <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> feedRate <a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getFeedRate();<br/>
		<a href="CppAssert.htm">assert</a>(feedRate<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		sumFeedRate<a href="CppOperatorPlusAssign.htm">+=</a>feedRate;<br/>
		<a href="CppIfdef.htm">#ifdef</a> EXTREME_LOGGING_PLUS<br/>
		dot("FeedRate ["+itoa(i)+"]: "+ftoa(feedRate));<br/>
		<a href="CppEndif.htm">#endif</a><br/>
	}<br/>
	<b><a href="CppReturn.htm">return</a></b> sumFeedRate;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
/<a href="CppComment.htm">//</a> Compares <b><a href="CppIf.htm">if</a></b> the population sizes of the vector mPop and the <b><a href="CppStatic.htm">static</a></b> <br/>
/<a href="CppComment.htm">//</a> SoilMiteBase::mPopSize <b><a href="CppDo.htm">do</a></b> match.<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::checkPopSize(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; location) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> popSizeVector <a href="CppOperatorAssign.htm">=</a> mPop.size();<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> popSizeClass <a href="CppOperatorAssign.htm">=</a> SoilMiteBase::getPopSize();<br/>
	<b><a href="CppIf.htm">if</a></b> (popSizeVector<a href="CppOperatorNotEqual.htm">!=</a>popSizeClass) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "MEMORY LEAK at location: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> location <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "mPop size: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> popSizeVector <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SoilMiteBase::sPopSize: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> popSizeClass <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	}<br/>
	<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::checkResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; totalResources) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
	<b><a href="CppDouble.htm">double</a></b> sumResources <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> mVectorResources.size();<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		sumResources<a href="CppOperatorPlusAssign.htm">+=</a>mVectorResources[i];<br/>
	}<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (sumResources &lt; 0.999 * totalResources <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> sumResources&gt;1.001*totalResources)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "sumResources: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sumResources<br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "totalResources: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> totalResources <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppAssert.htm">assert</a>(!"Resources not correct in vector");<br/>
	}<br/>
	<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::measurePopulation(MeasurementsTable&amp; table)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mErrorCode<a href="CppOperatorNotEqual.htm">!=</a>EcNoError) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
	checkPopSize("<b><a href="CppVoid.htm">void</a></b> Simulation::measurePopulation()");<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> SoilMiteBase::getPopSize();<br/>
<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; bodySizeTable(popSize);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; reservesTable(popSize);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; chanceToDieTable(popSize);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; foodIntakeTable(popSize);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; allocationTable(popSize);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; fractionBiomassPerOffspringInitialTable(popSize);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; fractionBiomassPerOffspringTable(popSize);<br/>
<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppBool.htm">bool</a></b>&gt; isAdultTable(popSize);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> splitValue <a href="CppOperatorAssign.htm">=</a> SoilMiteBase::getBodySizeAdult();<br/>
<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		bodySizeTable[i]&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getBodySize();<br/>
		reservesTable[i]&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getReserves();<br/>
		foodIntakeTable[i]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getFeedRate();<br/>
		chanceToDieTable[i] <a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getChanceToDie();<br/>
		allocationTable[i]&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getAllocation();<br/>
		fractionBiomassPerOffspringInitialTable[i] <a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getFractionBiomassPerOffspringInitial();<br/>
		fractionBiomassPerOffspringTable[i] <a href="CppOperatorAssign.htm">=</a> mPop[i]-&gt;getFractionBiomassPerOffspring();<br/>
		isAdultTable[i]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> ( bodySizeTable[i]&gt;splitValue ? <b><a href="CppTrue.htm">true</a></b> : <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
		<a href="CppAssert.htm">assert</a>(allocationTable[i]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> allocationTable[i]<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<a href="CppAssert.htm">assert</a>(fractionBiomassPerOffspringInitialTable[i]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fractionBiomassPerOffspringInitialTable[i]<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<a href="CppAssert.htm">assert</a>(fractionBiomassPerOffspringTable[i]<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fractionBiomassPerOffspringTable[i]<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<a href="CppAssert.htm">assert</a>(mPop[i]-&gt;getChanceToDie()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mPop[i]-&gt;getChanceToDie()<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> meanBodySize, stdDevBodySize;<br/>
	SafeMeanAndStdDev(bodySizeTable, meanBodySize, stdDevBodySize);<br/>
	table.mMeanBodySize.push_back(meanBodySize);<br/>
	table.mStdDevBodySize.push_back(stdDevBodySize);<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> meanReserves, stdDevReserves;<br/>
	SafeMeanAndStdDev(reservesTable, meanReserves, stdDevReserves);<br/>
	table.mMeanReserves.push_back(meanReserves);<br/>
	table.mStdDevReserves.push_back(stdDevReserves);<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> meanFoodIntake, stdDevFoodIntake;<br/>
	SafeMeanAndStdDev(foodIntakeTable, meanFoodIntake, stdDevFoodIntake);<br/>
	table.mMeanFoodIntake.push_back(meanFoodIntake);<br/>
	table.mStdDevFoodIntake.push_back(stdDevFoodIntake);<br/>
	<br/>
	<b><a href="CppDouble.htm">double</a></b> meanChanceToDie, stdDevChanceToDie;<br/>
	SafeMeanAndStdDev(chanceToDieTable, meanChanceToDie, stdDevChanceToDie);<br/>
	table.mMeanChanceToDie.push_back(meanChanceToDie);<br/>
	table.mStdDevChanceToDie.push_back(stdDevChanceToDie);<br/>
<br/>
	<a href="CppComment.htm">//</a>Plus<br/>
	<b><a href="CppInt.htm">int</a></b> popSizeJuvenileInt, popSizeAdultInt;<br/>
	countSplit(splitValue, bodySizeTable, popSizeJuvenileInt, popSizeAdultInt);<br/>
	<b><a href="CppDouble.htm">double</a></b> popSizeJuvenile <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(popSizeJuvenileInt);<br/>
	<b><a href="CppDouble.htm">double</a></b> popSizeAdult&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(popSizeAdultInt);<br/>
	table.mPopSizeJuvenile.push_back(popSizeJuvenile);<br/>
	table.mPopSizeAdult.push_back(popSizeAdult);<br/>
	<br/>
	<b><a href="CppDouble.htm">double</a></b> meanBodySizeJuvenile, meanBodySizeAdult;<br/>
	SafeMeanSplit(splitValue,bodySizeTable, meanBodySizeJuvenile, meanBodySizeAdult);<br/>
	<a href="CppAssert.htm">assert</a>(meanBodySizeJuvenile<a href="CppOperatorLessEqual.htm">&lt;=</a>splitValue);<br/>
	<a href="CppAssert.htm">assert</a>(meanBodySizeAdult<a href="CppOperatorGreaterEqual.htm">&gt;=</a>splitValue <a href="CppOperatorLogicalOr.htm">||</a> meanBodySizeAdult<a href="CppOperatorEqual.htm">==</a>0.0);<br/>
	table.mMeanBodySizeJuvenile.push_back(meanBodySizeJuvenile);<br/>
	table.mMeanBodySizeAdult.push_back(meanBodySizeAdult);<br/>
	<br/>
	<b><a href="CppDouble.htm">double</a></b> meanReservesJuvenile, meanReservesAdult;<br/>
	SafeMeanSplit(isAdultTable,reservesTable, meanReservesJuvenile, meanReservesAdult);<br/>
	table.mMeanReservesJuvenile.push_back(meanReservesJuvenile);<br/>
	table.mMeanReservesAdult.push_back(meanReservesAdult);<br/>
	<br/>
	<b><a href="CppDouble.htm">double</a></b> meanChanceToDieJuvenile, meanChanceToDieAdult;<br/>
	SafeMeanSplit(isAdultTable,chanceToDieTable, meanChanceToDieJuvenile, meanChanceToDieAdult);<br/>
	table.mMeanChanceToDieJuvenile.push_back(meanChanceToDieJuvenile);<br/>
	table.mMeanChanceToDieAdult.push_back(meanChanceToDieAdult);<br/>
	<br/>
	<b><a href="CppDouble.htm">double</a></b> meanFoodIntakeJuvenile, meanFoodIntakeAdult;<br/>
	SafeMeanSplit(isAdultTable,foodIntakeTable, meanFoodIntakeJuvenile, meanFoodIntakeAdult);<br/>
	table.mMeanFoodIntakeJuvenile.push_back(meanFoodIntakeJuvenile);<br/>
	table.mMeanFoodIntakeAdult.push_back(meanFoodIntakeAdult);<br/>
<br/>
	<a href="CppComment.htm">//</a>Plus plus<br/>
	<b><a href="CppDouble.htm">double</a></b> meanAllocationJuvenile, meanAllocationAdult;<br/>
	SafeMeanSplit(isAdultTable,allocationTable, meanAllocationJuvenile, meanAllocationAdult);<br/>
	table.mMeanAllocation.push_back(meanAllocationAdult);<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> meanFractionBiomassPerOffspringInitialJuvenile, meanFractionBiomassPerOffspringInitialAdult;<br/>
	SafeMeanSplit(isAdultTable,fractionBiomassPerOffspringInitialTable, meanFractionBiomassPerOffspringInitialJuvenile, meanFractionBiomassPerOffspringInitialAdult);<br/>
	table.mMeanFractionBiomassPerOffspringInitial.push_back(meanFractionBiomassPerOffspringInitialAdult);<br/>
<br/>
	<b><a href="CppDouble.htm">double</a></b> meanFractionBiomassPerOffspringJuvenile, meanFractionBiomassPerOffspringAdult;<br/>
	SafeMeanSplit(isAdultTable,fractionBiomassPerOffspringTable, meanFractionBiomassPerOffspringJuvenile, meanFractionBiomassPerOffspringAdult);<br/>
	table.mMeanFractionBiomassPerOffspring.push_back(meanFractionBiomassPerOffspringAdult);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::cout(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; logMessage) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "LOG: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> logMessage <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; errorMessage) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppIfdef.htm">#ifdef</a> EXTREME_LOGGING<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "DOT: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> errorMessage <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/SimulationFile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/SimulationFile.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;SimulationFile.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 16 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>Class SimulationFile manages a single Simulation's parameters.<br/>
<a href="CppComment.htm">///</a>It is closely <a href="CppLink.htm">link</a>ed with file I/O: <b><a href="CppIf.htm">if</a></b> you set a value of the<br/>
<a href="CppComment.htm">///</a>parameter, <b><a href="CppThis.htm">this</a></b> is always saved to disk immediatly.<br/>
<a href="CppComment.htm">///</a>Getting the values has not file I/O side-effects. <br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __SIMULATION<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> __SIMULATION<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Enumerations.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> SimulationFile<br/>
{<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	ParameterSetSimulation mParameters;<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> mFileName;<br/>
	<a href="CppStdString.htm">std::string</a> m<a href="CppVersion.htm">Version</a>Name1;<br/>
	<a href="CppStdString.htm">std::string</a> m<a href="CppVersion.htm">Version</a>Name2;<br/>
	<a href="CppStdString.htm">std::string</a> mCurrent<a href="CppVersion.htm">Version</a>Name;<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>Dstring, <b><a href="CppEnum.htm">enum</a></b>Fstring, <b><a href="CppEnum.htm">enum</a></b>Gstring, <b><a href="CppEnum.htm">enum</a></b>Mstring, <b><a href="CppEnum.htm">enum</a></b>Nstring;<br/>
	<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>Pstring, <b><a href="CppEnum.htm">enum</a></b>Qstring, <b><a href="CppEnum.htm">enum</a></b>Rstring, <b><a href="CppEnum.htm">enum</a></b>Wstring;<br/>
	<a href="CppStdString.htm">std::string</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeString;<br/>
	<br/>
	<a href="CppComment.htm">//</a>Different file readers<br/>
	<b><a href="CppVoid.htm">void</a></b> readFromFile0();<br/>
	<b><a href="CppVoid.htm">void</a></b> readFromFile1();<br/>
	<b><a href="CppVoid.htm">void</a></b> readFromFile2();<br/>
<br/>
	<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a>ers<br/>
	<b><a href="CppVoid.htm">void</a></b> stringsToEnums();<br/>
	<b><a href="CppVoid.htm">void</a></b> <b><a href="CppEnum.htm">enum</a></b>sToStrings();	<br/>
<br/>
	<a href="CppComment.htm">//</a><a href="CppDebug.htm">Debugging</a><br/>
	<b><a href="CppInt.htm">int</a></b> mFlag;<br/>
	<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; logMessage <a href="CppOperatorAssign.htm">=</a> ".") <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; errorMessage <a href="CppOperatorAssign.htm">=</a> ".") <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	SimulationFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName <a href="CppOperatorAssign.htm">=</a> "<b><a href="CppDefault.htm">default</a></b>SimFile.txt", <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>&amp; overWrite <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
	<b><a href="CppVoid.htm">void</a></b> showUser() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
	<a href="CppComment.htm">//</a>Setters, formula's<br/>
	<b><a href="CppVoid.htm">void</a></b> setD(<b><a href="CppConst.htm">const</a></b> EnumD&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF(<b><a href="CppConst.htm">const</a></b> EnumF&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG(<b><a href="CppConst.htm">const</a></b> EnumG&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM(<b><a href="CppConst.htm">const</a></b> EnumM&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN(<b><a href="CppConst.htm">const</a></b> EnumN&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP(<b><a href="CppConst.htm">const</a></b> EnumP&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ(<b><a href="CppConst.htm">const</a></b> EnumQ&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR(<b><a href="CppConst.htm">const</a></b> EnumR&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW(<b><a href="CppConst.htm">const</a></b> EnumW&amp;);<br/>
	<a href="CppComment.htm">//</a>Setters, parameters of <a href="CppFunction.htm">function</a>s<br/>
	<b><a href="CppVoid.htm">void</a></b> setDparams(<b><a href="CppConst.htm">const</a></b> ParameterSetD&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setFparams(<b><a href="CppConst.htm">const</a></b> ParameterSetF&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setGparams(<b><a href="CppConst.htm">const</a></b> ParameterSetG&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setMparams(<b><a href="CppConst.htm">const</a></b> ParameterSetM&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setNparams(<b><a href="CppConst.htm">const</a></b> ParameterSetN&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setPparams(<b><a href="CppConst.htm">const</a></b> ParameterSetP&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQparams(<b><a href="CppConst.htm">const</a></b> ParameterSetQ&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setRparams(<b><a href="CppConst.htm">const</a></b> ParameterSetR&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setWParams(<b><a href="CppConst.htm">const</a></b> ParameterSetW&amp;);<br/>
	<a href="CppComment.htm">//</a>Setters, other parameters<br/>
	<b><a href="CppVoid.htm">void</a></b> setOutputFileName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setMax<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;); <br/>
	<b><a href="CppVoid.htm">void</a></b> setStartPopSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setStartResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setBodySizeAdult(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setConstA(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setConstB(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setConstC(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setReproductionMode(<b><a href="CppConst.htm">const</a></b> EnumReproductionMode &amp;);<br/>
<br/>
	<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
	<a href="CppComment.htm">//</a><br/>
	<a href="CppComment.htm">//</a> COMPUTER GENERATED CODE<br/>
	<a href="CppComment.htm">//</a> SimulationFile<br/>
	<a href="CppComment.htm">//</a><br/>
	<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
	<a href="CppComment.htm">//</a>&nbsp;&nbsp;COMPUTER GENERATED CODE<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>A(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>B(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>C(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>D(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setD<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setF<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setG<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setM<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setN<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setP<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setQ<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setR<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVoid.htm">void</a></b> setW<b><a href="CppConst.htm">const</a></b>E(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
<br/>
<br/>
	<a href="CppComment.htm">//</a>Setter, <a href="CppDebug.htm">debug</a><br/>
	<b><a href="CppVoid.htm">void</a></b> setFlag(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp;);<br/>
<br/>
	<a href="CppComment.htm">//</a>Getters<br/>
	ParameterSetSimulation getParameterSetSimulation() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mParameters; }<br/>
	ParameterSetSimulation getParameters() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mParameters; }<br/>
	EnumReproductionMode getReproductionMode() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mParameters.reproductionMode; }<br/>
	<a href="CppStdString.htm">std::string</a> getFileName() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mFileName; }<br/>
	<a href="CppStdString.htm">std::string</a> getOutputFileName() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mParameters.outputFileName; }<br/>
	<b><a href="CppInt.htm">int</a></b> getFlag() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mFlag; }<br/>
<br/>
	<a href="CppComment.htm">//</a>File I/O<br/>
	<b><a href="CppVoid.htm">void</a></b> writeToFile();<br/>
	<b><a href="CppVoid.htm">void</a></b> readFromFile();	<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> coutAll() <b><a href="CppConst.htm">const</a></b>;	<br/>
};<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __SIMULATION<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/SimulationFile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/SimulationFile.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;SimulationFile<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 16 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "SimulationFile.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> EXTREME_LOGGING<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
SimulationFile::SimulationFile(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; fileName, <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b>&amp; overWrite) :<br/>
	mFileName(fileName),<br/>
	m<a href="CppVersion.htm">Version</a>Name1("V1"), <a href="CppComment.htm">//</a>Do not change<br/>
	m<a href="CppVersion.htm">Version</a>Name2("V2"), <a href="CppComment.htm">//</a>Do not change<br/>
	mCurrent<a href="CppVersion.htm">Version</a>Name(m<a href="CppVersion.htm">Version</a>Name2) <a href="CppComment.htm">//</a>Change every <b><a href="CppNew.htm">new</a></b> <a href="CppVersion.htm">version</a><br/>
{		<br/>
	<a href="CppComment.htm">//</a>mp<a href="CppVersion.htm">Version</a>Names.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppVersion.htm">Version</a>Names);<br/>
	<a href="CppComment.htm">//</a>A proper <a href="CppInitialize.htm">initialization</a><br/>
	<a href="CppComment.htm">/*</a>mParameters.reproductionMode <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeAmount;<br/>
	mParameters.seed <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	mParameters.outputFileName <a href="CppOperatorAssign.htm">=</a> "<b><a href="CppDefault.htm">default</a></b>OutputFile.txt";<br/>
	mParameters.startingPopSize <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
	mParameters.startingResources <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.max<a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> 100;<br/>
	mParameters.A <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	mParameters.B <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	mParameters.C <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	mParameters.bodySizeAdult <a href="CppOperatorAssign.htm">=</a> 10.0;<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>D <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>Dconstant;<br/>
	mParameters.paramsD.A <a href="CppOperatorAssign.htm">=</a> 0.05;<br/>
	mParameters.paramsD.B <a href="CppOperatorAssign.htm">=</a> 0.0; <br/>
	mParameters.paramsD.C <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsD.D <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>F <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>Fconstant;<br/>
	mParameters.paramsF.A <a href="CppOperatorAssign.htm">=</a> 0.99;<br/>
	mParameters.paramsF.B <a href="CppOperatorAssign.htm">=</a> 0.0; <br/>
	mParameters.paramsF.C <a href="CppOperatorAssign.htm">=</a> 0.0; <br/>
	mParameters.paramsF.D <a href="CppOperatorAssign.htm">=</a> 0.0; <br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>G <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>Gfixed;<br/>
	mParameters.paramsG.A <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
	mParameters.paramsG.B <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsG.C <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsG.D <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>M <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>Mconstant;<br/>
	mParameters.paramsM.A <a href="CppOperatorAssign.htm">=</a> 0.05;<br/>
	mParameters.paramsM.B <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsM.C <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsM.D <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>N <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>N<b><a href="CppDefault.htm">default</a></b>;<br/>
	mParameters.paramsN.A <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	mParameters.paramsN.B <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	mParameters.paramsN.C <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsN.D <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>P <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>Pconstant;<br/>
	mParameters.paramsP.A <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
	mParameters.paramsP.B <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsP.C <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsP.D <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>Q <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>Qconstant;<br/>
	mParameters.paramsQ.A <a href="CppOperatorAssign.htm">=</a> 0.5;<br/>
	mParameters.paramsQ.B <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsQ.C <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsQ.D <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>R <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>Rconstant;<br/>
	mParameters.paramsR.A <a href="CppOperatorAssign.htm">=</a> 200.0;<br/>
	mParameters.paramsR.B <a href="CppOperatorAssign.htm">=</a> 0.1;<br/>
	mParameters.paramsR.C <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsR.D <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>W <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>WZero;<br/>
	mParameters.paramsW.A <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsW.B <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsW.C <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mParameters.paramsW.D <a href="CppOperatorAssign.htm">=</a> 0.0;<a href="CppComment.htm">*/</a><br/>
	<b><a href="CppEnum.htm">enum</a></b>sToStrings();<br/>
<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(mFileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <br/>
	{<br/>
		dot("Config file '"+mFileName+"' found.");<br/>
		<b><a href="CppIf.htm">if</a></b> (overWrite<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>) <br/>
		{ <br/>
			readFromFile(); <br/>
			dot("Loaded '"+mFileName+"' successfully.");<br/>
			<b><a href="CppReturn.htm">return</a></b>; <br/>
		}<br/>
	}<br/>
	writeToFile();<br/>
	<b><a href="CppIf.htm">if</a></b> (overWrite<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>) <br/>
	{<br/>
		dot("Overwritten '"+mFileName+"' successfully.");<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		dot("Config file '"+mFileName+"' not found, now created.");<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::writeToFile()<br/>
{<br/>
	dot(mParameters.outputFileName);<br/>
	<b><a href="CppEnum.htm">enum</a></b>sToStrings();<br/>
	<a href="CppAssert.htm">assert</a>(mCurrent<a href="CppVersion.htm">Version</a>Name <a href="CppOperatorEqual.htm">==</a> m<a href="CppVersion.htm">Version</a>Name2);<br/>
	<a href="CppStdOfstream.htm">std::ofstream</a> file;<br/>
	file.open(mFileName.c_str());<br/>
	file <br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mCurrent<a href="CppVersion.htm">Version</a>Name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.outputFileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.seed <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.startingPopSize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.startingResources <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.max<a href="CppTime.htm">Time</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.bodySizeAdult <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Dstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsD.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsD.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsD.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsD.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsD.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Fstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsF.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsF.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsF.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsF.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsF.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Gstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsG.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsG.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsG.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsG.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsG.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Mstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsM.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsM.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsM.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsM.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsM.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Nstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsN.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsN.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsN.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsN.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsN.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Pstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsP.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsP.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsP.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsP.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsP.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Qstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsQ.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsQ.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsQ.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsQ.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsQ.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Rstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsR.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsR.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsR.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsR.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsR.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Wstring <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsW.A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsW.B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsW.C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsW.D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mParameters.paramsW.E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>ReproductionModeString <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;mFlag<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::readFromFile()<br/>
{ <br/>
	<b><a href="CppIf.htm">if</a></b> (fileExists(mFileName)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "File '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mFileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' does not exist. " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		exit(0);<br/>
	}<br/>
<br/>
	<a href="CppComment.htm">//</a>Read <a href="CppVersion.htm">version</a><br/>
	<a href="CppStdString.htm">std::string</a> <a href="CppVersion.htm">version</a>Name <a href="CppOperatorAssign.htm">=</a> "NOTHING";<br/>
	{<br/>
		<a href="CppStdIfstream.htm">std::ifstream</a> file;<br/>
		file.open(mFileName.c_str());<br/>
		file <a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<a href="CppVersion.htm">version</a>Name;<br/>
		file.close();<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(<a href="CppVersion.htm">version</a>Name<a href="CppOperatorNotEqual.htm">!=</a>"NOTHING");<br/>
	<br/>
	<a href="CppComment.htm">//</a>Do the real reading of a file, dependent on the <a href="CppVersion.htm">version</a><br/>
	<b><a href="CppIf.htm">if</a></b> (<a href="CppVersion.htm">version</a>Name<a href="CppOperatorEqual.htm">==</a>m<a href="CppVersion.htm">Version</a>Name2) readFromFile2();<br/>
	<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (<a href="CppVersion.htm">version</a>Name<a href="CppOperatorEqual.htm">==</a>m<a href="CppVersion.htm">Version</a>Name1) readFromFile1();<br/>
	<b><a href="CppElse.htm">else</a></b> readFromFile0();<br/>
	<br/>
<br/>
	stringsToEnums();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Reads a SimFile V2.0<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::readFromFile2()<br/>
{<br/>
	<a href="CppStdString.htm">std::string</a> <a href="CppVersion.htm">version</a>NameDummy; <a href="CppComment.htm">//</a>Do not want to write to mp<a href="CppVersion.htm">Version</a>Names, therefore use dummy<br/>
	<a href="CppStdIfstream.htm">std::ifstream</a> file;<br/>
	file.open(mFileName.c_str());<br/>
	file <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<a href="CppVersion.htm">version</a>NameDummy <a href="CppComment.htm">//</a>Write to dummy mp<a href="CppVersion.htm">Version</a>Names-&gt;<a href="CppVersion.htm">version</a>Name1<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.outputFileName<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.seed<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.startingPopSize<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.startingResources<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.max<a href="CppTime.htm">Time</a><br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.B<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.bodySizeAdult<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Dstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Fstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Gstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Mstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Nstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Pstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Qstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Rstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Wstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.B<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.E<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>ReproductionModeString<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mFlag<br/>
		; <a href="CppComment.htm">//</a>End of reading<br/>
	<a href="CppAssert.htm">assert</a>(<a href="CppVersion.htm">version</a>NameDummy <a href="CppOperatorEqual.htm">==</a> m<a href="CppVersion.htm">Version</a>Name2); <a href="CppComment.htm">//</a>Check dummy<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Reads a SimFile V1.0<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::readFromFile1()<br/>
{<br/>
	<a href="CppStdString.htm">std::string</a> <a href="CppVersion.htm">version</a>NameDummy; <a href="CppComment.htm">//</a>Do not want to write to mp<a href="CppVersion.htm">Version</a>Names, therefore use dummy<br/>
	<a href="CppStdIfstream.htm">std::ifstream</a> file;<br/>
	file.open(mFileName.c_str());<br/>
	file <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<a href="CppVersion.htm">version</a>NameDummy <a href="CppComment.htm">//</a>Write to dummy mp<a href="CppVersion.htm">Version</a>Names-&gt;<a href="CppVersion.htm">version</a>Name1<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.outputFileName<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.seed<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.startingPopSize<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.startingResources<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.max<a href="CppTime.htm">Time</a><br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.B<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.bodySizeAdult<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Dstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Fstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Gstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Mstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Nstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Pstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Qstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Rstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Wstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.B<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>ReproductionModeString<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mFlag<br/>
		; <a href="CppComment.htm">//</a>End of reading<br/>
	<a href="CppAssert.htm">assert</a>(<a href="CppVersion.htm">version</a>NameDummy <a href="CppOperatorEqual.htm">==</a> m<a href="CppVersion.htm">Version</a>Name1); <a href="CppComment.htm">//</a>Check dummy<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">///</a>Reads a SimFile before V1.0<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::readFromFile0()<br/>
{<br/>
	<a href="CppStdIfstream.htm">std::ifstream</a> file;<br/>
	file.open(mFileName.c_str());<br/>
	file <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.outputFileName<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.startingPopSize<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.startingResources<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.max<a href="CppTime.htm">Time</a><br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.B<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.bodySizeAdult<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Dstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsD.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Fstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsF.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Gstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsG.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Mstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsM.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Nstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsN.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Pstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsP.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Qstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsQ.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Rstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.B <br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsR.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>Wstring<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.A<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.B<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.C<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mParameters.paramsW.D<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b>ReproductionModeString<br/>
		<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&nbsp;&nbsp;mFlag<br/>
		; <a href="CppComment.htm">//</a>End of reading<br/>
	file.close();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::coutAll() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mParameters <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::stringsToEnums()<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>D <a href="CppOperatorAssign.htm">=</a> stringToEnumD(<b><a href="CppEnum.htm">enum</a></b>Dstring);<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>F <a href="CppOperatorAssign.htm">=</a> stringToEnumF(<b><a href="CppEnum.htm">enum</a></b>Fstring);<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>G <a href="CppOperatorAssign.htm">=</a> stringToEnumG(<b><a href="CppEnum.htm">enum</a></b>Gstring);<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>M <a href="CppOperatorAssign.htm">=</a> stringToEnumM(<b><a href="CppEnum.htm">enum</a></b>Mstring);<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>N <a href="CppOperatorAssign.htm">=</a> stringToEnumN(<b><a href="CppEnum.htm">enum</a></b>Nstring);<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>P <a href="CppOperatorAssign.htm">=</a> stringToEnumP(<b><a href="CppEnum.htm">enum</a></b>Pstring);<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>Q <a href="CppOperatorAssign.htm">=</a> stringToEnumQ(<b><a href="CppEnum.htm">enum</a></b>Qstring);<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>R <a href="CppOperatorAssign.htm">=</a> stringToEnumR(<b><a href="CppEnum.htm">enum</a></b>Rstring);<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>W <a href="CppOperatorAssign.htm">=</a> stringToEnumW(<b><a href="CppEnum.htm">enum</a></b>Wstring);<br/>
	mParameters.reproductionMode <a href="CppOperatorAssign.htm">=</a> stringToEnumReproductionMode(<b><a href="CppEnum.htm">enum</a></b>ReproductionModeString);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::<b><a href="CppEnum.htm">enum</a></b>sToStrings()<br/>
{<br/>
	<b><a href="CppEnum.htm">enum</a></b>Dstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>DtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>D);<br/>
	<b><a href="CppEnum.htm">enum</a></b>Fstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>FtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>F);<br/>
	<b><a href="CppEnum.htm">enum</a></b>Gstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>GtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>G);<br/>
	<b><a href="CppEnum.htm">enum</a></b>Mstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>MtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>M);<br/>
	<b><a href="CppEnum.htm">enum</a></b>Nstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>NtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>N);<br/>
	<b><a href="CppEnum.htm">enum</a></b>Pstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>PtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>P);<br/>
	<b><a href="CppEnum.htm">enum</a></b>Qstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppQt.htm">Qt</a>oString(mParameters.<b><a href="CppEnum.htm">enum</a></b>Q);<br/>
	<b><a href="CppEnum.htm">enum</a></b>Rstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>RtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>R);<br/>
	<b><a href="CppEnum.htm">enum</a></b>Wstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>WtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>W);<br/>
	<b><a href="CppEnum.htm">enum</a></b>ReproductionModeString <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeToString(mParameters.reproductionMode);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setD(<b><a href="CppConst.htm">const</a></b> EnumD&amp; <b><a href="CppEnum.htm">enum</a></b>D)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>D <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>D;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Dstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>DtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>D);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setF(<b><a href="CppConst.htm">const</a></b> EnumF&amp; <b><a href="CppEnum.htm">enum</a></b>F)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>F <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>F;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Fstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>FtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>F);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setG(<b><a href="CppConst.htm">const</a></b> EnumG&amp; <b><a href="CppEnum.htm">enum</a></b>G)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>G <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>G;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Gstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>GtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>G);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setM(<b><a href="CppConst.htm">const</a></b> EnumM&amp; <b><a href="CppEnum.htm">enum</a></b>M)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>M <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>M;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Mstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>MtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>M);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setN(<b><a href="CppConst.htm">const</a></b> EnumN&amp; <b><a href="CppEnum.htm">enum</a></b>N)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>N <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>N;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Nstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>NtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>N);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setP(<b><a href="CppConst.htm">const</a></b> EnumP&amp; <b><a href="CppEnum.htm">enum</a></b>P)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>P <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>P;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Pstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>PtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>P);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setQ(<b><a href="CppConst.htm">const</a></b> EnumQ&amp; <b><a href="CppEnum.htm">enum</a></b>Q)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>Q <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>Q;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Qstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b><a href="CppQt.htm">Qt</a>oString(mParameters.<b><a href="CppEnum.htm">enum</a></b>Q);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setR(<b><a href="CppConst.htm">const</a></b> EnumR&amp; <b><a href="CppEnum.htm">enum</a></b>R)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>R <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>R;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Rstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>RtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>R);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setW(<b><a href="CppConst.htm">const</a></b> EnumW&amp; <b><a href="CppEnum.htm">enum</a></b>W)<br/>
{<br/>
	mParameters.<b><a href="CppEnum.htm">enum</a></b>W <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>W;<br/>
	<b><a href="CppEnum.htm">enum</a></b>Wstring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>WtoString(mParameters.<b><a href="CppEnum.htm">enum</a></b>W);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setDparams(<b><a href="CppConst.htm">const</a></b> ParameterSetD&amp; params)<br/>
{<br/>
	mParameters.paramsD <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setFparams(<b><a href="CppConst.htm">const</a></b> ParameterSetF&amp; params)<br/>
{<br/>
	mParameters.paramsF <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setGparams(<b><a href="CppConst.htm">const</a></b> ParameterSetG&amp; params)<br/>
{<br/>
	mParameters.paramsG <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setMparams(<b><a href="CppConst.htm">const</a></b> ParameterSetM&amp; params)<br/>
{<br/>
	mParameters.paramsM <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setNparams(<b><a href="CppConst.htm">const</a></b> ParameterSetN&amp; params)<br/>
{<br/>
	mParameters.paramsN <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setPparams(<b><a href="CppConst.htm">const</a></b> ParameterSetP&amp; params)<br/>
{<br/>
	mParameters.paramsP <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setQparams(<b><a href="CppConst.htm">const</a></b> ParameterSetQ&amp; params)<br/>
{<br/>
	mParameters.paramsQ <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setRparams(<b><a href="CppConst.htm">const</a></b> ParameterSetR&amp; params)<br/>
{<br/>
	mParameters.paramsR <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setWParams(<b><a href="CppConst.htm">const</a></b> ParameterSetW&amp; params)<br/>
{<br/>
	mParameters.paramsW <a href="CppOperatorAssign.htm">=</a> params;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setOutputFileName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; outputFileName)<br/>
{<br/>
	dot("\nSetting to outputFileName: "+outputFileName);<br/>
	mParameters.outputFileName <a href="CppOperatorAssign.htm">=</a> outputFileName;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; seed)<br/>
{<br/>
	mParameters.seed <a href="CppOperatorAssign.htm">=</a> seed;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setMax<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; <a href="CppTime.htm">time</a>)<br/>
{<br/>
	mParameters.max<a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">time</a>;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setStartPopSize(<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&amp; popSize)<br/>
{<br/>
	mParameters.startingPopSize <a href="CppOperatorAssign.htm">=</a> popSize;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setStartResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; resources)<br/>
{<br/>
	mParameters.startingResources <a href="CppOperatorAssign.htm">=</a> resources;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setBodySizeAdult(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; bodySize)<br/>
{<br/>
	mParameters.bodySizeAdult <a href="CppOperatorAssign.htm">=</a> bodySize;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setConstA(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppConst.htm">const</a></b>A)<br/>
{<br/>
	mParameters.A <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst.htm">const</a></b>A;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setConstB(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppConst.htm">const</a></b>B)<br/>
{<br/>
	mParameters.B <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst.htm">const</a></b>B;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setConstC(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; <b><a href="CppConst.htm">const</a></b>C)<br/>
{<br/>
	mParameters.C <a href="CppOperatorAssign.htm">=</a> <b><a href="CppConst.htm">const</a></b>C;<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setReproductionMode(<b><a href="CppConst.htm">const</a></b> EnumReproductionMode &amp; reproductionMode)<br/>
{<br/>
	mParameters.reproductionMode <a href="CppOperatorAssign.htm">=</a> reproductionMode;<br/>
	<b><a href="CppEnum.htm">enum</a></b>ReproductionModeString <a href="CppOperatorAssign.htm">=</a> <b><a href="CppEnum.htm">enum</a></b>ReproductionModeToString(mParameters.reproductionMode);<br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::setFlag(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>&amp; value) <br/>
{ <br/>
	mFlag <a href="CppOperatorAssign.htm">=</a> value; <br/>
	writeToFile();<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::showUser() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n\tShowing Simulation File '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mFileName <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "':\n"<br/>
		<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mParameters <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::cout(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; logMessage) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "LOG: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> logMessage <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SimulationFile::dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; errorMessage) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppIfdef.htm">#ifdef</a> EXTREME_LOGGING<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "DOT: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> errorMessage <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/SoilMite.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/SoilMite.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;SoilMite.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 24 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> __SOILMITE_H<br/>
<a href="CppDefine.htm">#define</a> __SOILMITE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "random.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "Enumerations.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SoilMiteBase<br/>
{<br/>
<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	SoilMiteBase();<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~SoilMiteBase();<br/>
	<b><a href="CppBool.htm">bool</a></b> <b><a href="CppDo.htm">do</a></b>Idie() <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> intake(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;);<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> EnumErrorCode reproduce(<a href="CppStdVector.htm">std::vector</a>&lt;SoilMiteBase*&gt;&amp;) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppDouble.htm">double</a></b> getFeedRate() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mFeedRate; }<br/>
	<b><a href="CppDouble.htm">double</a></b> getBodySize() <b><a href="CppConst.htm">const</a></b> { <a href="CppAssert.htm">assert</a>(mBodySize<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0); <b><a href="CppReturn.htm">return</a></b> mBodySize; }<br/>
	<b><a href="CppDouble.htm">double</a></b> getReserves() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mReserves; }<br/>
	<b><a href="CppDouble.htm">double</a></b> getChanceToDie() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mChanceToDie; }<br/>
	<b><a href="CppDouble.htm">double</a></b> getAllocation() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mAllocation; }<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> getFractionBiomassPerOffspring() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> getFractionBiomassPerOffspringInitial() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> getNoffspringInitial() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNoffspring() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
	<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> setBodySizeAdult(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; size) { mBodySizeAdult <a href="CppOperatorAssign.htm">=</a> size; }<br/>
	<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> getPopSize() { <b><a href="CppReturn.htm">return</a></b> sPopSize; }<br/>
	<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> getBodySizeAdult() { <b><a href="CppReturn.htm">return</a></b> mBodySizeAdult; }<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> mBodySize;<br/>
	<b><a href="CppDouble.htm">double</a></b> mReserves;<br/>
	<b><a href="CppDouble.htm">double</a></b> mFeedRate;<br/>
	<b><a href="CppDouble.htm">double</a></b> mBiomassEggs;<br/>
	<b><a href="CppDouble.htm">double</a></b> mChanceToDie;<br/>
	<b><a href="CppDouble.htm">double</a></b> mAllocation;<br/>
	<b><a href="CppStatic.htm">static</a></b> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> * mp<a href="CppFunction.htm">Function</a>s;<br/>
	<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> sPopSize;<br/>
	<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> mBodySizeAdult;<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> cout(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; logMessage <a href="CppOperatorAssign.htm">=</a> ".") <b><a href="CppConst.htm">const</a></b>;<br/>
	<b><a href="CppVoid.htm">void</a></b> dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; errorMessage <a href="CppOperatorAssign.htm">=</a> ".") <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SoilMiteFraction : <b><a href="CppPublic.htm">public</a></b> SoilMiteBase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	<a href="CppComment.htm">//</a><a href="CppConstructor.htm">Constructor</a> <b><a href="CppFor.htm">for</a></b> first <a href="CppInitialize.htm">initialization</a><br/>
	SoilMiteFraction(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; initString) <br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(initString<a href="CppOperatorEqual.htm">==</a>"INIT");<br/>
		mFractionBiomassPerOffspringInitial <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
		mFractionBiomassPerOffspring <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
		mBodySize <a href="CppOperatorAssign.htm">=</a> mBodySizeAdult*uniform();<br/>
		<a href="CppAssert.htm">assert</a>(mBodySizeAdult<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mBodySize<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBodySize<a href="CppOperatorLessEqual.htm">&lt;=</a>mBodySizeAdult);<br/>
		mReserves <a href="CppOperatorAssign.htm">=</a> uniform()*10.0; <a href="CppComment.htm">//</a>Just value<br/>
		mChanceToDie <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;D(mBodySize, mReserves);<br/>
		<a href="CppAssert.htm">assert</a>(mChanceToDie<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mChanceToDie<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
<br/>
	SoilMiteFraction(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; biomassEggs) <br/>
	{<br/>
		mFractionBiomassPerOffspringInitial <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
		mFractionBiomassPerOffspring <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
		<a href="CppAssert.htm">assert</a>(biomassEggs<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		mBodySize <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		mReserves <a href="CppOperatorAssign.htm">=</a> biomassEggs;<br/>
		mChanceToDie <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;D(mBodySize, mReserves);<br/>
		<a href="CppAssert.htm">assert</a>(mChanceToDie<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mChanceToDie<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
	EnumErrorCode reproduce(<a href="CppStdVector.htm">std::vector</a>&lt;SoilMiteBase*&gt;&amp;);<br/>
	<b><a href="CppDouble.htm">double</a></b> getFractionBiomassPerOffspring() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mFractionBiomassPerOffspring; }<br/>
	<b><a href="CppDouble.htm">double</a></b> getFractionBiomassPerOffspringInitial() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mFractionBiomassPerOffspringInitial; }<br/>
	<b><a href="CppDouble.htm">double</a></b> getNoffspringInitial() <b><a href="CppConst.htm">const</a></b> <br/>
	{ <br/>
		<b><a href="CppIf.htm">if</a></b> (mFractionBiomassPerOffspringInitial<a href="CppOperatorEqual.htm">==</a>0.0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
		<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> 1.0/mFractionBiomassPerOffspringInitial;<br/>
	}<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNoffspring() <b><a href="CppConst.htm">const</a></b> <br/>
	{ <br/>
		<b><a href="CppIf.htm">if</a></b> (mFractionBiomassPerOffspring<a href="CppOperatorEqual.htm">==</a>0.0) <b><a href="CppReturn.htm">return</a></b> 0;<br/>
		<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;(1.0/mFractionBiomassPerOffspring);<br/>
	}<br/>
<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> mFractionBiomassPerOffspring;<br/>
	<b><a href="CppDouble.htm">double</a></b> mFractionBiomassPerOffspringInitial;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> SoilMiteAmount : <b><a href="CppPublic.htm">public</a></b> SoilMiteBase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	SoilMiteAmount(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; initString) <br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(initString<a href="CppOperatorEqual.htm">==</a>"INIT");<br/>
		mBodySize <a href="CppOperatorAssign.htm">=</a> mBodySizeAdult*uniform();<br/>
		<a href="CppAssert.htm">assert</a>(mBodySizeAdult<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mBodySize<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mBodySize<a href="CppOperatorLessEqual.htm">&lt;=</a>mBodySizeAdult);<br/>
		mReserves <a href="CppOperatorAssign.htm">=</a> uniform()*10.0; <a href="CppComment.htm">//</a>Just a number<br/>
		mChanceToDie <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;D(mBodySize, mReserves);<br/>
		<a href="CppAssert.htm">assert</a>(mChanceToDie<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mChanceToDie<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		mNoffspringInitial <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		mNoffspring <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	}<br/>
	SoilMiteAmount(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; biomassEggs) <br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(biomassEggs<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		mBodySize <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		mReserves <a href="CppOperatorAssign.htm">=</a> biomassEggs;<br/>
		mChanceToDie <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;D(mBodySize, mReserves);<br/>
		<a href="CppAssert.htm">assert</a>(mChanceToDie<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mChanceToDie<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		mNoffspringInitial <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		mNoffspring <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	}<br/>
	<br/>
	<a href="CppComment.htm">//</a>The only important one<br/>
	EnumErrorCode reproduce(<a href="CppStdVector.htm">std::vector</a>&lt;SoilMiteBase*&gt;&amp;);<br/>
	<br/>
	<b><a href="CppDouble.htm">double</a></b> getFractionBiomassPerOffspring() <b><a href="CppConst.htm">const</a></b> <br/>
	{ <br/>
		<b><a href="CppIf.htm">if</a></b> (mNoffspringInitial<a href="CppOperatorEqual.htm">==</a>0.0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
		<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> 1.0/mNoffspringInitial; <br/>
	}<br/>
	<b><a href="CppDouble.htm">double</a></b> getFractionBiomassPerOffspringInitial() <b><a href="CppConst.htm">const</a></b> <br/>
	{ <br/>
		<b><a href="CppIf.htm">if</a></b> (mNoffspring<a href="CppOperatorEqual.htm">==</a>0) <b><a href="CppReturn.htm">return</a></b> 0.0;<br/>
		<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> 1.0/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(mNoffspring);<br/>
	}<br/>
	<b><a href="CppDouble.htm">double</a></b> getNoffspringInitial() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mNoffspringInitial; }<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> getNoffspring() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mNoffspring; }<br/>
<br/>
	<b><a href="CppPrivate.htm">private</a></b>:<br/>
	<b><a href="CppDouble.htm">double</a></b> mNoffspringInitial;<br/>
	<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> mNoffspring;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __SOILMITE_DEFAULT_H<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/SoilMite.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/SoilMite.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;SoilMiteBase<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 24 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "SoilMite.h"<br/>
<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> EXTREME_LOGGING<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SoilMiteBase::sPopSize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<b><a href="CppDouble.htm">double</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SoilMiteBase::mBodySizeAdult <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1.0;<br/>
<a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a> * SoilMiteBase::mp<a href="CppFunction.htm">Function</a>s&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppFunction.htm">Function</a>s<a href="CppDesignPatternSingleton.htm">Singleton</a>::<a href="CppInstance.htm">instance</a>();<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
SoilMiteBase::SoilMiteBase()<br/>
{<br/>
	mBodySize <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mFeedRate <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mAllocation <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	mBiomassEggs <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
	sPopSize<a href="CppOperatorIncrement.htm">++</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
SoilMiteBase::~SoilMiteBase()<br/>
{<br/>
	sPopSize<a href="CppOperatorDecrement.htm">--</a>;<br/>
	<b><a href="CppIf.htm">if</a></b> (sPopSize&lt;0) <a href="CppAssert.htm">assert</a>(!"Population size BELOW zero!!!");<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppBool.htm">bool</a></b> SoilMiteBase::<b><a href="CppDo.htm">do</a></b>Idie() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mp<a href="CppFunction.htm">Function</a>s<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	<a href="CppAssert.htm">assert</a>(mChanceToDie<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mChanceToDie<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> randomNumber <a href="CppOperatorAssign.htm">=</a> uniform();<br/>
	<a href="CppAssert.htm">assert</a>(randomNumber<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> randomNumber<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	<b><a href="CppIf.htm">if</a></b> (mChanceToDie&gt;randomNumber) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
	<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SoilMiteBase::intake(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; resources)<br/>
{<br/>
	<a href="CppAssert.htm">assert</a>(mp<a href="CppFunction.htm">Function</a>s<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	<a href="CppComment.htm">//</a>Let the mite have its meal<br/>
	mFeedRate <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;F(resources,mBodySize);<br/>
	<a href="CppAssert.htm">assert</a>(mFeedRate<a href="CppOperatorLessEqual.htm">&lt;=</a>resources);<br/>
	<a href="CppAssert.htm">assert</a>(mFeedRate<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	<a href="CppAssert.htm">assert</a>(mReserves<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	<a href="CppComment.htm">//</a>change its body size and reserves<br/>
	mAllocation <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;P(mFeedRate, mReserves);<br/>
	<a href="CppAssert.htm">assert</a>(mAllocation<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mAllocation<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> metabolism <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;M(mBodySize, mReserves);<br/>
	<a href="CppAssert.htm">assert</a>(metabolism<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	<a href="CppComment.htm">//</a>Determine the amount of biomass invested in eggs<br/>
	mBiomassEggs <a href="CppOperatorAssign.htm">=</a> (mBodySize &lt; mBodySizeAdult&nbsp;&nbsp;? 0.0 : mp<a href="CppFunction.htm">Function</a>s-&gt;Q(mReserves));<br/>
	<a href="CppAssert.htm">assert</a>(mp<a href="CppFunction.htm">Function</a>s-&gt;Q(mReserves)<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mp<a href="CppFunction.htm">Function</a>s-&gt;Q(mReserves)<a href="CppOperatorLessEqual.htm">&lt;=</a>mReserves);<br/>
	<a href="CppComment.htm">//</a>Change body<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;getAlpha();<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> beta&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;getBeta();<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> gamma <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;getGamma();<br/>
	<a href="CppAssert.htm">assert</a>(alpha&gt;0.0);<br/>
	<a href="CppAssert.htm">assert</a>(beta &gt;0.0);<br/>
	<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(gamma&gt;0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> gamma<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	<br/>
	mBodySize<a href="CppOperatorPlusAssign.htm">+=</a>alpha*mAllocation*mFeedRate;<br/>
	mReserves<a href="CppOperatorPlusAssign.htm">+=</a>(beta*(1.0-mAllocation)*mFeedRate) <a href="CppOperatorMinus.htm">-</a> metabolism <a href="CppOperatorMinus.htm">-</a> (gamma*mBiomassEggs);<br/>
	<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(mReserves<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	<b><a href="CppIf.htm">if</a></b> (mReserves&lt;0)<br/>
	{<br/>
		mChanceToDie <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
	}<br/>
	<b><a href="CppElse.htm">else</a></b><br/>
	{<br/>
		mChanceToDie <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;D(mBodySize,mReserves);<br/>
	}<br/>
	<a href="CppAssert.htm">assert</a>(mChanceToDie<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mChanceToDie<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SoilMiteBase::cout(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; logMessage) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "LOG: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> logMessage <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SoilMiteBase::dot(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; errorMessage) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
	<a href="CppIfdef.htm">#ifdef</a> EXTREME_LOGGING<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "DOT: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> errorMessage <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> VIRTUAL FUNCTIONS OF DERIVED CLASSES<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumErrorCode SoilMiteFraction::reproduce(<a href="CppStdVector.htm">std::vector</a>&lt;SoilMiteBase*&gt;&amp; offspring)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mBiomassEggs<a href="CppOperatorEqual.htm">==</a>0.0) <b><a href="CppReturn.htm">return</a></b> EcNoError;<br/>
	<br/>
<br/>
	<a href="CppAssert.htm">assert</a>(mp<a href="CppFunction.htm">Function</a>s<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
<br/>
	dot("BiomassEggs: " <a href="CppOperatorPlus.htm">+</a> ftoa(mBiomassEggs));<br/>
<br/>
	mFractionBiomassPerOffspringInitial <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;G(mFeedRate, mReserves);<br/>
	dot("Fraction Biomass Per Offspring (Initial):" <a href="CppOperatorPlus.htm">+</a> ftoa(mFractionBiomassPerOffspringInitial));<br/>
	<a href="CppAssert.htm">assert</a>(mFractionBiomassPerOffspringInitial&gt;0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mFractionBiomassPerOffspringInitial <a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> nOffspringDinitial <a href="CppOperatorAssign.htm">=</a> 1.0/mFractionBiomassPerOffspringInitial;<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(round(nOffspringDinitial));<br/>
<br/>
	dot("nOffspringDinitial: " <a href="CppOperatorPlus.htm">+</a> ftoa(nOffspringDinitial));<br/>
<br/>
	<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(round(1.4))<a href="CppOperatorEqual.htm">==</a>1); <a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(round(1.6))<a href="CppOperatorEqual.htm">==</a>2);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> nOffspringD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nOffspring);<br/>
	mFractionBiomassPerOffspring <a href="CppOperatorAssign.htm">=</a> (1.0/nOffspringD);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> biomassPerOffspring <a href="CppOperatorAssign.htm">=</a> mFractionBiomassPerOffspring*mBiomassEggs;<br/>
<br/>
	dot("nOffspring (<b><a href="CppFinal.htm">final</a></b>): " <a href="CppOperatorPlus.htm">+</a> ftoa(nOffspring));<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (nOffspring&gt;100000) <br/>
	{<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "More then 100000 offspring were created. Terminating simulation." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppComment.htm">//</a>Clean offspring vector<br/>
		<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring <a href="CppOperatorAssign.htm">=</a> offspring.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i) { <b><a href="CppDelete.htm">delete</a></b> offspring[i]; offspring[i]=<a href="CppNULL.htm">NULL</a>; }<br/>
		offspring.resize(0);<br/>
		<b><a href="CppReturn.htm">return</a></b> EcNoffspringTooBigSingleParent; <br/>
	}<br/>
<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		SoilMiteBase * pOffspring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> SoilMiteFraction(biomassPerOffspring);<br/>
		<a href="CppAssert.htm">assert</a>(pOffspring<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
		offspring.push_back(pOffspring);<br/>
	}<br/>
	<br/>
	<b><a href="CppReturn.htm">return</a></b> EcNoError;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
EnumErrorCode SoilMiteAmount::reproduce(<a href="CppStdVector.htm">std::vector</a>&lt;SoilMiteBase*&gt;&amp; offspring)<br/>
{<br/>
	<b><a href="CppIf.htm">if</a></b> (mBiomassEggs<a href="CppOperatorEqual.htm">==</a>0.0) <b><a href="CppReturn.htm">return</a></b> EcNoError;<br/>
	<a href="CppAssert.htm">assert</a>(mp<a href="CppFunction.htm">Function</a>s<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> nOffspringInitial <a href="CppOperatorAssign.htm">=</a> mp<a href="CppFunction.htm">Function</a>s-&gt;N(mFeedRate, mReserves);<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(round(nOffspringInitial));<br/>
	<b><a href="CppIf.htm">if</a></b> (nOffspring<a href="CppOperatorEqual.htm">==</a>0) <b><a href="CppReturn.htm">return</a></b> EcNoError;<br/>
<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> biomassPerOffspring <a href="CppOperatorAssign.htm">=</a> mBiomassEggs <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nOffspring);<br/>
<br/>
	<b><a href="CppIf.htm">if</a></b> (nOffspring&gt;100000) <br/>
	{ <br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "More then 100000 offspring were created. Terminating simulation." <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppComment.htm">//</a>Clean offspring vector<br/>
		<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> nOffspring <a href="CppOperatorAssign.htm">=</a> offspring.size();<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i) { <b><a href="CppDelete.htm">delete</a></b> offspring[i]; offspring[i]=<a href="CppNULL.htm">NULL</a>; }<br/>
		offspring.resize(0);<br/>
		<b><a href="CppReturn.htm">return</a></b> EcNoffspringTooBigSingleParent; <br/>
	}<br/>
<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;nOffspring; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		SoilMiteBase * pOffspring <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> SoilMiteAmount(biomassPerOffspring);<br/>
		<a href="CppAssert.htm">assert</a>(pOffspring<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
		offspring.push_back(pOffspring);<br/>
	}<br/>
	<br/>
	<b><a href="CppReturn.htm">return</a></b> EcNoError;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyD.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyD.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyD.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 31 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">///</a>StrategyD[something] embodies the <a href="CppFunction.htm">function</a> <b><a href="CppFor.htm">for</a></b> death rate.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>example of the formula being embodied by StrategyD<b><a href="CppDefault.htm">default</a></b>:<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>D(s_i,v_i) <a href="CppOperatorAssign.htm">=</a> (1-exp(-alph*s_i)*exp(-B*v_i)+C<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>D : Death rate, chance to die per <a href="CppTime.htm">time</a> unit<br/>
<a href="CppComment.htm">///</a>s_i : individual i's body size<br/>
<a href="CppComment.htm">///</a>v_i : individual i's reserves<br/>
<a href="CppComment.htm">///</a>A, B, C : constants<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The Strategy pattern can be found described in ref. 1.<br/>
<a href="CppComment.htm">///</a>Instead of <b><a href="CppUsing.htm">using</a></b> the standard 'evil' <a href="CppPointer.htm">pointer</a>, I use the <a href="CppStdAuto_ptr.htm">std::auto_ptr</a> (ref. 2)<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>1) <a href="CppDesignPattern.htm">Design Pattern</a>s. By Erich Gamma, Ri<b><a href="CppChar.htm">char</a></b>d Helm, Ralph Johnson, John Vlissides. ISBN: 0-201-63361-2<br/>
<a href="CppComment.htm">///</a>2) <a href="CppException.htm">Exception</a>al <a href="Cpp.htm">C++</a>: 47 Engineering Puzzles, Programming Problems, and Solutions. By <a href="CppHerbSutter.htm">Herb Sutter</a>. ISBN: 0-201-61562-2<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_D_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_D_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyDbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyDbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetD);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyDbase() {};<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> s <a href="CppOperatorAssign.htm">=</a> 0.0; s&lt;10.0; s<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> v <a href="CppOperatorAssign.htm">=</a> 0.0; v&lt;10.0; v<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
			{<br/>
				fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(s,v) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
			}<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetD&gt; mpParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyD<b><a href="CppDefault.htm">default</a></b> : <b><a href="CppPublic.htm">public</a></b> StrategyDbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyD<b><a href="CppDefault.htm">default</a></b>(<b><a href="CppConst.htm">const</a></b> ParameterSetD * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B <a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		mpParams-&gt;C <a href="CppOperatorAssign.htm">=</a> pParams-&gt;C;<br/>
		mpParams-&gt;D <a href="CppOperatorAssign.htm">=</a> pParams-&gt;D;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;C<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;D<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyD<b><a href="CppDefault.htm">default</a></b>() {};<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppComment.htm">//</a>OLD <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> (1.0-exp(-mpParams-&gt;A*s)) * exp(-mpParams-&gt;B*v) <a href="CppOperatorPlus.htm">+</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> A <a href="CppOperatorPlus.htm">+</a> (((1.0-A)*D*pow(s/(v+B),C))/(1.0+pow(s/(v+B),C)));<br/>
		<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> d<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<b><a href="CppReturn.htm">return</a></b> d;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begin <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"D(s,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> part1 <a href="CppOperatorAssign.htm">=</a> "A <a href="CppOperatorPlus.htm">+</a> (1.0-A).D.((s/(v+B))^C) <a href="CppOperatorDivide.htm">/</a> (1.0+(s/(v+B))^C)";<br/>
		<b><a href="CppReturn.htm">return</a></b> begin <a href="CppOperatorPlus.htm">+</a> part1;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begin <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"D(s,v) <a href="CppOperatorAssign.htm">=</a> D("+ftoa(s)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> part1 <a href="CppOperatorAssign.htm">=</a> ftoa(A)+" <a href="CppOperatorPlus.htm">+</a> (1.0-"+ftoa(A)+")."+ftoa(D)+".(("+ftoa(s)<br/>
		&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>"/("+ftoa(v)+"+"+ftoa(B)+"))^"+ftoa(C)<br/>
		&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>") <a href="CppOperatorDivide.htm">/</a> (1.0+("+ftoa(s)+"/("+ftoa(v)+"+"+ftoa(B)+"))^"+ftoa(C)+")";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> outcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(s,v));<br/>
		<b><a href="CppReturn.htm">return</a></b> begin <a href="CppOperatorPlus.htm">+</a> part1 <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> "+outcome;<br/>
	}<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> "D<b><a href="CppDefault.htm">default</a></b>.rda";<br/>
		StrategyDbase::testMe(fileName);<br/>
	}<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><b><a href="CppClass.htm">class</a></b> StrategyDsizeOnly : <b><a href="CppPublic.htm">public</a></b> StrategyDbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyDsizeOnly(<b><a href="CppConst.htm">const</a></b> ParameterSetD * pParams)<br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetD);<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyDsizeOnly() {};<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> (1.0-exp(-mpParams-&gt;A*s));<br/>
		<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> d<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<b><a href="CppReturn.htm">return</a></b> d;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begin <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"D(s,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> part1 <a href="CppOperatorAssign.htm">=</a> "(1.0-exp(-A*s))";<br/>
		<b><a href="CppReturn.htm">return</a></b> begin <a href="CppOperatorPlus.htm">+</a> part1 <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorPlus.htm">+</a> C";<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begin <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"D(s,v) <a href="CppOperatorAssign.htm">=</a> D("+ftoa(s)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> part1 <a href="CppOperatorAssign.htm">=</a> "(1.0-exp(-" 	+ftoa(mpParams-&gt;A) <a href="CppOperatorPlus.htm">+</a> "*"+ftoa(s)+"))";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> outcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(s,v));<br/>
		<b><a href="CppReturn.htm">return</a></b> begin <a href="CppOperatorPlus.htm">+</a> part1 <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;" <a href="CppOperatorAssign.htm">=</a> "+outcome;<br/>
	}<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyDconstant : <b><a href="CppPublic.htm">public</a></b> StrategyDbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyDconstant(<b><a href="CppConst.htm">const</a></b> ParameterSetD * pParams)<br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetD);<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
	~StrategyDconstant() {};<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(d<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> d<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<b><a href="CppReturn.htm">return</a></b> d;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begin <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"D(s,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> part1 <a href="CppOperatorAssign.htm">=</a> "A";<br/>
		<b><a href="CppReturn.htm">return</a></b> begin <a href="CppOperatorPlus.htm">+</a> part1;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begin <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"D(s,v) <a href="CppOperatorAssign.htm">=</a> D("+ftoa(s)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> part1 <a href="CppOperatorAssign.htm">=</a> ftoa(mpParams-&gt;A);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> outcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(s,v));<br/>
		<b><a href="CppReturn.htm">return</a></b> begin <a href="CppOperatorPlus.htm">+</a> part1 <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;" <a href="CppOperatorAssign.htm">=</a> "+outcome;<br/>
	}<br/>
};<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_D_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyF.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyF.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyF.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 31 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_F_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_F_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyFbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyFbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetF);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyFbase() {}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> 0.0; r&lt;10.0; r<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> s <a href="CppOperatorAssign.htm">=</a> 0.0; s&lt;10.0; s<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
			{<br/>
				fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> r <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(r,s) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
			}<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetF&gt; mpParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyF<b><a href="CppDefault.htm">default</a></b> : <b><a href="CppPublic.htm">public</a></b> StrategyFbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyF<b><a href="CppDefault.htm">default</a></b>(<b><a href="CppConst.htm">const</a></b> ParameterSetF * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
	~StrategyF<b><a href="CppDefault.htm">default</a></b>() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; r, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(r<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(s<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppReturn.htm">return</a></b> (mpParams-&gt;A * r);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begin <a href="CppOperatorAssign.htm">=</a> "F(r,s) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> part1 <a href="CppOperatorAssign.htm">=</a> "A*r";<br/>
		<b><a href="CppReturn.htm">return</a></b> begin <a href="CppOperatorPlus.htm">+</a> part1;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; r, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begin <a href="CppOperatorAssign.htm">=</a> "F(r,s) <a href="CppOperatorAssign.htm">=</a> F("+ftoa(r)+","+ftoa(s)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> part1 <a href="CppOperatorAssign.htm">=</a> ftoa(mpParams-&gt;A)+"*"+ftoa(r);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> outcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(r,s));<br/>
		<b><a href="CppReturn.htm">return</a></b> begin <a href="CppOperatorPlus.htm">+</a> part1 <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> "+outcome;<br/>
	}<br/>
		<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> "F<b><a href="CppDefault.htm">default</a></b>.rda";<br/>
		StrategyFbase::testMe(fileName);<br/>
	}<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyG.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyG.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyG.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 31 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_G_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_G_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyGbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyGbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetG);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyGbase() {}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> 0.0; f&lt;10.0; f<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> v <a href="CppOperatorAssign.htm">=</a> 0.0; v&lt;10.0; v<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
			{<br/>
				fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(f,v) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
			}<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetG&gt; mpParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyGplastic : <b><a href="CppPublic.htm">public</a></b> StrategyGbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyGplastic(<b><a href="CppConst.htm">const</a></b> ParameterSetG * pParams)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(pParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
	}<br/>
	~StrategyGplastic() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> 1.0-exp(-A*(f-v)*(f-v));<br/>
		<a href="CppAssert.htm">assert</a>(g<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> g<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<b><a href="CppIf.htm">if</a></b> (g&lt;0.001)<br/>
		{<br/>
			<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "WARNING: Value of G<b><a href="CppDefault.htm">default</a></b> was smaller then 0.001. Setting <b><a href="CppThis.htm">this</a></b> to the value of 0.001" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
			<b><a href="CppReturn.htm">return</a></b> 0.001;<br/>
		}<br/>
		<b><a href="CppReturn.htm">return</a></b> g;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> gStart <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"G(f,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g1 <a href="CppOperatorAssign.htm">=</a> "1.0-exp(-A*(f-v)*(f-v))";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g <a href="CppOperatorAssign.htm">=</a> gStart <a href="CppOperatorPlus.htm">+</a> g1;<br/>
		<b><a href="CppReturn.htm">return</a></b> g;<br/>
<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> gStart <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"G(f,v) <a href="CppOperatorAssign.htm">=</a> F("+ftoa(f)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g1 <a href="CppOperatorAssign.htm">=</a> "1.0-exp(-"+ftoa(A)+"*("+ftoa(f)+"-"+ftoa(v)+")*("+ftoa(f)+"-"+ftoa(v)+"))";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> gOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(f,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g <a href="CppOperatorAssign.htm">=</a> gStart <a href="CppOperatorPlus.htm">+</a> g1+" <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> gOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> g;<br/>
	}<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fileName <a href="CppOperatorAssign.htm">=</a> "Gplastic.rda";<br/>
		StrategyGbase::testMe(fileName);<br/>
	}<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyGconstant : <b><a href="CppPublic.htm">public</a></b> StrategyGbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyGconstant(<b><a href="CppConst.htm">const</a></b> ParameterSetG * pParams)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(pParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
	}<br/>
	~StrategyGconstant() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(g<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> g<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<b><a href="CppReturn.htm">return</a></b> g;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> gStart <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"G(f,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g1 <a href="CppOperatorAssign.htm">=</a> "A";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g <a href="CppOperatorAssign.htm">=</a> gStart <a href="CppOperatorPlus.htm">+</a> g1;<br/>
		<b><a href="CppReturn.htm">return</a></b> g;<br/>
<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> gStart <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"G(f,v) <a href="CppOperatorAssign.htm">=</a> G("+ftoa(f)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g1 <a href="CppOperatorAssign.htm">=</a> ftoa(A);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> gOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(f,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> g <a href="CppOperatorAssign.htm">=</a> gStart <a href="CppOperatorPlus.htm">+</a> g1+" <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> gOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> g;<br/>
	}<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		StrategyGbase::testMe("Gconstant.rda");<br/>
	}<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_G_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyM.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyM.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyM.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 31 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_M_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_M_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyMbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyMbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetM);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyMbase() {}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> s <a href="CppOperatorAssign.htm">=</a> 0.0; s&lt;10.0; s<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> v <a href="CppOperatorAssign.htm">=</a> 0.0; v&lt;10.0; v<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
			{<br/>
				fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(s,v) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
			}<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetM&gt; mpParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyM<b><a href="CppDefault.htm">default</a></b> : <b><a href="CppPublic.htm">public</a></b> StrategyMbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyM<b><a href="CppDefault.htm">default</a></b>(<b><a href="CppConst.htm">const</a></b> ParameterSetM * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyM<b><a href="CppDefault.htm">default</a></b>() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> s * mpParams-&gt;A;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> "M(s,v) <a href="CppOperatorAssign.htm">=</a> A.s";<br/>
<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mStart <a href="CppOperatorAssign.htm">=</a> "M(s,v) <a href="CppOperatorAssign.htm">=</a> M("+ftoa(s)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m1 <a href="CppOperatorAssign.htm">=</a> ftoa(A)+"*"+ftoa(s);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(s,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m <a href="CppOperatorAssign.htm">=</a> mStart <a href="CppOperatorPlus.htm">+</a> m1 <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> mOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> m;<br/>
	}<br/>
	<br/>
		<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		StrategyMbase::testMe("M<b><a href="CppDefault.htm">default</a></b>.rda");<br/>
	}<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyMconstant : <b><a href="CppPublic.htm">public</a></b> StrategyMbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyMconstant(<b><a href="CppConst.htm">const</a></b> ParameterSetM * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyMconstant() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(s<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(v<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppReturn.htm">return</a></b> m;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mStart <a href="CppOperatorAssign.htm">=</a> "M(s,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m1 <a href="CppOperatorAssign.htm">=</a> "A";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m <a href="CppOperatorAssign.htm">=</a> mStart <a href="CppOperatorPlus.htm">+</a> m1;<br/>
		<b><a href="CppReturn.htm">return</a></b> m;<br/>
<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; s, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mStart <a href="CppOperatorAssign.htm">=</a> "M(s,v) <a href="CppOperatorAssign.htm">=</a> M("+ftoa(s)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m1 <a href="CppOperatorAssign.htm">=</a> ftoa(A);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(s,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m <a href="CppOperatorAssign.htm">=</a> mStart <a href="CppOperatorPlus.htm">+</a> m1 <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> mOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> m;<br/>
	}<br/>
	<br/>
		<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		StrategyMbase::testMe("Mconstant.rda");<br/>
	}<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_M_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyN.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyN.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyN.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 30 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_N_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_N_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyNbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyNbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetN);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyNbase() {}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> 0.0; f&lt;10.0; f<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> v <a href="CppOperatorAssign.htm">=</a> 0.0; v&lt;10.0; v<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
			{<br/>
				fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(f,v) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
			}<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetN&gt; mpParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyNplastic : <b><a href="CppPublic.htm">public</a></b> StrategyNbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyNplastic(<b><a href="CppConst.htm">const</a></b> ParameterSetN * pParams)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(pParams<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B <a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		mpParams-&gt;C <a href="CppOperatorAssign.htm">=</a> pParams-&gt;C;<br/>
		mpParams-&gt;D <a href="CppOperatorAssign.htm">=</a> pParams-&gt;D;<br/>
		mpParams-&gt;E <a href="CppOperatorAssign.htm">=</a> pParams-&gt;E;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;C<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;D<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;E<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyNplastic() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> E <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;E;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> n <a href="CppOperatorAssign.htm">=</a> A*(D*f <a href="CppOperatorPlus.htm">+</a> E*v)+(1.0-A)*(B*D+C*E);<br/>
		<a href="CppAssert.htm">assert</a>(n<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppReturn.htm">return</a></b> n;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> "N(f,v) <a href="CppOperatorAssign.htm">=</a> A*(D*f <a href="CppOperatorPlus.htm">+</a> E*v)+(1.0-A)*(B*D+C*E)";<br/>
<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> E <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;E;<br/>
		<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nStart <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"N(f,v) <a href="CppOperatorAssign.htm">=</a> N("+ftoa(f)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> n1 <a href="CppOperatorAssign.htm">=</a> ftoa(A)+"*("+ftoa(D)+"*"+ftoa(f)+" <a href="CppOperatorPlus.htm">+</a> "+ftoa(E)+"*"+ftoa(v)+")+(1.0-"+ftoa(A)+")*("+ftoa(B)+"*"+ftoa(D)+"+"+ftoa(C)+"*"+ftoa(E)+")";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(f,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> n <a href="CppOperatorAssign.htm">=</a> nStart <a href="CppOperatorPlus.htm">+</a> n1+" <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> nOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> n;<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyNbase::testMe("Nplastic.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyNconstant : <b><a href="CppPublic.htm">public</a></b> StrategyNbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyNconstant(<b><a href="CppConst.htm">const</a></b> ParameterSetN * pParams)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(pParams<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(pParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyNconstant() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> mpParams-&gt;A;<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> "N(f,v) <a href="CppOperatorAssign.htm">=</a> A";<br/>
<br/>
	}<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nStart <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;"N(f,v) <a href="CppOperatorAssign.htm">=</a> N("+ftoa(f)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> n1 <a href="CppOperatorAssign.htm">=</a> ftoa(A);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> nOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(f,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> n <a href="CppOperatorAssign.htm">=</a> nStart <a href="CppOperatorPlus.htm">+</a> n1+" <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> nOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> n;<br/>
	}<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyNbase::testMe("Nconstant.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_N_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyP.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyP.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyP.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 31 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_P_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_P_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyPbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyPbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetP);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyPbase() {}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> 0.0; f&lt;10.0; f<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> v <a href="CppOperatorAssign.htm">=</a> 0.0; v&lt;10.0; v<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
			{<br/>
				fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(f,v) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
			}<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetP&gt; mpParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a> Removed at 01-08-2005<br/>
<b><a href="CppClass.htm">class</a></b> StrategyPplasticA : <b><a href="CppPublic.htm">public</a></b> StrategyPbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyPplasticA(<b><a href="CppConst.htm">const</a></b> ParameterSetP * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyPplasticA() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(f<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(v<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p1 <a href="CppOperatorAssign.htm">=</a> 1.0-exp(-mpParams-&gt;A * f);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p2 <a href="CppOperatorAssign.htm">=</a> 1.0-exp(-mpParams-&gt;B&nbsp;&nbsp;* v);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p1 * p2;<br/>
		<a href="CppAssert.htm">assert</a>(p1<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p1<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<a href="CppAssert.htm">assert</a>(p2<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p2<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p <a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pBegin <a href="CppOperatorAssign.htm">=</a> "P(f,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p1 <a href="CppOperatorAssign.htm">=</a> "[1.0-exp(-A*f)]";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p2 <a href="CppOperatorAssign.htm">=</a> "[1.0-exp(-B *v)]";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p <a href="CppOperatorAssign.htm">=</a> pBegin <a href="CppOperatorPlus.htm">+</a> p1 <a href="CppOperatorPlus.htm">+</a> " * " <a href="CppOperatorPlus.htm">+</a> p2;<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pBegin <a href="CppOperatorAssign.htm">=</a> "P(f,v) <a href="CppOperatorAssign.htm">=</a> P("+ftoa(f)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p1 <a href="CppOperatorAssign.htm">=</a> "[1.0-exp(-"+ftoa(A)+"*"+ftoa(f)+")]";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p2 <a href="CppOperatorAssign.htm">=</a> "[1.0-exp(-"+ftoa(B )+"*"+ftoa(v)+")]";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(f,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p <a href="CppOperatorAssign.htm">=</a> pBegin <a href="CppOperatorPlus.htm">+</a> p1 <a href="CppOperatorPlus.htm">+</a> " * " <a href="CppOperatorPlus.htm">+</a> p2 <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> pOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
};<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyPplastic : <b><a href="CppPublic.htm">public</a></b> StrategyPbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyPplastic(<b><a href="CppConst.htm">const</a></b> ParameterSetP * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B <a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		mpParams-&gt;C <a href="CppOperatorAssign.htm">=</a> pParams-&gt;C;<br/>
		mpParams-&gt;D <a href="CppOperatorAssign.htm">=</a> pParams-&gt;D;<br/>
		mpParams-&gt;E <a href="CppOperatorAssign.htm">=</a> pParams-&gt;E;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(!(mpParams-&gt;C<a href="CppOperatorEqual.htm">==</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorNotEqual.htm">!=</a>0.0));<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;D<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(!(mpParams-&gt;E<a href="CppOperatorEqual.htm">==</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorNotEqual.htm">!=</a>0.0));<br/>
	}<br/>
	~StrategyPplastic() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(f<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(v<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> E <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;E;<br/>
		<a href="CppIfndef.htm">#ifndef</a> __HACK_RIOGWIGUIGUOYG<br/>
		<b><a href="CppIf.htm">if</a></b> (!((pow(f/C,B)/(1.0+pow(f/C,B))) * (pow(v/E,D)/(1.0+pow(v/E,D)))<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0))<br/>
		{<br/>
		&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "f: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "v: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "A: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> A <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "B: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> B <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "C: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> C <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "D: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> D <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "E: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> E <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a><br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ((pow(f/C,B)/(1.0+pow(f/C,B))) * (pow(v/E,D)/(1.0+pow(v/E,D)))) <br/>
			<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		}<br/>
		<a href="CppEndif.htm">#endif</a><br/>
		<a href="CppComment.htm">//</a><a href="CppAssert.htm">Assert</a>((pow(f/C,B)/(1.0+pow(f/C,B))) * (pow(v/E,D)/(1.0+pow(v/E,D)))<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p <a href="CppOperatorAssign.htm">=</a> ( A<a href="CppOperatorEqual.htm">==</a>0.0 ? 0.5 : A*(sqrt((pow(f/C,B)/(1.0+pow(f/C,B))) * (pow(v/E,D)/(1.0+pow(v/E,D)))))+((1.0-A)*0.5));<br/>
		<a href="CppIfndef.htm">#ifndef</a> __HACK_UYGEFOUYG<br/>
		<b><a href="CppIf.htm">if</a></b> (!(p <a href="CppOperatorGreaterEqual.htm">&gt;=</a>-0.0001 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p <a href="CppOperatorLessEqual.htm">&lt;=</a>1.0001)) <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "ERROR: p: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppEndif.htm">#endif</a><br/>
		<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorGreaterEqual.htm">&gt;=</a>-0.0001 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p <a href="CppOperatorLessEqual.htm">&lt;=</a>1.0001);<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pBegin <a href="CppOperatorAssign.htm">=</a> "P(f,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p1 <a href="CppOperatorAssign.htm">=</a> "A*(sqrt((pow(f/C,B)/(1.0+pow(f/C,B))) * (pow(v/E,D)/(1.0+pow(v/E,D)))))+((1.0-A)*0.5)";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p <a href="CppOperatorAssign.htm">=</a> pBegin <a href="CppOperatorPlus.htm">+</a> p1;<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pBegin <a href="CppOperatorAssign.htm">=</a> "P(f,v) <a href="CppOperatorAssign.htm">=</a> P("+ftoa(f)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p1 <a href="CppOperatorAssign.htm">=</a> "something";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(f,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p <a href="CppOperatorAssign.htm">=</a> pBegin <a href="CppOperatorPlus.htm">+</a> p1 <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> pOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyPbase::testMe("Pplastic.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyPconstant : <b><a href="CppPublic.htm">public</a></b> StrategyPbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyPconstant(<b><a href="CppConst.htm">const</a></b> ParameterSetP * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyPconstant() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(f<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(v<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> p <a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pBegin <a href="CppOperatorAssign.htm">=</a> "P(f,v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p1 <a href="CppOperatorAssign.htm">=</a> "A";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p <a href="CppOperatorAssign.htm">=</a> pBegin <a href="CppOperatorPlus.htm">+</a> p1;<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; f, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pBegin <a href="CppOperatorAssign.htm">=</a> "P(f,v) <a href="CppOperatorAssign.htm">=</a> P("+ftoa(f)+","+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p1 <a href="CppOperatorAssign.htm">=</a> ftoa(A);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(f,v));<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> p <a href="CppOperatorAssign.htm">=</a> pBegin <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;" <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> pOutcome;<br/>
		<b><a href="CppReturn.htm">return</a></b> p;<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyPbase::testMe("Pconstant.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_P_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyQ.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyQ.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyQ.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 31 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_Q_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_Q_H<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyQbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyQbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetQ);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyQbase() {}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> v <a href="CppOperatorAssign.htm">=</a> 0.0; v&lt;10.0; v<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;v <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(v) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetQ&gt; mpParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyQ<b><a href="CppDefault.htm">default</a></b> : <b><a href="CppPublic.htm">public</a></b> StrategyQbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyQ<b><a href="CppDefault.htm">default</a></b>(<b><a href="CppConst.htm">const</a></b> ParameterSetQ * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B <a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		mpParams-&gt;C <a href="CppOperatorAssign.htm">=</a> pParams-&gt;C;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;C<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyQ<b><a href="CppDefault.htm">default</a></b>() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<a href="CppComment.htm">//</a>OLD: <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> q <a href="CppOperatorAssign.htm">=</a> (exp(-A*v))*v;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> q <a href="CppOperatorAssign.htm">=</a> (A*v)/(1.0+(pow(v,B)*(C/A)));<br/>
		<a href="CppAssert.htm">assert</a>(q<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> q<a href="CppOperatorLessEqual.htm">&lt;=</a>v);<br/>
		<b><a href="CppReturn.htm">return</a></b> (q);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qBegin <a href="CppOperatorAssign.htm">=</a> "Q(v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> q <a href="CppOperatorAssign.htm">=</a> "(A.v)/(1.0+(pow(v,B).(C/A)))";<br/>
		<b><a href="CppReturn.htm">return</a></b> (qBegin <a href="CppOperatorPlus.htm">+</a> q);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qBegin <a href="CppOperatorAssign.htm">=</a> "Q(v) <a href="CppOperatorAssign.htm">=</a> Q("+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> q <a href="CppOperatorAssign.htm">=</a> "(" <a href="CppOperatorPlus.htm">+</a> ftoa(A)+"." <a href="CppOperatorPlus.htm">+</a> ftoa(v)+")/(1.0+(pow(" <a href="CppOperatorPlus.htm">+</a> ftoa(v)+"," <a href="CppOperatorPlus.htm">+</a> ftoa(B)+").(" <a href="CppOperatorPlus.htm">+</a> ftoa(C)+"/" <a href="CppOperatorPlus.htm">+</a> ftoa(A)+")))";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(v));<br/>
		<b><a href="CppReturn.htm">return</a></b> (qBegin <a href="CppOperatorPlus.htm">+</a> q <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> qOutcome);<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyQbase::testMe("Q<b><a href="CppDefault.htm">default</a></b>.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyQconstant : <b><a href="CppPublic.htm">public</a></b> StrategyQbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyQconstant(<b><a href="CppConst.htm">const</a></b> ParameterSetQ * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
	~StrategyQconstant() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> (mpParams-&gt;A*v);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qBegin <a href="CppOperatorAssign.htm">=</a> "Q(v) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> q <a href="CppOperatorAssign.htm">=</a> "A.v";<br/>
		<b><a href="CppReturn.htm">return</a></b> (qBegin <a href="CppOperatorPlus.htm">+</a> q);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; v) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qBegin <a href="CppOperatorAssign.htm">=</a> "Q(v) <a href="CppOperatorAssign.htm">=</a> Q("+ftoa(v)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> q <a href="CppOperatorAssign.htm">=</a> ftoa(A)+"*"+ftoa(v);<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> qOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(v));<br/>
		<b><a href="CppReturn.htm">return</a></b> (qBegin <a href="CppOperatorPlus.htm">+</a> q <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> qOutcome);<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyQbase::testMe("Qconstant.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_P_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyR.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyR.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyR.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Tue May 31 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_R_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_R_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyRbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyRbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetR);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyRbase() {}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> 0.0; x&lt;10.0; x<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> t <a href="CppOperatorAssign.htm">=</a> 0.0; t&lt;10.0; t<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
			{<br/>
				fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(x,t) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
			}<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetR&gt; mpParams;<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyRconstant : <b><a href="CppPublic.htm">public</a></b> StrategyRbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyRconstant(<b><a href="CppConst.htm">const</a></b> ParameterSetR * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;B <a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
	~StrategyRconstant() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; t) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(x&gt;-0.001);<br/>
		<a href="CppAssert.htm">assert</a>(t<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> inflow <a href="CppOperatorAssign.htm">=</a> A <a href="CppOperatorMinus.htm">-</a> (B*x);<br/>
		<b><a href="CppReturn.htm">return</a></b> (inflow);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rBegin <a href="CppOperatorAssign.htm">=</a> "R(x,t) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> "A <a href="CppOperatorMinus.htm">-</a> (B*x)";<br/>
		<b><a href="CppReturn.htm">return</a></b> (rBegin <a href="CppOperatorPlus.htm">+</a> r);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; t) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rBegin <a href="CppOperatorAssign.htm">=</a> "R(x,t) <a href="CppOperatorAssign.htm">=</a> R("+ftoa(x)+","+ftoa(t)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> ftoa(A)+"-("+ftoa(B)+"*"+ftoa(x)+")";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(x,t));<br/>
		<b><a href="CppReturn.htm">return</a></b> (rBegin <a href="CppOperatorPlus.htm">+</a> r <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> rOutcome);<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyRbase::testMe("Rconstant.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyRlogistic : <b><a href="CppPublic.htm">public</a></b> StrategyRbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyRlogistic(<b><a href="CppConst.htm">const</a></b> ParameterSetR * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyRlogistic() {}<br/>
	<a href="CppComment.htm">//</a>Inflow can be negative<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; t) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppDouble.htm">double</a></b> xCopy <a href="CppOperatorAssign.htm">=</a> x;<br/>
		<b><a href="CppIf.htm">if</a></b> (x&gt;-0.001 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x&lt;0.0) xCopy=0.0;<br/>
		<a href="CppAssert.htm">assert</a>(xCopy<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(t<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorPlus.htm">+</a> (A*x*(1.0-(B/x))); <a href="CppComment.htm">//</a>NOT THIS ONE!!! R SHOULD BE INFLOW ONLY!<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> (A*xCopy*(1.0-(x/B)));<br/>
		<b><a href="CppReturn.htm">return</a></b> (r);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rBegin <a href="CppOperatorAssign.htm">=</a> "R(x,t) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> "A*x*(1.0-(B/x))";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> "A*x*(1.0-(x/B))";<br/>
		<b><a href="CppReturn.htm">return</a></b> (rBegin <a href="CppOperatorPlus.htm">+</a> r);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; t) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rBegin <a href="CppOperatorAssign.htm">=</a> "R(x,t) <a href="CppOperatorAssign.htm">=</a> R("+ftoa(x)+","+ftoa(t)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> ftoa(A)+"*"+ftoa(x)+"*(1.0-("+ftoa(B)+"/"+ftoa(x)+"))";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> ftoa(A)+"*"+ftoa(x)+"*(1.0-("+ftoa(x)+"/"+ftoa(B)+"))";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(x,t));<br/>
		<b><a href="CppReturn.htm">return</a></b> (rBegin <a href="CppOperatorPlus.htm">+</a> r <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> rOutcome);<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyRbase::testMe("Rlogistic.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyRcosine : <b><a href="CppPublic.htm">public</a></b> StrategyRbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyRcosine(<b><a href="CppConst.htm">const</a></b> ParameterSetR * pParams)<br/>
	{<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B <a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		mpParams-&gt;C <a href="CppOperatorAssign.htm">=</a> pParams-&gt;C;<br/>
		mpParams-&gt;D <a href="CppOperatorAssign.htm">=</a> pParams-&gt;D;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;C<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
	}<br/>
	~StrategyRcosine() {}<br/>
	<a href="CppComment.htm">//</a>Inflow can be negative<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; t) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(x<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(t<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> A <a href="CppOperatorPlus.htm">+</a> (B*(cos( ((<a href="CppM_PI.htm">M_PI</a>*2.0)/C)*t <a href="CppOperatorPlus.htm">+</a> D)));<br/>
		<b><a href="CppReturn.htm">return</a></b> (r);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rBegin <a href="CppOperatorAssign.htm">=</a> "R(x,t) <a href="CppOperatorAssign.htm">=</a> ";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> "A+B*cos( (2pi/C)*t <a href="CppOperatorPlus.htm">+</a> D )";<br/>
		<b><a href="CppReturn.htm">return</a></b> (rBegin <a href="CppOperatorPlus.htm">+</a> r);<br/>
	}<br/>
<br/>
	<a href="CppStdString.htm">std::string</a> getString(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; t) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rBegin <a href="CppOperatorAssign.htm">=</a> "R(x,t) <a href="CppOperatorAssign.htm">=</a> R("+ftoa(x)+","+ftoa(t)+") <a href="CppOperatorAssign.htm">=</a> ";<br/>
<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> r <a href="CppOperatorAssign.htm">=</a> ftoa(A)+"+"+ftoa(B)+"*cos( (2pi/"+ftoa(C)+")*"+ftoa(t)+" <a href="CppOperatorPlus.htm">+</a> "+ftoa(D)+" )";<br/>
		<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> rOutcome <a href="CppOperatorAssign.htm">=</a> ftoa(eval(x,t));<br/>
		<b><a href="CppReturn.htm">return</a></b> (rBegin <a href="CppOperatorPlus.htm">+</a> r <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorPlus.htm">+</a> rOutcome);<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyRbase::testMe("Rcosine.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_P_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/StrategyW.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/StrategyW.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;StrategyW.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Wed Jun 01 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
 <br/>
<a href="CppComment.htm">///</a>Strategy W denotes the hunting success.<br/>
<a href="CppComment.htm">///</a>Hunting success is dependent on size.<br/>
<a href="CppComment.htm">///</a>This <b><a href="CppClass.htm">class</a></b> needs as input a population size and a total amount of resources.<br/>
<a href="CppComment.htm">///</a>The population size is extracted from a vector given by reference as input, with size equal to popSize.<br/>
<br/>
<a href="CppComment.htm">///</a>StrategyWzero <a href="CppOperatorAssign.htm">=</a> everybody gets equal share<br/>
<a href="CppComment.htm">///</a>StrategyWuniform <a href="CppOperatorAssign.htm">=</a> uniform deviation from equal share, size independent<br/>
<a href="CppComment.htm">///</a>StrategyWsizeDependent <a href="CppOperatorAssign.htm">=</a> uniform deviation from size-dependent hunting success<br/>
<br/>
<a href="CppComment.htm">///</a>01-08-2005: Changed:<br/>
<a href="CppComment.htm">///</a>eval(size) <a href="CppReturn.htm">returns</a> r_i (<a href="CppOperatorEqual.htm">==</a>w_i)<br/>
<a href="CppComment.htm">///</a>after every individual has its r_i calculated (<a href="CppOperatorEqual.htm">==</a>maximal amount of resources possible to eat),<br/>
<a href="CppComment.htm">///</a>it has to be checked <b><a href="CppIf.htm">if</a></b> SUM(r_i) is smaller or equal then the total amunt of resources, as the<br/>
<a href="CppComment.htm">///</a>derived <b><a href="CppClass.htm">class</a></b> StrategyWsizeDependent does NOT scale nicely.<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __STRATEGY_W_H<br/>
<a href="CppDefine.htm">#define</a> __STRATEGY_W_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAssert.htm">assert</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> "ParameterSets.h"<br/>
<a href="CppInclude.htm">#include</a> "random.h"<br/>
<a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyWbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyWbase() <br/>
	{<br/>
		mpParams.reset(<b><a href="CppNew.htm">new</a></b> ParameterSetW);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
	}<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> ~StrategyWbase() {}<br/>
	<a href="CppComment.htm">//</a><b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> distributeResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp;) <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppStdOfstream.htm">std::ofstream</a> fileOutput(filename.c_str());<br/>
		<a href="CppAssert.htm">assert</a>(fileOutput.is_open()<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
		<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> size <a href="CppOperatorAssign.htm">=</a> 0.0; size&lt;10.0; size<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
		{<br/>
			<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> equalShareResources <a href="CppOperatorAssign.htm">=</a> 0.0; equalShareResources&lt;10.0; equalShareResources<a href="CppOperatorPlusAssign.htm">+=</a>0.1)<br/>
			{<br/>
				fileOutput <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> size <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> equalShareResources <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> eval(size,equalShareResources) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
			}<br/>
		}<br/>
		fileOutput.close();<br/>
	}	<br/>
<br/>
	<b><a href="CppProtected.htm">protected</a></b>:<br/>
	<a href="CppStdAuto_ptr.htm">std::auto_ptr</a>&lt;ParameterSetW&gt; mpParams;<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyWzero : <b><a href="CppPublic.htm">public</a></b> StrategyWbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyWzero(<b><a href="CppConst.htm">const</a></b> ParameterSetW * pParams)<br/>
	{<br/>
		<a href="CppComment.htm">//</a>Nothing<br/>
	}<br/>
	~StrategyWzero() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; size, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; equalShareResources) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> equalShareResources;<br/>
	}<br/>
	<a href="CppComment.htm">/*</a><b><a href="CppVoid.htm">void</a></b> distributeResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; totalResources, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; vectorResources)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(totalResources<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(vectorResources.size()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> vectorResources.size();<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> resourcesShare <a href="CppOperatorAssign.htm">=</a> totalResources <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(popSize);<br/>
		<a href="CppAssert.htm">assert</a>(resourcesShare<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
		{<br/>
			vectorResources[i] <a href="CppOperatorAssign.htm">=</a> resourcesShare;<br/>
		}<br/>
<br/>
<br/>
		<a href="CppIfndef.htm">#ifndef</a> DEBUG_ZXC_GDF_635_ALPHA<br/>
		<b><a href="CppDouble.htm">double</a></b> sumResources <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
		{<br/>
			sumResources<a href="CppOperatorPlusAssign.htm">+=</a>vectorResources[i];<br/>
			<a href="CppIfdef.htm">#ifdef</a> EXTREME_LOGGING<br/>
			<a href="CppStdCout.htm">std::cout</a><br/>
				<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Resources[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <br/>
				<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> vectorResources[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
			<a href="CppEndif.htm">#endif</a><br/>
		}<br/>
		<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "100.0+(1.0/1000.0): " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 100.0+(1.0/1000.0) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>; <br/>
		<a href="CppIfdef.htm">#ifdef</a> LOGGING_RESOURCE_ACCURACY<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Resource accuracy: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 100.0*sumResources/totalResources <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "%" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppEndif.htm">#endif</a><br/>
		<b><a href="CppIf.htm">if</a></b> (sumResources&lt;0.999*totalResources <a href="CppOperatorLogicalOr.htm">||</a> sumResources&gt;1.001*totalResources)<br/>
		{<br/>
			<a href="CppAssert.htm">assert</a>(!"Kut!");<br/>
		}<br/>
		<a href="CppEndif.htm">#endif</a><br/>
<br/>
	}<a href="CppComment.htm">*/</a><br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> ("W: WZero, all individuals get equal share of food");<br/>
	}<br/>
<br/>
<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyWbase::testMe("Wzero.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> StrategyWuniform : <b><a href="CppPublic.htm">public</a></b> StrategyWbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyWuniform(<b><a href="CppConst.htm">const</a></b> ParameterSetW * pParams)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B <a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		mpParams-&gt;C <a href="CppOperatorAssign.htm">=</a> pParams-&gt;C;<br/>
		mpParams-&gt;D <a href="CppOperatorAssign.htm">=</a> pParams-&gt;D;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
	~StrategyWuniform() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; size, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; equalShareResources) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppComment.htm">//</a>01-08-2005: OLD: <b><a href="CppReturn.htm">return</a></b> equalShareResources * (1.0 <a href="CppOperatorPlus.htm">+</a> (2.0*mpParams-&gt;A * (uniform()-0.5)));<br/>
		<a href="CppComment.htm">//</a>Only called when SoilMite is not an egg <a href="CppAny.htm">any</a>more<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_i <a href="CppOperatorAssign.htm">=</a> (1.0+(A*(size-B)*(size-B))) * C * (1.0 <a href="CppOperatorPlus.htm">+</a> (2.0* D * (uniform()-0.5)));<br/>
		<b><a href="CppReturn.htm">return</a></b> r_i;<br/>
	}<br/>
<br/>
	<a href="CppComment.htm">/*</a><b><a href="CppVoid.htm">void</a></b> distributeResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; totalResources, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; vectorResources)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(totalResources<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(vectorResources.size()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> vectorResources.size();<br/>
		<b><a href="CppIf.htm">if</a></b> (popSize<a href="CppOperatorEqual.htm">==</a>1) { vectorResources[0]=totalResources; <b><a href="CppReturn.htm">return</a></b>; }<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> resourcesEqual <a href="CppOperatorAssign.htm">=</a> totalResources <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(popSize);<br/>
		<a href="CppAssert.htm">assert</a>(resourcesEqual<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> step <a href="CppOperatorAssign.htm">=</a> (2.0*A)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(popSize-1);<br/>
<br/>
<br/>
		<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0,<b><a href="CppDouble.htm">double</a></b> fraction <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i , fraction<a href="CppOperatorPlusAssign.htm">+=</a>step)<br/>
		<b><a href="CppDouble.htm">double</a></b> fraction <a href="CppOperatorAssign.htm">=</a> 1.0-A;<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
		{<br/>
			vectorResources[i] <a href="CppOperatorAssign.htm">=</a> resourcesEqual*fraction;<br/>
			fraction<a href="CppOperatorPlusAssign.htm">+=</a>step;<br/>
		}<br/>
<br/>
		random_shuffle(vectorResources.begin(), vectorResources.end());<br/>
<br/>
		<a href="CppIfndef.htm">#ifndef</a> DEBUG_ZXC_GDF_635_ALPHA<br/>
		<b><a href="CppDouble.htm">double</a></b> sumResources <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
		{<br/>
			sumResources<a href="CppOperatorPlusAssign.htm">+=</a>vectorResources[i];<br/>
			<a href="CppIfdef.htm">#ifdef</a> EXTREME_LOGGING<br/>
			<a href="CppStdCout.htm">std::cout</a><br/>
				<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Resources[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <br/>
				<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> vectorResources[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
			<a href="CppEndif.htm">#endif</a><br/>
		}<br/>
		<a href="CppIfdef.htm">#ifdef</a> LOGGING_RESOURCE_ACCURACY<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Resource accuracy: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 100.0*sumResources/totalResources <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "%" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppEndif.htm">#endif</a><br/>
		<b><a href="CppIf.htm">if</a></b> (sumResources&lt;0.999*totalResources <a href="CppOperatorLogicalOr.htm">||</a> sumResources&gt;1.001*totalResources)<br/>
		{<br/>
			<a href="CppAssert.htm">assert</a>(!"Kut!");<br/>
		}<br/>
		<a href="CppEndif.htm">#endif</a><br/>
<br/>
	}<a href="CppComment.htm">*/</a><br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> ("W: WUniform: Resources are unequally distributed, from "<br/>
			+ftoa(1.0-mpParams-&gt;A)+" to "<br/>
			+ftoa(1.0+mpParams-&gt;A)+" the equal resource share."<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>"\nr_i <a href="CppOperatorAssign.htm">=</a> (1.0+(A*(size-B)*(size-B))) * C * (1.0 <a href="CppOperatorPlus.htm">+</a> (2.0* D * (uniform()-0.5)))");<br/>
	}<br/>
	<br/>
	<b><a href="CppVoid.htm">void</a></b> testMe() <b><a href="CppConst.htm">const</a></b> { StrategyWbase::testMe("Wuniform.rda"); }<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><b><a href="CppClass.htm">class</a></b> StrategyWsizeDependent : <b><a href="CppPublic.htm">public</a></b> StrategyWbase<br/>
{<br/>
	<b><a href="CppPublic.htm">public</a></b>:<br/>
	StrategyWsizeDependent(<b><a href="CppConst.htm">const</a></b> ParameterSetW * pParams)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(mpParams.get()<a href="CppOperatorNotEqual.htm">!=</a><a href="CppNULL.htm">NULL</a>);<br/>
		mpParams-&gt;A <a href="CppOperatorAssign.htm">=</a> pParams-&gt;A;<br/>
		mpParams-&gt;B <a href="CppOperatorAssign.htm">=</a> pParams-&gt;B;<br/>
		mpParams-&gt;C <a href="CppOperatorAssign.htm">=</a> pParams-&gt;C;<br/>
		mpParams-&gt;D <a href="CppOperatorAssign.htm">=</a> pParams-&gt;D;<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;A<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;B<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;C<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
		<a href="CppAssert.htm">assert</a>(mpParams-&gt;D<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mpParams-&gt;A<a href="CppOperatorLessEqual.htm">&lt;=</a>1.0);<br/>
	}<br/>
	~StrategyWsizeDependent() {}<br/>
	<b><a href="CppDouble.htm">double</a></b> eval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; size, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; equalShareResources) <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<a href="CppComment.htm">//</a>Only called when SoilMite is not an egg <a href="CppAny.htm">any</a>more<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> B <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;B;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> C <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;C;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> D <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;D;<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_i <a href="CppOperatorAssign.htm">=</a> (1.0+(A*(size-B)*(size-B))) * C * (1.0 <a href="CppOperatorPlus.htm">+</a> (2.0* D * (uniform()-0.5)));<br/>
		<b><a href="CppReturn.htm">return</a></b> r_i;<br/>
	}<a href="CppComment.htm">*/</a><br/>
<br/>
	<a href="CppComment.htm">/*</a><b><a href="CppVoid.htm">void</a></b> distributeResources(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b>&amp; totalResources, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; vectorResources)<br/>
	{<br/>
		<a href="CppAssert.htm">assert</a>(totalResources<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<a href="CppAssert.htm">assert</a>(vectorResources.size()<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> popSize <a href="CppOperatorAssign.htm">=</a> vectorResources.size();<br/>
		<b><a href="CppIf.htm">if</a></b> (popSize<a href="CppOperatorEqual.htm">==</a>1) { vectorResources[0]=totalResources; <b><a href="CppReturn.htm">return</a></b>; }<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> resourcesEqual <a href="CppOperatorAssign.htm">=</a> totalResources <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(popSize);<br/>
		<a href="CppAssert.htm">assert</a>(resourcesEqual<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0.0);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> A <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A;<br/>
<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> step <a href="CppOperatorAssign.htm">=</a> (2.0*A)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(popSize-1);<br/>
<br/>
<br/>
		<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0,<b><a href="CppDouble.htm">double</a></b> fraction <a href="CppOperatorAssign.htm">=</a> mpParams-&gt;A; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i , fraction<a href="CppOperatorPlusAssign.htm">+=</a>step)<br/>
		<b><a href="CppDouble.htm">double</a></b> fraction <a href="CppOperatorAssign.htm">=</a> 1.0-A;<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
		{<br/>
			vectorResources[i] <a href="CppOperatorAssign.htm">=</a> resourcesEqual*fraction;<br/>
			fraction<a href="CppOperatorPlusAssign.htm">+=</a>step;<br/>
		}<br/>
<br/>
		random_shuffle(vectorResources.begin(), vectorResources.end());<br/>
<br/>
		<a href="CppIfndef.htm">#ifndef</a> DEBUG_ZXC_GDF_635_ALPHA<br/>
		<b><a href="CppDouble.htm">double</a></b> sumResources <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;popSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
		{<br/>
			sumResources<a href="CppOperatorPlusAssign.htm">+=</a>vectorResources[i];<br/>
			<a href="CppIfdef.htm">#ifdef</a> EXTREME_LOGGING<br/>
			<a href="CppStdCout.htm">std::cout</a><br/>
				<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Resources[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <br/>
				<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> vectorResources[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
			<a href="CppEndif.htm">#endif</a><br/>
		}<br/>
		<a href="CppIfdef.htm">#ifdef</a> LOGGING_RESOURCE_ACCURACY<br/>
		<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Resource accuracy: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 100.0*sumResources/totalResources <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "%" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		<a href="CppEndif.htm">#endif</a><br/>
		<b><a href="CppIf.htm">if</a></b> (sumResources&lt;0.999*totalResources <a href="CppOperatorLogicalOr.htm">||</a> sumResources&gt;1.001*totalResources)<br/>
		{<br/>
			<a href="CppAssert.htm">assert</a>(!"Kut!");<br/>
		}<br/>
		<a href="CppEndif.htm">#endif</a><br/>
<br/>
	}<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a><br/>
	<a href="CppStdString.htm">std::string</a> getString() <b><a href="CppConst.htm">const</a></b><br/>
	{<br/>
		<b><a href="CppReturn.htm">return</a></b> ("W: WsizeDependent: Resources are unequally distributed dependent on size:"<br/>
		"\nr_i <a href="CppOperatorAssign.htm">=</a> (1.0+(A*(size-B)*(size-B))) * C * (1.0 <a href="CppOperatorPlus.htm">+</a> (2.0* D * (uniform()-0.5)))"<br/>
		<a href="CppOperatorPlus.htm">+</a> "\nA: " <a href="CppOperatorPlus.htm">+</a> ftoa(mpParams-&gt;A) <br/>
		<a href="CppOperatorPlus.htm">+</a> "\nB: " <a href="CppOperatorPlus.htm">+</a> ftoa(mpParams-&gt;B) <br/>
		<a href="CppOperatorPlus.htm">+</a> "\nC: " <a href="CppOperatorPlus.htm">+</a> ftoa(mpParams-&gt;C) <br/>
		<a href="CppOperatorPlus.htm">+</a> "\nD: " <a href="CppOperatorPlus.htm">+</a> ftoa(mpParams-&gt;D)<br/>
		);&nbsp;&nbsp;<br/>
		<br/>
	}<br/>
};<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a><a href="CppIfndef.htm">#ifndef</a> __STRATEGY_SIMGA_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Test.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Test.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Test.h<br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Richel Bilderbeek on Thu Jun 09 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 Richel Bilderbeek. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> __TEST_H<br/>
<a href="CppDefine.htm">#define</a> __TEST_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGnuplot.htm">gnuplot</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "random.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> testGnuPlot3D();<br/>
<b><a href="CppVoid.htm">void</a></b> testGnuPlot<a href="CppWindows.htm">Windows</a>();<br/>
<b><a href="CppVoid.htm">void</a></b> demo<a href="CppGnuplot.htm">Gnuplot</a>();<br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/Test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/Test.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 *&nbsp;&nbsp;Test<a href="CppImplementationFile.htm">.cpp</a><br/>
 *&nbsp;&nbsp;Sim4<br/>
 *<br/>
 *&nbsp;&nbsp;Created by Robert Payne on Thu Jun 09 2005.<br/>
 *&nbsp;&nbsp;Copyright (c) 2005 __MyComp<a href="CppAny.htm">any</a>Name__. All rights reserved.<br/>
 *<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "Test.h"<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> testGnuPlot3D()<br/>
{<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n<a href="CppPoint.htm">Point</a>s <a href="CppOperatorAssign.htm">=</a> 10;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x,y,z;<br/>
	<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i&lt;n<a href="CppPoint.htm">Point</a>s; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i); <br/>
		<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> j=0; j&lt;n<a href="CppPoint.htm">Point</a>s; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
		{<br/>
			<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(j); <br/>
			<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> zD <a href="CppOperatorAssign.htm">=</a> cos(xD)+sin(yD);<br/>
			x.push_back(xD);<br/>
			y.push_back(yD);<br/>
			z.push_back(zD);<br/>
			<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> xD <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> yD <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> zD <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
		}<br/>
	}<br/>
<br/>
	<a href="CppGnuplot.htm">Gnuplot</a> myPlot;<br/>
	<a href="CppComment.htm">//</a>myPlot.cmd("set terminal x11");<br/>
	<a href="CppComment.htm">//</a>myPlot.cmd("set terminal aqua");<br/>
<br/>
	<a href="CppComment.htm">//</a>myPlot.cmd("set pm3d");<br/>
	<a href="CppComment.htm">//</a>myPlot.cmd("set palette color mode RGB");<br/>
	<a href="CppComment.htm">//</a>myPlot.set_style("lines");<br/>
	<br/>
	myPlot.plot(x,y,z,"Test");<br/>
	sleep(5);<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Testing done. Press key to quit\n";<br/>
	<a href="CppStdString.htm">std::string</a> nothing; <a href="CppStdCin.htm">std::cin</a> <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> nothing;<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> testGnuPlot<a href="CppWindows.htm">Windows</a>()<br/>
{<br/>
	<a href="CppGnuplot.htm">Gnuplot</a> myPlot;<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		setSeed(i);<br/>
		myPlot.changeWindow(i);<br/>
		<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; data1(1000);<br/>
		<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; data2(1000);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> iD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i);<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;1000; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
		{<br/>
			<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> jD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(j);<br/>
			data1[j]<a href="CppOperatorAssign.htm">=</a> cos(jD/(2.0+iD));<br/>
			data2[j]<a href="CppOperatorAssign.htm">=</a> sin(jD/(3.0+iD));<br/>
			<a href="CppComment.htm">//</a>data1[j]<a href="CppOperatorAssign.htm">=</a> uniform();<a href="CppComment.htm">//</a> <a href="CppOperatorPlus.htm">+</a> cos(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(j)/10.0);<br/>
			<a href="CppComment.htm">//</a>data2[j]<a href="CppOperatorAssign.htm">=</a> uniform();<a href="CppComment.htm">//</a> * cos(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(j)/20.0);<br/>
		}<br/>
		myPlot.plot(data1);<br/>
		myPlot.plot(data2);<br/>
	}<br/>
	<br/>
	<a href="CppComment.htm">/*</a><a href="CppGnuplot.htm">Gnuplot</a> myPlot1, myPlot2;<br/>
	<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> datasetSize <a href="CppOperatorAssign.htm">=</a> 100;<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;dataset(datasetSize);<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;datasetSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> iD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i);<br/>
		dataset[i] <a href="CppOperatorAssign.htm">=</a> cos(iD/10.0);<br/>
	}<br/>
	myPlot1.execute("set terminal aqua 1");<br/>
	myPlot1.plot(dataset);<br/>
	sleep(1);<br/>
<br/>
	<b><a href="CppFor.htm">for</a></b>(<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;datasetSize; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> iD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i);<br/>
		dataset[i]=0.01*iD*sin(iD/100.0);<br/>
	}<br/>
<br/>
	myPlot2.execute("set terminal aqua 2");<br/>
	myPlot2.plot(dataset);<br/>
	sleep(1);<a href="CppComment.htm">*/</a><br/>
	<br/>
	<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> demo<a href="CppGnuplot.htm">Gnuplot</a>()<br/>
{<br/>
	<a href="CppGnuplot.htm">Gnuplot</a> myPlot;<br/>
<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; data1(1000);<br/>
	<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; data2(1000);<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;1000; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
	{<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> jD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(j);<br/>
		data1[j]<a href="CppOperatorAssign.htm">=</a> sin(jD/100.0);<br/>
		data2[j]<a href="CppOperatorAssign.htm">=</a> sin(jD/100.0);<br/>
	}<br/>
<br/>
	<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> i=0; i&lt;10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
	{<br/>
		setSeed(i);<br/>
		myPlot.changeWindow(i);<br/>
		<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> iD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i);<br/>
		<b><a href="CppFor.htm">for</a></b> (<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b> j=0; j&lt;1000; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
		{<br/>
			<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> jD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(j);<br/>
			data1[j]<a href="CppOperatorMultiplyAssign.htm">*=</a>sin(jD/(20.0-iD));<br/>
			data2[j]<a href="CppOperatorMultiplyAssign.htm">*=</a>sin(jD/(21.0-iD));<br/>
		}<br/>
		myPlot.plot(data1);<br/>
		myPlot.plot(data2);<br/>
	}<br/>
}<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>----------------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ProjectBristol/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ProjectBristol/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "Sim4Interpreter.h"<br/>
<a href="CppInclude.htm">#include</a> "OptionsFile.h"<br/>
<a href="CppInclude.htm">#include</a> "Experiment.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Goal of <a href="CppMain.htm">main</a> is to be the <a href="CppInterface.htm">interface</a> between command-line input, OptionsFile and Experiment<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The meat of the code is in those <b><a href="CppClass.htm">classes</a></b>.<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a><br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "Helper<a href="CppFunction.htm">Function</a>s.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "Test.h"<br/>
<a href="CppComment.htm">//</a>demo<a href="CppGnuplot.htm">Gnuplot</a>();<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a> (<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> <a href="CppArgc.htm">argv</a>[]) <br/>
{<br/>
	<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "VERSION 17" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
	<a href="CppComment.htm">//</a>Read the command line options<br/>
	<b><a href="CppConst.htm">const</a></b> Sim4Interpreter interpreter(<a href="CppArgc.htm">argc</a>,<a href="CppArgc.htm">argv</a>);<br/>
	<a href="CppComment.htm">//</a>Get the OptionsFile<br/>
	<b><a href="CppConst.htm">const</a></b> OptionsFile optionsFile <a href="CppOperatorAssign.htm">=</a> interpreter.getOptionsFile();<br/>
	<a href="CppComment.htm">//</a>Create the Experiment with the OptionsFile<br/>
	<b><a href="CppConst.htm">const</a></b> Experiment experiment(optionsFile);<br/>
	<a href="CppComment.htm">//</a>Run the Experiment<br/>
	experiment.execute();<br/>
	<a href="CppComment.htm">//</a>Done...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
