<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>cast</title>
  <meta name="description" content="C++ cast"/>
  <meta name="keywords" content="C++ cast casting keyword"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCast.htm">Cast</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppCast.htm">cast</a> is used to convert one <a href="CppDataType.htm">data type</a> to another. 
Avoid <a href="CppCast.htm">casts</a> [4,7].
Don't use C-style casts [1-2,5], but use one of the four C++ casting keywords instead [1-3,5,8].</p>
<p>&nbsp;</p>
<p>There are four <a href="CppKeyword.htm">keywords</a> for the different types of <a href="CppCast.htm">casts</a>:</p>
<ol>
  <li><a href="CppStatic_cast.htm">static_cast</a>: to cast related types, for example <a href="CppInt.htm">int</a> to <a href="CppDouble.htm">double</a></li>
  <li><a href="CppDynamic_cast.htm">dynamic_cast</a>: to cast between types in an <a href="CppInheritance.htm">inheritance</a> hierarchy, for example from the <a href="CppBaseClass.htm">base class</a> ChessPiece to its <a href="CppDerivedClass.htm">derived class</a> Pawn</li>
  <li><a href="CppConst_cast.htm">const_cast</a></li>
  <li><a href="CppReinterpret_cast.htm">reinterpret_cast</a></li>
<!--  <li><a href="CppNarrow_cast.htm">narrow_cast</a></li> -->
</ol>
<p>&nbsp;</p>
<p>It is also possible to <a href="CppCast.htm">cast</a> <a href="CppSmartPointer.htm">smart pointers</a>:</p>
<ul>
  <li><a href="CppStatic_pointer_cast.htm">static_pointer_cast</a></li>
  <li><a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a></li>
  <li><a href="CppConst_pointer_cast.htm">const_pointer_cast</a></li>
  <li>shared_static_cast (deprecated [6])</li>
  <li>shared_dynamic_cast (deprecated [6])</li>
  <li>shared_polymorphic_cast (deprecated [6])</li>
  <li>shared_polymorphic_downcast (deprecated [6])</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 6.5.5: 'When explicit type conversion is necessary, prefer the more specific cast operators to the C-style cast'.</li>
  <li><!--  2 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 95: 'Don't use C-style casts'.</li>
  <li><!--  3 --><a href="CppJohnLakos.htm">John Lakos</a>. Large-Scale C++ Software Design. 1996. ISBN: 0-201-63362-0. Section D.4. Guidelines, chapter 9, page 823: 'Consider avoiding 'cast' operators, especially to fundumental integral types; instead, make the conversion explicit'</li>
  <li><!--  4 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 183: 'Every possible measure should be taken to avoid type casting'</li>
  <li><!--  5 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 185: 'C++ style casts (const_cast, reinterpret_cast, and static_cast) shall be used instead of the traditional C-style casts.'</li>
  <li><!--  6 -->Comment in shared_ptr.hpp (Boost version 1.49), line 536: 'shared_*_cast names are deprecated. Use *_pointer_cast instead.'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[12] Avoid explicit type conversions (casts)'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[13] When explicit type conversion is necessary, prefer a named cast'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
