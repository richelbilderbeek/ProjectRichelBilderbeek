<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>boost::adjacency_list</title>
  <meta name="description" content="C++ boost::adjacency_list"/>
  <meta name="keywords" content="C++ boost::adjacency_list code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppAdjacency_list.htm">boost::adjacency_list</a></h1>
<p>&nbsp;</p>
<p><a href="CppAdjacency_list.htm">boost::adjacency_list</a> is the 'Swiss army knife' graph 
<a href="CppClass.htm">class</a> of the <a href="CppGraph.htm">Boost.Graph</a> <a href="CppLibrary.htm">library</a>.</p>
<p>&nbsp;</p>
<p><a href="CppAdjacency_list.htm">boost::adjacency_list</a> is <a href="CppDefinition.htm">defined</a> in the 
<a href="CppHeaderFile.htm">header file</a> 'boost/graph/adjacency_list.hpp'.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdjacency_list.htm">boost::adjacency_list</a> template parameters</h2>
<p>&nbsp;</p>
<ol>
  <li>EdgeList
    <ul>
      <li>Purpose: slect the type of container used to store the edges</li>
      <li>Possible values:
        <ul>
         <li>boost::hash_setS: select std::hash_set</li>
         <li>boost::listS: select <a href="CppList.htm">std::list</a></li>
         <li>boost::setS: select <a href="CppSet.htm">std::set</a></li>
         <li>boost::slistS: select <a href="CppSlist.htm">std::slist</a></li>
         <li>boost::vecS: select <a href="CppVector.htm">std::vector</a></li>
        </ul>
      </li>
      <li>Default value: boost::vecS</li>
    </ul>
  </li>
  <li>VertexList
    <ul>
      <li>Purpose: slect the type of container used to store the vertices</li>
      <li>Possible values:
        <ul>
         <li>boost::hash_setS: select std::hash_set</li>
         <li>boost::listS: select <a href="CppList.htm">std::list</a></li>
         <li>boost::setS: select <a href="CppSet.htm">std::set</a></li>
         <li>boost::slistS: select <a href="CppSlist.htm">std::slist</a></li>
         <li>boost::vecS: select <a href="CppVector.htm">std::vector</a></li>
        </ul>
      </li>
      <li>Default value: boost::vecS</li>
    </ul>
  </li>
  <li>Directed
    <ul>
      <li>Purpose: directedness of graph</li>
      <li>Possible values:
        <ul>
         <li>boost::directedS: select a directed graph</li>
         <li>boost::undirectedS: select an undirected graph</li>
         <li>boost::bidirectionalS: select a bidirectional graph</li>
        </ul>
      </li>
      <li>Default value: boost::directedS</li>
    </ul>
  </li>
  <li>VertexProperties
    <ul>
      <li>Purpose: specify internal vertex property storage</li>
      <li>Possible values:
        <ul>
         <li>boost::no_property: no properties</li>
         <li>boost::property&lt;boost::vertex_name_t,std::string&gt;: vertices contain a <a href="CppString.htm">std::string</a></li>
        </ul>
      </li>
      <li>Default value: boost::no_property</li>
    </ul>
  </li>
  <li>EdgeProperties
    <ul>
      <li>Purpose: specify internal edge property storage</li>
      <li>Possible values:
        <ul>
         <li>boost::no_property: no properties</li>
         <li>boost::property&lt;boost::edge_name_t,std::string&gt;: edges contain a <a href="CppString.htm">std::string</a></li>
        </ul>
      <li>Default value: boost::no_property</li>
    </ul>
  </li>
  <li>GraphProperties
    <ul>
      <li>Purpose: specify internal graph property storage</li>
      <li>Possible values:
        <ul>
         <li>boost::no_property: no properties</li>
         <li>boost::property&lt;boost::graph_name_t,std::string&gt;: graph has a <a href="CppString.htm">std::string</a> name</li>
        </ul>
      <li>Default value: boost::no_property</li>
    </ul>
  </li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/graph/adjacency_list.hpp&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppAdjacency_list.htm">boost::adjacency_list</a><br/>
&nbsp;&nbsp;&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store all out edges as a <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::vecS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store all vertices in a <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::vecS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Relations are directed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::directedS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All vertices are person names of type <a href="CppString.htm">std::string</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt;<a href="CppBoost.htm">boost</a>::vertex_name_t,<a href="CppString.htm">std::string</a>&gt;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>All edges are relation of type <a href="CppString.htm">std::string</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt;<a href="CppBoost.htm">boost</a>::edge_name_t,<a href="CppString.htm">std::string</a>&gt;<br/>
&nbsp;&nbsp;&gt; Graph;<br/>
&nbsp;&nbsp;<br/>
&nbsp;&nbsp;Graph g;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>Jeremy G. Siek, Lie-Quan Lee, Andrew Lumsdaine. The Boost Graph Library. 2002. ISBN: 0-201-72914-8.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
