<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>constructor</title>
  <meta name="description" content="C++ constructor"/>
  <meta name="keywords" content="C++ constructor code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppConstructor.htm">constructor</a></h1>
<p>&nbsp;</p>
<p>
  The <a href="CppConstructor.htm">constructor</a> is the <a href="CppClass.htm">class</a> element 
  called when a <a href="CppClass.htm">class</a> is created. The <a href="CppClass.htm">class</a> element
  that is called when a <a href="CppClass.htm">class</a> goes out of <a
  href="CppScope.htm">scope</a> is called the <a href="CppDestructor.htm">destructor</a>.
</p>
<p>&nbsp;</p>
<p>
  'A <a href="CppConstructor.htm">constructor</a> is a 
  <a href="CppFunction.htm">function</a> which initializes an <a href="CppObject.htm">object</a>.' [18]
</p>
<p>&nbsp;</p>
<p>There are multiple types of <a href="CppConstructor.htm">constructors</a>:</p>
<ul>
  <li><a href="CppCopyConstructor.htm">copy constructor</a></li>
  <li><a href="CppDefaultConstructor.htm">default constructor</a></li>
  <li><a href="CppMoveConstructor.htm">move constructor</a></li>
</ul>
<p>&nbsp;</p>
<p>
  A <a href="CppClass.htm">class</a> can have multiple <a href="CppConstructor.htm">constructors</a>.
  <a href="CppConstructor.htm">Constructors</a> can have zero to multiple <a href="CppArgument.htm">arguments</a>. 
  <a href="CppDelegation.htm">Delegation</a> is the technique of <a href="CppConstructor.htm">constructors</a> calling each other.
  If a <a href="CppClass.htm">class</a> does not have a <a href="CppConstructor.htm">constructor</a>, it can be <a href="CppInitialize.htm">initialized</a> by <a href="CppMemberwiseInitialization.htm">memberwise initialization</a> [13].
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Design <a href="CppContructor.htm">constructors</a>, assignments, and the <a href="CppDestructor.htm">destructor</a> as a matched set of operations [10]
  </li>
  <li>
    Define a <a href="CppConstructor.htm">constructor</a> to handle initialization of objects [8]
  </li>
  <li>
    Let a <a href="CppConstructor.htm">constructor</a> establish an <a href="CppInvariant.htm">invariant</a> [6,11], and <a href="CppThrow.htm">throw</a> if it cannot [6]
  </li>
  <li>
    By default declare single-<a href="CppArgument.htm">argument</a> <a href="CppConstructor.htm">constructors</a> <a href="CppExplicit.htm">explicit</a> [9]
  </li>
  <li>
    Be sure that every resource acquired in a <a href="CppConstructor.htm">constructor</a> is released when <a href="CppThrow.htm">throwing</a> 
    an <a href="CppException.htm">exception</a> in that <a href="CppConstructor.htm">constructor</a> [7]
  </li>
  <li>
    Avoid calling <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a> in <a href="CppConstructor.htm">constructors</a> and 
    <a href="CppDestructor.htm">destructors</a> [2]
  </li>
  <li>
    Don't call <a href="CppVirtual.htm">virtual</a> <a href="CppMemberFunction.htm">member functions</a> in <a href="CppConstructor.htm">constructors</a> and <a href="CppDestructor.htm">destructors</a> [17]
  </li>
  <li>
    Prefer initialization to assignment in <a href="CppConstructor.htm">constructors</a> [1]. 
    In <a href="Cpp11.htm">C++98</a>, use the T(e) notation for contruction [1].
    In <a href="Cpp11.htm">C++11</a>, use the T{e} notation for contruction [5]
  </li>
  <li>
    If a <a href="CppConstructor.htm">constructor</a> acquires a resource, its class needs a <a href="CppDestructor.htm">destructor</a> to release the resource [12]
  </li>
  <li>
    Give a <a href="CppClass.htm">class</a> a <a href="CppDefaultConstructor.htm">default constructor</a> if and only if there is a "natural" default value [15]
  </li>
  <li>
    If a <a href="CppClass.htm">class</a> is a <a href="CppContainer.htm">container</a>, give it an initializer-list <a href="CppContructor.htm">constructor</a> [14]
  </li>
  <li>
    An <a href="CppAbstractClass.htm">abstract class</a> typically doesn't need a <a href="CppConstructor.htm">constructor</a> [16]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Item 48: 'Prefer initialization to assignment in constructors'</li>
  <li><!--  2 --><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. 2005. ISBN: 0-32-111358-6. Item 49: 'Avoid calling virtual functions in constructors and destructors'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Page 19, 1.3.2 'Advice', item 1: 'Use constructors to establish invariants'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Page 19, 1.3.2 'Advice', item 2: 'Use constructor/destructor pairs to simplify resource management'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 11.6. Advice. page 303: '[11] Use the T{e} notation for contruction'</li>
  <li><!--  6 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[11] Let a constructor establish an invariant, and throw if it cannot'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 13.7. Advice. page 387: '[13] Be sure that every resource acquired in a constructor is released when throwing an exception in that constructor'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 16.4. Advice. page 479: '[4] Define a constructor to handle initialization of objects'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 16.4. Advice. page 479: '[5] By default declare single-argument constructors explicit'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[1] Design constructors, assignments, and the destructor as a matched set of operations'</li>
  <li><!-- 11 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[2] Use a constructor to establish an invariant for a class'</li>
  <li><!-- 12 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[3] If a constructor acquires a resource, its class needs a destructor to release the resource'</li>
  <li><!-- 13 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[5] If a class does not have a constructor, it can be initialized by memberwise initialization'</li>
  <li><!-- 14 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice. page 525: '[8] If a class is a container, give it an initializer-list constructor'</li>
  <li><!-- 15 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 17.7. Advice, page 525: '[7] Give a class a default constructor if and only if there is a "natural" default value'</li>
  <li><!-- 16 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 20.7. Advice. page 611: '[9] An abstract class typically doesn't need a constructor'</li>
  <li><!-- 17 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 22.7. Advice. page 663: '[7] Don't call virtual functions during construction and destruction'</li>
  <li><!-- 18 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. 4.3.10: 'A constructor is a function which initializes an object.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
