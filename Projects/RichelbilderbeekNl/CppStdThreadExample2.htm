<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>std::thread example 2: two counting threads using std::mutex</title>
  <meta name="description" content="C++ std::thread example 2: two counting threads using std::mutex"/>
  <meta name="keywords" content="C++ C++11 std::thread example 2: two counting threads using std::mutex code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) 
  <img src="PicCpp11.png" alt="C++11"/>
  <a href="CppThreadExample2.htm">std::thread example 2: two counting threads using std::mutex</a>
</h1>
<p>&nbsp;</p>
<p>This <a href="CppThread.htm">std::thread</a> examples demonstrates how to 
use <a href="CppMutex.htm">std::mutexes</a> to share <a href="CppCout.htm">std::cout</a> nicely, as in the
previous example, <a href="CppThreadExample1.htm">std::thread example 1: two counting threads</a>, the output
to <a href="CppCout.htm">std::cout</a> was messy.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppThreadExample2.zip">Download the Qt Creator project 'CppThreadExample2' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThread.htm">thread</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DoCountDown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> id)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppStatic.htm">static</a></b> <a href="CppMutex.htm">mutex</a>, because each <a href="CppThread.htm">thread</a> its must use the same <a href="CppMutex.htm">mutex</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppMutex.htm">std::mutex</a> <a href="CppMutex.htm">mutex</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let <b><a href="CppThis.htm">this</a></b> <a href="CppThread.htm">thread</a> sleep, to give the other <a href="CppThread.htm">thread</a> a chance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppThis_thread.htm">std::this_thread</a>::sleep_for(<a href="CppChrono.htm">std::chrono</a>::milliseconds(1));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Acquire access to <a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLock_guard.htm">std::lock_guard</a>&lt;<a href="CppMutex.htm">std::mutex</a>&gt; lock(<a href="CppMutex.htm">mutex</a>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Write to <a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "#" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> id <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (10-i) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> t1(DoCountDown,1);<br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> t2(DoCountDown,2);<br/>
&nbsp;&nbsp;t1.join();<br/>
&nbsp;&nbsp;t2.join();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#2: 10<br/>
#1: 10<br/>
#2: 9<br/>
#1: 9<br/>
#2: 8<br/>
#1: 8<br/>
#2: 7<br/>
#1: 7<br/>
#2: 6<br/>
#1: 6<br/>
#2: 5<br/>
#1: 5<br/>
#2: 4<br/>
#1: 4<br/>
#2: 3<br/>
#1: 3<br/>
#2: 2<br/>
#1: 2<br/>
#2: 1<br/>
#1: 1<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>This example is checked for errors in <a href="CppHelgrindExample2.htm">helgrind example 2: two counting threads using std::mutex</a>, where
<a href="CppHelgrind.htm">helgrind</a> is shown to detect no errors.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://www2.research.att.com/~bs/C++0xFAQ.html">Bjarne Stroustrup's C++0x page</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

