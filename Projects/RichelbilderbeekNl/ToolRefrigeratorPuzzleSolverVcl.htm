<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>RefrigeratorPuzzleSolverVcl</title>
  <meta name="description" content="C++ RefrigeratorPuzzleSolverVcl"/>
  <meta name="keywords" content="C++ RefrigeratorPuzzleSolverVcl "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolRefrigeratorPuzzleSolverVcl.htm">RefrigeratorPuzzleSolverVcl</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ToolRefrigeratorPuzzleSolverVcl-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRefrigeratorPuzzleSolverVcl/ProjectSolvePuzzle.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRefrigeratorPuzzleSolverVcl/ProjectSolvePuzzle.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormSolvePuzzle<a href="CppImplementationFile.htm">.cpp</a>", FormSolvePuzzle);<br/>
USEFORM("UnitForm<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", Form<a href="CppAbout.htm">About</a>);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "The Refrigerator Puzzle Solver";<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormSolvePuzzle), &amp;FormSolvePuzzle);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRefrigeratorPuzzleSolverVcl/UnitFormAbout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRefrigeratorPuzzleSolverVcl/UnitFormAbout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Refrigerator Puzzle Solver, program to solve a refrigerator puzzle<br/>
&nbsp;&nbsp;Copyright (C) 2008&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitForm<a href="CppAbout.htm">About</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitForm<a href="CppAbout.htm">About</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;jpeg.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Grids.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ValEdit.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TForm<a href="CppAbout.htm">About</a> : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePuzzle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEditLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTopRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTitle;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelCopyright;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelDate;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelAuthor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelUrl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TValueListEditor *ValueListEditor1;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TForm<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TForm<a href="CppAbout.htm">About</a> *Form<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRefrigeratorPuzzleSolverVcl/UnitFormAbout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRefrigeratorPuzzleSolverVcl/UnitFormAbout.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Refrigerator Puzzle Solver, program to solve a refrigerator puzzle<br/>
&nbsp;&nbsp;Copyright (C) 2008&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TForm<a href="CppAbout.htm">About</a> *Form<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TForm<a href="CppAbout.htm">About</a>::TForm<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRefrigeratorPuzzleSolverVcl/UnitFormSolvePuzzle.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRefrigeratorPuzzleSolverVcl/UnitFormSolvePuzzle.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Refrigerator Puzzle Solver, program to solve a refrigerator puzzle<br/>
&nbsp;&nbsp;Copyright (C) 2008&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormSolvePuzzleH<br/>
<a href="CppDefine.htm">#define</a> UnitFormSolvePuzzleH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Grids.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitPuzzlePiece.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormSolvePuzzle : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TProgressBar *ProgressBar;<br/>
&nbsp;&nbsp;TButton *ButtonQuit;<br/>
&nbsp;&nbsp;TStringGrid *StringGrid;<br/>
&nbsp;&nbsp;TCheckBox *CheckBoxDisplay;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonSolve;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *Button<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonQuitClick(TObject *Sender);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonSolveClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Button<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mQuit;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> ShowSolution(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;&amp; v);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; SolvePuzzle(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;&amp; piecesUsed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;&amp; piecesLeft);<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormSolvePuzzle(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormSolvePuzzle *FormSolvePuzzle;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppIntPower.htm">IntPower</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> base, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent);<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppFactorial.htm">Factorial</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRefrigeratorPuzzleSolverVcl/UnitFormSolvePuzzle.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRefrigeratorPuzzleSolverVcl/UnitFormSolvePuzzle.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Refrigerator Puzzle Solver, program to solve a refrigerator puzzle<br/>
&nbsp;&nbsp;Copyright (C) 2008&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitPuzzlePiece.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormSolvePuzzle.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitForm<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormSolvePuzzle *FormSolvePuzzle;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormSolvePuzzle::TFormSolvePuzzle(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner), mQuit(<b><a href="CppFalse.htm">false</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tests<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(2,2)<a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(2,3)<a href="CppOperatorEqual.htm">==</a> 8);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(2,4)<a href="CppOperatorEqual.htm">==</a>16);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(3,2)<a href="CppOperatorEqual.htm">==</a> 9);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(3,3)<a href="CppOperatorEqual.htm">==</a>27);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(3,4)<a href="CppOperatorEqual.htm">==</a>81);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>More tests<br/>
&nbsp;&nbsp;PuzzlePiece p0(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;greenBeetleHead,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;greenBeetleTail,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;brownBeetleHead,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;brownBeetleTail);<br/>
&nbsp;&nbsp;PuzzlePiece p1 <a href="CppOperatorAssign.htm">=</a> p0;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p0 <a href="CppOperatorEqual.htm">==</a> p1);<br/>
&nbsp;&nbsp;p1.Rotate();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p0 <a href="CppOperatorNotEqual.htm">!=</a> p1);<br/>
&nbsp;&nbsp;PuzzlePiece p2 <a href="CppOperatorAssign.htm">=</a> p1;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1 <a href="CppOperatorEqual.htm">==</a> p2);<br/>
&nbsp;&nbsp;p2.Rotate();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1 <a href="CppOperatorNotEqual.htm">!=</a> p2);<br/>
&nbsp;&nbsp;PuzzlePiece p3 <a href="CppOperatorAssign.htm">=</a> p2;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2 <a href="CppOperatorEqual.htm">==</a> p3);<br/>
&nbsp;&nbsp;p3.Rotate();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p2 <a href="CppOperatorNotEqual.htm">!=</a> p3);<br/>
&nbsp;&nbsp;PuzzlePiece p4 <a href="CppOperatorAssign.htm">=</a> p3;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p3 <a href="CppOperatorEqual.htm">==</a> p4);<br/>
&nbsp;&nbsp;p4.Rotate();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p3 <a href="CppOperatorNotEqual.htm">!=</a> p4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p0 <a href="CppOperatorEqual.htm">==</a> p4);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppIntPower.htm">IntPower</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> base, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exponent <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> result <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>exponent; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result <a href="CppOperatorMultiplyAssign.htm">*=</a> base;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppFactorial.htm">Factorial</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n<a href="CppOperatorGreaterEqual.htm">&gt;=</a>0);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> result <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorLessEqual.htm">&lt;=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorMultiplyAssign.htm">*=</a>i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormSolvePuzzle::ButtonQuitClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;mQuit <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;Close();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormSolvePuzzle::ShowSolution(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 3) * 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorDivide.htm">/</a> 3) * 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid-&gt;Cells[x+1][y&nbsp;&nbsp;] <a href="CppOperatorAssign.htm">=</a> ToStr(v[i].mTop).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid-&gt;Cells[x+2][y+1] <a href="CppOperatorAssign.htm">=</a> ToStr(v[i].mRight).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid-&gt;Cells[x+1][y+2] <a href="CppOperatorAssign.htm">=</a> ToStr(v[i].mBottom).c_str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid-&gt;Cells[x&nbsp;&nbsp;][y+1] <a href="CppOperatorAssign.htm">=</a> ToStr(v[i].mLeft).c_str();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=n; i<a href="CppOperatorNotEqual.htm">!=</a>9; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorModulus.htm">%</a> 3) * 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorDivide.htm">/</a> 3) * 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid-&gt;Cells[x+1][y&nbsp;&nbsp;] <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid-&gt;Cells[x+2][y+1] <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid-&gt;Cells[x+1][y+2] <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StringGrid-&gt;Cells[x&nbsp;&nbsp;][y+1] <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormSolvePuzzle::ButtonSolveClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; piecesOriginal <a href="CppOperatorAssign.htm">=</a> GetPieces();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; pieces1d <a href="CppOperatorAssign.htm">=</a> piecesOriginal;<br/>
&nbsp;&nbsp;<a href="CppStdSort.htm">std::sort</a>(pieces1d.begin(),pieces1d.end());<br/>
<br/>
&nbsp;&nbsp;ProgressBar-&gt;Max <a href="CppOperatorAssign.htm">=</a> <a href="CppIntPower.htm">IntPower</a>(4,9);<br/>
&nbsp;&nbsp;ProgressBar-&gt;H<b><a href="CppInt.htm">int</a></b> <a href="CppOperatorAssign.htm">=</a> ProgressBar-&gt;Max;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxI <a href="CppOperatorAssign.htm">=</a> <a href="CppIntPower.htm">IntPower</a>(4,9);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 1; i<a href="CppOperatorNotEqual.htm">!=</a>maxI; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; solution <a href="CppOperatorAssign.htm">=</a> SolvePuzzle(<a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;(),pieces1d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (solution.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowSolution(solution);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage("Solved!");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppApplication.htm">Application</a>-&gt;ProcessMessages();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mQuit <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ProgressBar-&gt;Position <a href="CppOperatorAssign.htm">=</a> i;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppRotate.htm">Rotate</a> a piece or more pieces<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> 0; index <a href="CppOperatorNotEqual.htm">!=</a> 9; <a href="CppOperatorIncrement.htm">++</a>index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pieces1d[index].Rotate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pieces1d[index].mNrotations <a href="CppOperatorNotEqual.htm">!=</a> 0) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ShowMessage("Not solved...");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; TFormSolvePuzzle::SolvePuzzle(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;&amp; piecesUsed,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;&amp; piecesLeft)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CheckBoxDisplay-&gt;Checked <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ShowSolution(piecesUsed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppApplication.htm">Application</a>-&gt;ProcessMessages();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Refresh();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Sleep(100);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (piecesLeft.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) <b><a href="CppReturn.htm">return</a></b> piecesUsed;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(piecesUsed.size() <a href="CppOperatorPlus.htm">+</a> piecesLeft.size() <a href="CppOperatorEqual.htm">==</a> 9);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nUsed <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(piecesUsed.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nLeft <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(piecesLeft.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <b><a href="CppNew.htm">new</a></b>Index <a href="CppOperatorAssign.htm">=</a> nUsed;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nLeft; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> the newcomer will fit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>Index &gt; 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(piecesUsed[<b><a href="CppNew.htm">new</a></b>Index-3].mBottom,piecesLeft[i].mTop)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppNew.htm">new</a></b>Index <a href="CppOperatorModulus.htm">%</a> 3 <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(piecesUsed[<b><a href="CppNew.htm">new</a></b>Index-1].mRight,piecesLeft[i].mLeft)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Newcomer fits!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; <b><a href="CppNew.htm">new</a></b>PiecesUsed <a href="CppOperatorAssign.htm">=</a> piecesUsed;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; <b><a href="CppNew.htm">new</a></b>PiecesLeft <a href="CppOperatorAssign.htm">=</a> piecesLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>PiecesUsed.push_back(<b><a href="CppNew.htm">new</a></b>PiecesLeft[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(<b><a href="CppNew.htm">new</a></b>PiecesLeft[i],<b><a href="CppNew.htm">new</a></b>PiecesLeft.back());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>PiecesLeft.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; solution <a href="CppOperatorAssign.htm">=</a> SolvePuzzle(<b><a href="CppNew.htm">new</a></b>PiecesUsed,<b><a href="CppNew.htm">new</a></b>PiecesLeft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (solution.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppReturn.htm">return</a></b> solution;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormSolvePuzzle::Button<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TForm<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TForm<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRefrigeratorPuzzleSolverVcl/UnitPuzzlePiece.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRefrigeratorPuzzleSolverVcl/UnitPuzzlePiece.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Refrigerator Puzzle Solver, program to solve a refrigerator puzzle<br/>
&nbsp;&nbsp;Copyright (C) 2008&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitPuzzlePieceH<br/>
<a href="CppDefine.htm">#define</a> UnitPuzzlePieceH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> EnumPicture<br/>
{<br/>
&nbsp;&nbsp;greenBeetleHead,<br/>
&nbsp;&nbsp;greenBeetleTail,<br/>
&nbsp;&nbsp;brownBeetleHead,<br/>
&nbsp;&nbsp;brownBeetleTail,<br/>
&nbsp;&nbsp;wormShort,<br/>
&nbsp;&nbsp;wormLong,<br/>
&nbsp;&nbsp;hairyWormHead,<br/>
&nbsp;&nbsp;hairyWormTail<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> EnumPicture p);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> PuzzlePiece<br/>
{<br/>
&nbsp;&nbsp;PuzzlePiece(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture top,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture right,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture bottom,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture left);<br/>
&nbsp;&nbsp;EnumPicture mLeft;<br/>
&nbsp;&nbsp;EnumPicture mRight;<br/>
&nbsp;&nbsp;EnumPicture mTop;<br/>
&nbsp;&nbsp;EnumPicture mBottom;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppRotate.htm">Rotate</a>();<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mNrotations;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mValue;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2);<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2);<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoesFit(<b><a href="CppConst.htm">const</a></b> EnumPicture a, <b><a href="CppConst.htm">const</a></b> EnumPicture b);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> Y-X ordered vector<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoesFit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; &gt;&amp; v);<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoesFit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;&amp; v);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; GetPieces();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppConvert.htm">Convert</a><a href="CppToInt.htm">ToInt</a>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRefrigeratorPuzzleSolverVcl/UnitPuzzlePiece.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRefrigeratorPuzzleSolverVcl/UnitPuzzlePiece.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;The Refrigerator Puzzle Solver, program to solve a refrigerator puzzle<br/>
&nbsp;&nbsp;Copyright (C) 2008&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitPuzzlePiece.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> EnumPicture p)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (p)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> greenBeetleHead: <b><a href="CppReturn.htm">return</a></b> "GH";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> greenBeetleTail: <b><a href="CppReturn.htm">return</a></b> "GT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> brownBeetleHead: <b><a href="CppReturn.htm">return</a></b> "BH";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> brownBeetleTail: <b><a href="CppReturn.htm">return</a></b> "BT";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> wormShort:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> "WS";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> wormLong:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "WL";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> hairyWormHead:&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> "HH";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> hairyWormTail:&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> "HT";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unkown picture in <a href="CppFunction.htm">function</a> ToStr");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
PuzzlePiece::PuzzlePiece(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture top,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture right,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture bottom,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture left)<br/>
: mTop(top),<br/>
&nbsp;&nbsp;mRight(right),<br/>
&nbsp;&nbsp;mBottom(bottom),<br/>
&nbsp;&nbsp;mLeft(left),<br/>
&nbsp;&nbsp;mValue(<a href="CppConvert.htm">Convert</a><a href="CppToInt.htm">ToInt</a>(*<b><a href="CppThis.htm">this</a></b>)),<br/>
&nbsp;&nbsp;mNrotations(0)<br/>
<br/>
{<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> PuzzlePiece::<a href="CppRotate.htm">Rotate</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> EnumPicture oldTop <a href="CppOperatorAssign.htm">=</a> mTop;<br/>
&nbsp;&nbsp;mTop <a href="CppOperatorAssign.htm">=</a> mRight;<br/>
&nbsp;&nbsp;mRight <a href="CppOperatorAssign.htm">=</a> mBottom;<br/>
&nbsp;&nbsp;mBottom <a href="CppOperatorAssign.htm">=</a> mLeft;<br/>
&nbsp;&nbsp;mLeft <a href="CppOperatorAssign.htm">=</a> oldTop;<br/>
&nbsp;&nbsp;mValue <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a><a href="CppToInt.htm">ToInt</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;mNrotations <a href="CppOperatorAssign.htm">=</a> (mNrotations <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> 4; <br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoesFit(<b><a href="CppConst.htm">const</a></b> EnumPicture a, <b><a href="CppConst.htm">const</a></b> EnumPicture b)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (a)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> greenBeetleHead: <b><a href="CppReturn.htm">return</a></b> (b <a href="CppOperatorEqual.htm">==</a> greenBeetleTail);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> greenBeetleTail: <b><a href="CppReturn.htm">return</a></b> (b <a href="CppOperatorEqual.htm">==</a> greenBeetleHead);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> brownBeetleHead: <b><a href="CppReturn.htm">return</a></b> (b <a href="CppOperatorEqual.htm">==</a> brownBeetleTail);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> brownBeetleTail: <b><a href="CppReturn.htm">return</a></b> (b <a href="CppOperatorEqual.htm">==</a> brownBeetleHead);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> wormShort: <b><a href="CppReturn.htm">return</a></b> (b <a href="CppOperatorEqual.htm">==</a> wormLong);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> wormLong: <b><a href="CppReturn.htm">return</a></b> (b <a href="CppOperatorEqual.htm">==</a> wormShort);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> hairyWormHead: <b><a href="CppReturn.htm">return</a></b> (b <a href="CppOperatorEqual.htm">==</a> hairyWormTail);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> hairyWormTail: <b><a href="CppReturn.htm">return</a></b> (b <a href="CppOperatorEqual.htm">==</a> hairyWormHead);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unkown picture in <a href="CppFunction.htm">function</a> DoesFit");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> Y-X ordered vector<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoesFit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoesFit(v[0][0].mBottom,v[1][0].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[1][0].mBottom,v[2][0].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[0][1].mBottom,v[1][1].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[1][1].mBottom,v[2][1].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[0][2].mBottom,v[1][2].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[1][2].mBottom,v[2][2].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[0][0].mRight ,v[0][1].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[0][1].mRight ,v[0][2].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[1][0].mRight ,v[1][1].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[1][1].mRight ,v[1][2].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[2][0].mRight ,v[2][1].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[2][1].mRight ,v[2][2].mLeft)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> DoesFit(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 9);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoesFit(v[0].mBottom,v[3].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[1].mBottom,v[4].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[2].mBottom,v[5].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[3].mBottom,v[6].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[4].mBottom,v[7].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[5].mBottom,v[8].mTop)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[0].mRight ,v[1].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[1].mRight ,v[2].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[3].mRight ,v[4].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[4].mRight ,v[5].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[6].mRight ,v[7].mLeft)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> DoesFit(v[7].mRight ,v[8].mLeft)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; GetPieces()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;PuzzlePiece&gt; v;<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(hairyWormTail,wormLong,greenBeetleTail,hairyWormTail));<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(hairyWormHead,greenBeetleTail,wormLong,wormLong));<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(greenBeetleTail,wormLong,hairyWormHead,greenBeetleHead));<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(greenBeetleHead,brownBeetleHead,greenBeetleTail,hairyWormHead));<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(greenBeetleTail,brownBeetleTail,wormShort,brownBeetleTail));<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(brownBeetleTail,brownBeetleHead,hairyWormTail,wormLong));<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(greenBeetleHead,hairyWormTail,wormShort,brownBeetleTail));<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(brownBeetleHead,wormShort,wormShort,greenBeetleHead));<br/>
&nbsp;&nbsp;v.push_back(PuzzlePiece(wormShort,greenBeetleHead,brownBeetleHead,greenBeetleHead));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 9);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppConvert.htm">Convert</a><a href="CppToInt.htm">ToInt</a>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( 1 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(p.mTop))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ( 4 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(p.mRight))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (16 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(p.mBottom))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (64 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(p.mLeft))<br/>
&nbsp;&nbsp;);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (p1.mValue <a href="CppOperatorEqual.htm">==</a> p2.mValue);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(p1.mValue <a href="CppOperatorEqual.htm">==</a> p2.mValue);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p1, <b><a href="CppConst.htm">const</a></b> PuzzlePiece&amp; p2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p1.mValue <a href="CppOperatorNotEqual.htm">!=</a> p2.mValue);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (p1.mValue &lt; p2.mValue);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> (<a href="CppConvert.htm">Convert</a><a href="CppToInt.htm">ToInt</a>(p1) &lt; <a href="CppConvert.htm">Convert</a><a href="CppToInt.htm">ToInt</a>(p2));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
