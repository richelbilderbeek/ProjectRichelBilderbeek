<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MemcheckExample6</title>
  <meta name="description" content="C++ MemcheckExample6"/>
  <meta name="keywords" content="C++ MemcheckExample6 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMemcheckExample6.htm">MemcheckExample6</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Sun Aug 17 15:27:05 2014
 -->
<p><img src="PicWt.png" alt="Wt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p><a href="CppMemcheckExample6.htm">memcheck example 6: how to stop a Wt server</a> is a 
<a href="CppMemcheck.htm">memcheck</a> example that tests how to stop a <a href="CppWt.htm">Wt</a> server cleanly.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppMemcheckExample6.zip">Download the Qt Creator project 'CppMemcheckExample6' (zip)</a></li>
  <li><a href="CppMemcheckExample6_ctrl_c.txt">View the valgrind output of 'CppMemcheckExample6' and pressing CTRL-C (txt)</a></li>
  <li><a href="CppMemcheckExample6_exit.txt">View the valgrind output of 'CppMemcheckExample6' and calling std::exit(0) (txt)</a></li>
  <li><a href="CppMemcheckExample6_throw.txt">View the valgrind output of 'CppMemcheckExample6' and calling throw (txt)</a></li>
</ul>
<p>&nbsp;</p>
<p>This example was developed, because tools like <a href="CppValgrind.htm">valgrind</a> 
and the <a href="CppProfiler.htm">profiler</a> <a href="CppGprof.htm">gprof</a> require a program to quit without errors.</p>
<p>&nbsp;</p>
<p>This web application creates four buttons, that each use a different way to let <a href="CppMain.htm">main</a> 
<a href="CppReturn.htm">return</a>. Of these four buttons, two are disabled: these call methods that do not cause
the application to terminate (yet). When starting the web application from command line, pressing CTRL-C 
is another option to cleanly terminate it.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppMemcheckExample6/CppMemcheckExample6.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMemcheckExample6/CppMemcheckExample6.pro" border = "1"><tr><td><code>
include(../../WebApplication.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>All.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Wt.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMemcheckExample6/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMemcheckExample6/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLineEdit.htm">WLineEdit</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWText.htm">WText</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWServer.htm">WServer</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppApplication.htm">Application</a>Cpp<a href="CppValgrind.htm">Valgrind</a>Example6 : <b><a href="CppPublic.htm">public</a></b> <a href="CppWApplication.htm">Wt::WApplication</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppApplication.htm">Application</a>Cpp<a href="CppValgrind.htm">Valgrind</a>Example6(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
&nbsp;&nbsp;: <a href="CppWApplication.htm">Wt::WApplication</a>(env)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setTitle("Cpp<a href="CppValgrind.htm">Valgrind</a>Example6");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPushButton.htm">Wt::WPushButton</a> * button <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a>("Call <a href="CppStdExit.htm">std::exit</a>(0)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppApplication.htm">Application</a>Cpp<a href="CppValgrind.htm">Valgrind</a>Example6::DoExit);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;root()-&gt;addWidget(button);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPushButton.htm">Wt::WPushButton</a> * button <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a>("Call <a href="CppWServer.htm">Wt::WServer</a>::waitForShutdown and <a href="CppWServer.htm">Wt::WServer</a>::stop");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppApplication.htm">Application</a>Cpp<a href="CppValgrind.htm">Valgrind</a>Example6::DoStop1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;root()-&gt;addWidget(button);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPushButton.htm">Wt::WPushButton</a> * button <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a>("Call <a href="CppWServer.htm">Wt::WServer</a>::stop");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppApplication.htm">Application</a>Cpp<a href="CppValgrind.htm">Valgrind</a>Example6::DoStop2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;root()-&gt;addWidget(button);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWPushButton.htm">Wt::WPushButton</a> * button <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">Wt::WPushButton</a>("Throw");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>,&amp;<a href="CppApplication.htm">Application</a>Cpp<a href="CppValgrind.htm">Valgrind</a>Example6::DoThrow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;root()-&gt;addWidget(button);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoExit() { <a href="CppStdExit.htm">std::exit</a>(0); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoStop1()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWServer.htm">Wt::WServer</a>::<a href="CppInstance.htm">instance</a>()-&gt;waitForShutdown();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWServer.htm">Wt::WServer</a>::<a href="CppInstance.htm">instance</a>()-&gt;stop();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoStop2() { <a href="CppWServer.htm">Wt::WServer</a>::<a href="CppInstance.htm">instance</a>()-&gt;stop(); }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoThrow() { <b><a href="CppThrow.htm">throw</a></b>; }<br/>
};<br/>
<br/>
<br/>
<a href="CppWApplication.htm">Wt::WApplication</a> * Create<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">Wt::WEnvironment</a>&amp; env)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppApplication.htm">Application</a>Cpp<a href="CppValgrind.htm">Valgrind</a>Example6(env);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="Cpp0x.htm">C++0x</a> <a href="CppInitializerList.htm">initializer list</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> v[7] <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArgc.htm">argv</a>[0],<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorDecrement.htm">--</a>docroot", ".",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorDecrement.htm">--</a>http-port", "8080",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppOperatorDecrement.htm">--</a>http-address", "0.0.0.0"<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WRun(7, <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppChar.htm">char</a></b>**&gt;(v), &amp;Create<a href="CppApplication.htm">Application</a>);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMemcheckExample6/valgrind_memcheck.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMemcheckExample6/valgrind_memcheck.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
valgrind --leak-check=full -v --show-reachable=yes --log-file=valgrind_memcheck.txt ../CppValgrindExample6-build-desktop/./CppValgrindExample6<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
