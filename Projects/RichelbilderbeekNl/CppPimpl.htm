<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Pimpl</title>
  <meta name="description" content="C++ Pimpl"/>
  <meta name="keywords" content="C++ Pimpl pointer to implementation idiom code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPimpl.htm">Pimpl</a></h1>
<p>&nbsp;</p>
<p>
  <a href="CppPimpl.htm">Pimpl</a> is an abbreviation of '<a href="CppPointer.htm">pointer</a> to 
  <a href="CppImplementation.htm">implementation</a>'.
</p>
<p>&nbsp;</p>
<p>
  The idea of the <a href="CppPimpl.htm">Pimpl</a> idiom is to give a <a href="CppClass.htm">class</a> (for
  example 'Lizard') an <a href="CppOpaquePointer.htm">opaque (smart) pointer</a>
  to the actual <a href="CppImplementation.htm">implementation</a> (for example 'LizardImpl'). The 
  <a href="CppOpaquePointer.htm">opaque (smart) pointer</a> enables it to do a 
  <a href="CppForwardDeclaration.htm">forward declaration</a> of the <a href="CppImplementation.htm">implementation</a>
  <a href="CppClass.htm">class</a> only, without the <a href="CppCompiler.htm">compiler</a> needing to know
  the actual <a href="CppDataType.htm">type</a>. This shortens build times [1]. All the 
  <a href="CppPublic.htm">public</a> <a href="CppMemberFunction.htm">member functions</a> of the <a href="CppPimpl.htm">Pimpl</a>
  <a href="CppClass.htm">class</a> will (often) call the <a href="CppMemberFunction.htm">member functions</a> of the 
  <a href="CppImplementation.htm">implementation</a> <a href="CppClass.htm">class</a> with the same name.
</p>
<p>&nbsp;</p>
<p>The advantages of using the <a href="CppPimpl.htm">Pimpl</a> idiom are:</p>
<ul>
  <li>Shorten build times [1]</li>
  <li>Remove visibility of <a href="CppPrivate.htm">private</a> <a href="CppMemberFunction.htm">member functions</a> [1]</li>
  <li>Improved error handling and safety [1]</li>
  <li>Personally, I also use it to make a non-copyable class (for example, one with constant member variables) copyable (instead of defining operator=)</li>
</ul>
<p>&nbsp;</p>
<p>The disadvantage of using the <a href="CppPimpl.htm">Pimpl</a> idiom is the cost of
an extra level of indirection, so <a href="CppPimpl.htm">Pimpl</a> judiciously [1].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppExample.htm">Examples</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppPimplExample1.htm">Pimpl example 1: basics</a></li>
</ul>
<p>&nbsp;</p>
<p>
  Most lizards remain having the same gender for all their live. Therefore, it is a
  good idea to make a lizard's gender a const member variable. Problem is, that
  this makes a lizard class uncopyable. In this example I solve this by making a
  Lizard contain an opaque pointer to LizardImpl, where a LizardImpl does have a
  constant gender. Because I want to be able to do a <a href="CppShallowCopy.htm">shallow
  copy</a> on Lizards, I use a <a href="CppShared_ptr.htm">boost::shared_ptr</a>.
  Also note that the code is very similar to a <a href="CppDesignPatternStrategy.htm">Strategy</a>
  <a href="CppDesignPattern.htm">design pattern</a>.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>lizard.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> UnitLizard.h<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitLizardH<br/>
<a href="CppDefine.htm">#define</a> UnitLizardH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppEnum.htm">enum</a></b> Gender { male, female };<br/>
 <br/>
<b><a href="CppStruct.htm">struct</a></b> Lizard<br/>
{<br/>
&nbsp;&nbsp;Lizard(<b><a href="CppConst.htm">const</a></b> Gender gender);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Gender GetGender() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> LizardImpl;<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;LizardImpl&gt; mPimpl;<br/>
};<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>lizard.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> UnitLizard.cpp<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "UnitLizard.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Lizard::LizardImpl<br/>
{<br/>
&nbsp;&nbsp;LizardImpl(<b><a href="CppConst.htm">const</a></b> Gender gender);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Gender mGender;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Lizard::Lizard(<b><a href="CppConst.htm">const</a></b> Gender gender)<br/>
&nbsp;&nbsp;: mPimpl(<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;LizardImpl&gt;(<b><a href="CppNew.htm">new</a></b> LizardImpl(gender) ) )<br/>
{<br/>
 <br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> Gender Lizard::GetGender() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> mPimpl-&gt;mGender;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> The actual Lizard implementation<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
Lizard::LizardImpl::LizardImpl(<b><a href="CppConst.htm">const</a></b> Gender gender) : mGender(gender)<br/>
{<br/>
 <br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm"> References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 43: 'Pimpl judiciously'.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
