<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MultipleChoiceQuestion</title>
  <meta name="description" content="C++ MultipleChoiceQuestion"/>
  <meta name="keywords" content="C++ MultipleChoiceQuestion "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.694 at Fri Jan  2 09:56:26 2015
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> is a
  <a href="CppClass.htm">class</a>
  for a multiple choice <a href="CppQuestion.htm">question</a>.
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMultipleChoiceQuestion/CppMultipleChoiceQuestion.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultipleChoiceQuestion/CppMultipleChoiceQuestion.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a>/<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a>/<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMultipleChoiceQuestion/multiplechoicequestion.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultipleChoiceQuestion/multiplechoicequestion.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>, <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> a multiple choice <a href="CppQuestion.htm">question</a><br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> MULTIPLECHOICEQUESTION_H<br/>
<a href="CppDefine.htm">#define</a> MULTIPLECHOICEQUESTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQuestion.htm">question</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Class <b><a href="CppFor.htm">for</a></b> a multiple choice <a href="CppQuestion.htm">question</a><br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQuestion.htm">Question</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws nothing or <a href="CppStdOut_of_range.htm">std::out_of_range</a> or <a href="CppStdRuntime_error.htm">std::runtime_error</a><br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; wrong_answers);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a copy of the <a href="CppQuestion.htm">Question</a>, depending on the derived <b><a href="CppClass.htm">class</a></b> its type<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">Question</a> * Clone() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the only correct answer<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetAnswer() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain an example multiple choice <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> GetExample<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "-,1+1=,2,0,4"; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain valid multiple choice <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetInvalid<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the possible options to be chosen in a random order<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; GetOptions() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain valid multiple choice <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; GetValid<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the wrong answers<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; GetWrongAnswers() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_wrong_answers; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/How to display the <a href="CppQuestion.htm">question</a> as multiple lines<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; ToLines() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> to <a href="CppStdString.htm">std::string</a> line<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppVoid.htm">void</a></b> <a href="CppBoostChecked_delete.htm">boost::checked_delete</a>&lt;&gt;(<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> *);<br/>
&nbsp;&nbsp;~<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All the wrong answers<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_wrong_answers;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/All the options the user can choose from, which equals<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/all wrong answers and the correct answer, shuffled randomly<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; m_options;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the possible options to be chosen in a random order<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; CreateOptions(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; wrong_answers,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The options (correct <a href="CppOperatorPlus.htm">+</a> wrong answers) are at indices 2 to <a href="CppSeperateString.htm">SeperateString</a>(input,',').size()<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; ExtractOptions(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The wrong answers are at indices 3 to <a href="CppSeperateString.htm">SeperateString</a>(input,',').size()<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; ExtractWrongAnswers(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MULTIPLECHOICEQUESTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMultipleChoiceQuestion/multiplechoicequestion.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMultipleChoiceQuestion/multiplechoicequestion.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>, <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> a multiple choice <a href="CppQuestion.htm">question</a><br/>
Copyright (C) 2011-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/<a href="CppMultipleChoiceQuestion.htm">CppMultipleChoiceQuestion</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMultipleChoiceQuestion.htm">multiplechoicequestion</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "imagecanvas.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>)<br/>
&nbsp;&nbsp;: <a href="CppQuestion.htm">Question</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppContainer.htm">Container</a>().<a href="CppSeperateString.htm">SeperateString</a>(<a href="CppQuestion.htm">question</a>,',').at(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppContainer.htm">Container</a>().<a href="CppSeperateString.htm">SeperateString</a>(<a href="CppQuestion.htm">question</a>,',').at(1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppContainer.htm">Container</a>().<a href="CppSeperateString.htm">SeperateString</a>(<a href="CppQuestion.htm">question</a>,',').at(2) }),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_wrong_answers(ExtractWrongAnswers(<a href="CppQuestion.htm">question</a>)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_options(ExtractOptions(<a href="CppQuestion.htm">question</a>))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQuestion.htm">question</a>.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A multiple choice <a href="CppQuestion.htm">question</a> must contain text");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQuestion.htm">question</a>[0] <a href="CppOperatorEqual.htm">==</a> ',')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A multiple choice <a href="CppQuestion.htm">question</a> must not start with a comma");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQuestion.htm">question</a>[<a href="CppQuestion.htm">question</a>.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> ',')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A multiple choice <a href="CppQuestion.htm">question</a> must not end with a comma");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppQuestion.htm">question</a>.find(",,") <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A multiple choice <a href="CppQuestion.htm">question</a> cannot contain two consecutive commas");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppQuestion.htm">question</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; wrong_answers)<br/>
: <a href="CppQuestion.htm">Question</a>(filename,<a href="CppQuestion.htm">question</a>, {answer} ),<br/>
&nbsp;&nbsp;m_wrong_answers(wrong_answers),<br/>
&nbsp;&nbsp;m_options(CreateOptions(wrong_answers,answer))<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!filename.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Filename must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppFileExists.htm">FileExists</a>(filename) <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "File must exists");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!<a href="CppQuestion.htm">question</a>.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> must not be empty");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(!correct_answer.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Correct answer must not be empty");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;GetWrongAnswers().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("a <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> must have at least one incorrect option");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!GetCorrectAnswers().empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There must be a correct answer");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!GetWrongAnswers().empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Wrong answers must not be empty");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Why did I put <b><a href="CppThis.htm">this</a></b> max here? I think <b><a href="CppThis.htm">this</a></b> is something that might be constrained by a GUI only<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(wrong_answers.size() <a href="CppOperatorLessEqual.htm">&lt;=</a> 5 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There is a maximum of five wrong answers");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQuestion.htm">Question</a> * <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::Clone() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetFilename(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAnswer(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetWrongAnswers());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::GetAnswer() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!GetCorrectAnswers().empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetCorrectAnswers()[0];<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::CreateOptions(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; wrong_answers,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; answer) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> wrong_answers;<br/>
&nbsp;&nbsp;v.push_back(answer);<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::ExtractOptions(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> <a href="CppContainer.htm">Container</a>().<a href="CppSeperateString.htm">SeperateString</a>(input,',');<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin() <a href="CppOperatorPlus.htm">+</a> 2,v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w));<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(w.begin(),w.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::ExtractWrongAnswers(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> v <a href="CppOperatorAssign.htm">=</a> <a href="CppContainer.htm">Container</a>().<a href="CppSeperateString.htm">SeperateString</a>(input,',');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() &lt; 4)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A multiple choice <a href="CppQuestion.htm">question</a> must contain at least four elements:"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"[0] image,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"[1] <a href="CppQuestion.htm">question</a>,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"[2] answer,"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"[3-x] incorrect answers");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w;<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(v.begin() <a href="CppOperatorPlus.htm">+</a> 3,v.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(w));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::GetInvalid<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-,1+1=,2", <a href="CppComment.htm">//</a>No incorrect options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-,1+1=",&nbsp;&nbsp; <a href="CppComment.htm">//</a>No answer<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;"tmp.png",&nbsp;&nbsp;<a href="CppComment.htm">//</a>No <a href="CppQuestion.htm">question</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;"",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>Nothing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",tmp.png,1+1=,2,1", <a href="CppComment.htm">//</a>Start with comma<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"tmp.png,,1+1=,2,1", <a href="CppComment.htm">//</a>Two consecutive comma's<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"tmp.png,1+1=,,2,1", <a href="CppComment.htm">//</a>Two consecutive comma's<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"tmp.png,1+1=,2,,1", <a href="CppComment.htm">//</a>Two consecutive comma's<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"tmp.png,1+1=,2,1,", <a href="CppComment.htm">//</a>End with comma<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",tmp.png,1+1=,2,1,", <a href="CppComment.htm">//</a>Start and end with comma<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",,tmp.png,1+1=,2,1,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",tmp.png,,1+1=,2,1,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",tmp.png,1+1=,,2,1,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",tmp.png,1+1=,2,,1,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",tmp.png,1+1=,2,1,,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",,,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",,,,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",,,,,",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;",,,,,,"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::GetOptions() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_options;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::GetValid<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>s() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-,1+1=,2,1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"tmp.png,1+1=,2,1",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"-,1+1=,2,1,0,3,4,5,6,7,8,9,0"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.2";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-06-27: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2011-09-16: <a href="CppVersion.htm">version</a> 1.1: allow parsing from <a href="CppStdString.htm">std::string</a>"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-09-26: <a href="CppVersion.htm">version</a> 1.2: added testing"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppContainer.htm">Container</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>&gt; q {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::GetExample<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>("<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::GetExample<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>()"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "must yield a valid <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test valid multiple choice <a href="CppQuestion.htm">question</a>s <b><a href="CppFor.htm">for</a></b> validity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; valid { GetValid<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>s() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: valid)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>&gt; q { <b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(s) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q); <a href="CppComment.htm">//</a>To <a href="CppMake.htm">make</a> the <a href="CppCompiler.htm">compiler</a> happy<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Valid <a href="CppQuestion.htm">question</a>s must be accepted");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test invalid multiple choice <a href="CppQuestion.htm">question</a>s <b><a href="CppFor.htm">for</a></b> invalidity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; invalid { GetInvalid<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>s()&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: invalid)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>&gt; q { <b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(s) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Invalid <a href="CppQuestion.htm">question</a>s must be rejected");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test simple get/set<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> "-";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppQuestion.htm">question</a> <a href="CppOperatorAssign.htm">=</a> "1+1=";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> answer <a href="CppOperatorAssign.htm">=</a> "2";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; wrong_answers { "chicken", "cow" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>&gt; q { <b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(filename,<a href="CppQuestion.htm">question</a>,answer,wrong_answers) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q-&gt;GetFilename() <a href="CppOperatorEqual.htm">==</a> filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q-&gt;Get<a href="CppQuestion.htm">Question</a>() <a href="CppOperatorEqual.htm">==</a> <a href="CppQuestion.htm">question</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q-&gt;GetAnswer() <a href="CppOperatorEqual.htm">==</a> answer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q-&gt;GetWrongAnswers() <a href="CppOperatorEqual.htm">==</a> wrong_answers);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q-&gt;GetOptions().size() <a href="CppOperatorEqual.htm">==</a> wrong_answers.size() <a href="CppOperatorPlus.htm">+</a> 1); <a href="CppComment.htm">//</a>The options are the incorrect answers and the correct answer(s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q-&gt;IsCorrect(answer));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!q-&gt;IsCorrect(wrong_answers.at(0)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!q-&gt;IsCorrect(wrong_answers.at(1)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test conversion <a href="CppStdString.htm">std::string</a> to <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a> and back<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; valid { GetValid<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>s() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: valid)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>&gt; q { <b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(s) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> q-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test that ToLines always yields the same result<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; valid { GetValid<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>s() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: valid)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>&gt; q { <b><a href="CppNew.htm">new</a></b> <a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>(s) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { q-&gt;ToLines() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w { q-&gt;ToLines() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v <a href="CppOperatorEqual.htm">==</a> w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::ToLines() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppQuestion.htm">question</a>_lines;<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>_lines.push_back(<b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>());<br/>
&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>_lines.push_back("");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; w { <b><a href="CppThis.htm">this</a></b>-&gt;GetOptions() };<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i=0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: w)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '[' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "] " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQuestion.htm">question</a>_lines.push_back(t.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> screen_rows { 23 };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppQuestion.htm">question</a>_rows { <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppQuestion.htm">question</a>_lines.size()) };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows { screen_rows <a href="CppOperatorMinus.htm">-</a> <a href="CppQuestion.htm">question</a>_rows };<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; lines;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!GetFilename().empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> 78;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Image<a href="CppCanvas.htm">Canvas</a>&gt; canvas {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Image<a href="CppCanvas.htm">Canvas</a>(GetFilename(),n_cols)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (canvas-&gt;GetHeight() &gt; n_rows)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>n_cols;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lines <a href="CppOperatorAssign.htm">=</a> canvas-&gt;ToStrings();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_cols <a href="CppOperatorEqual.htm">==</a> 5) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<a href="CppQuestion.htm">question</a>_lines.begin(),<a href="CppQuestion.htm">question</a>_lines.end(),<a href="CppStdBack_inserter.htm">std::back_inserter</a>(lines));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lines;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMultipleChoiceQuestion.htm">MultipleChoiceQuestion</a>::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concatenate the correct answer<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<b><a href="CppThis.htm">this</a></b>-&gt;GetCorrectAnswers().empty());<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> correct_answers_str;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s: <b><a href="CppThis.htm">this</a></b>-&gt;GetCorrectAnswers()) { correct_answers_str <a href="CppOperatorPlusAssign.htm">+=</a> s <a href="CppOperatorPlus.htm">+</a> "/"; }<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!correct_answers_str.empty());<br/>
&nbsp;&nbsp;correct_answers_str.resize(correct_answers_str.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetFilename()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "," <a href="CppOperatorPlus.htm">+</a> <b><a href="CppThis.htm">this</a></b>-&gt;Get<a href="CppQuestion.htm">Question</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> "," <a href="CppOperatorPlus.htm">+</a> correct_answers_str<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> ",";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t: <b><a href="CppThis.htm">this</a></b>-&gt;GetWrongAnswers()) { s <a href="CppOperatorPlusAssign.htm">+=</a> t <a href="CppOperatorPlus.htm">+</a> ","; }<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove tailing comma<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;s.resize(s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
