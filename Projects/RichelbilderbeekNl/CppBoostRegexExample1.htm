<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>BoostRegexExample1</title>
  <meta name="description" content="C++ BoostRegexExample1"/>
  <meta name="keywords" content="C++ BoostRegexExample1 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBoostRegexExample1.htm">BoostRegexExample1</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.687 at Tue Aug 12 15:40:50 2014
 -->
<p><img src="PicBoost.png" alt="Boost"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppBoostRegexExample1.htm">Boost.Regex example 1</a>
  is an <a href="CppExample.htm">example</a> how to use the <a href="CppBoostRegex.htm">Boost.Regex</a>
  <a href="CppLibrary.htm">library</a>.
</p>
<p>&nbsp;</p>
<p>
  The <a href="CppExample.htm">example</a> below shows how to define a regular expression for a Dutch zip code,
  how to check for it and how to search for it.
</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppBoostRegexExample1.zip">Download the Qt Creator project 'CppBoostRegexExample1' (zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="CppBoostRegexExample1Exe.zip">Download the 'CppBoostRegexExample1' Windows executable (zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppBoostRegexExample1/CppBoostRegexExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostRegexExample1/CppBoostRegexExample1.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri) #Or use the code below<br/>
# QT += core<br/>
# QT += gui<br/>
# greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
# <a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
#&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
# }<br/>
# <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
# unix {<br/>
#&nbsp;&nbsp; <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
# }<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>All.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBoostRegexExample1/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostRegexExample1/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppRegex.htm">regex</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Define how a dutch zip code is formatted<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostRegex.htm">boost::regex</a> dutch_zip_code("\\d{4}\\s[A-Z]{2}");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> the <a href="CppRegex.htm">regex</a> works properly<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostRegex_match.htm">boost::regex_match</a>("1234 AB",dutch_zip_code)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostRegex_match.htm">boost::regex_match</a>("1234 ab",dutch_zip_code)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostRegex_match.htm">boost::regex_match</a>("1234ab",dutch_zip_code)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Define a sentence with a Dutch zip code in it<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "My Dutch zip code is 1234 AB.";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show how <a href="CppBoostRegex_match.htm">boost::regex_match</a> and boost::regex_search work<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostRegex_match.htm">boost::regex_match</a>(s,dutch_zip_code)<a href="CppOperatorEqual.htm">==</a><b><a href="CppFalse.htm">false</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "the <a href="CppStdString.htm">std::string</a> does not match a dutch zip code");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(boost::regex_search(s,dutch_zip_code)<a href="CppOperatorEqual.htm">==</a><b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "but the <a href="CppStdString.htm">std::string</a> does contain a dutch zip code");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show how to obtain a Dutch zip code from a <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::s<a href="CppRegex.htm">regex</a>_<a href="CppIterator.htm">iterator</a> i(s.begin(),s.end(),dutch_zip_code);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> i-&gt;str();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t<a href="CppOperatorEqual.htm">==</a>"1234 AB");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBoostRegexExample1/CppBoostRegexExample1.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostRegexExample1/CppBoostRegexExample1.sh" border = "1"><tr><td><code>
#!/bin/bash<br/>
#Script to check the status of compiles<br/>
#Copies executables (both Linux and Win32) executables to ~/bin (overwrites older)<br/>
#set -x verbose #echo on<br/>
<br/>
mytempfile="tmp.txt"<br/>
if [ -e $mytempfile ]<br/>
then<br/>
&nbsp;&nbsp;rm $mytempfile<br/>
fi<br/>
<br/>
rm *.pro.user<br/>
<br/>
for myprofile in `ls | egrep ".pro\&gt;"`<br/>
do<br/>
&nbsp;&nbsp;echo $myprofile<br/>
&nbsp;&nbsp;mybasename=`echo $myprofile | sed "s/\.pro//"`<br/>
 <br/>
&nbsp;&nbsp;#For every .pro file, <br/>
&nbsp;&nbsp;# 0: compile<br/>
&nbsp;&nbsp;# 1: crosscompile using Qt5<br/>
&nbsp;&nbsp;for type in 0 1<br/>
&nbsp;&nbsp;do<br/>
&nbsp;&nbsp;&nbsp;&nbsp;myqmake=""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mytypestr=""<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#Cleaning up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm Makefile<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm Makefile.*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm -r release<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm -r debug<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm ui_*.h<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm qrc_*.cpp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm moc_*.cpp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm object_script*.*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm *.o<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm *_plugin_import.cpp<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;case $type in<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0) myqmake="qmake" mytypestr="Lubuntu" ;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1) myqmake="../../Libraries/mxe/usr/i686-pc-mingw32/qt5/bin/qmake" mytypestr="Qt5LubuntuToWindows" ;; <br/>
&nbsp;&nbsp;&nbsp;&nbsp;esac<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;$myqmake $myprofile<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if [ ! -e Makefile ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;then<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo $myprofile", "$mytypestr": FAIL (Makefile not found)" &gt;&gt; ../$mytempfile<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fi<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;make<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;if [ -e $mybasename ] || [ -e ./release/$mybasename".exe" ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;then<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo $myprofile", "$mytypestr": SUCCESS" &gt;&gt; ../$mytempfile<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#echo "SUCCESS for mybasename: "$mybasename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if [ -e $mybasename ] <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#echo "(1) cp "$mybasename" ~/bin/" <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cp $mybasename ~/bin/ <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm $mybasename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if [ -e ./release/$mybasename".exe" ] <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#echo "(2) cp ./release/"$mybasename".exe ~/bin/"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cp ./release/$mybasename".exe" ~/bin/<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi<br/>
&nbsp;&nbsp;&nbsp;&nbsp;else<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo $myprofile", "$mytypestr": FAIL (executable not found)" &gt;&gt; ../$mytempfile<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#echo "FAIL for mybasename: "$mybasename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;fi<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#Cleaning up<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm Makefile<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm Makefile.*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm -r release<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm -r debug<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm ui_*.h<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm qrc_*.cpp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm moc_*.cpp<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm object_script*.*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm *.o<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rm *_plugin_import.cpp<br/>
<br/>
<br/>
&nbsp;&nbsp;done #next type<br/>
<br/>
done #next profile<br/>
<br/>
cat $mytempfile<br/>
<br/>
rm $mytempfile<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
