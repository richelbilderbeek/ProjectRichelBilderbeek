<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>array/std::array/boost::array</title>
  <meta name="description" content="C++ array"/>
  <meta name="keywords" content="C++ array code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppArray.htm">array</a></h1>
<p>&nbsp;</p>
<p><a href="CppArray.htm">array</a> is one of these topics:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/> A plain array</li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicCppTr1.png" alt="TR1"/> <a href="CppTr1Array.htm">std::tr1::array</a></li>
  <li><img src="PicCpp98.png" alt="C++98"/><img src="PicBoost.png" alt="Boost"/> <a href="CppBoostArray.htm">boost::array</a></li>
  <li><img src="PicCpp11.png" alt="C++11"/><img src="PicSpacer.png" alt=" "/> <a href="CppStdArray.htm">std::array</a></li>
</ul>
<p>&nbsp;</p>
<p>See <a href="CppArrayExample1.htm">array/std::array/boost::array example 1: comparison</a> for a comparison.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp98.png" alt="C++98"/><img src="PicSpacer.png" alt=" "/> A plain <a href="CppArray.htm">array</a></h2>
<p>&nbsp;</p>
<p>An <a href="CppArray.htm">array</a> is a collection of elements that can be accessed by 
the <a href="CppOperatorIndex.htm">index operator</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> myArray[10]; <a href="CppOperatorDivide.htm">/</a>/Create an array that stores ten <a href="CppInt.htm">integer</a>s<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Prefer a <a href="CppVector.htm">std::vector</a> (or perhaps std::array) over an <a href="CppArray.htm">array</a> by default [1-4]. Consider not using 
<a href="CppArray.htm">arrays</a> in the <a href="CppInterface.htm">interface</a> of a <a href="CppClass.htm">class</a>.</p>
<p>&nbsp;</p>
<p>The first element of an <a href="CppArray.htm">array</a> is at index zero.</p>
<p>&nbsp;</p>
<p>There are two kinds of <a href="CppArray.htm">arrays</a>:</p>
<ol>
  <li><a href="CppArrayStatic.htm">Static arrays</a>: size known at compile-time, for example 'int v[10]'</li> 
  <li><a href="CppArrayDynamic.htm">Dynamically allocated arrays</a>: size gets determined at run-time, for example 'int * v')</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>Take care not to write beyond the bounds of an <a href="CppArray.htm">array</a> [5,7]</li>
  <li>Avoid multidimensional <a href="CppArray.htm">arrays</a>; define suitable <a href="CppContainer.htm">containers</a> instead [8]</li>
  <li>Use <a href="CppContainer.htm">containers</a> rather than plain <a href="CppArray.htm">arrays</a> [9]</li>
  <li>Use <a href="CppString.htm">std::string</a> rather than zero-terminated <a href="CppArray.htm">arrays</a> of <a href="CppChar.htm">chars</a> [10]</li>
  <li>Avoid passing arrays as pointers [11]</li>
  <li>Prefer <a href="CppStdArray.htm">std::array</a> to built-in <a href="CppArray.htm">arrays</a> [12]</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp98.png" alt="C++98"/><img src="PicCppTr1.png" alt="TR1"/> <a href="CppTr1Array.htm">std::tr1::array</a></h2>
<p>&nbsp;</p>
<p>See <a href="CppTr1Array.htm">std::tr1::array</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp98.png" alt="C++98"/><img src="PicBoost.png" alt="Boost"/> <a href="CppBoostArray.htm">boost::array</a></h2>
<p>&nbsp;</p>
<p>See <a href="CppBoostArray.htm">boost::array</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp11.png" alt="C++11"/><img src="PicSpacer.png" alt=" "/> <a href="CppStdArray.htm">std::array</a></h2>
<p>&nbsp;</p>
<p>See <a href="CppStdArray.htm">std::array</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 Chapter 5.8.4 'Use vector and valarray rather than built-in (C-style) arrays'</li>
  <li><!--  2 --><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 76: 'Use vector by default. Otherwise choose an appropriate container'</li>
  <li><!--  3 --><a href="CppMarshallCline.htm">Marshall Cline</a>, <a href="CppGregLomow.htm">Greg Lomow</a> and <a href="CppMikeGirou.htm">Mike Girou</a>. C++ FAQs. ISBN: 0-201-3098301, FAQ 28.02: 'Are arrays good or evil?' (Answer: 'Arrays are evil'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 Chapter C.14.11 'Prefer vector over array'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 5.8.2: 'Take care not to write beyond the bounds of an array'</li>
  <li><!--  6 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 97: 'Arrays shall not be used in interfaces. Instead, the Array class should be used.'</li>
  <li><!--  7 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[3] Take care not to write beyond the bounds of an array'</li>
  <li><!--  8 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[4] Avoid multidimensional arrays; define suitable containers instead'</li>
  <li><!--  9 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[6] Use containers (e.g., vector, array, and valarray) rather than built-in (C-style) arrays'</li>
  <li><!-- 10 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[7] Use string rather than zero-terminated arrays of chars'</li>
  <li><!-- 11 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[15] Avoid passing arrays as pointers'</li>
  <li><!-- 12 --><a href="CppScottMeyers.htm">Scott Meyers</a>. <a href="http://cppandbeyond.com/2012/04/16/session-topic-initial-thoughts-on-effective-c11">C++ And Beyond 2012 session: 'Initial thoughts on Effective C++11'. 2012. 'Prefer std::array to Built-in Arrays'</li>

</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>