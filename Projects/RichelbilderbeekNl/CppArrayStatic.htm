<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>static array</title>
  <meta name="description" content="C++ static array"/>
  <meta name="keywords" content="C++ static array code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppArrayStatic.htm">static array</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppArrayStatic.htm">static array</a> is an <a href="CppArray.htm">array</a> of which 
the size is known at <a href="CppCompileTime.htm">compile time</a> (as
opposite of the <a href="CppArrayDynamic.htm">dynamically allocated arrays</a>).</p>
<p>&nbsp;</p>
<p>Prefer a <a href="CppVector.htm">std::vector</a> over an <a href="CppArray.htm">array</a> by default [1-5].</p>
<p>&nbsp;</p>
<p>Take care not to write beyond the bounds of an <a href="CppArray.htm">array</a> [6].</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#include &lt;iostream&gt;<br/>
<br/>
int main()<br/>
{ <br/>
&nbsp;&nbsp;//Create an array<br/>
&nbsp;&nbsp;int array[10];<br/>
<br/>
&nbsp;&nbsp;//Set array values<br/>
&nbsp;&nbsp;for (int i=0; i!=10; ++i) <br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;array[i] = i;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;//Get array values<br/>
&nbsp;&nbsp;for (int i=0; i!=10; ++i) <br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; array[i] &lt;&lt; '\n';<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p><a href="CppArrayStatic.htm">Static arrays</a> cannot have a size of zero elements. 
This is used for compile-time assertions (<a href="CppBOOST_STATIC_ASSERT.htm">BOOST_STATIC_ASSERT</a>).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><img src="PicBoost.png" alt="Boost"/> boost::array</h3>
<p>&nbsp;</p>
<p>The <a href="CppBoost.htm">Boost</a> supplies a class called boost::array, which might be chosen
over a std::vector when there is no need of resizing at run-time.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>How to determine a <a href="CppArrayStatic.htm">static array</a>'s size?</h2>
<p>&nbsp;</p>
<p>This can be done from the array's pointer and the size of the zero-th element:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <b><a href="CppStatic.htm">static</a></b>Size <a href="CppOperatorAssign.htm">=</a> 100;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> myArray[<b><a href="CppStatic.htm">static</a></b>Size];<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> <b><a href="CppSizeof.htm">sizeof</a></b>(myArray) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppSizeof.htm">sizeof</a></b>(myArray[0]);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(size<a href="CppOperatorEqual.htm">==</a><b><a href="CppStatic.htm">static</a></b>Size);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 Chapter 5.8.4 'Use vector and valarray rather than built-in (C-style) arrays'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>  . C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 76: 'Use vector by default. Otherwise choose an appropriate container'</li>
  <li><a href="CppMarshallCline.htm">Marshall Cline</a>, <a href="CppGregLomow.htm">Greg Lomow</a> and <a href="CppMikeGirou.htm">Mike Girou</a>. C++ FAQs. ISBN: 0-201-3098301, FAQ 28.02: 'Are arrays good or evil?' (Answer: 'Arrays are evil'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 Chapter C.14.11 'Prefer vector over array'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 5.8.2: 'Take care not to write beyond the bounds of an array'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Chapter 5.8.2: 'Take care not to write beyond the bounds of an array'.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
