<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Music</title>
  <meta name="description" content="C++ Music"/>
  <meta name="keywords" content="C++ Music "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMusic.htm">Music</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.680 at Sun Jul  6 18:31:14 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppMusic.htm">Music</a> contains music <a href="CppClass.htm">classes</a>.
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/CppMusic.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/CppMusic.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMusic.htm">CppMusic</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMusic.htm">CppMusic</a>/<a href="CppMusic.htm">music</a>chord.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMusic.htm">CppMusic</a>/<a href="CppMusic.htm">music</a>note.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMusic.htm">CppMusic</a>/<a href="CppMusic.htm">music</a>scale.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMusic.htm">CppMusic</a>/<a href="CppMusic.htm">music</a>chord.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMusic.htm">CppMusic</a>/<a href="CppMusic.htm">music</a>note.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMusic.htm">CppMusic</a>/<a href="CppMusic.htm">music</a>scale.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMusic.htm">CppMusic</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicbar.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicbar.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MUSICBAR_H<br/>
<a href="CppDefine.htm">#define</a> MUSICBAR_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMusic.htm">music</a>note.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>A Bar is a collection of Note <a href="CppInstance.htm">instances</a> ensuring that<br/>
<a href="CppComment.htm">///</a>the sum of the length of the Notes equals the <a href="CppTime.htm">time</a> signature of the bar.<br/>
<a href="CppComment.htm">///</a>Note that rests are not supported<br/>
<b><a href="CppStruct.htm">struct</a></b> Bar<br/>
{<br/>
&nbsp;&nbsp;Bar(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppTime.htm">time</a>_signature,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Note&gt;&amp; notes);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; m_<a href="CppTime.htm">time</a>_signature;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; m_notes;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MUSICBAR_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicbar.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicbar.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppMusic.htm">music</a>bar.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Bar::Bar(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppTime.htm">time</a>_signature,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Note&gt;&amp; notes)<br/>
&nbsp;&nbsp;: m_notes(notes),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>_signature(<a href="CppTime.htm">time</a>_signature)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"TODO: Check that the num of lengths of the notes equals the <a href="CppTime.htm">time</a> signature");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicchord.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicchord.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MUSICCHORD_H<br/>
<a href="CppDefine.htm">#define</a> MUSICCHORD_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMusic.htm">music</a>note.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Chord<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create <a href="CppAny.htm">any</a> Chord from its root (e.g. 'C'), postfix (e.g. 'm7') and its intervals<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Chord(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Note root,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; postfix,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; intervals);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Chord() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Count the number of notes two chords share<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppInt.htm">int</a></b> CountSameNotes(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt;&amp; rhs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Factory <a href="CppMemberFunction.htm">member function</a>: create all Chords<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt; &gt; CreateAllChords() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Factory <a href="CppMemberFunction.htm">member function</a>: create all Chords from a root<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt; &gt; CreateChords(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Factory <a href="CppMemberFunction.htm">member function</a>: create a Chord from its name (which includes its root)<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt; CreateChord(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; chord_name) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Chord its name<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example, 'C' (<b><a href="CppFor.htm">for</a></b> C major) or 'D#m'<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a Chord its Notes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example, the chord C major will <b><a href="CppReturn.htm">return</a></b>n {C,E,G}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; GetNotes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Return the Chord as a <a href="CppMusic.htm">music</a> notation string<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The root of a chord. For example, the Cm7 chord has C as its root<br/>
&nbsp;&nbsp;Note m_root;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The postfix of a chord. For example, the Cm7 chord has 'm7' as its postfix<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_postfix;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_intervals;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The aug or plus chord<br/>
<a href="CppComment.htm">///</a>For example, 'C+', 'D#aug"<br/>
<b><a href="CppStruct.htm">struct</a></b> ChordAug : <b><a href="CppPublic.htm">public</a></b> Chord<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Chord from its root<br/>
&nbsp;&nbsp;ChordAug(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "aug"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The dim chord<br/>
<a href="CppComment.htm">///</a>For example, 'Cdim', 'D#dim"<br/>
<b><a href="CppStruct.htm">struct</a></b> ChordDim : <b><a href="CppPublic.htm">public</a></b> Chord<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Chord from its root<br/>
&nbsp;&nbsp;ChordDim(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "dim"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The major chord<br/>
<a href="CppComment.htm">///</a>For example, 'C', 'D#"<br/>
<b><a href="CppStruct.htm">struct</a></b> ChordMajor : <b><a href="CppPublic.htm">public</a></b> Chord<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Chords from its root<br/>
&nbsp;&nbsp;ChordMajor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "major"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The minor chord<br/>
<a href="CppComment.htm">///</a>For example, 'Cm', 'D#m"<br/>
<b><a href="CppStruct.htm">struct</a></b> ChordMinor : <b><a href="CppPublic.htm">public</a></b> Chord<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Chord from its root<br/>
&nbsp;&nbsp;ChordMinor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "minor"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The 6 chord<br/>
<a href="CppComment.htm">///</a>For example, 'C6', 'D#6"<br/>
<b><a href="CppStruct.htm">struct</a></b> Chord6 : <b><a href="CppPublic.htm">public</a></b> Chord<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Chord from its root<br/>
&nbsp;&nbsp;Chord6(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "6"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The minor 6 chord<br/>
<a href="CppComment.htm">///</a>For example, 'Cm6', 'D#m6"<br/>
<b><a href="CppStruct.htm">struct</a></b> ChordMinor6 : <b><a href="CppPublic.htm">public</a></b> Chord<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Chord from its root<br/>
&nbsp;&nbsp;ChordMinor6(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "m6"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The 7 chord<br/>
<a href="CppComment.htm">///</a>For example, 'C7', 'D#7"<br/>
<b><a href="CppStruct.htm">struct</a></b> Chord7 : <b><a href="CppPublic.htm">public</a></b> Chord<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Chord from its root<br/>
&nbsp;&nbsp;Chord7(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "7"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The minor 7 chord<br/>
<a href="CppComment.htm">///</a>For example, 'C7', 'D#7"<br/>
<b><a href="CppStruct.htm">struct</a></b> ChordMinor7 : <b><a href="CppPublic.htm">public</a></b> Chord<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Chord from its root<br/>
&nbsp;&nbsp;ChordMinor7(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "m7"; }<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MUSICCHORD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicchord.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicchord.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMusic.htm">music</a>chord.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppMake_shared.htm">make_shared</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::Chord(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Note root,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; postfix,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; intervals)<br/>
&nbsp;&nbsp;: m_root(root), m_postfix(postfix), m_intervals(intervals)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::CountSameNotes(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt;&amp; lhs, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt;&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lhs);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rhs);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The indices of the notes<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; x;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppMusic.htm">Music</a>::Note&gt; tmp <a href="CppOperatorAssign.htm">=</a> lhs-&gt;GetNotes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(tmp.begin(),tmp.end(),<a href="CppStd.htm">std</a>::inserter(x,x.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppMusic.htm">Music</a>::Note&amp; note) { <b><a href="CppReturn.htm">return</a></b> note.<a href="CppToInt.htm">ToInt</a>(); } );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; y;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppMusic.htm">Music</a>::Note&gt; tmp <a href="CppOperatorAssign.htm">=</a> rhs-&gt;GetNotes();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(tmp.begin(),tmp.end(),<a href="CppStd.htm">std</a>::inserter(y,y.begin()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppMusic.htm">Music</a>::Note&amp; note) { <b><a href="CppReturn.htm">return</a></b> note.<a href="CppToInt.htm">ToInt</a>(); } );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; z;<br/>
&nbsp;&nbsp;<a href="CppStdSet_intersection.htm">std::set_intersection</a>(x.begin(),x.end(),y.begin(),y.end(),<a href="CppStd.htm">std</a>::inserter(z,z.begin()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(z.size());<br/>
}<br/>
<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::CreateAllChords() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt; &gt; v;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; notes <a href="CppOperatorAssign.htm">=</a> Note::GetAllNotes();<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(notes.begin(),notes.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;v](<b><a href="CppConst.htm">const</a></b> Note&amp; note)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> CreateChords(note);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.insert(v.end(),w.begin(),w.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::CreateChords(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;ChordAug&nbsp;&nbsp; &gt;(root),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;ChordDim&nbsp;&nbsp; &gt;(root),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;ChordMajor &gt;(root),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;ChordMinor &gt;(root),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;Chord6&nbsp;&nbsp;&nbsp;&nbsp; &gt;(root),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;ChordMinor6&gt;(root),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;Chord7&nbsp;&nbsp;&nbsp;&nbsp; &gt;(root),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostMake_shared.htm">boost::make_shared</a>&lt;ChordMinor7&gt;(root)<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::CreateChord(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; chord_name) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> CreateAllChords();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[chord_name](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt;&amp; chord)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> chord-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> chord_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> v.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *i;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!chord_name.empty());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the root<br/>
&nbsp;&nbsp;Note root <a href="CppOperatorAssign.htm">=</a> Note(chord_name.substr(0,1);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Even <b><a href="CppIf.htm">if</a></b> the chord_name was 'C' (so a substring of length 2 is not possible),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>also <b><a href="CppThis.htm">this</a></b> <a href="CppException.htm">exception</a> is caught<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Note perhaps_root <a href="CppOperatorAssign.htm">=</a> Note(chord_name.substr(0,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;root <a href="CppOperatorAssign.htm">=</a> perhaps_root;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No worries<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the chord type<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> chord_type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> chord_name.substr(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root.ToStr().size(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chord_name.size() <a href="CppOperatorMinus.htm">-</a> root.ToStr().size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (chord_type.empty()) <b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt;(<b><a href="CppNew.htm">new</a></b> ChordMajor(root));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::GetNotes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; notes;<br/>
&nbsp;&nbsp;Note cur <a href="CppOperatorAssign.htm">=</a> m_root;<br/>
&nbsp;&nbsp;notes.push_back(cur);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_intervals.begin(),m_intervals.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;cur,&amp;notes](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> interval)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur <a href="CppOperatorAssign.htm">=</a> Note( (cur.<a href="CppToInt.htm">ToInt</a>() <a href="CppOperatorPlus.htm">+</a> interval) <a href="CppOperatorModulus.htm">%</a> 12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notes.push_back(cur);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> notes;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-08-10: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_root.ToStr() <a href="CppOperatorPlus.htm">+</a> m_postfix;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ChordAug::ChordAug(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Chord(root,"+",{4,4})<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ChordDim::ChordDim(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Chord(Note(root.<a href="CppToInt.htm">ToInt</a>() <a href="CppOperatorPlus.htm">+</a> 3),"dim",{3,3})<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ChordMajor::ChordMajor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Chord(root,"",{4,3})<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ChordMinor::ChordMinor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Chord(root,"m",{3,4})<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord6::Chord6(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Chord(root,"6",{4,3,2})<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ChordMinor6::ChordMinor6(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Chord(root,"m6",{3,4,2})<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Chord7::Chord7(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Chord(Note(root.<a href="CppToInt.htm">ToInt</a>() <a href="CppOperatorPlus.htm">+</a> 4),"7",{3,3})<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ChordMinor7::ChordMinor7(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Chord(Note(root.<a href="CppToInt.htm">ToInt</a>() <a href="CppOperatorPlus.htm">+</a> 3),"m7",{4,3})<br/>
{<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicfwd.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicfwd.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MUSICFWD_H<br/>
<a href="CppDefine.htm">#define</a> MUSICFWD_H<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Chord;<br/>
<b><a href="CppStruct.htm">struct</a></b> Note;<br/>
<b><a href="CppStruct.htm">struct</a></b> Scale;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MUSICFWD_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicnote.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicnote.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MUSICNOTE_H<br/>
<a href="CppDefine.htm">#define</a> MUSICNOTE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Note <b><a href="CppClass.htm">class</a></b>, e.g. 'C with length 1/1'<br/>
<b><a href="CppStruct.htm">struct</a></b> Note<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.htm">enum class</a></b> Letter { A,B,C,D,E,F,G };<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.htm">enum class</a></b> Accidental { none, flat, sharp };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a Note from an <a href="CppInt.htm">integer</a>, always uses the sharp <b><a href="CppFor.htm">for</a></b> an accidental<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Examples: 0 <a href="CppOperatorAssign.htm">=</a> C, 1 <a href="CppOperatorAssign.htm">=</a> C#, 2 <a href="CppOperatorAssign.htm">=</a> D, 3 <a href="CppOperatorAssign.htm">=</a> D#<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws an <a href="CppException.htm">exception</a> when i is out of range<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Note(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i, <b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; length <a href="CppOperatorAssign.htm">=</a> {0,1} );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a Note from a <a href="CppStdString.htm">std::string</a>.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Throws an <a href="CppException.htm">exception</a> when string is invalid<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Note(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; length <a href="CppOperatorAssign.htm">=</a> {0,1} );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a Note from a Letter and Accidental, will always succeed<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Note(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Letter letter <a href="CppOperatorAssign.htm">=</a> Letter::C,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Accidental accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; length <a href="CppOperatorAssign.htm">=</a> {0,1}<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Factory <a href="CppMemberFunction.htm">member function</a> to create all notes<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; GetAllNotes() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a note to an <a href="CppInt.htm">integer</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Examples: C <a href="CppOperatorAssign.htm">=</a> 0, C# <a href="CppOperatorAssign.htm">=</a> 1, Db <a href="CppOperatorAssign.htm">=</a> 1, D <a href="CppOperatorAssign.htm">=</a> 2<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppToInt.htm">ToInt</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> a note to a string<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Accidental m_accidental;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/An x/yth note, e.g 1/4th<br/>
&nbsp;&nbsp;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; m_length;<br/>
<br/>
<br/>
&nbsp;&nbsp;Letter m_letter;<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Note&amp; lhs, <b><a href="CppConst.htm">const</a></b> Note&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Note&amp; lhs, <b><a href="CppConst.htm">const</a></b> Note&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MUSICNOTE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicnote.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicnote.cpp" border = "1"><tr><td><code>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMusic.htm">music</a>note.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Note(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i, <b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; length)<br/>
&nbsp;&nbsp;: m_accidental(<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Accidental::none),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_length(length),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_letter(<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Letter::C)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (i <a href="CppOperatorModulus.htm">%</a> 12)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;0: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::C; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none ; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;1: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::C; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::sharp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;2: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::D; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none ; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;3: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::D; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::sharp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;4: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::E; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none ; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;5: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::F; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none ; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;6: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::F; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::sharp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;7: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::G; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none ; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;8: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::G; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::sharp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;9: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::A; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none ; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 10: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::A; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::sharp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 11: m_letter <a href="CppOperatorAssign.htm">=</a> Letter::B; m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none ; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Invalid value <b><a href="CppFor.htm">for</a></b> note; must be in range [0,12&gt;");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Note(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s, <b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; length)<br/>
&nbsp;&nbsp;: m_accidental(<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Accidental::none),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_length(length),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_letter(<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Letter::C)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty()) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A <a href="CppMusic.htm">music</a> note must not be empty");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[0] &lt; 'A' <a href="CppOperatorLogicalOr.htm">||</a> s[0] &gt; 'G') <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A <a href="CppMusic.htm">music</a> note must start with a capital letter from A to and including G");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() &gt; 2) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A <a href="CppMusic.htm">music</a> note cannot consist of more than two <a href="CppChar.htm">character</a>");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (s[1] <a href="CppOperatorNotEqual.htm">!=</a> '#' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s[1] <a href="CppOperatorNotEqual.htm">!=</a> 'b'))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("A <a href="CppMusic.htm">music</a> note's second <a href="CppChar.htm">character</a> must be either absent, '#' or 'b'");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (s[0])<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'C': m_letter <a href="CppOperatorAssign.htm">=</a> Letter::C; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'D': m_letter <a href="CppOperatorAssign.htm">=</a> Letter::D; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'E': m_letter <a href="CppOperatorAssign.htm">=</a> Letter::E; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'F': m_letter <a href="CppOperatorAssign.htm">=</a> Letter::F; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'G': m_letter <a href="CppOperatorAssign.htm">=</a> Letter::G; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'A': m_letter <a href="CppOperatorAssign.htm">=</a> Letter::A; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'B': m_letter <a href="CppOperatorAssign.htm">=</a> Letter::B; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size() <a href="CppOperatorEqual.htm">==</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (s[1])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '#': m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::sharp; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'b': m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::flat; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_accidental <a href="CppOperatorAssign.htm">=</a> Accidental::none;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Note(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Letter letter,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Accidental accidental,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;&amp; length) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_accidental(accidental),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_length(length),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_letter(letter)<br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::GetAllNotes() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>12; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(Note(i));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-08-10: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a>"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test exactly once<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <a href="CppToInt.htm">ToInt</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Note(Letter::C).<a href="CppToInt.htm">ToInt</a>() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Note(0).<a href="CppToInt.htm">ToInt</a>() <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Note(0).ToStr() <a href="CppOperatorEqual.htm">==</a> "C");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::<a href="CppToInt.htm">ToInt</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_letter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::C: x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;0; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::D: x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::E: x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::F: x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;5; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::G: x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;7; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::A: x <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;9; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::B: x <a href="CppOperatorAssign.htm">=</a> 11; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_accidental)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Accidental::none : <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Accidental::sharp: <a href="CppOperatorIncrement.htm">++</a>x; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Accidental::flat : <a href="CppOperatorDecrement.htm">--</a>x; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;x <a href="CppOperatorPlusAssign.htm">+=</a> 12;<br/>
&nbsp;&nbsp;x <a href="CppOperatorModulusAssign.htm">%=</a> 12;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0); <a href="CppAssert.htm">assert</a>(x &lt; 12);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> x;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_letter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::C: s <a href="CppOperatorAssign.htm">=</a> "C"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::D: s <a href="CppOperatorAssign.htm">=</a> "D"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::E: s <a href="CppOperatorAssign.htm">=</a> "E"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::F: s <a href="CppOperatorAssign.htm">=</a> "F"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::G: s <a href="CppOperatorAssign.htm">=</a> "G"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::A: s <a href="CppOperatorAssign.htm">=</a> "A"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Letter::B: s <a href="CppOperatorAssign.htm">=</a> "B"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_accidental)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Accidental::none : <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Accidental::sharp: s<a href="CppOperatorPlusAssign.htm">+=</a>"#"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Accidental::flat : s<a href="CppOperatorPlusAssign.htm">+=</a>"b"; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Note&amp; lhs, <b><a href="CppConst.htm">const</a></b> Note&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.<a href="CppToInt.htm">ToInt</a>() <a href="CppOperatorEqual.htm">==</a> rhs.<a href="CppToInt.htm">ToInt</a>();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::<b><a href="CppOperatorLess.htm">operator&lt;</a></b>(<b><a href="CppConst.htm">const</a></b> Note&amp; lhs, <b><a href="CppConst.htm">const</a></b> Note&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.<a href="CppToInt.htm">ToInt</a>() &lt; rhs.<a href="CppToInt.htm">ToInt</a>();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicscale.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicscale.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MUSICSCALE_H<br/>
<a href="CppDefine.htm">#define</a> MUSICSCALE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMusic.htm">music</a>note.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Chord;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a Scale from its root and its intervals<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Scale(<b><a href="CppConst.htm">const</a></b> Note root, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; intervals);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Scale() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Factory <a href="CppMemberFunction.htm">member function</a>: create all Scales from a root<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt; &gt; CreateScales(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A Factory <a href="CppMemberFunction.htm">member function</a>: create a Scale from its name and root<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt; CreateScale(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; scale_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Note root);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does the Chord fit in <b><a href="CppThis.htm">this</a></b> Scale?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> Fits(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt;&amp; chord) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example, 'Major' or 'Moll-Dur subdominant'<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a Scale its Notes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example, C major will <b><a href="CppReturn.htm">return</a></b>n {A,B,C,D,E,F,G}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; GetNotes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Note&amp; GetRoot() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_root; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Note m_root;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The intervals between two successive notes<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/For example, the C major scale (notes: C-D-E-F-G-A-B)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/has intervals 2-2-1-2-2-2<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The sum of the intervals must always be lower than twelve<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_intervals;<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The blues scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleBlues : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleBlues(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b>&nbsp;&nbsp;<b><a href="CppNoexcept.htm">noexcept</a></b>{ <b><a href="CppReturn.htm">return</a></b> "blues"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The harminic minor scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleHarmonicMinor : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleHarmonicMinor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "harmonic minor"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The hexatonic scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleHexatonic : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleHexatonic(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "hexatonic"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The hypermajor scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleHyperMajor : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleHyperMajor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "hypermajor"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The major scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleMajor : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleMajor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "major"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The major pentatonic scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleMajorPentatonic : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleMajorPentatonic(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "major pentatonic"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The minor pentatonic scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleMinorPentatonic : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleMinorPentatonic(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "minor pentatonic"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The Moll-dur dominant scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleMollDurDominant : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleMollDurDominant(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "moll-dur dominant"; }<br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>The Moll-dur subdominant scale<br/>
<b><a href="CppStruct.htm">struct</a></b> ScaleMollDurSubdominant : <b><a href="CppPublic.htm">public</a></b> Scale<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the Scale from its root<br/>
&nbsp;&nbsp;ScaleMollDurSubdominant(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the Scale its name<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetName() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> "moll-dur subdominant"; }<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppMusic.htm">Music</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MUSICSCALE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppMusic/musicscale.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppMusic/musicscale.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMusic.htm">music</a>scale.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppMusic.htm">music</a>chord.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale::Scale(<b><a href="CppConst.htm">const</a></b> Note root, <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; intervals)<br/>
&nbsp;&nbsp;: m_root(root),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_intervals(intervals)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale::CreateScale(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; scale_name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Note root)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> CreateScales(root);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[scale_name](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;&amp; scale)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> scale-&gt;GetName() <a href="CppOperatorEqual.htm">==</a> scale_name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> v.end())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(scale_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Scale name is not found");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *i;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale&gt; &gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale::CreateScales(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleBlues(root)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleHarmonicMinor(root)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleHexatonic(root)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleHyperMajor(root)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleMajor(root)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleMajorPentatonic(root)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleMinorPentatonic(root)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleMollDurDominant(root)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Scale&gt;(<b><a href="CppNew.htm">new</a></b> ScaleMollDurSubdominant(root)),<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale::Fits(<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Chord&gt;&amp; chord) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; notes_chord <a href="CppOperatorAssign.htm">=</a> chord-&gt;GetNotes();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; notes_scale <a href="CppOperatorAssign.htm">=</a> <b><a href="CppThis.htm">this</a></b>-&gt;GetNotes();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Count mismatches<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_mismatch<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCount_if.htm">std::count_if</a>(notes_chord.begin(),notes_chord.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[notes_scale](<b><a href="CppConst.htm">const</a></b> Note&amp; note)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>If note from chord cannot be found in scale, <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdFind.htm">std::find</a>(notes_scale.begin(),notes_scale.end(),note) <a href="CppOperatorEqual.htm">==</a> notes_scale.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n_mismatch <a href="CppOperatorEqual.htm">==</a> 0;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Note&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale::GetNotes() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Note&gt; notes;<br/>
&nbsp;&nbsp;Note cur <a href="CppOperatorAssign.htm">=</a> m_root;<br/>
&nbsp;&nbsp;notes.push_back(cur);<br/>
&nbsp;&nbsp;<a href="CppStdFor_each.htm">std::for_each</a>(m_intervals.begin(),m_intervals.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;cur,&amp;notes](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> interval)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur <a href="CppOperatorAssign.htm">=</a> Note( (cur.<a href="CppToInt.htm">ToInt</a>() <a href="CppOperatorPlus.htm">+</a> interval) <a href="CppOperatorModulus.htm">%</a> 12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notes.push_back(cur);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> notes;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-08-10: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppVersion.htm">version</a> with five different scales",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2012-08-11: <a href="CppVersion.htm">version</a> 1.1: added four scales"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::Scale::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleBlues::ScaleBlues(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {3,2,1,1,3} )<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>C-D-Eb-F-G-Ab-B<br/>
<a href="CppComment.htm">//</a> 2 1&nbsp;&nbsp;2 2 1&nbsp;&nbsp;3<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleHarmonicMinor::ScaleHarmonicMinor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {2,1,2,2,1,3} )<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleHexatonic::ScaleHexatonic(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {2,2,2,2,2} )<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleHyperMajor::ScaleHyperMajor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {1,3,1,3,1} )<br/>
{<br/>
<br/>
}<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleMajor::ScaleMajor(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {2,2,1,2,2,2} )<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>C-D-E-G-A<br/>
<a href="CppComment.htm">//</a> 2 2 3 2<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleMajorPentatonic::ScaleMajorPentatonic(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {2,2,3,2} )<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>C-Eb-F-G_Bb<br/>
<a href="CppComment.htm">//</a> 3&nbsp;&nbsp;2 2 3<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleMinorPentatonic::ScaleMinorPentatonic(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {3,2,2,3} )<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleMollDurDominant::ScaleMollDurDominant(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {2,2,1,2,1,3} )<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppMusic.htm">Music</a>::ScaleMollDurSubdominant::ScaleMollDurSubdominant(<b><a href="CppConst.htm">const</a></b> Note root) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: Scale(root, {2,2,1,2,1,2} )<br/>
{<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
