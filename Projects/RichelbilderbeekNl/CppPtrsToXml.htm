<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>PtrsToXml</title>
  <meta name="description" content="C++ PtrsToXml"/>
  <meta name="keywords" content="C++ PtrsToXml "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPtrsToXml.htm">PtrsToXml</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppPtrsToXml-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.10 (saucy)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.7.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppPtrsToXml/CppPtrsToXml.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPtrsToXml/CppPtrsToXml.pro" border = "1"><tr><td><code>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
<br/>
#<br/>
#<br/>
# Type of compile<br/>
#<br/>
#<br/>
<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
&nbsp;&nbsp;<a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
}<br/>
<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
<br/>
unix {<br/>
&nbsp;&nbsp;<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
}<br/>
<br/>
#<br/>
#<br/>
# Boost<br/>
#<br/>
#<br/>
<br/>
win32 {<br/>
&nbsp;&nbsp;<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPtrsToXml/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPtrsToXml/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a <a href="CppStdString.htm">std::string</a> to single-line <a href="CppXml.htm">XML</a><br/>
<a href="CppComment.htm">///</a>For example, a <a href="CppStdString.htm">std::string</a> with tag name "cat_name" and content "Kitty" becomes<br/>
/<a href="CppComment.htm">//</a> &lt;cat_name&gt;Kitty&lt;/cat_name&gt;<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with <a href="CppXml.htm">Xml</a>ToStr<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> StrTo<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tag_name,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; content)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;"&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> tag_name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> content <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&lt;/" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> tag_name <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&gt;";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No test here, as StrTo<a href="CppXml.htm">Xml</a> is used in testing <a href="CppXml.htm">Xml</a>ToStr<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a single-line <a href="CppXml.htm">XML</a> to its content and its tag name<br/>
<a href="CppComment.htm">///</a>For example, the <a href="CppXml.htm">XML</a> line "&lt;cat_name&gt;Kitty&lt;/cat_name&gt;"<br/>
<a href="CppComment.htm">///</a>becomes a <a href="CppStdPair.htm">std::pair</a> with elements {"cat_name","Kitty"}<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with StrTo<a href="CppXml.htm">Xml</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>&gt; <a href="CppXml.htm">Xml</a>ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[s.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> tag_name_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_name <a href="CppOperatorAssign.htm">=</a> s.substr(1,tag_name_sz);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.find_last_of('/') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> content_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.find_last_of('/')) <a href="CppOperatorMinus.htm">-</a> tag_name_sz <a href="CppOperatorMinus.htm">-</a> 3;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> content <a href="CppOperatorAssign.htm">=</a> s.substr(tag_name.size() <a href="CppOperatorPlus.htm">+</a> 2,content_sz);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdString.htm">std::string</a>&gt; p { tag_name, content };<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(StrTo<a href="CppXml.htm">Xml</a>(p.first,p.second) <a href="CppOperatorEqual.htm">==</a> s);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a <a href="CppContainer.htm">container</a> of <a href="CppPointer.htm">pointer</a>s to single-line <a href="CppXml.htm">XML</a><br/>
<a href="CppComment.htm">///</a>For example, a <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a><br/>
<a href="CppComment.htm">///</a>dynamically allocated <a href="CppStdString.htm">std::string</a>s {"cat","dog"} and tag name "animals" becomes<br/>
/<a href="CppComment.htm">//</a> &lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;<br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with <a href="CppXml.htm">Xml</a>ToPtrs<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Iter&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> PtrsTo<a href="CppXml.htm">Xml</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tag_name,<br/>
&nbsp;&nbsp;Iter begin,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Iter&amp; end<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; begin<a href="CppOperatorNotEqual.htm">!=</a>end; <a href="CppOperatorIncrement.htm">++</a>begin)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> index_tag_name <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> index_content&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;( *(*begin) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> StrTo<a href="CppXml.htm">Xml</a>(index_tag_name,index_content);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> content <a href="CppOperatorAssign.htm">=</a> s.str();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>No test here, as <b><a href="CppThis.htm">this</a></b> <a href="CppFunction.htm">function</a> is used in <a href="CppXml.htm">Xml</a>ToPtrs<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> StrTo<a href="CppXml.htm">Xml</a>(tag_name,content);<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppConvert.htm">Convert</a> a single-line <a href="CppXml.htm">XML</a> to a <a href="CppStdVector.htm">std::vector</a> of <a href="CppSmartPointer.htm">smart pointer</a>s and its name<br/>
<a href="CppComment.htm">///</a>For example, the <a href="CppXml.htm">XML</a> line "&lt;animals&gt;&lt;0&gt;cat&lt;/0&gt;&lt;1&gt;dog&lt;/1&gt;&lt;/animals&gt;"<br/>
<a href="CppComment.htm">///</a>becomes a <a href="CppStdVector.htm">std::vector</a> of <a href="CppSmartPointer.htm">smart pointer</a>s of dynamically allocated strings<br/>
<a href="CppComment.htm">///</a>with values {"cat","dog"} and the tag name "animals"<br/>
<a href="CppComment.htm">///</a>The conversion from <a href="CppStdString.htm">std::string</a> to <a href="CppSmartPointer.htm">smart pointer</a> needs to be supplied, <b><a href="CppFor.htm">for</a></b> example<br/>
<a href="CppComment.htm">///</a>a conversion from string to a <a href="CppSmartPointer.htm">smart pointer</a> of a dynamically allocated string:<br/>
<a href="CppComment.htm">///</a><br/>
/<a href="CppComment.htm">//</a> <b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; str_to_ptr_function {<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; [](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; {<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>(s));<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp; }<br/>
/<a href="CppComment.htm">//</a> };<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>The data can be <a href="CppConvert.htm">convert</a>ed back with PtrsTo<a href="CppXml.htm">Xml</a><br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T<a href="CppOperatorStreamIn.htm">&gt;&gt;</a><br/>
&nbsp;&nbsp;&gt;<br/>
&nbsp;&nbsp;<a href="CppXml.htm">Xml</a>ToPtrs(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; str_to_ptr_function<br/>
&nbsp;&nbsp;)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[s.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the name tag<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&lt;name&gt;...&lt;/name&gt;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> name_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> name <a href="CppOperatorAssign.htm">=</a> s.substr(1,name_sz);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove the name tags<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(name_sz <a href="CppOperatorPlus.htm">+</a> 2,s.size() <a href="CppOperatorMinus.htm">-</a> (2 * name_sz) <a href="CppOperatorMinus.htm">-</a> 5);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; !t.empty(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read the index tags and item<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&lt;index&gt;item&lt;/index&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t[0] <a href="CppOperatorEqual.htm">==</a> '&lt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t[t.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorEqual.htm">==</a> '&gt;');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.find('&gt;') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.find('&gt;')) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> index <a href="CppOperatorAssign.htm">=</a> t.substr(1,index_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.find('/') <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppStdString.htm">std::string</a>::npos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> item_sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.find('/')) <a href="CppOperatorMinus.htm">-</a> index_sz <a href="CppOperatorMinus.htm">-</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> item_str <a href="CppOperatorAssign.htm">=</a> t.substr(index.size() <a href="CppOperatorPlus.htm">+</a> 2,item_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> total_sz <a href="CppOperatorAssign.htm">=</a> (2 * index_sz) <a href="CppOperatorPlus.htm">+</a> item_sz <a href="CppOperatorPlus.htm">+</a> 5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;t <a href="CppOperatorAssign.htm">=</a> t.substr(total_sz,t.size() <a href="CppOperatorMinus.htm">-</a> total_sz);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;T&gt; item { str_to_ptr_function(item_str) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(item);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(PtrsTo<a href="CppXml.htm">Xml</a>(name,v.begin(),v.end()) <a href="CppOperatorEqual.htm">==</a> s);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(name,v);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use <b><a href="CppInt.htm">int</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create data consisting of <a href="CppPointer.htm">pointer</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; p { <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>(1) }; v.push_back(p); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; p { <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>(4) }; v.push_back(p); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; p { <b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>(9) }; v.push_back(p); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_name <a href="CppOperatorAssign.htm">=</a> "<a href="CppInt.htm">integer</a>s";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppPointer.htm">pointer</a>s to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> xml <a href="CppOperatorAssign.htm">=</a> PtrsTo<a href="CppXml.htm">Xml</a>(tag_name,v.begin(),v.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppXml.htm">XML</a> back to <a href="CppPointer.htm">pointer</a>s again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; str_to_ptr_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <b><a href="CppInt.htm">int</a></b>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppXml.htm">Xml</a>ToPtrs(xml,str_to_ptr_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.first <a href="CppOperatorEqual.htm">==</a> tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.second.size() <a href="CppOperatorEqual.htm">==</a> v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEqual.htm">std::equal</a>(v.begin(),v.end(),p.second.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; a, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *a <a href="CppOperatorEqual.htm">==</a> *b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Again <a href="CppConvert.htm">convert</a> <a href="CppPointer.htm">pointer</a>s to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> PtrsTo<a href="CppXml.htm">Xml</a>(p.first,p.second.begin(),p.second.end()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use <a href="CppStdString.htm">std::string</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create data consisting of <a href="CppPointer.htm">pointer</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; &gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; p { <b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>("cats") }; v.push_back(p); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; p { <b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>("dogs") }; v.push_back(p); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; p { <b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>("cows") }; v.push_back(p); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tag_name <a href="CppOperatorAssign.htm">=</a> "animals";<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppPointer.htm">pointer</a>s to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> xml <a href="CppOperatorAssign.htm">=</a> PtrsTo<a href="CppXml.htm">Xml</a>(tag_name,v.begin(),v.end());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> <a href="CppXml.htm">XML</a> back to <a href="CppPointer.htm">pointer</a>s again<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdFunction.htm">std::function</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp;)&gt; str_to_ptr_function {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(<b><a href="CppNew.htm">new</a></b> <a href="CppStdString.htm">std::string</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppXml.htm">Xml</a>ToPtrs(xml,str_to_ptr_function)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.first <a href="CppOperatorEqual.htm">==</a> tag_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.second.size() <a href="CppOperatorEqual.htm">==</a> v.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEqual.htm">std::equal</a>(v.begin(),v.end(),p.second.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; a, <b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; b)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *a <a href="CppOperatorEqual.htm">==</a> *b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Again <a href="CppConvert.htm">convert</a> <a href="CppPointer.htm">pointer</a>s to <a href="CppXml.htm">XML</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> PtrsTo<a href="CppXml.htm">Xml</a>(p.first,p.second.begin(),p.second.end()) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a> Screen output:<br/>
<br/>
&lt;<a href="CppInt.htm">integer</a>s&gt;&lt;0&gt;1&lt;/0&gt;&lt;1&gt;4&lt;/1&gt;&lt;2&gt;9&lt;/2&gt;&lt;/<a href="CppInt.htm">integer</a>s&gt;<br/>
&lt;animals&gt;&lt;0&gt;cats&lt;/0&gt;&lt;1&gt;dogs&lt;/1&gt;&lt;2&gt;cows&lt;/2&gt;&lt;/animals&gt;<br/>
Press &lt;RETURN&gt; to close <b><a href="CppThis.htm">this</a></b> window...<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
