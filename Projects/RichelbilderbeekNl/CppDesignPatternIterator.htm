<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Design Pattern: Iterator</title>
  <meta name="description" content="C++ Iterator"/>
  <meta name="keywords" content="C++ Iterator design pattern code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppDesignPatternIterator.htm">Iterator</a> (<a href="CppDesignPattern.htm">Design Pattern</a>)</h1>
<p>&nbsp;</p>
<p>The <a href="CppDesignPatternIterator.htm">Iterator</a> is a <a href="CppDesignPattern.htm">Design Pattern</a> to 
'provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation' [1]</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example: IntVectorIterator</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppDesignPatternIteratorIntVectorIterator.htm">IntVectorIterator</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 11.04 (natty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.5.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.5.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppDesignPatternIterator.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by <a href="CppQtCreator.htm">QtCreator</a> 2011-06-01T06:16:13<br/>
#<br/>
#-------------------------------------------------<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
TARGET = <a href="CppDesignPattern.htm">CppDesignPattern</a>Iterator<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;intvectoriterator.cpp<br/>
HEADERS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;intvectoriterator.h<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>intvectoriterator.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "intvector<a href="CppIterator.htm">iterator</a>.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/IntVector<a href="CppIterator.htm">Iterator</a> is initialized by ranges<br/>
IntVector<a href="CppIterator.htm">Iterator</a>::IntVector<a href="CppIterator.htm">Iterator</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;IntRange&gt;&amp; ranges)<br/>
&nbsp;&nbsp;: m_ranges(ranges)<br/>
{<br/>
&nbsp;&nbsp;First();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/Set the IntVector<a href="CppIterator.htm">Iterator</a> back to the first element.<br/>
<b><a href="CppVoid.htm">void</a></b> IntVector<a href="CppIterator.htm">Iterator</a>::First()<br/>
{<br/>
&nbsp;&nbsp;m_current_range <a href="CppOperatorAssign.htm">=</a> m_ranges.begin();<br/>
&nbsp;&nbsp;m_current_int <a href="CppOperatorAssign.htm">=</a> m_current_range-&gt;first;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/Go to the next element.<br/>
<b><a href="CppVoid.htm">void</a></b> IntVector<a href="CppIterator.htm">Iterator</a>::Next()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!IsDone());<br/>
<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_current_int;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_current_int <a href="CppOperatorEqual.htm">==</a> m_current_range-&gt;second)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_current_range;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_current_range <a href="CppOperatorNotEqual.htm">!=</a> m_ranges.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_current_int <a href="CppOperatorAssign.htm">=</a> m_current_range-&gt;first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> there are still elements left to <a href="CppIterator.htm">iterator</a> over.<br/>
<b><a href="CppBool.htm">bool</a></b> IntVector<a href="CppIterator.htm">Iterator</a>::IsDone() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_current_range <a href="CppOperatorEqual.htm">==</a> m_ranges.end();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/Get the current item<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a> IntVector<a href="CppIterator.htm">Iterator</a>::CurrentItem() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_current_int;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>intvectoriterator.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> INTVECTORITERATOR_H<br/>
<a href="CppDefine.htm">#define</a> INTVECTORITERATOR_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/IntVector<a href="CppIterator.htm">Iterator</a> <a href="CppIterator.htm">iterates</a> over multiple <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;s<br/>
<a href="CppComment.htm">//</a>/<br/>
<a href="CppComment.htm">//</a>/\note<br/>
<a href="CppComment.htm">//</a>/This <a href="CppIterator.htm">Iterator</a> <a href="CppDesignPattern.htm">Design Pattern</a> is very limited in usability,<br/>
<a href="CppComment.htm">//</a>/as it can only <a href="CppIterator.htm">iterate</a> over <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;s.<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppDesignPattern.htm">CppDesignPattern</a><a href="CppIterator.htm">Iterator</a>.htm<br/>
<b><a href="CppStruct.htm">struct</a></b> IntVector<a href="CppIterator.htm">Iterator</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Define an IntRange as a <a href="CppPair.htm">std::pair</a> containing the begin and end of a <a href="CppVector.htm">std::vector</a>.<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppPair.htm">std::pair</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a>,<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a>&gt; IntRange;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/IntVector<a href="CppIterator.htm">Iterator</a> is initialized by ranges<br/>
&nbsp;&nbsp;IntVector<a href="CppIterator.htm">Iterator</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;IntRange&gt;&amp; ranges);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the IntVector<a href="CppIterator.htm">Iterator</a> back to the first element.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> First();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Go to the next element.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Next();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> there are still elements left to <a href="CppIterator.htm">iterator</a> over.<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the current item<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a> CurrentItem() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The ranges <a href="CppIterator.htm">iterate</a>d over<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;IntRange&gt; m_ranges;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current range iterating over<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;IntRange&gt;::<a href="CppIterator.htm">iterator</a> m_current_range;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The current position in the current range<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a> m_current_int;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> INTVECTORITERATOR_H<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "intvector<a href="CppIterator.htm">iterator</a>.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the <a href="CppVector.htm">std::vector</a>s<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v1;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v2;<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v3;<br/>
&nbsp;&nbsp;v1.push_back(1);<br/>
&nbsp;&nbsp;v1.push_back(2);<br/>
&nbsp;&nbsp;v1.push_back(3);<br/>
&nbsp;&nbsp;v2.push_back(4);<br/>
&nbsp;&nbsp;v2.push_back(5);<br/>
&nbsp;&nbsp;v2.push_back(6);<br/>
&nbsp;&nbsp;v3.push_back(7);<br/>
&nbsp;&nbsp;v3.push_back(8);<br/>
&nbsp;&nbsp;v3.push_back(9);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the ranges<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a>,<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;::<a href="CppIterator.htm">iterator</a>&gt; &gt; ranges;<br/>
&nbsp;&nbsp;ranges.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(v1.begin(),v1.end()));<br/>
&nbsp;&nbsp;ranges.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(v2.begin(),v2.end()));<br/>
&nbsp;&nbsp;ranges.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(v3.begin(),v3.end()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the IntVector<a href="CppIterator.htm">Iterator</a><br/>
&nbsp;&nbsp;IntVector<a href="CppIterator.htm">Iterator</a> i(ranges);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppIterator.htm">Iterator</a> through the <a href="CppVector.htm">std::vector</a>s<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!i.IsDone())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *i.CurrentItem() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i.Next();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppErichGamma.htm">Erich Gamma</a>, <a href="CppRichardHelm.htm">Richard Helm</a>, <a href="CppRalphJohnson.htm">Ralph Johnson</a>, <a href="CppJohnVlissides.htm">John Vlissides</a>. Design Patterns. 1995. ISBN: 0201633612.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>






