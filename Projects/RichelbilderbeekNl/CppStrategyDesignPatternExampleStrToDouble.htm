<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Strategy Design Pattern Example: StrToDouble</title>
  <meta name="description" content="C++ Strategy Design Pattern Example: StrToDouble"/>
  <meta name="keywords" content="C++ Strategy Design Pattern Example StrToDouble String To Double Qt Creator code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStrategyDesignPatternExampleStrToDouble.htm">Strategy Design Pattern Example: StrToDouble</a></h1>
<p>&nbsp;</p>
<p><a href="CppStrategyDesignPatternExampleStrToDouble.htm">Strategy Design Pattern Example: StrToDouble</a> is an example of a
<a href="CppDesignPatternStrategy.htm">Strategy</a> <a href="CppDesignPattern.htm">Design Pattern</a>.</p>
<p>&nbsp;</p>
<p>You can convert this to a <a href="CppCtStrategyDesignPattern.htm">compile-time Strategy Design Pattern</a>, for example
to <a href="CppCtStrategyDesignPattern.htm">compile-time Strategy Design Pattern example: StrToDouble</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppStrategyDesignPatternExampleStrToDouble.zip">Download the Qt Creator project 'CppStrategyDesignPatternExampleStrToDouble' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppStrategy Design Pattern Example: StrToDouble.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppStrategy Design Pattern Example: StrToDouble.pro" border = "1"><tr><td><code>
TEMPLATE = app<br/>
CONFIG += console<br/>
CONFIG -= qt<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppShared_ptr.htm">shared_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>A Strategy <a href="CppDesignPattern.htm">Design Pattern</a><br/>
<b><a href="CppStruct.htm">struct</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Strategy<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> Str<a href="CppToDouble.htm">ToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Str<a href="CppToDouble.htm">ToDouble</a>Strategy() {}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Str<a href="CppToDouble.htm">ToDouble</a>StrategyStl : <b><a href="CppPublic.htm">public</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Strategy<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> Str<a href="CppToDouble.htm">ToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAtof.htm">std::atof</a>(s.c_str());<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Strategy<a href="CppBoost.htm">Boost</a> : <b><a href="CppPublic.htm">public</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Strategy<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> Str<a href="CppToDouble.htm">ToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(s);<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Str<a href="CppToDouble.htm">ToDouble</a>StrategyCpp11 : <b><a href="CppPublic.htm">public</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Strategy<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> Str<a href="CppToDouble.htm">ToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStd.htm">std</a>::stof(s);<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppConvert.htm">Convert</a>er<br/>
{<br/>
&nbsp;&nbsp;<a href="CppConvert.htm">Convert</a>er(<b><a href="CppConst.htm">const</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Strategy * strategy)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_strategy(strategy)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_strategy);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> Str<a href="CppToDouble.htm">ToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_strategy-&gt;Str<a href="CppToDouble.htm">ToDouble</a>(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Strategy&gt; m_strategy;<br/>
};<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppConvert.htm">Convert</a>er a(<b><a href="CppNew.htm">new</a></b> Str<a href="CppToDouble.htm">ToDouble</a>StrategyStl);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppConvert.htm">Convert</a>er b(<b><a href="CppNew.htm">new</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Strategy<a href="CppBoost.htm">Boost</a>);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppConvert.htm">Convert</a>er c(<b><a href="CppNew.htm">new</a></b> Str<a href="CppToDouble.htm">ToDouble</a>StrategyCpp11);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppAbs.htm">std::abs</a>(12.34 <a href="CppOperatorMinus.htm">-</a> a.Str<a href="CppToDouble.htm">ToDouble</a>("12.34")) &lt; 0.000001);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppAbs.htm">std::abs</a>(12.34 <a href="CppOperatorMinus.htm">-</a> b.Str<a href="CppToDouble.htm">ToDouble</a>("12.34")) &lt; 0.000001);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppAbs.htm">std::abs</a>(12.34 <a href="CppOperatorMinus.htm">-</a> c.Str<a href="CppToDouble.htm">ToDouble</a>("12.34")) &lt; 0.000001);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
