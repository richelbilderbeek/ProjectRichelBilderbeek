<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>BoostUnitsExample10</title>
  <meta name="description" content="C++ BoostUnitsExample10"/>
  <meta name="keywords" content="C++ BoostUnitsExample10 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBoostUnitsExample10.htm">BoostUnitsExample10</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.636 at Sun Apr 27 13:03:18 2014
 -->
<p>
  <img src="PicCpp98.png" alt="Cpp98"/><img src="PicBoost.png" alt="Boost"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicWindows.png" alt="Windows"/>
</p>
<p>&nbsp;</p>
<p>
  <a href="CppBoostUnitsExample10.htm">Boost.Units example 10: calculating angular acceleration and torque</a>
  is a <a href="CppBoostUnits.htm">Boost.Units</a> example.
</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppBoostUnitsExample10.zip">Download the Qt Creator project 'CppBoostUnitsExample10' (zip)</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 14.04 (trusty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppBoostUnitsExample10/CppBoostUnitsExample10.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostUnitsExample10/CppBoostUnitsExample10.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri) #Or use the code below<br/>
# QT += core<br/>
# QT += gui<br/>
# greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
# <a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
#&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
# }<br/>
# <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
# unix {<br/>
#&nbsp;&nbsp; <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
# }<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri) #Or use the code below<br/>
# win32 {<br/>
#&nbsp;&nbsp; <a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
# }<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBoostUnitsExample10/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostUnitsExample10/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIomanipH.htm">iomanip</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/mass.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/mass_density.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/volume.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/io.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQuestion.htm">Question</a>: what will be the increase in angular velocity<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppIf.htm">if</a></b> three Newton is applied at a distance of 2 meter<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> 5 seconds to an object with angular momentum of 7 kg*m*m/rad/sec<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppIncrease.htm">Increase</a> readability<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::angular_acceleration;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::angular_momentum;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::angular_velocity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::force;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::joule;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::kilogram;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::length;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::newton;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::newton_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::radian;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::<a href="CppTime.htm">time</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::second;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::torque;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> quantity&lt;angular_acceleration&gt; AngularAcceleration;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> quantity&lt;angular_momentum&gt; AngularMomentum;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> quantity&lt;angular_velocity&gt; AngularVelocity;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> quantity&lt;force&gt; Force;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> quantity&lt;length&gt; Length;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> quantity&lt;torque&gt; Torque;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> quantity&lt;<a href="CppTime.htm">time</a>&gt; <a href="CppTime.htm">Time</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the torque (also known as 'moment' or 'moment of force')<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> 3.0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Length my_ray(r * meter);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Force my_force(f * newton);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Torque my_torque(my_ray * my_force * joule <a href="CppOperatorDivide.htm">/</a> radian <a href="CppOperatorDivide.htm">/</a> meter <a href="CppOperatorDivide.htm">/</a> newton);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Torque <a href="CppOperatorAssign.htm">=</a> distance * force\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "tau <a href="CppOperatorAssign.htm">=</a> r * F\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "tau: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> my_torque <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "r: "&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> my_ray&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "F: "&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> my_force&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> calculating the force from the plain <b><a href="CppDouble.htm">double</a></b>s is identical<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Torque my_torque_expected(r * f * joule <a href="CppOperatorDivide.htm">/</a> radian);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_torque <a href="CppOperatorEqual.htm">==</a> my_torque_expected);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the angular acceleration<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AngularMomentum am(7.0 * kilogram * meter * meter <a href="CppOperatorDivide.htm">/</a> radian <a href="CppOperatorDivide.htm">/</a> second);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AngularAcceleration aa((my_torque <a href="CppOperatorDivide.htm">/</a> am) * radian * meter * meter * kilogram <a href="CppOperatorDivide.htm">/</a> second <a href="CppOperatorDivide.htm">/</a> second <a href="CppOperatorDivide.htm">/</a> second <a href="CppOperatorDivide.htm">/</a> joule); <a href="CppComment.htm">//</a>rad/s/s<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Angular acceleration <a href="CppOperatorAssign.htm">=</a> torque <a href="CppOperatorDivide.htm">/</a> angular momentum\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "alpha <a href="CppOperatorAssign.htm">=</a> tau * I\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "alpha: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> aa <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "tau: "&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> my_torque&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "I: "&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> am&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> t(5.0 * second);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> AngularVelocity av(aa * t);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Angular velocity <a href="CppOperatorAssign.htm">=</a> angular acceleration * <a href="CppTime.htm">time</a>\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "omega <a href="CppOperatorAssign.htm">=</a> alpha * t\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "omega: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> av <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "alpha: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> aa <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "t: "&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a> Screen output:<br/>
<br/>
Torque <a href="CppOperatorAssign.htm">=</a> distance * force<br/>
tau <a href="CppOperatorAssign.htm">=</a> r * F<br/>
tau: 6 m^2 kg s^-2 rad^-1<br/>
r: 2 m<br/>
F: 3 N<br/>
<br/>
Angular acceleration <a href="CppOperatorAssign.htm">=</a> torque <a href="CppOperatorDivide.htm">/</a> angular momentum<br/>
alpha <a href="CppOperatorAssign.htm">=</a> tau * I<br/>
alpha: 0.857143 s^-2 rad<br/>
tau: 6 m^2 kg s^-2 rad^-1<br/>
I: 7 m^2 kg s^-1 rad^-1<br/>
<br/>
Angular velocity <a href="CppOperatorAssign.htm">=</a> angular acceleration * <a href="CppTime.htm">time</a><br/>
omega <a href="CppOperatorAssign.htm">=</a> alpha * t<br/>
omega: 4.28571 s^-1 rad<br/>
alpha: 0.857143 s^-2 rad<br/>
t: 5 s<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
