<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>ImageToStringList</title>
  <meta name="description" content="C++ ImageToStringList"/>
  <meta name="keywords" content="C++ ImageToStringList TImage Image to 2 StringList TStringList ascii code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppImageToStringList.htm">ImageToStringList</a></h1>
<p>&nbsp;</p>
<p><a href="CppImageToStringList.htm">ImageToStringList</a> is a <a href="CppVclGraphics.htm">VCL graphics</a> <a href="CppCodeSnippets.htm">code snippet</a> for the convertion of a bitmap to an ASCII-art image, in which the bitmap is stored in a <a href="CppClx.htm">CLX</a> or <a href="CppVcl.htm">VCL</a> TImage respecively.</p>
<p>&nbsp;</p>
<p>Note how I love using <a href="CppAssert.htm">assert</a> to prevent any trivial error. It also saves me many questions from students.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppClx.htm">CLX</a></h2>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Classes.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Creates a <a href="CppVector.htm">std::vector</a> that holds the ASCII art <b><a href="CppChar.htm">char</a></b>acters<br/>
<a href="CppComment.htm">//</a>ordered from dark to light <br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; GetChars()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <b><a href="CppChar.htm">char</a></b>s;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('M');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('N');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('m');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('d');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('h');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('y');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('s');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('o');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('+');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('/');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back(':');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('-');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('.');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('`');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back(' ');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppChar.htm">char</a></b>s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Generalizes a rectangle to one grey value<br/>
<b><a href="CppDouble.htm">double</a></b> GetFractionGrey(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a>* <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf32bit);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 &lt;  image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y1 &lt;  image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x2 <a href="CppOperatorLessEqual.htm">&lt;=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y2 <a href="CppOperatorLessEqual.htm">&lt;=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sumGrey <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nPixels <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=y1; y<a href="CppOperatorNotEqual.htm">!=</a>y2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=x1; x<a href="CppOperatorNotEqual.htm">!=</a>x2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Note that in the line below, line[x*4+3] is not used.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>I guess that <b><a href="CppThis.htm">this</a></b> is the alpha-blending value?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sumPixel <a href="CppOperatorAssign.htm">=</a> line[x*4+0] <a href="CppOperatorPlus.htm">+</a> line[x*4+1] <a href="CppOperatorPlus.htm">+</a> line[x*4+2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( sumPixel &lt; 3 * 256 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> grey<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sumPixel)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> (3.0 * 255.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumGrey<a href="CppOperatorPlusAssign.htm">+=</a>grey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>nPixels;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>


&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nPixels <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>When the value is trivial, <b><a href="CppReturn.htm">return</a></b> a random value...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Will not occur when nChars <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRand.htm">std::rand</a>()%256;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fractionGrey <a href="CppOperatorAssign.htm">=</a> sumGrey <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nPixels);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> fractionGrey;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
TStringList * ImageToAscii(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a>* <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <b><a href="CppChar.htm">char</a></b>Width) <a href="CppComment.htm">//</a>How many <b><a href="CppChar.htm">char</a></b>s the ASCII image will be wide<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <b><a href="CppChar.htm">char</a></b>s(GetChars());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the number of <b><a href="CppChar.htm">char</a></b>s is below 5,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the calculation would be more complicated due to a too trivial value<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppChar.htm">char</a></b>Width <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 5);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the bitmap<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf32bit);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Maxy is in proportion with the bitmap<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>Width)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Width))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppChar.htm">char</a></b>Width &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxy &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Width)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>Width);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Height)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(maxy);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dY &gt; 0.0);<br/>
<br/>
&nbsp;&nbsp;TStringList * stringList <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> TStringList;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;String myLine <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a><b><a href="CppChar.htm">char</a></b>Width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x) * dX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Width  <a href="CppOperatorMinus.htm">-</a> 1.0) <a href="CppOperatorPlus.htm">+</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y) * dY,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1.0) <a href="CppOperatorPlus.htm">+</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x) * dX) <a href="CppOperatorPlus.htm">+</a> dX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Width  <a href="CppOperatorMinus.htm">-</a> 1.0) <a href="CppOperatorPlus.htm">+</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2 <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y) * dY) <a href="CppOperatorPlus.htm">+</a> dY,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1.0) <a href="CppOperatorPlus.htm">+</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x2 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y1 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y2 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fGrey <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<a href="CppMax.htm">std::max</a>(0.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetFractionGrey(image,x1,y1,x2,y2)),1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fGrey <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fGrey <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppChar.htm">char</a></b>Index <a href="CppOperatorAssign.htm">=</a> fGrey<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppChar.htm">char</a></b>Index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppChar.htm">char</a></b>Index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> <b><a href="CppThis.htm">this</a></b>Char <a href="CppOperatorAssign.htm">=</a> <b><a href="CppChar.htm">char</a></b>s[<b><a href="CppChar.htm">char</a></b>Index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine<a href="CppOperatorPlusAssign.htm">+=</a><b><a href="CppThis.htm">this</a></b>Char;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(myLine);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> stringList;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::Button1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; ascii(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageToAscii(Image1,Image1-&gt;Picture-&gt;Bitmap-&gt;Width));<br/>
&nbsp;&nbsp;Memo1-&gt;Lines <a href="CppOperatorAssign.htm">=</a> ascii.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppVcl.htm">VCL</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Classes.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Creates a <a href="CppVector.htm">std::vector</a> that holds the ASCII art <b><a href="CppChar.htm">char</a></b>acters<br/>
<a href="CppComment.htm">//</a>ordered from dark to light <br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; GetChars()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <b><a href="CppChar.htm">char</a></b>s;<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('M');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('N');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('m');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('d');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('h');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('y');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('s');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('o');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('+');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('/');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back(':');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('-');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('.');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back('`');<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b>s.push_back(' ');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppChar.htm">char</a></b>s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Generalizes a rectangle to one average greyness<br/>
<b><a href="CppDouble.htm">double</a></b> GetFractionGrey(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a>* <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 &lt;  image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y1 &lt;  image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x2 <a href="CppOperatorLessEqual.htm">&lt;=</a> image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y2 <a href="CppOperatorLessEqual.htm">&lt;=</a> image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sumGrey <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nPixels <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=y1; y<a href="CppOperatorNotEqual.htm">!=</a>y2; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=x1; x<a href="CppOperatorNotEqual.htm">!=</a>x2; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sumPixel <a href="CppOperatorAssign.htm">=</a> line[x*3+0] <a href="CppOperatorPlus.htm">+</a> line[x*3+1] <a href="CppOperatorPlus.htm">+</a> line[x*3+2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( sumPixel &lt; 3 * 256 );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> grey <a href="CppOperatorAssign.htm">=</a> <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sumPixel) <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> (3.0 * 255.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumGrey<a href="CppOperatorPlusAssign.htm">+=</a>grey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>nPixels;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nPixels <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>When the value is trivial, <b><a href="CppReturn.htm">return</a></b> a random value...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Will not occur when nChars <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRand.htm">std::rand</a>()%256;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fractionGrey <a href="CppOperatorAssign.htm">=</a> sumGrey <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(nPixels);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> fractionGrey;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
TStringList * ImageToAscii(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a>* <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <b><a href="CppChar.htm">char</a></b>Width) <a href="CppComment.htm">//</a>How many <b><a href="CppChar.htm">char</a></b>s the ASCII image will be wide<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; <b><a href="CppChar.htm">char</a></b>s(GetChars());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the number of <b><a href="CppChar.htm">char</a></b>s is below 5,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the calculation would be more complicated due to a too trivial value<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppChar.htm">char</a></b>Width <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 5);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the bitmap<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap <a href="CppOperatorNotEqual.htm">!=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Maxy is in proportion with the bitmap<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>Width)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Width))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppChar.htm">char</a></b>Width &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxy &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dX <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Width)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>Width);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dY <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(image-&gt;Picture-&gt;Bitmap-&gt;Height)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(maxy);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dX &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dY &gt; 0.0);<br/>
<br/>
<br/>
&nbsp;&nbsp;TStringList * stringList <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> TStringList;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;String myLine <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a><b><a href="CppChar.htm">char</a></b>Width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1 <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x) * dX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Width  <a href="CppOperatorMinus.htm">-</a> 1.0) <a href="CppOperatorPlus.htm">+</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1 <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y) * dY,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1.0) <a href="CppOperatorPlus.htm">+</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2 <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x) * dX) <a href="CppOperatorPlus.htm">+</a> dX,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Width  <a href="CppOperatorMinus.htm">-</a> 1.0) <a href="CppOperatorPlus.htm">+</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2 <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y) * dY) <a href="CppOperatorPlus.htm">+</a> dY,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorMinus.htm">-</a> 1.0) <a href="CppOperatorPlus.htm">+</a> 0.5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y1 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x1 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x2 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y1 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y2 &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fGrey <a href="CppOperatorAssign.htm">=</a> <a href="CppMin.htm">std::min</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMax.htm">std::max</a>(0.0, GetFractionGrey(image,x1,y1,x2,y2)),1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(fGrey <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fGrey <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppChar.htm">char</a></b>Index <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> fGrey * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>s.size() <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppChar.htm">char</a></b>Index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppChar.htm">char</a></b>Index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<b><a href="CppChar.htm">char</a></b>s.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> <b><a href="CppThis.htm">this</a></b>Char <a href="CppOperatorAssign.htm">=</a> <b><a href="CppChar.htm">char</a></b>s[<b><a href="CppChar.htm">char</a></b>Index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLine<a href="CppOperatorPlusAssign.htm">+=</a><b><a href="CppThis.htm">this</a></b>Char;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stringList-&gt;<a href="CppAdd.htm">Add</a>(myLine);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> stringList;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TForm1::Button1Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppAuto_ptr.htm">std::auto_ptr</a>&lt;TStringList&gt; ascii(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageToAscii(Image1,Image1-&gt;Picture-&gt;Bitmap-&gt;Width));<br/>
&nbsp;&nbsp;RichEdit1-&gt;Lines <a href="CppOperatorAssign.htm">=</a> ascii.get();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
