<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GameMaziakVcl</title>
  <meta name="description" content="C++ GameMaziakVcl"/>
  <meta name="keywords" content="C++ GameMaziakVcl "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="GameMaziakVcl.htm">GameMaziakVcl</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.636 at Sat Apr 26 14:33:11 2014
 -->
<p><img src="PicVcl.png" alt="VCL"/><img src="PicCppBuilder.png" alt="C++ Builder"/><img src="PicLubuntu.png" alt="Lubuntu"/></p>
<p>&nbsp;</p>
<p>Maziak is a simple maze retro <a href="Games.htm">game</a> (and a clone of the Sinclair ZX Spectrum/MSX <a href="Games.htm">game</a> Maziak/Maziacs/Mazoggs), in which you have to find a maze's exit. But there are also enemies in the maze that can be beaten by a sword. There are also prisoners, that temporarily show the way to the exit upon freeing them.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Downloads</h2>
<p>&nbsp;</p>
<ol>
  <li>Newer: <a href="GameMaziak.htm">Maziak</a></li>
  <li><a href="GameMaziak_1_3.png">View a screenshot of 'Maziak' (v.1.3)(png)</a></li>
  <li><a href="GameMaziakInstructions_1_3.png">View a screenshot of the 'Maziak' instructions screen (v.1.3)(png)</a></li>
  <li><a href="GameMaziakMenu_1_3.png">View a screenshot of the 'Maziak' menu screen (v.1.3)(png)</a></li>
  <li><a href="GameMaziakSprites_1_4.zip">Download the 'Maziak' (bmp) sprites (v.1.4)(zip)</a></li>
  <li><a href="GameMaziakExe_1_4.zip">Download the 'Maziak' Windows executable (v.1.4)(zip)</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Older downloads</h2>
<p>&nbsp;</p>
<ol>
  <li><a href="GameMaziakSprites_1_3.zip">Download the 'Maziak' (bmp) sprites (v.1.3)(zip)</a></li>
  <li><a href="GameMaziak_1_2.png">View a screenshot of 'Maziak' (v.1.2)(png)</a></li>
  <li><a href="GameMaziakMenu_1_2.png">View a screenshot of the 'Maziak' menu screen (v.1.2)(png)</a></li>
  <li><a href="GameMaziak_1_1.png">View a screenshot of 'Maziak' (v.1.1)(png)</a></li>
  <li><a href="GameMaziakMenu_1_1.png">View a screenshot of the 'Maziak' menu screen (v.1.1)(png)</a></li>
  <li><a href="GameMaziak_1_0.png">View a screenshot of 'Maziak' (v.1.0)(png)</a></li>
  <li><a href="GameMaziakMenu_1_0.png">View a screenshot of the 'Maziak' menu screen (v.1.0)(png)</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://en.wikipedia.org/wiki/Maziacs">View the WikiPedia page on the original Maziacs</a></li>
  <li><a href="http://www.youtube.com/watch?v=MQE3VK1Bdh4">View a YouTube video of the original Maziacs on the Sinclair ZX Spectrum</a></li>
  <li><a href="http://www.classic-retro-games.com/Mazogs-%28and-Maziacs%29_124.html">Another Maziacs PC clone</a></li>
</ul>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/ProjectMaziak.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/ProjectMaziak.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
USEFORM("UnitFormMaziakInstructions<a href="CppImplementationFile.htm">.cpp</a>", FormMaziakInstructions);<br/>
USEFORM("UnitFormMaziakMenu<a href="CppImplementationFile.htm">.cpp</a>", FormMaziakMenu);<br/>
USEFORM("UnitFormMaziakGame<a href="CppImplementationFile.htm">.cpp</a>", FormMaziakGame);<br/>
USEFORM("UnitFormMaziakGameOver<a href="CppImplementationFile.htm">.cpp</a>", FormMaziakGameOver);<br/>
USEFORM("UnitFormMaziakGameWon<a href="CppImplementationFile.htm">.cpp</a>", FormMaziakGameWon);<br/>
USEFORM("UnitFormWhatsNew<a href="CppImplementationFile.htm">.cpp</a>", FormWhatsNew);<br/>
USEFORM("UnitFormMaziak<a href="CppAbout.htm">About</a><a href="CppImplementationFile.htm">.cpp</a>", FormMaziak<a href="CppAbout.htm">About</a>);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, <b><a href="CppInt.htm">int</a></b>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;<a href="CppInitialize.htm">Initialize</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Title <a href="CppOperatorAssign.htm">=</a> "Maziak";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;CreateForm(__classid(TFormMaziakMenu), &amp;FormMaziakMenu);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppThrow.htm">throw</a></b> <a href="CppException.htm">Exception</a>("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">Exception</a> &amp;<a href="CppException.htm">exception</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppApplication.htm">Application</a>-&gt;Show<a href="CppException.htm">Exception</a>(&amp;<a href="CppException.htm">exception</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakAbout.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakAbout.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMaziak<a href="CppAbout.htm">About</a>H<br/>
<a href="CppDefine.htm">#define</a> UnitFormMaziak<a href="CppAbout.htm">About</a>H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMaziak<a href="CppAbout.htm">About</a> : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageRichelBilderbeek;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEditLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTopLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelUrl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelAuthor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelMaziak;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelFrom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *Panel<a href="CppVersion.htm">Version</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TButton *ButtonWhatsNew;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPanel *PanelTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageMaziak;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppVersion.htm">Version</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageAuthor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFrom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTo;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageLicence;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageUrl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonWhatsNewClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormMaziak<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMaziak<a href="CppAbout.htm">About</a> *FormMaziak<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakAbout.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakAbout.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziak<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWhatsNew.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMaziak<a href="CppAbout.htm">About</a> *FormMaziak<a href="CppAbout.htm">About</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMaziak<a href="CppAbout.htm">About</a>::TFormMaziak<a href="CppAbout.htm">About</a>(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziak<a href="CppAbout.htm">About</a>::ButtonWhatsNewClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TFormWhatsNew&gt; f(<b><a href="CppNew.htm">new</a></b> TFormWhatsNew(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakGame.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakGame.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMaziakGameH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMaziakGameH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSetH.htm">set</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppListH.htm">list</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitLocation.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMaziakGame : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerLookDown;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rPressKey;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rEnemy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerLookLeftSword;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageSword;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageExit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePrisoner1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rShowSolution;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEn<a href="CppTrace.htm">trace</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGold;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFightWon1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWon1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFight1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerLookRightSword;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkLeft2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkLeft1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkLeftSword2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkLeftSword1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkDown1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkDown2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkDownSword1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkDownSword2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkUp2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkUp1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkUpSword1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkUpSword2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkRightSword1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkRightSword2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkRight1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWalkRight2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerLookLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerLookRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerLookDownSword;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerLookUp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerLookUpSword;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePrisoner2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFightWon2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFightSword1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFight2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFight3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFight4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFightLost1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageFightLost2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEmpty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageWall;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEnemy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEnemy2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePath;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWon2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormResize(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rPressKey<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyUp(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rEnemy<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rShowSolution<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mX;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mY;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> PlayerDirection { pdLeft, pdRight, pdUp, pdDown };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> PlayerMove { none, left1, left2, right1, right2, up1, up2, down1, down2 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> MazeSquare { msEmpty, msWall, msEnemy1, msEnemy2, msPrisoner1, msPrisoner2, msSword, msExit };<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mViewWidth;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mViewHeight;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mHasSword;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mFighting;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mCheat;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mShowSolution;<br/>
&nbsp;&nbsp;PlayerDirection mDirection;<br/>
&nbsp;&nbsp;PlayerMove mMoveNow;<br/>
&nbsp;&nbsp;<a href="CppStdSet.htm">std::set</a>&lt;WORD&gt; mKeys;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; mSolution;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; mIntMaze;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;MazeSquare&gt; &gt; mMaze;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; mDistances;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawScreen();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetMazeImage(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> GetPlayerImage(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlayerDirection direction,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlayerMove moveNow) <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppCreateMaze.htm">CreateMaze</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Do<a href="CppDebug.htm">Debug</a>F1() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Do<a href="CppDebug.htm">Debug</a>F2() <b><a href="CppConst.htm">const</a></b>;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;__fastcall TFormMaziakGame(T<a href="CppComponent.htm">Component</a>* Owner, <b><a href="CppConst.htm">const</a></b> String mazeSize);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMaziakGame *FormMaziakGame;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Source, <b><a href="CppClass.htm">class</a></b> Target&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Target&gt; &gt; <a href="CppConvert.htm">Convert</a><a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Source&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxy&gt;0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v[0].size());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Target&gt; &gt; t(maxy,<a href="CppStdVector.htm">std::vector</a>&lt;Target&gt;(maxx));<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t[y][x] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;Target&gt;(v[y][x]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> t;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; GetShuffledDeadEnds(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; <b><a href="CppInt.htm">int</a></b>Maze);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; GetShuffledNonDeadEnds(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; <b><a href="CppInt.htm">int</a></b>Maze);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanMoveTo(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TFormMaziakGame::MazeSquare&gt; &gt;&amp; maze,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> hasSword,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> showSolution);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> <a href="CppIsSquare.htm">IsSquare</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.empty()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; &gt;::const_iterator j <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;T&gt; &gt;::const_iterator i <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sz <a href="CppOperatorNotEqual.htm">!=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(i-&gt;size())) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakGame.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakGame.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakGame.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitMazeCreater.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakGameOver.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakGameWon.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMaziakGame *FormMaziakGame;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMaziakGame::TFormMaziakGame(<br/>
&nbsp;&nbsp;T<a href="CppComponent.htm">Component</a>* Owner,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String mazeSize) <a href="CppComment.htm">//</a>Must be String, otherwise <a href="CppCompiler.htm">compiler</a> complains?!?!?<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mHasSword(<b><a href="CppTrue.htm">true</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mFighting(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mCheat(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mViewWidth(9),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mViewHeight(9),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDirection(pdDown),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow(none)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCreateMaze.htm">CreateMaze</a>(mazeSize.<a href="CppToInt.htm">ToInt</a>());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsSquare.htm">IsSquare</a>(mMaze));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsSquare.htm">IsSquare</a>(mIntMaze));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mSolution.empty() <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppIsSquare.htm">IsSquare</a>(mSolution));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsSquare.htm">IsSquare</a>(mDistances));<br/>
&nbsp;&nbsp;OnResize(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMaziakGame::<a href="CppCreateMaze.htm">CreateMaze</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz)<br/>
{<br/>
&nbsp;&nbsp;mIntMaze <a href="CppOperatorAssign.htm">=</a> ::<a href="CppCreateMaze.htm">CreateMaze</a>(sz);<br/>
&nbsp;&nbsp;mMaze <a href="CppOperatorAssign.htm">=</a> <a href="CppConvert.htm">Convert</a><a href="CppMatrix.htm">Matrix</a>&lt;<b><a href="CppInt.htm">int</a></b>,MazeSquare&gt;(mIntMaze);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; deadEnds <a href="CppOperatorAssign.htm">=</a> GetShuffledDeadEnds(mIntMaze);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nDeadEnds <a href="CppOperatorAssign.htm">=</a> deadEnds.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nDeadEnds <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nSwords&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (nDeadEnds <a href="CppOperatorMinus.htm">-</a> 2) <a href="CppOperatorDivide.htm">/</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nPrisoners <a href="CppOperatorAssign.htm">=</a> (nDeadEnds <a href="CppOperatorMinus.htm">-</a> 2) <a href="CppOperatorDivide.htm">/</a> 10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nEnemies&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (nDeadEnds <a href="CppOperatorMinus.htm">-</a> 2) <a href="CppOperatorDivide.htm">/</a> 4;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set a minimum distance <b><a href="CppFor.htm">for</a></b> the player to travel<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(deadEnds[0].first );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(deadEnds[0].second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(deadEnds[1].first );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(deadEnds[1].second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> x1 <a href="CppOperatorMinus.htm">-</a> x2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> y1 <a href="CppOperatorMinus.htm">-</a> y2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minDist <a href="CppOperatorAssign.htm">=</a> 0.75 * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStdSqrt.htm">std::sqrt</a>( (a * a) <a href="CppOperatorPlus.htm">+</a> (b * b) ) &gt; minDist)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(deadEnds[0],deadEnds[<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> nDeadEnds]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(deadEnds[1],deadEnds[<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> nDeadEnds]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mX <a href="CppOperatorAssign.htm">=</a> deadEnds[0].first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mY <a href="CppOperatorAssign.htm">=</a> deadEnds[0].second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mMaze[deadEnds[0].second][deadEnds[0].first] <a href="CppOperatorEqual.htm">==</a> msEmpty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exitX <a href="CppOperatorAssign.htm">=</a> deadEnds[1].first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exitY <a href="CppOperatorAssign.htm">=</a> deadEnds[1].second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mMaze[exitY][exitX] <a href="CppOperatorEqual.htm">==</a> msEmpty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDistances <a href="CppOperatorAssign.htm">=</a> <a href="CppGetMazeDistances.htm">GetMazeDistances</a>(mIntMaze,exitX,exitY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mMaze[deadEnds[1].second][deadEnds[1].first] <a href="CppOperatorAssign.htm">=</a> msExit;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt;::const_iterator deadEnd<a href="CppIterator.htm">Iterator</a> <a href="CppOperatorAssign.htm">=</a> deadEnds.begin() <a href="CppOperatorPlus.htm">+</a> 2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place swords in maze, only in dead ends<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nSwords; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(deadEnd<a href="CppIterator.htm">Iterator</a> <a href="CppOperatorNotEqual.htm">!=</a> deadEnds.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (*deadEnd<a href="CppIterator.htm">Iterator</a>).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (*deadEnd<a href="CppIterator.htm">Iterator</a>).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x<a href="CppOperatorNotEqual.htm">!=</a>mX <a href="CppOperatorLogicalOr.htm">||</a> y<a href="CppOperatorNotEqual.htm">!=</a>mY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mMaze[y][x] <a href="CppOperatorEqual.htm">==</a> msEmpty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msSword;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>deadEnd<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place prisoners in maze, only in dead ends<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nPrisoners; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(deadEnd<a href="CppIterator.htm">Iterator</a> <a href="CppOperatorNotEqual.htm">!=</a> deadEnds.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (*deadEnd<a href="CppIterator.htm">Iterator</a>).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (*deadEnd<a href="CppIterator.htm">Iterator</a>).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x<a href="CppOperatorNotEqual.htm">!=</a>mX <a href="CppOperatorLogicalOr.htm">||</a> y<a href="CppOperatorNotEqual.htm">!=</a>mY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mMaze[y][x] <a href="CppOperatorEqual.htm">==</a> msEmpty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msPrisoner1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>deadEnd<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nEnemies; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(deadEnd<a href="CppIterator.htm">Iterator</a> <a href="CppOperatorNotEqual.htm">!=</a> deadEnds.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (*deadEnd<a href="CppIterator.htm">Iterator</a>).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (*deadEnd<a href="CppIterator.htm">Iterator</a>).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mMaze[y][x] <a href="CppOperatorEqual.htm">==</a> msEmpty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msEnemy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>deadEnd<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Place enemies in nondead ends<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; nonDeadEnds <a href="CppOperatorAssign.htm">=</a> GetShuffledNonDeadEnds(mIntMaze);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt;::const_iterator nonDeadEnd<a href="CppIterator.htm">Iterator</a> <a href="CppOperatorAssign.htm">=</a> nonDeadEnds.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nEnemies; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nonDeadEnd<a href="CppIterator.htm">Iterator</a> <a href="CppOperatorNotEqual.htm">!=</a> nonDeadEnds.end());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (*nonDeadEnd<a href="CppIterator.htm">Iterator</a>).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (*nonDeadEnd<a href="CppIterator.htm">Iterator</a>).second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x<a href="CppOperatorNotEqual.htm">!=</a>mX <a href="CppOperatorLogicalOr.htm">||</a> y<a href="CppOperatorNotEqual.htm">!=</a>mY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mMaze[y][x] <a href="CppOperatorEqual.htm">==</a> msEmpty);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msEnemy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>nonDeadEnd<a href="CppIterator.htm">Iterator</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGame::FormResize(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ClientWidth;<br/>
&nbsp;&nbsp;ImageBuffer-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> ClientHeight;<br/>
<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMaziakGame::DrawScreen()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> block_width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> (ClientWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> mViewWidth );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> block_height <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> (ClientHeight <a href="CppOperatorDivide.htm">/</a> mViewHeight);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mFighting &gt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mFighting;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mFighting <a href="CppOperatorEqual.htm">==</a> 13)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!mHasSword)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Game over<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rPressKey-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rEnemy-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rShowSolution-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TFormMaziakGameOver&gt; f(<b><a href="CppNew.htm">new</a></b> TFormMaziakGameOver(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFighting <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mHasSword <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player-environment interactions<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mMaze[mY][mX])<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msEmpty:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msWall:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Player cannot be in wall");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msEnemy1: <b><a href="CppCase.htm">case</a></b> msEnemy2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mFighting <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[mY][mX] <a href="CppOperatorAssign.htm">=</a> msEmpty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msPrisoner1: <b><a href="CppCase.htm">case</a></b> msPrisoner2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[mY][mX] <a href="CppOperatorAssign.htm">=</a> msEmpty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mSolution <a href="CppOperatorAssign.htm">=</a> <a href="CppGetDistancesPath.htm">GetDistancesPath</a>(mDistances,mX,mY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsSquare.htm">IsSquare</a>(mSolution));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mShowSolution <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rShowSolution-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msSword:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[mY][mX] <a href="CppOperatorAssign.htm">=</a> msEmpty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mHasSword <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msExit:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rPressKey-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rEnemy-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rShowSolution-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TFormMaziakGameWon&gt; f(<b><a href="CppNew.htm">new</a></b> TFormMaziakGameWon(0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;ShowModal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw maze on buffer<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>mViewHeight; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>mViewWidth; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> xVector <a href="CppOperatorAssign.htm">=</a> mX <a href="CppOperatorMinus.htm">-</a> (mViewWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorPlus.htm">+</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> yVector <a href="CppOperatorAssign.htm">=</a> mY <a href="CppOperatorMinus.htm">-</a> (mViewHeight <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorPlus.htm">+</a> y;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TRect r(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(x * block_width )+0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;<a href="CppComment.htm">//</a>Left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(y * block_height)+0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;<a href="CppComment.htm">//</a>Top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(x * block_width )+block_width ,&nbsp;&nbsp;<a href="CppComment.htm">//</a>Right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(y * block_height)+block_height); <a href="CppComment.htm">//</a>Bottom<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clean square with black or golden path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( xVector <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> yVector <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> xVector &lt; sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> yVector &lt; sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (&nbsp;&nbsp;mMaze[yVector][xVector] <a href="CppOperatorEqual.htm">==</a> msEmpty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mMaze[yVector][xVector] <a href="CppOperatorEqual.htm">==</a> msEnemy1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> mMaze[yVector][xVector] <a href="CppOperatorEqual.htm">==</a> msEnemy2) <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mShowSolution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mSolution[yVector][xVector] <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Golden path<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;StretchDraw(r,ImagePath-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;StretchDraw(r,ImageEmpty-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw real image<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * image <a href="CppOperatorAssign.htm">=</a> GetMazeImage(xVector,yVector);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;StretchDraw(r,image-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw player on buffer<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TRect r(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((mViewWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) * block_width )+0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;<a href="CppComment.htm">//</a>Left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((mViewHeight <a href="CppOperatorDivide.htm">/</a> 2) * block_height)+0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;<a href="CppComment.htm">//</a>Top<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((mViewWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) * block_width )+block_width ,&nbsp;&nbsp;<a href="CppComment.htm">//</a>Right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((mViewHeight <a href="CppOperatorDivide.htm">/</a> 2) * block_height)+block_height); <a href="CppComment.htm">//</a>Bottom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> imagePlayer <a href="CppOperatorAssign.htm">=</a> GetPlayerImage(mDirection,mMoveNow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(imagePlayer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;StretchDraw(r,imagePlayer-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw buffer to screen<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Get the <a href="CppTImage.htm">TImage</a> from mMaze at (x,y)<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> TFormMaziakGame::GetMazeImage(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x &lt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> y &lt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ImageWall;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( mMaze[y][x] <a href="CppOperatorEqual.htm">==</a> msEmpty<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mShowSolution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mSolution[y][x] <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ImagePath;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>What <b><a href="CppElse.htm">else</a></b> here?<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(mMaze[y][x])<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msEmpty&nbsp;&nbsp;&nbsp;&nbsp; : <b><a href="CppReturn.htm">return</a></b> ImageEmpty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msWall&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> ImageWall;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msEnemy1&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> ImageEnemy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msEnemy2&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> ImageEnemy2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msPrisoner1 : <b><a href="CppReturn.htm">return</a></b> ImagePrisoner1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msPrisoner2 : <b><a href="CppReturn.htm">return</a></b> ImagePrisoner2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msSword&nbsp;&nbsp;&nbsp;&nbsp; : <b><a href="CppReturn.htm">return</a></b> ImageSword;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msExit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> ImageExit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unexpected MazeSquare at mMaze");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGame::FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mFighting &gt; 0) DrawScreen();<br/>
<br/>
&nbsp;&nbsp;mKeys.insert(Key);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (Key)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_LEFT : mKeys.erase(VK_RIGHT); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_RIGHT: mKeys.erase(VK_LEFT ); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_UP&nbsp;&nbsp; : mKeys.erase(VK_DOWN ); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_DOWN : mKeys.erase(VK_UP&nbsp;&nbsp; ); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_F1&nbsp;&nbsp; : Do<a href="CppDebug.htm">Debug</a>F1(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_F2&nbsp;&nbsp; : Do<a href="CppDebug.htm">Debug</a>F2(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.count(VK_F6)<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mKeys.count(VK_F9)<a href="CppOperatorNotEqual.htm">!=</a>0) mCheat <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGame::FormKeyUp(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;mKeys.erase(Key);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.count(VK_F6)<a href="CppOperatorEqual.htm">==</a>0 <a href="CppOperatorLogicalOr.htm">||</a> mKeys.count(VK_F9)<a href="CppOperatorEqual.htm">==</a>0) mCheat <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGame::<a href="CppTime.htm">Time</a>rPressKey<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mFighting &gt; 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mKeys.empty()) { mMoveNow <a href="CppOperatorAssign.htm">=</a> none; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSet.htm">std::set</a>&lt;WORD&gt;::const_iterator j <a href="CppOperatorAssign.htm">=</a> mKeys.end();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<a href="CppStdSet.htm">std::set</a>&lt;WORD&gt;::const_iterator i <a href="CppOperatorAssign.htm">=</a> mKeys.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the keys pressed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (*i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_LEFT :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDirection <a href="CppOperatorAssign.htm">=</a> pdLeft;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanMoveTo(mMaze,mX-1,mY,mHasSword,mShowSolution))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> none;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> (mMoveNow <a href="CppOperatorEqual.htm">==</a> left1 ? left2 : left1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>mX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_RIGHT:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDirection <a href="CppOperatorAssign.htm">=</a> pdRight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanMoveTo(mMaze,mX+1,mY,mHasSword,mShowSolution))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> none;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> (mMoveNow <a href="CppOperatorEqual.htm">==</a> right1 ? right2 : right1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_UP&nbsp;&nbsp; :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDirection <a href="CppOperatorAssign.htm">=</a> pdUp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanMoveTo(mMaze,mX,mY-1,mHasSword,mShowSolution))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> none;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> (mMoveNow <a href="CppOperatorEqual.htm">==</a> up1 ? up2 : up1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>mY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> VK_DOWN :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mDirection <a href="CppOperatorAssign.htm">=</a> pdDown;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!CanMoveTo(mMaze,mX,mY+1,mHasSword,mShowSolution))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> none;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> (mMoveNow <a href="CppOperatorEqual.htm">==</a> down1 ? down2 : down1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMoveNow <a href="CppOperatorAssign.htm">=</a> none;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the screen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawScreen();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> CanMoveTo(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TFormMaziakGame::MazeSquare&gt; &gt;&amp; maze,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> hasSword,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> showSolution)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bump into edge<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &lt; 0) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(maze.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> maxy) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(maze[y].size())) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TFormMaziakGame::MazeSquare s <a href="CppOperatorAssign.htm">=</a> maze[y][x];<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bump into wall<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> TFormMaziakGame::msWall) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bump into sword<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> TFormMaziakGame::msSword <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> hasSword) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bump into prisoner<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (showSolution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (s <a href="CppOperatorEqual.htm">==</a> TFormMaziakGame::msPrisoner1<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorLogicalOr.htm">||</a> s <a href="CppOperatorEqual.htm">==</a> TFormMaziakGame::msPrisoner2) ) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bump into empty/enemy/exit, so player can move there<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMaziakGame::Do<a href="CppDebug.htm">Debug</a>F1() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sizeVector <a href="CppOperatorAssign.htm">=</a> mMaze.size();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>mViewHeight; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;String <a href="CppDebug.htm">debug</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a><a href="CppOperatorPlusAssign.htm">+=</a>y;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a><a href="CppOperatorPlusAssign.htm">+=</a>':';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>mViewWidth; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> xVector <a href="CppOperatorAssign.htm">=</a> mX <a href="CppOperatorMinus.htm">-</a> (mViewWidth&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorPlus.htm">+</a> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> yVector <a href="CppOperatorAssign.htm">=</a> mY <a href="CppOperatorMinus.htm">-</a> (mViewHeight <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorPlus.htm">+</a> y;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( xVector <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> xVector &lt; sizeVector<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> yVector <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> yVector &lt; sizeVector)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a><a href="CppOperatorPlusAssign.htm">+=</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze[yVector][xVector]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a><a href="CppOperatorPlusAssign.htm">+=</a>'x';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Output<a href="CppDebug.htm">Debug</a>String(<a href="CppDebug.htm">debug</a>.c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> TFormMaziakGame::Do<a href="CppDebug.htm">Debug</a>F2() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain a bitmap of the entire maze<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> mMaze.size();<br/>
&nbsp;&nbsp;Extctrls::<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Extctrls::<a href="CppTImage.htm">TImage</a>(0);<br/>
&nbsp;&nbsp;image-&gt;Picture-&gt;Graphic <a href="CppOperatorAssign.htm">=</a> ImageEmpty-&gt;Picture-&gt;Graphic;<br/>
&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Width <a href="CppOperatorAssign.htm">=</a> sz;<br/>
&nbsp;&nbsp;image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorAssign.htm">=</a> sz;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MazeSquare s <a href="CppOperatorAssign.htm">=</a> mMaze[y][x];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msEmpty&nbsp;&nbsp;&nbsp;&nbsp; : SetPixel(image,x,y,255,255,255); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msWall&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: SetPixel(image,x,y,&nbsp;&nbsp;0,&nbsp;&nbsp;0,&nbsp;&nbsp;0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msEnemy1&nbsp;&nbsp;&nbsp;&nbsp;: SetPixel(image,x,y,&nbsp;&nbsp;0,&nbsp;&nbsp;0,255); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msEnemy2&nbsp;&nbsp;&nbsp;&nbsp;: SetPixel(image,x,y,127,127,255); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msPrisoner1 : SetPixel(image,x,y,&nbsp;&nbsp;0,255,&nbsp;&nbsp;0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msPrisoner2 : SetPixel(image,x,y,127,255,127); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msSword&nbsp;&nbsp;&nbsp;&nbsp; : SetPixel(image,x,y,255,&nbsp;&nbsp;0,&nbsp;&nbsp;0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> msExit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: SetPixel(image,x,y,255,127,127); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player<br/>
&nbsp;&nbsp;SetPixel(image,mX,mY,255,255,&nbsp;&nbsp;0);<br/>
<br/>
&nbsp;&nbsp;image-&gt;Picture-&gt;SaveToFile("<a href="CppDebug.htm">debug</a>.bmp");<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> TFormMaziakGame::GetPlayerImage(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlayerDirection direction,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PlayerMove moveNow) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mFighting)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;0: <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;1: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImageFightSword1 : ImageFight1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;2: <b><a href="CppReturn.htm">return</a></b> ImageFight2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;3: <b><a href="CppReturn.htm">return</a></b> ImageFight3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;4: <b><a href="CppReturn.htm">return</a></b> ImageFight4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;5: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImageFightSword1 : ImageFight1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;6: <b><a href="CppReturn.htm">return</a></b> ImageFight2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;7: <b><a href="CppReturn.htm">return</a></b> ImageFight3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;8: <b><a href="CppReturn.htm">return</a></b> ImageFight4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b>&nbsp;&nbsp;9: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImageFightWon1 : ImageFightLost1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 10: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImageFightWon2 : ImageFightLost2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 11: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImageFightWon1 : ImageFightLost1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 12: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImageFightWon2 : ImageFightLost2);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (direction)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pdUp:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (moveNow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> none: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerLookUpSword : ImagePlayerLookUp);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> up1:&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerWalkUpSword1 : ImagePlayerWalkUp1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> up2:&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerWalkUpSword2 : ImagePlayerWalkUp2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>("!Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unsupported PlayerMove mMoveNow <b><a href="CppFor.htm">for</a></b> mDirection <a href="CppOperatorEqual.htm">==</a> up");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBreak.htm">break</a></b>; Unreachable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pdRight:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (moveNow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> none:&nbsp;&nbsp; <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerLookRightSword : ImagePlayerLookRight);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> right1: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerWalkRightSword1 : ImagePlayerWalkRight1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> right2: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerWalkRightSword2 : ImagePlayerWalkRight2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>("!Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unsupported PlayerMove mMoveNow <b><a href="CppFor.htm">for</a></b> mDirection <a href="CppOperatorEqual.htm">==</a> right");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBreak.htm">break</a></b>; Unreachable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pdDown:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (moveNow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> none:&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerLookDownSword : ImagePlayerLookDown);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> down1: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerWalkDownSword1 : ImagePlayerWalkDown1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> down2: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerWalkDownSword2 : ImagePlayerWalkDown2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>("!Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unsupported PlayerMove mMoveNow <b><a href="CppFor.htm">for</a></b> mDirection <a href="CppOperatorEqual.htm">==</a> down");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBreak.htm">break</a></b>; Unreachable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> pdLeft:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (moveNow)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> none:&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerLookLeftSword : ImagePlayerLookLeft);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> left1: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerWalkLeftSword1 : ImagePlayerWalkLeft1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> left2: <b><a href="CppReturn.htm">return</a></b> (mHasSword ? ImagePlayerWalkLeftSword2 : ImagePlayerWalkLeft2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>("!Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unsupported PlayerMove mMoveNow <b><a href="CppFor.htm">for</a></b> mDirection <a href="CppOperatorEqual.htm">==</a> left");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppBreak.htm">break</a></b>; Unreachable<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>("!Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unsupported PlayerDirection");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unreachable<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGame::<a href="CppTime.htm">Time</a>rEnemy<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move them<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> minx <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(0,mX <a href="CppOperatorMinus.htm">-</a> mViewWidth );<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> miny <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(0,mY <a href="CppOperatorMinus.htm">-</a> mViewHeight);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze.size()),mY <a href="CppOperatorPlus.htm">+</a> mViewHeight);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze[mY].size()),mX <a href="CppOperatorPlus.htm">+</a> mViewWidth);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(miny <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(miny <a href="CppOperatorLessEqual.htm">&lt;=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxy <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxy <a href="CppOperatorLessEqual.htm">&lt;=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(minx <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(minx <a href="CppOperatorLessEqual.htm">&lt;=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze[mY].size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxx <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxx <a href="CppOperatorLessEqual.htm">&lt;=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze[mY].size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(miny <a href="CppOperatorLessEqual.htm">&lt;=</a> maxy);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(minx <a href="CppOperatorLessEqual.htm">&lt;=</a> maxx);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=miny; y<a href="CppOperatorNotEqual.htm">!=</a>maxy; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=minx; x<a href="CppOperatorNotEqual.htm">!=</a>maxx; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>msEnemy1 changes to msEnemy2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only msEnemy2 moves, after moving turning to msEnemy1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(mMaze[y].size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MazeSquare s <a href="CppOperatorAssign.htm">=</a> mMaze[y][x];<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> msEnemy1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>msEnemy1 changes to msEnemy2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msEnemy2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> msEnemy2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>msEnemy 2 tries to walk<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; moves;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &gt; mY <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMaze[y-1][x&nbsp;&nbsp;] <a href="CppOperatorEqual.htm">==</a> msEmpty) moves.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y-1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; mX <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; maxx <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMaze[y&nbsp;&nbsp;][x+1] <a href="CppOperatorEqual.htm">==</a> msEmpty) moves.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x+1,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &lt; mY <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> y &lt; maxy <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMaze[y+1][x&nbsp;&nbsp;] <a href="CppOperatorEqual.htm">==</a> msEmpty) moves.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &gt; mX <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> mMaze[y&nbsp;&nbsp;][x-1] <a href="CppOperatorEqual.htm">==</a> msEmpty) moves.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x-1,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nMoves <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(moves.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nMoves <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msEnemy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(mMaze[y][x],mMaze[moves[0].second][moves[0].first]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (nMoves &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nMoves <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msEnemy1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> moveIndex <a href="CppOperatorAssign.htm">=</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> nMoves;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(mMaze[y][x],mMaze[moves[moveIndex].second][moves[moveIndex].first]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s<a href="CppOperatorEqual.htm">==</a>msPrisoner1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Animate prisoners<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msPrisoner2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (s<a href="CppOperatorEqual.htm">==</a>msPrisoner2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Animate prisoners<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMaze[y][x] <a href="CppOperatorAssign.htm">=</a> msPrisoner1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;DrawScreen();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGame::<a href="CppTime.htm">Time</a>rShowSolution<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;mShowSolution <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>rShowSolution-&gt;Enabled <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; GetShuffledDeadEnds(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; <b><a href="CppInt.htm">int</a></b>Maze)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; deadEnds <a href="CppOperatorAssign.htm">=</a> <a href="CppGetDeadEnds.htm">GetDeadEnds</a>(<b><a href="CppInt.htm">int</a></b>Maze);<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(deadEnds.begin(), deadEnds.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> deadEnds;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; GetShuffledNonDeadEnds(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; <b><a href="CppInt.htm">int</a></b>Maze)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; nonDeadEnds <a href="CppOperatorAssign.htm">=</a> <a href="CppGetNonDeadEnds.htm">GetNonDeadEnds</a>(<b><a href="CppInt.htm">int</a></b>Maze);<br/>
&nbsp;&nbsp;<a href="CppStdRandom_shuffle.htm">std::random_shuffle</a>(nonDeadEnds.begin(), nonDeadEnds.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nonDeadEnds;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Set a pixel's RGB values<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl<br/>
<b><a href="CppVoid.htm">void</a></b> SetPixel(<br/>
&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> red,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> green,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> blue)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Image is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap is <a href="CppNULL.htm">NULL</a>");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(image-&gt;Picture-&gt;Bitmap-&gt;PixelFormat <a href="CppOperatorEqual.htm">==</a> pf24bit <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Bitmap must be 24 bit");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is below zero");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x &lt; image-&gt;Picture-&gt;Bitmap-&gt;Width&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x coordinat is beyond image width");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; image-&gt;Picture-&gt;Bitmap-&gt;Height <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y coordinat is beyond image height");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> * <b><a href="CppConst.htm">const</a></b> line<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppChar.htm">char</a></b> *&gt;(image-&gt;Picture-&gt;Bitmap-&gt;ScanLine[y]);<br/>
<br/>
&nbsp;&nbsp;line[x*3+2] <a href="CppOperatorAssign.htm">=</a> red;<br/>
&nbsp;&nbsp;line[x*3+1] <a href="CppOperatorAssign.htm">=</a> green;<br/>
&nbsp;&nbsp;line[x*3+0] <a href="CppOperatorAssign.htm">=</a> blue;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakGameOver.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakGameOver.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMaziakGameOverH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMaziakGameOverH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMaziakGameOver : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageGrave;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>r1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall OnAnyClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>r1<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mCanClose;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormMaziakGameOver(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMaziakGameOver *FormMaziakGameOver;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> DrawGrave(<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * image);<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakGameOver.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakGameOver.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakGameOver.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMaziakGameOver *FormMaziakGameOver;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMaziakGameOver::TFormMaziakGameOver(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner), mCanClose(<b><a href="CppFalse.htm">false</a></b>)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGameOver::OnAnyClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGameOver::<a href="CppTime.htm">Time</a>r1<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;mCanClose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGameOver::FormKeyDown(TObject *Sender,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORD &amp;Key, TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mCanClose <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) Close();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakGameWon.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakGameWon.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMaziakGameWonH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMaziakGameWonH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMaziakGameWon : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWon1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rCanClose;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageTop;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBottom;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerWon2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<a href="CppTime.htm">Time</a>r *<a href="CppTime.htm">Time</a>rAnimation;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageBuffer;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEmpty;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall OnAnyClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rCanClose<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall <a href="CppTime.htm">Time</a>rAnimation<a href="CppTime.htm">Time</a>r(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> mCanClose;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormMaziakGameWon(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMaziakGameWon *FormMaziakGameWon;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakGameWon.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakGameWon.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakGameWon.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMaziakGameWon *FormMaziakGameWon;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMaziakGameWon::TFormMaziakGameWon(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner), mCanClose(<b><a href="CppFalse.htm">false</a></b>)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGameWon::OnAnyClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGameWon::<a href="CppTime.htm">Time</a>rCanClose<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;mCanClose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGameWon::FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (mCanClose <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>) Close();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakGameWon::<a href="CppTime.htm">Time</a>rAnimation<a href="CppTime.htm">Time</a>r(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a><a href="CppTime.htm">Time</a>rAnimation-&gt;Tag;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear the buffer<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,ImageEmpty-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw right image on buffer<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTImage.htm">TImage</a> * <b><a href="CppConst.htm">const</a></b> image <a href="CppOperatorAssign.htm">=</a> (<a href="CppTime.htm">Time</a>rAnimation-&gt;Tag <a href="CppOperatorModulus.htm">%</a> 2 ? ImagePlayerWon1 : ImagePlayerWon2);<br/>
&nbsp;&nbsp;ImageBuffer-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;Draw(0,0,image-&gt;Picture-&gt;Graphic);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw buffer on canvar<br/>
&nbsp;&nbsp;TRect r(ClientRect);<br/>
&nbsp;&nbsp;r.top<a href="CppOperatorPlusAssign.htm">+=</a>ImageTop-&gt;Height;<br/>
&nbsp;&nbsp;r.bottom<a href="CppOperatorMinusAssign.htm">-=</a>ImageBottom-&gt;Height;<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;<a href="CppCanvas.htm">Canvas</a>-&gt;StretchDraw(r,ImageBuffer-&gt;Picture-&gt;Graphic);<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakInstructions.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakInstructions.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMaziakInstructionsH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMaziakInstructionsH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMaziakInstructions : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image6;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TLabel *Label5;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image7;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image8;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image9;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image11;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image12;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image13;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image15;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image16;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image17;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image18;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image19;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image20;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image21;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ButtonWhatsNewClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormMaziakInstructions(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMaziakInstructions *FormMaziakInstructions;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakInstructions.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakInstructions.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakInstructions.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWhatsNew.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMaziakInstructions *FormMaziakInstructions;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMaziakInstructions::TFormMaziakInstructions(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakInstructions::ButtonWhatsNewClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TFormWhatsNew&gt; f(<b><a href="CppNew.htm">new</a></b> TFormWhatsNew(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakMenu.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakMenu.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormMaziakMenuH<br/>
<a href="CppDefine.htm">#define</a> UnitFormMaziakMenuH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ExtCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Graphics.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormMaziakMenu : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayer;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageQuit;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *Image<a href="CppAbout.htm">About</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageStart;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageInstructions;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEasy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageMedium;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageHard;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEasySelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageMediumSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageHardSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEasyNotSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageMediumNotSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageHardNotSelected;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerHard;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerEasy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImagePlayerMedium;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEnemy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEnemyHard;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEnemyMedium;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTImage.htm">TImage</a> *ImageEnemyEasy;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageQuitClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall Image<a href="CppAbout.htm">About</a>Click(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageStartClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageInstructionsClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageEasyClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageMediumClick(TObject *Sender);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> __fastcall ImageHardClick(TObject *Sender);<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> GetSize() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> Difficulty { easy, medium, hard } mDifficulty;<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormMaziakMenu(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormMaziakMenu *FormMaziakMenu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormMaziakMenu.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormMaziakMenu.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCtimeH.htm">ctime</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "UnitMazeCreater.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakMenu.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziak<a href="CppAbout.htm">About</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakGame.h"<br/>
<a href="CppInclude.htm">#include</a> "UnitFormMaziakInstructions.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormMaziakMenu *FormMaziakMenu;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormMaziakMenu::TFormMaziakMenu(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;: TForm(Owner),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mDifficulty(easy)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRandomizeTimer.htm">RandomizeTimer</a>();<br/>
&nbsp;&nbsp;ImageEasyClick(0);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> TFormMaziakMenu::GetSize() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDifficulty)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> easy&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;99;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> medium: <b><a href="CppReturn.htm">return</a></b> 499;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> hard&nbsp;&nbsp;: <b><a href="CppReturn.htm">return</a></b> 999;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Unsupported value of mDifficulty");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakMenu::ImageStartClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TFormMaziakGame&gt; f(<b><a href="CppNew.htm">new</a></b> TFormMaziakGame(0,GetSize()));<br/>
&nbsp;&nbsp;f-&gt;Window<a href="CppState.htm">State</a> <a href="CppOperatorAssign.htm">=</a> wsMaximized;<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakMenu::Image<a href="CppAbout.htm">About</a>Click(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TFormMaziak<a href="CppAbout.htm">About</a>&gt; f(<b><a href="CppNew.htm">new</a></b> TFormMaziak<a href="CppAbout.htm">About</a>(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakMenu::ImageQuitClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;Close();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakMenu::FormKeyDown(TObject *Sender, WORD &amp;Key,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TShift<a href="CppState.htm">State</a> Shift)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (Key)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 's': <b><a href="CppCase.htm">case</a></b> 'S': ImageStartClick(0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'i': <b><a href="CppCase.htm">case</a></b> 'I': ImageInstructionsClick(0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'a': <b><a href="CppCase.htm">case</a></b> 'A': Image<a href="CppAbout.htm">About</a>Click(0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 'q': <b><a href="CppCase.htm">case</a></b> 'Q': ImageQuitClick(0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '+': <b><a href="CppCase.htm">case</a></b> VK_NEXT: <b><a href="CppCase.htm">case</a></b> VK_DOWN: <b><a href="CppCase.htm">case</a></b> VK_ADD: <b><a href="CppCase.htm">case</a></b> VK_RIGHT:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDifficulty)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> easy&nbsp;&nbsp;: ImageMediumClick(0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> medium: ImageHardClick(0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> hard&nbsp;&nbsp;: <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> '-': <b><a href="CppCase.htm">case</a></b> VK_PRIOR: <b><a href="CppCase.htm">case</a></b> VK_UP: <b><a href="CppCase.htm">case</a></b> VK_SUBTRACT: <b><a href="CppCase.htm">case</a></b> VK_LEFT:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (mDifficulty)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> easy&nbsp;&nbsp;: <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> medium: ImageEasyClick(0); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> hard&nbsp;&nbsp;: ImageMediumClick(0);<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppRandomizeTimer.htm">RandomizeTimer</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRandomizeTimer.htm">RandomizeTimer</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(<a href="CppStdTime.htm">std::time</a>(0));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakMenu::ImageInstructionsClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostScoped_ptr.htm">boost::scoped_ptr</a>&lt;TFormMaziakInstructions&gt; f(<b><a href="CppNew.htm">new</a></b> TFormMaziakInstructions(0));<br/>
&nbsp;&nbsp;f-&gt;ShowModal();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakMenu::ImageEasyClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageEasy-&gt;Picture&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> ImageEasySelected-&gt;Picture;<br/>
&nbsp;&nbsp;ImageMedium-&gt;Picture <a href="CppOperatorAssign.htm">=</a> ImageMediumNotSelected-&gt;Picture;<br/>
&nbsp;&nbsp;ImageHard-&gt;Picture&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> ImageHardNotSelected-&gt;Picture;<br/>
&nbsp;&nbsp;mDifficulty <a href="CppOperatorAssign.htm">=</a> easy;<br/>
&nbsp;&nbsp;ImagePlayer-&gt;Picture <a href="CppOperatorAssign.htm">=</a> ImagePlayerEasy-&gt;Picture;<br/>
&nbsp;&nbsp;ImageEnemy-&gt;Picture&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageEnemyEasy-&gt;Picture;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakMenu::ImageMediumClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageEasy-&gt;Picture&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> ImageEasyNotSelected-&gt;Picture;<br/>
&nbsp;&nbsp;ImageMedium-&gt;Picture <a href="CppOperatorAssign.htm">=</a> ImageMediumSelected-&gt;Picture;<br/>
&nbsp;&nbsp;ImageHard-&gt;Picture&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> ImageHardNotSelected-&gt;Picture;<br/>
&nbsp;&nbsp;mDifficulty <a href="CppOperatorAssign.htm">=</a> medium;<br/>
&nbsp;&nbsp;ImagePlayer-&gt;Picture <a href="CppOperatorAssign.htm">=</a> ImagePlayerMedium-&gt;Picture;<br/>
&nbsp;&nbsp;ImageEnemy-&gt;Picture&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageEnemyMedium-&gt;Picture;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> __fastcall TFormMaziakMenu::ImageHardClick(TObject *Sender)<br/>
{<br/>
&nbsp;&nbsp;ImageEasy-&gt;Picture&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> ImageEasyNotSelected-&gt;Picture;<br/>
&nbsp;&nbsp;ImageMedium-&gt;Picture <a href="CppOperatorAssign.htm">=</a> ImageMediumNotSelected-&gt;Picture;<br/>
&nbsp;&nbsp;ImageHard-&gt;Picture&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> ImageHardSelected-&gt;Picture;<br/>
&nbsp;&nbsp;mDifficulty <a href="CppOperatorAssign.htm">=</a> hard;<br/>
&nbsp;&nbsp;ImagePlayer-&gt;Picture <a href="CppOperatorAssign.htm">=</a> ImagePlayerHard-&gt;Picture;<br/>
&nbsp;&nbsp;ImageEnemy-&gt;Picture&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ImageEnemyHard-&gt;Picture;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormWhatsNew.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormWhatsNew.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitFormWhatsNewH<br/>
<a href="CppDefine.htm">#define</a> UnitFormWhatsNewH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppClass.htm">Classes</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Controls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;StdCtrls.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Forms.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ComCtrls.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppClass.htm">class</a></b> TFormWhatsNew : <b><a href="CppPublic.htm">public</a></b> TForm<br/>
{<br/>
__published:	<a href="CppComment.htm">//</a> IDE-managed <a href="CppComponent.htm">Component</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TRichEdit *RichEdit;<br/>
<b><a href="CppPrivate.htm">private</a></b>:	<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
<b><a href="CppPublic.htm">public</a></b>:		<a href="CppComment.htm">//</a> User <a href="CppDeclaration.htm">declaration</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__fastcall TFormWhatsNew(T<a href="CppComponent.htm">Component</a>* Owner);<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppExtern.htm">extern</a></b> PACKAGE TFormWhatsNew *FormWhatsNew;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitFormWhatsNew.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitFormWhatsNew.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;vcl.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitFormWhatsNew.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
<a href="CppPragma.htm">#pragma</a> resource "*.dfm"<br/>
TFormWhatsNew *FormWhatsNew;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
__fastcall TFormWhatsNew::TFormWhatsNew(T<a href="CppComponent.htm">Component</a>* Owner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: TForm(Owner)<br/>
{<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitLocation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitLocation.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitLocationH<br/>
<a href="CppDefine.htm">#define</a> UnitLocationH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> Location<br/>
{<br/>
&nbsp;&nbsp;Location() : x(0), y(0) {}<br/>
&nbsp;&nbsp;Location(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppAny.htm">any</a>X, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppAny.htm">any</a>Y) : x(<a href="CppAny.htm">any</a>X), y(<a href="CppAny.htm">any</a>Y) {}<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y;<br/>
};<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Location&amp; lhs, <b><a href="CppConst.htm">const</a></b> Location&amp; rhs) { <b><a href="CppReturn.htm">return</a></b> lhs.x <a href="CppOperatorEqual.htm">==</a> rhs.x <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.y <a href="CppOperatorEqual.htm">==</a> rhs.y; }<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitLocation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitLocation.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitLocation.h"<br/>
<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitMazeCreater.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitMazeCreater.h" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> UnitMazeCreaterH<br/>
<a href="CppDefine.htm">#define</a> UnitMazeCreaterH<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppGetMazeDistances.htm">GetMazeDistances</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetMazeDistances.htm">GetMazeDistances</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppGetDistancesPath.htm">GetDistancesPath</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetDistancesPath.htm">GetDistancesPath</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; distances,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> playerX,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> playerY);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCreateMaze.htm">CreateMaze</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppCreateMaze.htm">CreateMaze</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCreateMaze.htm">CreateMaze</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppCreateMaze.htm">CreateMaze</a>Old(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCreateSloppyMaze.htm">CreateSloppyMaze</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppCreateSloppyMaze.htm">CreateSloppyMaze</a>Old(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fractionPerfect);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetDeadEnds.htm">GetDeadEnds</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetDeadEnds.htm">GetDeadEnds</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetNonDeadEnds.htm">GetNonDeadEnds</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetNonDeadEnds.htm">GetNonDeadEnds</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCountDeadEnds.htm">CountDeadEnds</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppCountDeadEnds.htm">CountDeadEnds</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSolveMaze.htm">SolveMaze</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppSolveMaze.htm">SolveMaze</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2);<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppCountNonDeadEnds.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> CountNonDeadEnds(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze);<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./GameMaziakVcl/UnitMazeCreater.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./GameMaziakVcl/UnitMazeCreater.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;Maziak, a simple maze game<br/>
&nbsp;&nbsp;Copyright (C) 2007&nbsp;&nbsp;Richèl Bilderbeek<br/>
<br/>
&nbsp;&nbsp;This program is free software: you can redistribute it and/or modify<br/>
&nbsp;&nbsp;it under the terms of the GNU General Public License as published by<br/>
&nbsp;&nbsp;the Free Software Foundation, either version 3 of the License, or<br/>
&nbsp;&nbsp;(at your option) any later version.<br/>
<br/>
&nbsp;&nbsp;This program is distributed in the hope that it will be useful,<br/>
&nbsp;&nbsp;but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
&nbsp;&nbsp;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
&nbsp;&nbsp;GNU General Public License for more details.<br/>
<br/>
&nbsp;&nbsp;You should have received a copy of the GNU General Public License<br/>
&nbsp;&nbsp;along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> hdrstop<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "UnitMazeCreater.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppGetMazeDistances.htm">GetMazeDistances</a><br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetMazeDistances.htm">GetMazeDistances</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume maze is square<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maze[0].size() <a href="CppOperatorEqual.htm">==</a> maze.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maze[y][x] <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Assume starting <a href="CppPointer.htm">point</a> is no wall<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> maze.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area <a href="CppOperatorAssign.htm">=</a> size * size;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxDistance <a href="CppOperatorAssign.htm">=</a> area;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; distances(size, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(size,maxDistance));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the distances<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> distance <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;distances[y][x] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Set <b><a href="CppFinal.htm">final</a></b> <a href="CppPointer.htm">point</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt; <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; found;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;found.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(found.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>distance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt; <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; <b><a href="CppNew.htm">new</a></b>Found;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt; <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt;::<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> found.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdVector.htm">std::vector</a>&lt; <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt;::<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> found.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (*i).first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (*i).second;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maze[y-1][x] <a href="CppOperatorEqual.htm">==</a> 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>No wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y-1][x] <a href="CppOperatorEqual.htm">==</a> maxDistance) <a href="CppComment.htm">//</a>Not already in solution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distances[y-1][x] <a href="CppOperatorAssign.htm">=</a> distance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>Found.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y-1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maze[y+1][x] <a href="CppOperatorEqual.htm">==</a> 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>No wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y+1][x] <a href="CppOperatorEqual.htm">==</a> maxDistance) <a href="CppComment.htm">//</a>Not already in solution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distances[y+1][x] <a href="CppOperatorAssign.htm">=</a> distance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>Found.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y+1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maze[y][x+1] <a href="CppOperatorEqual.htm">==</a> 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>No wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x+1] <a href="CppOperatorEqual.htm">==</a> maxDistance) <a href="CppComment.htm">//</a>Not already in solution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distances[y][x+1] <a href="CppOperatorAssign.htm">=</a> distance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>Found.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x+1,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( maze[y][x-1] <a href="CppOperatorEqual.htm">==</a> 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>No wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x-1] <a href="CppOperatorEqual.htm">==</a> maxDistance) <a href="CppComment.htm">//</a>Not already in solution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distances[y][x-1] <a href="CppOperatorAssign.htm">=</a> distance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>Found.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x-1,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b>Found;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> distances;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppGetMazeDistances.htm">GetMazeDistances</a><br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetMazeDistances.htm">GetMazeDistances</a>Slow(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume maze is square<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maze[0].size() <a href="CppOperatorEqual.htm">==</a> maze.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maze[y][x] <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Assume starting <a href="CppPointer.htm">point</a> is no wall<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> maze.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area <a href="CppOperatorAssign.htm">=</a> size * size;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxDistance <a href="CppOperatorAssign.htm">=</a> area;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; distances(size, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(size,maxDistance));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calculate the distances<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> distance <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;distances[y][x] <a href="CppOperatorAssign.htm">=</a> 0; <a href="CppComment.htm">//</a>Set <b><a href="CppFinal.htm">final</a></b> <a href="CppPointer.htm">point</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppNew.htm">new</a></b>DistanceFound <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(<b><a href="CppNew.htm">new</a></b>DistanceFound <a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>distance;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>DistanceFound <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> <b><a href="CppThis.htm">this</a></b> spot can be as<b><a href="CppSigned.htm">signed</a></b> a distance value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (maze[y][x] <a href="CppOperatorNotEqual.htm">!=</a> 0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>Continue <b><a href="CppIf.htm">if</a></b> here is a wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (distances[y][x] <a href="CppOperatorNotEqual.htm">!=</a> maxDistance) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>Continue <b><a href="CppIf.htm">if</a></b> already in solution<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x<a href="CppOperatorNotEqual.htm">!=</a>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x-1] <a href="CppOperatorEqual.htm">==</a> distance <a href="CppOperatorMinus.htm">-</a> 1 )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ distances[y][x] <a href="CppOperatorAssign.htm">=</a> distance; <b><a href="CppNew.htm">new</a></b>DistanceFound <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x<a href="CppOperatorNotEqual.htm">!=</a>size-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x+1] <a href="CppOperatorEqual.htm">==</a> distance <a href="CppOperatorMinus.htm">-</a> 1 )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ distances[y][x] <a href="CppOperatorAssign.htm">=</a> distance; <b><a href="CppNew.htm">new</a></b>DistanceFound <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( y<a href="CppOperatorNotEqual.htm">!=</a>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y-1][x] <a href="CppOperatorEqual.htm">==</a> distance <a href="CppOperatorMinus.htm">-</a> 1 )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ distances[y][x] <a href="CppOperatorAssign.htm">=</a> distance; <b><a href="CppNew.htm">new</a></b>DistanceFound <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( y<a href="CppOperatorNotEqual.htm">!=</a>size-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y+1][x] <a href="CppOperatorEqual.htm">==</a> distance <a href="CppOperatorMinus.htm">-</a> 1 )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ distances[y][x] <a href="CppOperatorAssign.htm">=</a> distance; <b><a href="CppNew.htm">new</a></b>DistanceFound <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> distances;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppGetDistancesPath.htm">GetDistancesPath</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetDistancesPath.htm">GetDistancesPath</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; distances,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> playerX,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> playerY)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> distances.size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; solution(size, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(size,0));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> playerX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> playerY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> distance <a href="CppOperatorAssign.htm">=</a> distances[y][x] <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (distance <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>We must be where we are now<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution[y][x] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x<a href="CppOperatorNotEqual.htm">!=</a>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x-1] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorDecrement.htm">--</a>x; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x<a href="CppOperatorNotEqual.htm">!=</a>size-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x+1] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorIncrement.htm">++</a>x; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( y<a href="CppOperatorNotEqual.htm">!=</a>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y-1][x] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorDecrement.htm">--</a>y; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( y<a href="CppOperatorNotEqual.htm">!=</a>size-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y+1][x] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorIncrement.htm">++</a>y; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solution;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSolveMaze.htm">SolveMaze</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppSolveMaze.htm">SolveMaze</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y1,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x2,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y2)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume maze is square<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maze[0].size() <a href="CppOperatorEqual.htm">==</a> maze.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maze[y1][x1] <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Assume starting <a href="CppPointer.htm">point</a> is no wall<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maze[y2][x2] <a href="CppOperatorEqual.htm">==</a> 0); <a href="CppComment.htm">//</a>Assume end <a href="CppPointer.htm">point</a> is no wall<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; distances(<a href="CppGetMazeDistances.htm">GetMazeDistances</a>(maze,x2,y2));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetDistancesPath.htm">GetDistancesPath</a>(distances,x1,y1);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCountDeadEnds.htm">CountDeadEnds</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppCountDeadEnds.htm">CountDeadEnds</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> maze.size();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> nDeadEnds <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=1; y<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=1; x<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (maze[y][x] <a href="CppOperatorNotEqual.htm">!=</a> 0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>Continue <b><a href="CppIf.htm">if</a></b> here is a wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nWalls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (maze[y+1][x&nbsp;&nbsp;] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y-1][x&nbsp;&nbsp;] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y&nbsp;&nbsp;][x+1] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y&nbsp;&nbsp;][x-1] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nWalls <a href="CppOperatorEqual.htm">==</a> 3) <a href="CppOperatorIncrement.htm">++</a>nDeadEnds;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nDeadEnds;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetDeadEnds.htm">GetDeadEnds</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetDeadEnds.htm">GetDeadEnds</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> maze.size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; deadEnds;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=1; y<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=1; x<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (maze[y][x] <a href="CppOperatorNotEqual.htm">!=</a> 0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>Continue <b><a href="CppIf.htm">if</a></b> here is a wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nWalls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (maze[y+1][x&nbsp;&nbsp;] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y-1][x&nbsp;&nbsp;] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y&nbsp;&nbsp;][x+1] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y&nbsp;&nbsp;][x-1] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nWalls <a href="CppOperatorEqual.htm">==</a> 3) deadEnds.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> deadEnds;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetNonDeadEnds.htm">GetNonDeadEnds</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetNonDeadEnds.htm">GetNonDeadEnds</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; maze)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> maze.size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; nonDeadEnds;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=1; y<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( y &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(maze.size()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "y must be in range");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( maze.size() <a href="CppOperatorEqual.htm">==</a> maze[y].size() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Maze must be square");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=1; x<a href="CppOperatorNotEqual.htm">!=</a>size-1; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( x &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(maze[y].size()) <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "x must be in range");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (maze[y][x] <a href="CppOperatorNotEqual.htm">!=</a> 0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>Continue <b><a href="CppIf.htm">if</a></b> here is a wall<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maze[y][x] <a href="CppOperatorEqual.htm">==</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nWalls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (maze[y+1][x&nbsp;&nbsp;] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y-1][x&nbsp;&nbsp;] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y&nbsp;&nbsp;][x+1] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y&nbsp;&nbsp;][x-1] <a href="CppOperatorEqual.htm">==</a> 1 ? 1 : 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (nWalls &lt; 3) nonDeadEnds.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> nonDeadEnds;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCreateSloppyMaze.htm">CreateSloppyMaze</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppCreateSloppyMaze.htm">CreateSloppyMaze</a>Old(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fractionPerfect)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Size must be odd<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( size <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( fractionPerfect <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> fractionPerfect <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; maze(size, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(size,0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw outer walls<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[0]&nbsp;&nbsp;&nbsp;&nbsp; [i&nbsp;&nbsp;&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[size-1][i&nbsp;&nbsp;&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[i]&nbsp;&nbsp;&nbsp;&nbsp; [0&nbsp;&nbsp;&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[i]&nbsp;&nbsp;&nbsp;&nbsp; [size-1] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw pillars<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=2; y<a href="CppOperatorNotEqual.htm">!=</a>size-1; y<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=2; x<a href="CppOperatorNotEqual.htm">!=</a>size-1; x<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maze[y][x] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check around pillars<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nWallsTo<a href="CppAdd.htm">Add</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(fractionPerfect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(((size <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1) * ((size <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nWallsTo<a href="CppAdd.htm">Add</a> <a href="CppOperatorLessEqual.htm">&lt;=</a>(((size <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1) * ((size <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1)));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i &lt; nWallsTo<a href="CppAdd.htm">Add</a>; ) <a href="CppComment.htm">//</a>'&lt;' as there might be 2 walls added<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=2; y<a href="CppOperatorNotEqual.htm">!=</a>size-1; y<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=2; x<a href="CppOperatorNotEqual.htm">!=</a>size-1; x<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nWalls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (maze[y-1][x] <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y+1][x] <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y][x+1] <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y][x-1] <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( nWalls <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: maze[y-1][x] <a href="CppOperatorAssign.htm">=</a> 1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: maze[y+1][x] <a href="CppOperatorAssign.htm">=</a> 1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: maze[y][x+1] <a href="CppOperatorAssign.htm">=</a> 1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: maze[y][x-1] <a href="CppOperatorAssign.htm">=</a> 1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (nWalls <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 6)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppStdSwap.htm">std::swap</a>(maze[y-1][x], maze[y+1][x]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppStdSwap.htm">std::swap</a>(maze[y-1][x], maze[y][x+1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppStdSwap.htm">std::swap</a>(maze[y-1][x], maze[y][x-1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppStdSwap.htm">std::swap</a>(maze[y+1][x], maze[y][x+1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: <a href="CppStdSwap.htm">std::swap</a>(maze[y+1][x], maze[y][x-1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: <a href="CppStdSwap.htm">std::swap</a>(maze[y][x+1], maze[y][x-1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maze;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>Creates a maze<br/>
<a href="CppComment.htm">//</a> 0 : path<br/>
<a href="CppComment.htm">//</a> 1 : wall<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCreateMaze.htm">CreateMaze</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppCreateMaze.htm">CreateMaze</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Size must be odd<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( sz <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start with a wall-only maze<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; maze(sz, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(sz,1));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Prepare maze, remove paths<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> XXXXXXX<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> X X X X<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> XXXXXXX<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> X XOX X<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> XXXXXXX<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> X X X X<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> XXXXXXX<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw open spaces<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=1; y<a href="CppOperatorNotEqual.htm">!=</a>sz-2; y<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=1; x<a href="CppOperatorNotEqual.htm">!=</a>sz-2; x<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maze[y][x] <a href="CppOperatorAssign.htm">=</a> 2; <a href="CppComment.htm">//</a>2: unexplored<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mid <a href="CppOperatorAssign.htm">=</a> sz/2;<br/>
<br/>
&nbsp;&nbsp;maze[mid][mid] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(mid,mid));<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!v.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set a random explorer square at the back<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(v.back(),v[ <a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size())]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check possible adjacent squares<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> v.back().first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> v.back().second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; next;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &gt;&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> maze[y][x-2] <a href="CppOperatorEqual.htm">==</a> 2) next.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x-2,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &gt;&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> maze[y-2][x] <a href="CppOperatorEqual.htm">==</a> 2) next.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y-2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x &lt; sz <a href="CppOperatorMinus.htm">-</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> maze[y][x+2] <a href="CppOperatorEqual.htm">==</a> 2) next.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x+2,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (y &lt; sz <a href="CppOperatorMinus.htm">-</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> maze[y+2][x] <a href="CppOperatorEqual.htm">==</a> 2) next.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(x,y+2));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Dead end?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (next.empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select a random next adjacent square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nextIndex <a href="CppOperatorAssign.htm">=</a> (<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(next.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nextX <a href="CppOperatorAssign.htm">=</a> next[nextIndex].first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nextY <a href="CppOperatorAssign.htm">=</a> next[nextIndex].second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear next square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[nextY][nextX] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Clear path towards next square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[(y <a href="CppOperatorPlus.htm">+</a> nextY)/2][(x <a href="CppOperatorPlus.htm">+</a> nextX)/2] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> next square to stack<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(nextX,nextY));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maze;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCreateMaze.htm">CreateMaze</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppCreateMaze.htm">CreateMaze</a>Old(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Size must be odd<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( size <a href="CppOperatorModulus.htm">%</a> 2 <a href="CppOperatorEqual.htm">==</a> 1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; maze(size, <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(size,0));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw outer walls<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>size; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[0]&nbsp;&nbsp;&nbsp;&nbsp; [i&nbsp;&nbsp;&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[size-1][i&nbsp;&nbsp;&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[i]&nbsp;&nbsp;&nbsp;&nbsp; [0&nbsp;&nbsp;&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maze[i]&nbsp;&nbsp;&nbsp;&nbsp; [size-1] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw pillars<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=2; y<a href="CppOperatorNotEqual.htm">!=</a>size-1; y<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=2; x<a href="CppOperatorNotEqual.htm">!=</a>size-1; x<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maze[y][x] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check around pillars<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nWallsTo<a href="CppAdd.htm">Add</a> <a href="CppOperatorAssign.htm">=</a> ((size <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1) * ((size <a href="CppOperatorDivide.htm">/</a> 2) <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i <a href="CppOperatorNotEqual.htm">!=</a> nWallsTo<a href="CppAdd.htm">Add</a>; )<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=2; y<a href="CppOperatorNotEqual.htm">!=</a>size-1; y<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=2; x<a href="CppOperatorNotEqual.htm">!=</a>size-1; x<a href="CppOperatorPlusAssign.htm">+=</a>2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nWalls<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (maze[y-1][x] <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y+1][x] <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y][x+1] <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (maze[y][x-1] <a href="CppOperatorEqual.htm">==</a> 0 ? 0 : 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( nWalls <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 4)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: maze[y-1][x] <a href="CppOperatorAssign.htm">=</a> 1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: maze[y+1][x] <a href="CppOperatorAssign.htm">=</a> 1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: maze[y][x+1] <a href="CppOperatorAssign.htm">=</a> 1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: maze[y][x-1] <a href="CppOperatorAssign.htm">=</a> 1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (nWalls <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> 6)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppStdSwap.htm">std::swap</a>(maze[y-1][x], maze[y+1][x]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppStdSwap.htm">std::swap</a>(maze[y-1][x], maze[y][x+1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppStdSwap.htm">std::swap</a>(maze[y-1][x], maze[y][x-1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppStdSwap.htm">std::swap</a>(maze[y+1][x], maze[y][x+1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: <a href="CppStdSwap.htm">std::swap</a>(maze[y+1][x], maze[y][x-1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: <a href="CppStdSwap.htm">std::swap</a>(maze[y][x+1], maze[y][x-1]); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maze;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> package(smart_init)<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
