<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>BoostUblasMatrixExample6</title>
  <meta name="description" content="C++ BoostUblasMatrixExample6"/>
  <meta name="keywords" content="C++ BoostUblasMatrixExample6 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBoostUblasMatrixExample6.htm">BoostUblasMatrixExample6</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppBoostUblasMatrixExample6-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.10 (saucy)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.7.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.8.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.8.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppBoostUblasMatrixExample6/CppBoostUblasMatrixExample6.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostUblasMatrixExample6/CppBoostUblasMatrixExample6.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri) #Or use the code below<br/>
# QT += core<br/>
# QT += gui<br/>
# greaterThan(QT_MAJOR_VERSION, 4): QT += <a href="CppWidget.htm">widget</a>s<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
# <a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
# <a href="CppQmakeConfig.htm">CONFIG</a>(release, debug|release) {<br/>
#&nbsp;&nbsp; <a href="CppQmakeDefines.htm">DEFINES</a> += NDEBUG N<a href="CppTRACE.htm">TRACE</a>_BILDERBIKKEL<br/>
# }<br/>
# <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=c++1y <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a><br/>
# unix {<br/>
#&nbsp;&nbsp; <a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += <a href="CppWerror.htm">-Werror</a><br/>
# }<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Boost.pri) #Or use the code below<br/>
# win32 {<br/>
#&nbsp;&nbsp; <a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp; ../../<a href="CppLibrary.htm">Libraries</a>/boost_1_54_0<br/>
# }<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBoostUblasMatrixExample6/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBoostUblasMatrixExample6/main.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppMatrix.htm">matrix</a>_proxy.hpp&gt;<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> CalcDeterminant(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> m.size2() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only calculate the determinant of square matrices");<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(m.size1())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> m(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> m(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> m(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> (a * d) <a href="CppOperatorMinus.htm">-</a> (b * c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 3x3 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> m(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> m(0,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> m(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> e <a href="CppOperatorAssign.htm">=</a> m(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> m(1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> m(2,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> h <a href="CppOperatorAssign.htm">=</a> m(2,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k <a href="CppOperatorAssign.htm">=</a> m(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (a * ((e*k) <a href="CppOperatorMinus.htm">-</a> (f*h)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> (b * ((k*d) <a href="CppOperatorMinus.htm">-</a> (f*g)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (c * ((d*h) <a href="CppOperatorMinus.htm">-</a> (e*g)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here: unsupported <a href="CppMatrix.htm">matrix</a> size");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>("Unsupported <a href="CppMatrix.htm">matrix</a> size");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Chop <a href="CppReturn.htm">returns</a> a <a href="CppStdVector.htm">std::vector</a> of sub-matrices<br/>
<a href="CppComment.htm">//</a>[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
<a href="CppComment.htm">//</a>[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; Chop(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::range;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_range;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;v.reserve(4);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midy <a href="CppOperatorAssign.htm">=</a> m.size1() <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midx <a href="CppOperatorAssign.htm">=</a> m.size2() <a href="CppOperatorDivide.htm">/</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>_range&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; top_left(&nbsp;&nbsp;&nbsp;&nbsp;m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>_range&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; bottom_left( m,range(midy,m.size1()),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>_range&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; top_right(&nbsp;&nbsp; m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(midx,m.size2()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>_range&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; bottom_right(m,range(midy,m.size1()),range(midx,m.size2()));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(top_left));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(top_right));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bottom_left));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bottom_right));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Create<a href="CppMatrix.htm">Matrix</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_rows * n_cols <a href="CppOperatorEqual.htm">==</a> v.size());<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(n_rows,n_cols);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) <a href="CppOperatorAssign.htm">=</a> v[ (col * n_rows) <a href="CppOperatorPlus.htm">+</a> row];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateRandom<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows, <b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(n_rows,n_cols);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppComment.htm">///</a>Unchop merges the 4 <a href="CppStdVector.htm">std::vector</a> of sub-matrices produced by Chop<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Unchop(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Chop <a href="CppReturn.htm">returns</a> a <a href="CppStdVector.htm">std::vector</a> of sub-matrices<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::range;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_range;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size1() <a href="CppOperatorEqual.htm">==</a> v[1].size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2].size1() <a href="CppOperatorEqual.htm">==</a> v[3].size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size2() <a href="CppOperatorEqual.htm">==</a> v[2].size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1].size2() <a href="CppOperatorEqual.htm">==</a> v[3].size2());<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(v[0].size1() <a href="CppOperatorPlus.htm">+</a> v[2].size1(),v[0].size2() <a href="CppOperatorPlus.htm">+</a> v[1].size2());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> quadrant=0; quadrant<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>quadrant)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; w <a href="CppOperatorAssign.htm">=</a> v[quadrant];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> v[quadrant].size1();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> v[quadrant].size2();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_x <a href="CppOperatorAssign.htm">=</a> quadrant <a href="CppOperatorModulus.htm">%</a> 2 ? v[0].size2() : 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_y <a href="CppOperatorAssign.htm">=</a> quadrant <a href="CppOperatorDivide.htm">/</a> 2 ? v[0].size1() : 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(offset_y <a href="CppOperatorPlus.htm">+</a> row, offset_x <a href="CppOperatorPlus.htm">+</a> col) <a href="CppOperatorAssign.htm">=</a> w(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size1() <a href="CppOperatorPlus.htm">+</a> v[2].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1].size1() <a href="CppOperatorPlus.htm">+</a> v[3].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size2() <a href="CppOperatorPlus.htm">+</a> v[1].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2].size2() <a href="CppOperatorPlus.htm">+</a> v[3].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Inverse(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> m.size2() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only calculate the inverse of square matrices");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(m.size1())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 1x1 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot take the inverse of <a href="CppMatrix.htm">matrix</a> [0]");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1.0 <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 2x2 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> m(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> m(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> m(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;d <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,1) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>b <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,0) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>c <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,1) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;a <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorEqual.htm">==</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 3x3 matrices");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> m(0,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> m(0,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> m(0,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> m(1,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> e <a href="CppOperatorAssign.htm">=</a> m(1,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> m(1,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> m(2,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> h <a href="CppOperatorAssign.htm">=</a> m(2,1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k <a href="CppOperatorAssign.htm">=</a> m(2,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(3,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_a <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((e*k)-(f*h)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_b <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((d*k)-(f*g)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_c <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((d*h)-(e*g)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_d <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((b*k)-(c*h)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_e <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((a*k)-(c*g)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_f <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((a*h)-(b*g)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_g <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((b*f)-(c*e)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_h <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((a*f)-(c*d)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_k <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((a*e)-(b*d)) <a href="CppOperatorDivide.htm">/</a> determinant;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a> new_a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,0) <a href="CppOperatorAssign.htm">=</a> new_b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,0) <a href="CppOperatorAssign.htm">=</a> new_c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,1) <a href="CppOperatorAssign.htm">=</a> new_d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,1) <a href="CppOperatorAssign.htm">=</a> new_e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,1) <a href="CppOperatorAssign.htm">=</a> new_f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,2) <a href="CppOperatorAssign.htm">=</a> new_g;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,2) <a href="CppOperatorAssign.htm">=</a> new_h;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,2) <a href="CppOperatorAssign.htm">=</a> new_k;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use blockwise in<a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppMatrix.htm">Matrix</a>::Chop <a href="CppReturn.htm">returns</a> a <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ A at [0]&nbsp;&nbsp; B at [1] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ C at [2]&nbsp;&nbsp; D at [4] ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a <a href="CppOperatorAssign.htm">=</a> v[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size1() <a href="CppOperatorEqual.htm">==</a> a.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&nbsp;&nbsp;a_inv <a href="CppOperatorAssign.htm">=</a> Inverse(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b <a href="CppOperatorAssign.htm">=</a> v[1];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; c <a href="CppOperatorAssign.htm">=</a> v[2];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; d <a href="CppOperatorAssign.htm">=</a> v[3];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(c,a_inv)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term_inv <a href="CppOperatorAssign.htm">=</a> Inverse(term);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> a_inv<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_b<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_c<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_d <a href="CppOperatorAssign.htm">=</a> term_inv;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> { new_a, new_b, new_c, new_d };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; result <a href="CppOperatorAssign.htm">=</a> Unchop(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::detail::equals;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUblas.htm">boost::numeric::ublas</a>::prod;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Create<a href="CppMatrix.htm">Matrix</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [1,4]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [2,5]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [3,6]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(3,2, {1,2,3,4,5,6} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 6);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Chop on 3x3<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 1.0 ] | [ 2.0&nbsp;&nbsp; 3.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0 ]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>------+------------<a href="CppOperatorDecrement.htm">--</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 4.0 5.0 6.0 ]&nbsp;&nbsp;&nbsp;&nbsp; [ 4.0 ] | [ 5.0&nbsp;&nbsp; 6.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 7.0 8.0 9.0 ] <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ 7.0 ] | [ 8.0&nbsp;&nbsp; 9.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(3,3, {1.0,4.0,7.0,2.0,5.0,8.0,3.0,6.0,9.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorEqual.htm">==</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 5.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorEqual.htm">==</a> 6.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 7.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 8.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorEqual.htm">==</a> 9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; n <a href="CppOperatorAssign.htm">=</a> Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "m&nbsp;&nbsp; : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[0]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[0] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[1]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[1] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[2]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[2] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[3]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[3] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size1() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size1() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorPlus.htm">+</a> n[2].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorPlus.htm">+</a> n[3].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorPlus.htm">+</a> n[1].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorPlus.htm">+</a> n[3].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Chop on 5x5<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(5,5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 6.0,11.0,16.0,21.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 7.0,12.0,17.0,22.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0, 8.0,13.0,18.0,23.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.0, 9.0,14.0,19.0,24.0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.0,10.0,15.0,20.0,25.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;3.0); <a href="CppAssert.htm">assert</a>(m(0,3) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;4.0); <a href="CppAssert.htm">assert</a>(m(0,4) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;5.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;6.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;7.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;8.0); <a href="CppAssert.htm">assert</a>(m(1,3) <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;9.0); <a href="CppAssert.htm">assert</a>(m(1,4) <a href="CppOperatorEqual.htm">==</a> 10.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 11.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 12.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorEqual.htm">==</a> 13.0); <a href="CppAssert.htm">assert</a>(m(2,3) <a href="CppOperatorEqual.htm">==</a> 14.0); <a href="CppAssert.htm">assert</a>(m(2,4) <a href="CppOperatorEqual.htm">==</a> 15.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(3,0) <a href="CppOperatorEqual.htm">==</a> 16.0); <a href="CppAssert.htm">assert</a>(m(3,1) <a href="CppOperatorEqual.htm">==</a> 17.0); <a href="CppAssert.htm">assert</a>(m(3,2) <a href="CppOperatorEqual.htm">==</a> 18.0); <a href="CppAssert.htm">assert</a>(m(3,3) <a href="CppOperatorEqual.htm">==</a> 19.0); <a href="CppAssert.htm">assert</a>(m(3,4) <a href="CppOperatorEqual.htm">==</a> 20.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(4,0) <a href="CppOperatorEqual.htm">==</a> 21.0); <a href="CppAssert.htm">assert</a>(m(4,1) <a href="CppOperatorEqual.htm">==</a> 22.0); <a href="CppAssert.htm">assert</a>(m(4,2) <a href="CppOperatorEqual.htm">==</a> 23.0); <a href="CppAssert.htm">assert</a>(m(4,3) <a href="CppOperatorEqual.htm">==</a> 24.0); <a href="CppAssert.htm">assert</a>(m(4,4) <a href="CppOperatorEqual.htm">==</a> 25.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; n <a href="CppOperatorAssign.htm">=</a> Chop(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorEqual.htm">==</a> 4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "m&nbsp;&nbsp; : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[0]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[0] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[1]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[1] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[2]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[2] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[3]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[3] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size2() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size1() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size1() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size2() <a href="CppOperatorEqual.htm">==</a> 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorPlus.htm">+</a> n[2].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorPlus.htm">+</a> n[3].size1() <a href="CppOperatorEqual.htm">==</a> m.size1());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorPlus.htm">+</a> n[1].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorPlus.htm">+</a> n[3].size2() <a href="CppOperatorEqual.htm">==</a> m.size2());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Unchop<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check 0x0 to and including 9x9 matrices<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> 0; n_rows<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>n_rows)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> 0; n_cols<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorIncrement.htm">++</a>n_cols)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Epsilon is more or less the smallest round-off error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a random <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> CreateRandom<a href="CppMatrix.htm">Matrix</a>(n_rows,n_cols);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume it is found identical to itself<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(equals(m,m,epsilon,epsilon));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Chop and unchop the input <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Unchop(Chop(m));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume input <a href="CppMatrix.htm">matrix</a> and result are identical<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(equals(m,n,epsilon,epsilon));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 2x2 <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 ] <a href="CppOperatorMinus.htm">-</a>1&nbsp;&nbsp;&nbsp;&nbsp;[ <a href="CppOperatorMinus.htm">-</a>2.0&nbsp;&nbsp; 1.0 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 3.0 4.0 ]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> [&nbsp;&nbsp;1.5&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>0.5 ]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(2,2, {1.0,3.0,2.0,4.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 2.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.0000001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,0) &gt; <a href="CppOperatorMinus.htm">-</a>2.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,0) &lt; <a href="CppOperatorMinus.htm">-</a>2.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,0) &gt;&nbsp;&nbsp;1.5 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,0) &lt;&nbsp;&nbsp;1.5 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,1) &gt;&nbsp;&nbsp;1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,1) &lt;&nbsp;&nbsp;1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,1) &gt; <a href="CppOperatorMinus.htm">-</a>0.5 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,1) &lt; <a href="CppOperatorMinus.htm">-</a>0.5 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prod(m,n)(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> prod(m,n)(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prod(m,n)(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> prod(m,n)(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prod(m,n)(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> prod(m,n)(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prod(m,n)(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> prod(m,n)(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0] <a href="CppOperatorMinus.htm">-</a>1&nbsp;&nbsp;&nbsp;&nbsp;[ <a href="CppOperatorMinus.htm">-</a>24.0&nbsp;&nbsp; 18.0&nbsp;&nbsp; 5.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 0.0 1.0 4.0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;20.0&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>15.0&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>4.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 5.0 6.0 0.0]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> [ <a href="CppOperatorMinus.htm">-</a> 5.0&nbsp;&nbsp;&nbsp;&nbsp;4.0&nbsp;&nbsp; 1.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(3,3, {1.0,0.0,5.0,2.0,1.0,6.0,3.0,4.0,0.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorEqual.htm">==</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 0.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 1.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorEqual.htm">==</a> 4.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 5.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 6.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.0001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,0) &gt; <a href="CppOperatorMinus.htm">-</a>24.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,0) &lt; <a href="CppOperatorMinus.htm">-</a>24.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,0) &gt;&nbsp;&nbsp;20.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,0) &lt;&nbsp;&nbsp;20.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,0) &gt; <a href="CppOperatorMinus.htm">-</a> 5.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,0) &lt; <a href="CppOperatorMinus.htm">-</a> 5.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,1) &gt;&nbsp;&nbsp;18.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,1) &lt;&nbsp;&nbsp;18.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,1) &gt; <a href="CppOperatorMinus.htm">-</a>15.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,1) &lt; <a href="CppOperatorMinus.htm">-</a>15.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,1) &gt;&nbsp;&nbsp; 4.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,1) &lt;&nbsp;&nbsp; 4.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,2) &gt;&nbsp;&nbsp; 5.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,2) &lt;&nbsp;&nbsp; 5.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,2) &gt;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>4.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,2) &lt; <a href="CppOperatorMinus.htm">-</a> 4.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,2) &gt;&nbsp;&nbsp; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,2) &lt;&nbsp;&nbsp; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 3x3 <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0] <a href="CppOperatorMinus.htm">-</a>1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 4.0 4.0 6.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 7.0 8.0 9.0]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Note: cannot <a href="CppMake.htm">make</a> the center value equal to 5.0, as <b><a href="CppThis.htm">this</a></b> <a href="CppMake.htm">make</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> the <a href="CppMatrix.htm">matrix</a> un-invertible (the determinant becomes equal to zero)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Create<a href="CppMatrix.htm">Matrix</a>(3,3, {1.0,4.0,7.0,2.0,4.0,8.0,3.0,6.0,9.0} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorEqual.htm">==</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorEqual.htm">==</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorEqual.htm">==</a> 3.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorEqual.htm">==</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorEqual.htm">==</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorEqual.htm">==</a> 6.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorEqual.htm">==</a> 7.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorEqual.htm">==</a> 8.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorEqual.htm">==</a> 9.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 4x4 <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> CreateRandom<a href="CppMatrix.htm">Matrix</a>(4,4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> i is identity <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,3) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,3) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on bigger matrices<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> 5; sz<a href="CppOperatorNotEqual.htm">!=</a>20; <a href="CppOperatorIncrement.htm">++</a>sz)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> CreateRandom<a href="CppMatrix.htm">Matrix</a>(sz,sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Inverse(m);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMatrix.htm">matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> prod(m,n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> i is identity <a href="CppMatrix.htm">matrix</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> y <a href="CppOperatorAssign.htm">=</a> 0; y<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> x <a href="CppOperatorAssign.htm">=</a> 0; x<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (x <a href="CppOperatorEqual.htm">==</a> y <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (x <a href="CppOperatorNotEqual.htm">!=</a> y <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a> Screen output<br/>
<br/>
m&nbsp;&nbsp; : [3,3]((1,2,3),(4,5,6),(7,8,9))<br/>
n[0]: [1,1]((1))<br/>
n[1]: [1,2]((2,3))<br/>
n[2]: [2,1]((4),(7))<br/>
n[3]: [2,2]((5,6),(8,9))<br/>
m&nbsp;&nbsp; : [5,5]((1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15),(16,17,18,19,20),(21,22,23,24,25))<br/>
n[0]: [2,2]((1,2),(6,7))<br/>
n[1]: [2,3]((3,4,5),(8,9,10))<br/>
n[2]: [3,2]((11,12),(16,17),(21,22))<br/>
n[3]: [3,3]((13,14,15),(18,19,20),(23,24,25))<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
