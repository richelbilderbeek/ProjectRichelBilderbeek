<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>dynamically allocated array</title>
  <meta name="description" content="C++ dynamically allocated array"/>
  <meta name="keywords" content="C++ dynamically allocated array code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppArrayDynamic.htm">dynamically allocated array</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppArrayDynamic.htm">dynamically allocated array</a> is an 
<a href="CppArray.htm">array</a> of which the size is not known at <a href="CppCompileTime.htm">compile time</a>
(as opposite of the <a href="CppArrayStatic.htm">static arrays</a>).</p>
<p>&nbsp;</p>
<p>Prefer a <a href="CppVector.htm">std::vector</a> to <a href="CppArrayDynamic.htm">dynamically allocated arrays</a>
[1-5].</p>
<p>&nbsp;</p>
<p>A <a href="CppArrayDynamic.htm">dynamically allocated array</a> is created using 
<a href="CppNew.htm">new</a> and must be <a href="CppDeleteArray.htm">delete[]</a>-ed.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#include &lt;cassert&gt;<br/>
#include &lt;cstdlib&gt;<br/>
<br/>
int main()<br/>
{<br/>
&nbsp;&nbsp;const int randomSize = std::rand() % 100;<br/>
&nbsp;&nbsp;int * const myArray = new int[randomSize];<br/>
&nbsp;&nbsp;delete[] myArray;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 Chapter 5.8.4 'Use vector and valarray rather than built-in (C-style) arrays'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>  . C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 76: 'Use vector by default. Otherwise choose an appropriate container'</li>
  <li><a href="CppMarshallCline.htm">Marshall Cline</a>, <a href="CppGregLomow.htm">Greg Lomow</a> and <a href="CppMikeGirou.htm">Mike Girou</a>. C++ FAQs. ISBN: 0-201-3098301, FAQ 28.02: 'Are arrays good or evil?' (Answer: 'Arrays are evil'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 Chapter C.14.11 'Prefer vector over array'</li>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 5.8.2: 'Take care not to write beyond the bounds of an array'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
