<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>boost::shared_ptr</title>
  <meta name="description" content="C++ boost::shared_ptr"/>
  <meta name="keywords" content="C++ shared_ptr std::shared_ptr stl std shared pointer shared_pointer code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>)
  <img src="PicCpp11.png" alt="C++11"/><img src="PicStl.png" alt="STL"/> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>
</h1>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>
  <a href="CppStdShared_ptr.htm">std::shared_ptr</a> is a type of <a href="CppSmartPointer.htm">smart pointer</a> that can be copied safely and cheap, 
  without copying the object <a href="CppPointer.htm">pointed</a> to. When the last 
  <a href="CppStdShared_ptr.htm">std::shared_ptr</a> using an object goes out of <a href="CppScope.htm">scope</a>, 
  it will <b><a href="CppDelete.htm">delete</a></b> the object <a href="CppPointer.htm">pointed</a>to.
</p>
<p>&nbsp;</p>
<!-- start of code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp11.png" alt="C++11"/><img src="PicStl.png" alt="STL"/> Creating a <a href="CppStdShared_ptr.htm">std::shared_ptr</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only works when <b><a href="CppUsing.htm">using</a></b> <a href="Cpp11.htm">C++11</a><br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; p;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppAdvice.htm">Advice</a></h2>
<p>&nbsp;</p>
<ul>
  <li>
    Prefer pass-by-reference-to-const to pass-by-value for <a href="CppStdShared_ptr.htm">std::shared_ptrs</a> [1]
  </li>
  <li>
    Use <a href="CppStdShared_ptr.htm"> to refer to shared <a href="CppObject.htm">objects</a> [2]
  </li>
  <li>
    Prefer <a href="CppStdUnique_ptr.htm">std::unique_ptr</a> over <a href="CppStdShared_ptr.htm">std::shared_ptr</a> [3]
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppScottMeyers.htm">Scott Meyers</a>. <a href="http://cppandbeyond.com/2012/04/16/session-topic-initial-thoughts-on-effective-c11">C++ And Beyond 2012 session: 'Initial thoughts on Effective C++11'. 2012. 'Prefer Pass-by-Reference-to-const to Pass-by-Value for std::shared_ptrs'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. A tour of C++. 2014. ISBN: 978-0-321-958310. Chapter 11.7.6, page 131: 'Use shared_ptr to refer to shared objects'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. A tour of C++. 2014. ISBN: 978-0-321-958310. Chapter 11.7.8, page 131: 'Prefer unique_ptr over shared_ptr'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="http://gcc.gnu.org/onlinedocs/libstdc++/manual/shared_ptr.html">GCC's page about std::shared_ptr</a></li>
  <li><a href="http://www.boost.org/doc/libs/1_35_0/libs/smart_ptr/shared_ptr.htm">Boost's page about boost::shared_ptr</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
