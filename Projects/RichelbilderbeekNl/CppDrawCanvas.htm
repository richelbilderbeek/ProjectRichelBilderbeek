<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>DrawCanvas</title>
  <meta name="description" content="C++ DrawCanvas"/>
  <meta name="keywords" content="C++ DrawCanvas "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppDrawCanvas.htm">DrawCanvas</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.1.647 at Fri Jun  6 17:13:04 2014
 -->
<p><img src="PicStl.png" alt="STL"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/><img src="PicWindows.png" alt="Windows"/></p>
<p>&nbsp;</p>
<p>
  <a href="CppDrawCanvas.htm">DrawCanvas</a> is a <a href="CppCanvas.htm">Canvas</a>
  to draw on.
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppDrawCanvas/CppDrawCanvas.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppDrawCanvas/CppDrawCanvas.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppDrawCanvas<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppDrawCanvas/drawcanvas.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppDrawCanvas/drawcanvas.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/CppDrawCanvas/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppDrawCanvas/drawcanvas.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppDrawCanvas/drawcanvas.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Draw<a href="CppCanvas.htm">Canvas</a>, ASCII art painting surface <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2008-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/CppDraw<a href="CppCanvas.htm">Canvas</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RIBI_DRAWCANVAS_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_DRAWCANVAS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/<a href="CppPointer.htm">point</a>_xy.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>/geometries/polygon.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppSignals2.htm">signals2</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/base_units/angle/radian.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "canvas.h"<br/>
<a href="CppInclude.htm">#include</a> "canvascolorsystem.h"<br/>
<a href="CppInclude.htm">#include</a> "canvascoordinatsystem.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQRegExp.htm">QRegExp</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>The Draw<a href="CppCanvas.htm">Canvas</a> is an ASCII art <a href="Tools.htm">tool</a> to draw on<br/>
<a href="CppComment.htm">///</a>The Draw<a href="CppCanvas.htm">Canvas</a> has a coordinat system of (0,0)-(width,height)<br/>
<a href="CppComment.htm">///</a>similar to the possible <a href="CppChar.htm">character</a> position on a screen.<br/>
<a href="CppComment.htm">///</a>Everything drawn beyond the range of Draw<a href="CppCanvas.htm">Canvas</a> is not stored.<br/>
<a href="CppComment.htm">///</a>Yet, <b><a href="CppIf.htm">if</a></b> <b><a href="CppFor.htm">for</a></b> example a line is drawn between two off-screen coordinats,<br/>
<a href="CppComment.htm">///</a>the part that goes through the Draw<a href="CppCanvas.htm">Canvas</a> is drawn and stored<br/>
<b><a href="CppStruct.htm">struct</a></b> Draw<a href="CppCanvas.htm">Canvas</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppCanvas.htm">Canvas</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::d2::<a href="CppPointer.htm">point</a>_xy&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Coordinat;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of <a href="CppChar.htm">character</a>s the Draw<a href="CppCanvas.htm">Canvas</a> is heigh and wide<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/but also the maximum x and y coordinat. The minimum<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/x and y coordinats are 0.0 and 0.0<br/>
&nbsp;&nbsp;Draw<a href="CppCanvas.htm">Canvas</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem color_system <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>ColorSystem::normal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem coordinat_system <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem::screen);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a Draw<a href="CppCanvas.htm">Canvas</a> from its raw internals<br/>
&nbsp;&nbsp;Draw<a href="CppCanvas.htm">Canvas</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; canvas,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem color_system <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>ColorSystem::normal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem coordinat_system <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem::screen);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Load a Draw<a href="CppCanvas.htm">Canvas</a> from file<br/>
&nbsp;&nbsp;Draw<a href="CppCanvas.htm">Canvas</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;~Draw<a href="CppCanvas.htm">Canvas</a>() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Clears the canvas<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Clear() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draws the arc defined by the given <a href="CppRectangle.htm">rectangle</a>, startAngle and spanAngle.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Positive values <b><a href="CppFor.htm">for</a></b> the angles mean clockwise,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppWhile.htm">while</a></b> negative values mean the clockwise direction.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Zero degrees is at the 12 o'clock position.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawArc(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> left, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> top, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> right, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> bottom,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::plane_angle&gt; startAngle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::plane_angle&gt; spanAngle<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw (or actually: add) a circle on the canvas at (xMid,yMid),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with radius ray<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawCircle(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xMid, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yMid, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw (or actually: add) a dot on the canvas at (x,y), where<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(x,y) is the center of a dot with radius 1.0. It is not checked that<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/(x,y) is in ( [0.0,GetWidth()&gt;, [0.0,GetHeight()&gt; )<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawDot(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw (or actually: add) an ellipse on the canvas<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawEllipse(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> left, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> top, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> right, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> bottom) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw (or actually: add) a line on the canvas from (x1,y1) to (x2,y2),<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/where (x1,y1) and (x2,y2) are the centers of a dot with radius 1.0 at<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the edges of the line<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawLine(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawLine(<b><a href="CppConst.htm">const</a></b> Coordinat from, <b><a href="CppConst.htm">const</a></b> Coordinat to) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw (or actually: add) a polygon on the canvas<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawPolygon(<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::polygon&lt;Coordinat&gt;&amp; polygon) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw a Y-X-ordered surface to the Draw<a href="CppCanvas.htm">Canvas</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawSurface(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Draw (or actually: add) text to the Draw<a href="CppCanvas.htm">Canvas</a>, where (top,left) is the topleft coordinat<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of the text. The text will end up as dots drawn <b><a href="CppFor.htm">for</a></b> each <a href="CppChar.htm">character</a> its pixel.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Dot<a href="CppMatrix.htm">Matrix</a> font is used, with a spacing of two pixel, as the letters tend to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/overlap otherwise.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;Draw<a href="CppCanvas.htm">Canvas</a>::DrawText(1,1,"<a href="CppHelloWorld.htm">Hello world</a>") results in:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM&nbsp;&nbsp;&nbsp;&nbsp; MM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp; MMM&nbsp;&nbsp;&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp; MMM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp; MMM&nbsp;&nbsp; M MM&nbsp;&nbsp;&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp; MM M<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;MMMMM&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M&nbsp;&nbsp; M&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;MM&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;MM<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;MMMMM&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M M M&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp; M<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M M M&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp; M<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;M&nbsp;&nbsp; M&nbsp;&nbsp; MMM&nbsp;&nbsp;&nbsp;&nbsp;MMM&nbsp;&nbsp;&nbsp;&nbsp;MMM&nbsp;&nbsp;&nbsp;&nbsp;MMM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M M&nbsp;&nbsp;&nbsp;&nbsp;MMM&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MMM&nbsp;&nbsp;&nbsp;&nbsp;MMMM<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawText(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> top, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> left, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The color system used:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> normal: full/drawn is displayed by M<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> invert: empty/non-drawn is displayed by M<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystem GetColorSystem() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_color_system; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The coordinat system used in displayal:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> screen: origin is at top-left of the screen<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> graph: origin is at bottom-left of the screen<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem GetCoordinatSystem() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_coordinat_system; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Draw<a href="CppCanvas.htm">Canvas</a> its internal data: a 2D y-x-ordered <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of <b><a href="CppDouble.htm">double</a></b>s, where 0.0 denotes empty/non-drawn<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/and 1.0 denotes full/drawn.<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; GetGreynesses() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_canvas; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the height of the canvas is <a href="CppChar.htm">character</a>s<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_canvas.size(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppVersion.htm">version</a> history of <b><a href="CppThis.htm">this</a></b> <b><a href="CppClass.htm">class</a></b><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the width of the canvas is <a href="CppChar.htm">character</a>s<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> (GetHeight()<a href="CppOperatorEqual.htm">==</a>0 ? 0 : m_canvas[0].size() ); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Save to file<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the color system used<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetColorSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem color_system) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the coordinat system used<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetCoordinatSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem coordinat_system) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; ToStrings() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Draw<a href="CppCanvas.htm">Canvas</a> its internal data: a 2D y-x-ordered <a href="CppStdVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/of <b><a href="CppDouble.htm">double</a></b>s, where 0.0 denotes empty/non-drawn<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/and 1.0 denotes full/drawn.<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_canvas;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The color system used:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> normal: full/drawn is displayed by M<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> invert: empty/non-drawn is displayed by M<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystem m_color_system;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The coordinat system used in displayal:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> screen: origin is at top-left of the screen<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-</a> graph: origin is at bottom-left of the screen<br/>
&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem m_coordinat_system;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetRegexMatches.htm">GetRegexMatches</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppGetRegexMatches.htm">GetRegexMatches</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRegExp.htm">QRegExp</a>&amp; r);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> a coordinat is in the range of the Draw<a href="CppCanvas.htm">Canvas</a><br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsInRange(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtains the minimum element of a 2D <a href="CppContainer.htm">container</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMinElement.htm">MinElement</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type <a href="CppMinElement.htm">MinElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtains the maximal element of a 2D <a href="CppContainer.htm">container</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMaxElement.htm">MaxElement</a>.htm<br/>
&nbsp;&nbsp;<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type <a href="CppMaxElement.htm">MaxElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Plot a surface on screen<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<b><a href="CppIf.htm">if</a></b> as_screen_coordinat_system is <b><a href="CppTrue.htm">true</a></b>, the origin is in the top left<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/corner of the screen, <b><a href="CppElse.htm">else</a></b> it is in the bottom left of the screen,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/as is usual in graphs<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppPlotSurface.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> PlotSurface(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; v,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> use_normal_color_system,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> as_screen_coordinat_system);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; canvas);<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; canvas);<br/>
<br/>
<a href="CppComment.htm">///</a>Useful <b><a href="CppFor.htm">for</a></b> exact comparison<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppComment.htm">///</a>Useful <b><a href="CppFor.htm">for</a></b> fuzzy comparison, like (1) Save (2) Load (3) Compare original<br/>
<a href="CppComment.htm">///</a>with loaded <a href="CppVersion.htm">version</a><br/>
<b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_DRAWCANVAS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppDrawCanvas/drawcanvas.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppDrawCanvas/drawcanvas.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
Draw<a href="CppCanvas.htm">Canvas</a>, ASCII art painting surface <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2008-2014 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.&nbsp;&nbsp;If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a> From http://www.richelbilderbeek.nl/CppDraw<a href="CppCanvas.htm">Canvas</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "drawcanvas.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppAlgorithm.htm">algorithm</a>/string/split.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppGeometry.htm">geometry</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQString.htm">QString</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQRegExp.htm">QRegExp</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "canvascolorsystems.h"<br/>
<a href="CppInclude.htm">#include</a> "canvascoordinatsystems.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="ToolDotMatrix.htm">dotmatrix</a>string.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppGeometry.htm">geometry</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "xml.h"<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Draw<a href="CppCanvas.htm">Canvas</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem color_system,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem coordinat_system)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_canvas(<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(height,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width,0.0))),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_color_system(color_system),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_coordinat_system(coordinat_system)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(width&nbsp;&nbsp;&gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(height &gt; 0);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Draw<a href="CppCanvas.htm">Canvas</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; canvas,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem color_system,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem coordinat_system)<br/>
&nbsp;&nbsp;: m_canvas(canvas),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_color_system(color_system),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_coordinat_system(coordinat_system)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!canvas.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!canvas[0].empty());<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Draw<a href="CppCanvas.htm">Canvas</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;: m_canvas{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_color_system{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_coordinat_system{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 17);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(0,8) <a href="CppOperatorEqual.htm">==</a> "&lt;canvas&gt;");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.substr(s.size() <a href="CppOperatorMinus.htm">-</a> 9,9) <a href="CppOperatorEqual.htm">==</a> "&lt;/canvas&gt;");<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { <a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;color_system&gt;.*&lt;/color_system&gt;)")) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_color_system <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>ColorSystems::ToType(<a href="CppRibi.htm">ribi</a>::xml::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { <a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;coordinat_system&gt;.*&lt;/coordinat_system&gt;)")) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_coordinat_system <a href="CppOperatorAssign.htm">=</a> <a href="CppCanvas.htm">Canvas</a>CoordinatSystems::ToType(<a href="CppRibi.htm">ribi</a>::xml::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { <a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;n_cols&gt;.*&lt;/n_cols&gt;)")) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(<a href="CppCanCast.htm">CanCast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::xml::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0])));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_cols <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppRibi.htm">ribi</a>::xml::<a href="CppStripXmlTag.htm">StripXmlTag</a>(v[0]));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_canvas.push_back( {} );<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { <a href="CppGetRegexMatches.htm">GetRegexMatches</a>(s,<a href="CppQRegExp.htm">QRegExp</a>("(&lt;data&gt;.*&lt;/data&gt;)")) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "(&lt;data&gt;.*&lt;/data&gt;) must be present exactly once");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> lines { xml::<a href="CppXml.htm">Xml</a>ToVector(v[0]) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(lines.first <a href="CppOperatorEqual.htm">==</a> "data");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; data { lines.second };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: data)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(s);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_canvas.back().push_back(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> n_cols)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_canvas.push_back( {} );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_canvas.back().empty());<br/>
&nbsp;&nbsp;m_canvas.pop_back();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Clear() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b>&amp; row: m_canvas)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b>&amp; cell:row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> row: m_canvas)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAccumulate.htm">std::accumulate</a>(row.begin(),row.end(),0.0) <a href="CppOperatorEqual.htm">==</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawArc(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> left, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> top, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> right, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> bottom,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::plane_angle&gt; startAngle,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::plane_angle&gt; spanAngle) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(left &lt; right);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top &lt; bottom);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midx <a href="CppOperatorAssign.htm">=</a> (left <a href="CppOperatorPlus.htm">+</a> right) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midy <a href="CppOperatorAssign.htm">=</a> (top <a href="CppOperatorPlus.htm">+</a> bottom) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray_horizontal <a href="CppOperatorAssign.htm">=</a> (right&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> left) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray_vertical&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (bottom <a href="CppOperatorMinus.htm">-</a> top ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> average_ray&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (ray_horizontal <a href="CppOperatorPlus.htm">+</a> ray_vertical) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> arclength <a href="CppOperatorAssign.htm">=</a> average_ray * pi * 2.0 * (spanAngle.value() <a href="CppOperatorDivide.htm">/</a> (2.0 * pi));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_steps <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAbs.htm">std::abs</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(arclength <a href="CppOperatorPlus.htm">+</a> 0.5));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_steps <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_steps &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle { startAngle.value() };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dAngle <a href="CppOperatorAssign.htm">=</a> spanAngle.value() <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_steps);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_steps; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> midx <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(angle) * ray_horizontal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> midy <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(angle) * ray_vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawDot(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorPlusAssign.htm">+=</a> dAngle;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawCircle(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xMid, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yMid, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> circumference <a href="CppOperatorAssign.htm">=</a> ray * pi * 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_steps <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(circumference <a href="CppOperatorPlus.htm">+</a> 0.5);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n_steps <a href="CppOperatorEqual.htm">==</a> 0) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_steps &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dAngle <a href="CppOperatorAssign.htm">=</a> 2.0 * pi <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_steps);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_steps; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> xMid <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(angle) * ray);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> yMid <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(angle) * ray);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawDot(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorPlusAssign.htm">+=</a> dAngle;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawDot(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume a dot has dimensions 1.0 x 1.0<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>and x and y are exactly in the middle of <b><a href="CppThis.htm">this</a></b> dot<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xBegin <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorMinus.htm">-</a> 0.5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> yBegin <a href="CppOperatorAssign.htm">=</a> y <a href="CppOperatorMinus.htm">-</a> 0.5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fracLeft <a href="CppOperatorAssign.htm">=</a> <a href="CppStdCeil.htm">std::ceil</a>(xBegin) <a href="CppOperatorMinus.htm">-</a> xBegin;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fracTop&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdCeil.htm">std::ceil</a>(yBegin) <a href="CppOperatorMinus.htm">-</a> yBegin;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> indexLeft <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFloor.htm">std::floor</a>(xBegin);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> indexTop&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdFloor.htm">std::floor</a>(yBegin);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsInRange(indexLeft&nbsp;&nbsp;,indexTop&nbsp;&nbsp;))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_canvas[indexTop&nbsp;&nbsp;][indexLeft&nbsp;&nbsp;] <a href="CppOperatorPlusAssign.htm">+=</a> (fracLeft * fracTop);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsInRange(indexLeft+1,indexTop&nbsp;&nbsp;))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_canvas[indexTop&nbsp;&nbsp;][indexLeft+1] <a href="CppOperatorPlusAssign.htm">+=</a> ((1.0-fracLeft) * fracTop);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsInRange(indexLeft&nbsp;&nbsp;,indexTop+1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_canvas[indexTop+1][indexLeft&nbsp;&nbsp;] <a href="CppOperatorPlusAssign.htm">+=</a> (fracLeft * (1.0-fracTop));<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (IsInRange(indexLeft+1,indexTop+1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_canvas[indexTop+1][indexLeft+1] <a href="CppOperatorPlusAssign.htm">+=</a> ((1.0-fracLeft) * (1.0-fracTop));<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawEllipse(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> left, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> top, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> right, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> bottom) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(left &lt; right);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(top &lt; bottom);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midx <a href="CppOperatorAssign.htm">=</a> (left <a href="CppOperatorPlus.htm">+</a> right) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midy <a href="CppOperatorAssign.htm">=</a> (top <a href="CppOperatorPlus.htm">+</a> bottom) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(midx &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray_horizontal <a href="CppOperatorAssign.htm">=</a> (right&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> left) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> ray_vertical&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> (bottom <a href="CppOperatorMinus.htm">-</a> top ) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ray_horizontal &gt; 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ray_vertical &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> average_ray&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (ray_horizontal <a href="CppOperatorPlus.htm">+</a> ray_vertical) <a href="CppOperatorDivide.htm">/</a> 2.0;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(average_ray &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> circumference <a href="CppOperatorAssign.htm">=</a> average_ray * pi * 2.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_steps <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(circumference <a href="CppOperatorPlus.htm">+</a> 0.5);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_steps &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d_angle <a href="CppOperatorAssign.htm">=</a> 2.0 * pi <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_steps);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d_angle &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_steps; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> midx <a href="CppOperatorPlus.htm">+</a> (<a href="CppStdSin.htm">std::sin</a>(angle) * ray_horizontal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> midy <a href="CppOperatorMinus.htm">-</a> (<a href="CppStdCos.htm">std::cos</a>(angle) * ray_vertical);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawDot(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;angle <a href="CppOperatorPlusAssign.htm">+=</a> d_angle;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawSurface(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_canvas <a href="CppOperatorNotEqual.htm">!=</a> v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_canvas <a href="CppOperatorAssign.htm">=</a> v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawLine(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x2, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx <a href="CppOperatorAssign.htm">=</a> x2 <a href="CppOperatorMinus.htm">-</a> x1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy <a href="CppOperatorAssign.htm">=</a> y2 <a href="CppOperatorMinus.htm">-</a> y1;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dist <a href="CppOperatorAssign.htm">=</a> Geometry().<a href="CppGetDistance.htm">GetDistance</a>(dx,dy);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> step_x <a href="CppOperatorAssign.htm">=</a> dx <a href="CppOperatorDivide.htm">/</a> dist;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> step_y <a href="CppOperatorAssign.htm">=</a> dy <a href="CppOperatorDivide.htm">/</a> dist;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_steps <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(dist <a href="CppOperatorPlus.htm">+</a> 0.5);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> x1;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> y1;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_steps; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawDot(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x<a href="CppOperatorPlusAssign.htm">+=</a>step_x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;y<a href="CppOperatorPlusAssign.htm">+=</a>step_y;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawLine(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Coordinat from,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Coordinat to<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;DrawLine(from.x(),from.y(),to.x(),to.y());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawPolygon(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::polygon&lt;<a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Coordinat&gt;&amp; polygon<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat&gt; <a href="CppPointer.htm">point</a>s <a href="CppOperatorAssign.htm">=</a> polygon.outer();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppPointer.htm">point</a>s.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DrawLine(<a href="CppPointer.htm">point</a>s[i],<a href="CppPointer.htm">point</a>s[ (i <a href="CppOperatorPlus.htm">+</a> 1) <a href="CppOperatorModulus.htm">%</a> n]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::DrawText(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> top, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> left, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; text) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> spacing <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Dot<a href="CppMatrix.htm">Matrix</a>String&gt; m {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::Dot<a href="CppMatrix.htm">Matrix</a>String(text,spacing)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m-&gt;Get<a href="CppMatrix.htm">Matrix</a>Width();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> m-&gt;Get<a href="CppMatrix.htm">Matrix</a>Height();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m-&gt;Get<a href="CppMatrix.htm">Matrix</a>(x,y))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawDot(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x) <a href="CppOperatorPlus.htm">+</a> 0.5,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y) <a href="CppOperatorPlus.htm">+</a> 0.5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::<a href="CppGetRegexMatches.htm">GetRegexMatches</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRegExp.htm">QRegExp</a>&amp; r_original)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQRegExp.htm">QRegExp</a> r(r_original);<br/>
&nbsp;&nbsp;r.setMinimal(<b><a href="CppTrue.htm">true</a></b>); <a href="CppComment.htm">//</a><a href="CppQRegExp.htm">QRegExp</a> must be non-greedy<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> pos <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> ((pos <a href="CppOperatorAssign.htm">=</a> r.indexIn(s.c_str(), pos)) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppOperatorMinus.htm">-</a>1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a> q <a href="CppOperatorAssign.htm">=</a> r.cap(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (q.isEmpty()) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(q.toStdString());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pos <a href="CppOperatorPlusAssign.htm">+=</a> r.matchedLength();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "3.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2008-xx-xx: <a href="CppVersion.htm">version</a> 1.0: initial <a href="CppBuilder.htm">C++ Builder</a> <a href="CppVersion.htm">version</a>, initially called <a href="CppCanvas.htm">Canvas</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-08-21: <a href="CppVersion.htm">version</a> 2.0: port to <a href="Cpp11.htm">C++11</a> under <a href="CppQtCreator.htm">Qt Creator</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2013-08-22: <a href="CppVersion.htm">version</a> 2.1: allow two color and coordinat systems"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-01-07: <a href="CppVersion.htm">version</a> 2.2: added the DrawText <a href="CppMemberFunction.htm">member function</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-01-10: <a href="CppVersion.htm">version</a> 3.0: renamed to Draw<a href="CppCanvas.htm">Canvas</a>, inherits from <b><a href="CppNew.htm">new</a></b> <b><a href="CppClass.htm">class</a></b> called <a href="CppCanvas.htm">Canvas</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2014-05-10: <a href="CppVersion.htm">version</a> 3.1: allow to draw a <a href="CppBoost.htm">Boost</a>.Geometry polygon, increase support <b><a href="CppFor.htm">for</a></b> <a href="CppBoost.htm">Boost</a>.Geometry"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::IsInRange(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (&nbsp;&nbsp; x &lt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> y &lt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_canvas.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_canvas[y].size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp; )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::PlotSurface(<br/>
&nbsp;&nbsp;<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> use_normal_color_system,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> as_screen_coordinat_system)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Surface must have a size");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size() &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Surface must have a two-dimensional size");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain the ASCII art gradient and its size<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt; asciiArtGradient <a href="CppOperatorAssign.htm">=</a> GetAsciiArtGradient();<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nAsciiArtGradientChars <a href="CppOperatorAssign.htm">=</a> asciiArtGradient.size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Minimum and maximum are not given, so these need to be calculated<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minVal <a href="CppOperatorAssign.htm">=</a> <a href="CppMinElement.htm">MinElement</a>(v);<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> maxVal <a href="CppOperatorAssign.htm">=</a> <a href="CppMaxElement.htm">MaxElement</a>(v);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (minVal <a href="CppOperatorEqual.htm">==</a> maxVal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;maxVal <a href="CppOperatorAssign.htm">=</a> minVal <a href="CppOperatorEqual.htm">==</a> 0.0 ? 1.0 : minVal * 2.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the pixels<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> row_function(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; row,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minVal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxVal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> use_normal_color_system)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppIterator.htm">Iterate</a> through each row's columns<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::const_iterator colEnd <a href="CppOperatorAssign.htm">=</a> row.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::const_iterator col <a href="CppOperatorAssign.htm">=</a> row.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col <a href="CppOperatorNotEqual.htm">!=</a> colEnd;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Scale the found grey value to an ASCII art <a href="CppChar.htm">character</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxVal <a href="CppOperatorNotEqual.htm">!=</a> minVal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxVal <a href="CppOperatorMinus.htm">-</a> minVal <a href="CppOperatorNotEqual.htm">!=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(maxVal &gt; minVal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> greyValue<a href="CppDouble.htm">Double</a> <a href="CppOperatorAssign.htm">=</a> ( (*col) <a href="CppOperatorMinus.htm">-</a> minVal) <a href="CppOperatorDivide.htm">/</a> (maxVal <a href="CppOperatorMinus.htm">-</a> minVal);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(greyValue<a href="CppDouble.htm">Double</a> <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> greyValue<a href="CppDouble.htm">Double</a> <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> greyValueInt<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (use_normal_color_system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? greyValue<a href="CppDouble.htm">Double</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 1.0 <a href="CppOperatorMinus.htm">-</a> greyValue<a href="CppDouble.htm">Double</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) * nAsciiArtGradientChars;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> greyValue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> ( greyValueInt &lt; 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? 0 : (greyValueInt &gt; nAsciiArtGradientChars <a href="CppOperatorMinus.htm">-</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? nAsciiArtGradientChars <a href="CppOperatorMinus.htm">-</a> 1: greyValueInt) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(greyValue <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> greyValue &lt; nAsciiArtGradientChars);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> asciiArtGradient[greyValue];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppIterator.htm">Iterator</a> through all rows<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (as_screen_coordinat_system)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> row: v)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row_function(row,os,minVal,maxVal,use_normal_color_system);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> rowEnd <a href="CppOperatorAssign.htm">=</a> v.rend();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> row <a href="CppOperatorAssign.htm">=</a> v.rbegin(); row <a href="CppOperatorNotEqual.htm">!=</a> rowEnd; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row_function(*row,os,minVal,maxVal,use_normal_color_system);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::<a href="CppMinElement.htm">MinElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppContainer.htm">Container</a> must have a size");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain an initial lowest value<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type minValue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppStdMin_element.htm">std::min_element</a>(v[0].begin(),v[0].end()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the <a href="CppIterator.htm">iterator</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator rowEnd <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator row <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>row; <a href="CppComment.htm">//</a>Move to the next position, as index 0 is already read from<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; row <a href="CppOperatorNotEqual.htm">!=</a> rowEnd; <a href="CppOperatorIncrement.htm">++</a>row) <a href="CppComment.htm">//</a>row is already <a href="CppInitialize.htm">initialize</a>d<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type localMinVal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppStdMin_element.htm">std::min_element</a>(row-&gt;begin(),row-&gt;end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (localMinVal &lt; minValue) minValue <a href="CppOperatorAssign.htm">=</a> localMinVal;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> minValue;<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::<a href="CppMaxElement.htm">MaxElement</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.empty() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b> <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppContainer.htm">Container</a> must have a size");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain an initial heighest value<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type maxValue<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppStdMax_element.htm">std::max_element</a>(v[0].begin(),v[0].end()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the <a href="CppIterator.htm">iterator</a>s<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator rowEnd <a href="CppOperatorAssign.htm">=</a> v.end();<br/>
&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::const_iterator row <a href="CppOperatorAssign.htm">=</a> v.begin();<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>row; <a href="CppComment.htm">//</a>Move to the next position, as index 0 is already read from<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; row <a href="CppOperatorNotEqual.htm">!=</a> rowEnd; <a href="CppOperatorIncrement.htm">++</a>row) <a href="CppComment.htm">//</a>row is already <a href="CppInitialize.htm">initialize</a>d<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type::value_type localMaxVal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> *(<a href="CppStdMax_element.htm">std::max_element</a>(row-&gt;begin(),row-&gt;end()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (localMaxVal &gt; maxValue) maxValue <a href="CppOperatorAssign.htm">=</a> localMaxVal;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> maxValue;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Save(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> line: m_canvas)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b> element: line)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t { <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(element) };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> xml::VectorTo<a href="CppXml.htm">Xml</a>("data",v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> xml::To<a href="CppXml.htm">Xml</a>("n_cols",GetWidth());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>color system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> xml::To<a href="CppXml.htm">Xml</a>("color_system",<a href="CppCanvas.htm">Canvas</a>ColorSystems::ToStr(m_color_system));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>coordinat system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> xml::To<a href="CppXml.htm">Xml</a>("coordinat_system",<a href="CppCanvas.htm">Canvas</a>CoordinatSystems::ToStr(m_coordinat_system));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> xml::To<a href="CppXml.htm">Xml</a>("canvas",s.str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Draw<a href="CppCanvas.htm">Canvas</a> c(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!Is<a href="CppAbout.htm">About</a>Equal(*<b><a href="CppThis.htm">this</a></b>,c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("ERROR");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Is<a href="CppAbout.htm">About</a>Equal(*<b><a href="CppThis.htm">this</a></b>,c));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::<a href="CppSeperateString.htm">SeperateString</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; input,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> seperator) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppBoostSplit.htm">boost::algorithm::split</a>(v,input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBind2nd.htm">std::bind2nd</a>(<a href="CppStdEqual_to.htm">std::equal_to</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;(),seperator),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppAlgorithm.htm">algorithm</a>::token_compress_on);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::SetColorSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>ColorSystem colorSystem) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;m_color_system <a href="CppOperatorNotEqual.htm">!=</a> colorSystem)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_color_system <a href="CppOperatorAssign.htm">=</a> colorSystem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::SetCoordinatSystem(<b><a href="CppConst.htm">const</a></b> <a href="CppCanvas.htm">Canvas</a>CoordinatSystem coordinatSystem) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;m_coordinat_system <a href="CppOperatorNotEqual.htm">!=</a> coordinatSystem)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_coordinat_system <a href="CppOperatorAssign.htm">=</a> coordinatSystem;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_signal_changed(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Starting <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Test");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Drawing text<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> 90;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> 18;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Draw<a href="CppCanvas.htm">Canvas</a>&gt; canvas(<b><a href="CppNew.htm">new</a></b> Draw<a href="CppCanvas.htm">Canvas</a>(maxx,maxy,<a href="CppCanvas.htm">Canvas</a>ColorSystem::invert));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s_before;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s_before <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*canvas);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_before {s_before.str() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(str_before.size()) <a href="CppOperatorMinus.htm">-</a> maxy <a href="CppOperatorEqual.htm">==</a> maxx * maxy); <a href="CppComment.htm">//</a>-maxy, as newlines are added<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(str_before.begin(),str_before.end(),' ') <a href="CppOperatorEqual.htm">==</a> maxx * maxy); <a href="CppComment.htm">//</a>Only spaces<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawText(1,1,"<a href="CppHelloWorld.htm">Hello world</a>");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s_after;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s_after <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*canvas);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_after {s_after.str() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(str_after.begin(),str_after.end(),' ') <a href="CppOperatorNotEqual.htm">!=</a> maxx * maxy); <a href="CppComment.htm">//</a>Line trly drawn<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is a line that starts and ends beyond the canvas drawn?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> 4;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Draw<a href="CppCanvas.htm">Canvas</a>&gt; canvas(<b><a href="CppNew.htm">new</a></b> Draw<a href="CppCanvas.htm">Canvas</a>(maxx,maxy,<a href="CppCanvas.htm">Canvas</a>ColorSystem::invert));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s_before;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s_before <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*canvas);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_before {s_before.str() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(str_before.size()) <a href="CppOperatorMinus.htm">-</a> maxy <a href="CppOperatorEqual.htm">==</a> maxx * maxy); <a href="CppComment.htm">//</a>-maxy, as newlines are added<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(str_before.begin(),str_before.end(),' ') <a href="CppOperatorEqual.htm">==</a> maxx * maxy); <a href="CppComment.htm">//</a>Only spaces<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawLine(-maxx,-maxy,maxx*2.0,maxy*2.0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s_after;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s_after <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*canvas);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> str_after {s_after.str() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(str_after.begin(),str_after.end(),' ') <a href="CppOperatorNotEqual.htm">!=</a> maxx * maxy); <a href="CppComment.htm">//</a>Line trly drawn<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw a polygon<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;6 <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;5 <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;4 <a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;3 <a href="CppOperatorPlus.htm">+</a> B&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| |&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;2 <a href="CppOperatorPlus.htm">+</a> |&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| |&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1 <a href="CppOperatorPlus.htm">+</a> A---D<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0 <a href="CppOperatorPlus.htm">+</a>-+-+-+-+-+-+<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 1 2 3 4 5 6<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> 22;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> 22;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Draw<a href="CppCanvas.htm">Canvas</a>&gt; canvas(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Draw<a href="CppCanvas.htm">Canvas</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxx,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxy,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>ColorSystem::invert,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCanvas.htm">Canvas</a>CoordinatSystem::graph<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Coordinat&gt; <a href="CppPointer.htm">point</a>s {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;4.0,&nbsp;&nbsp;4.0}, <a href="CppComment.htm">//</a>A<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;4.0, 12.0}, <a href="CppComment.htm">//</a>B<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 16.0, 20.0}, <a href="CppComment.htm">//</a>C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 12.0,&nbsp;&nbsp;4.0}&nbsp;&nbsp;<a href="CppComment.htm">//</a>D<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::model::polygon&lt;Coordinat&gt; polygon;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<a href="CppGeometry.htm">geometry</a>::append(polygon,<a href="CppPointer.htm">point</a>s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawPolygon(polygon);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*canvas);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.str().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw a smiley is all coordinat<a href="CppOperatorMinus.htm">-</a> and colorsystem combinations<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> 79;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> 23;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Draw<a href="CppCanvas.htm">Canvas</a>&gt; canvas(<b><a href="CppNew.htm">new</a></b> Draw<a href="CppCanvas.htm">Canvas</a>(maxx,maxy));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;SetColorSystem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorModulus.htm">%</a> 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppCanvas.htm">Canvas</a>ColorSystem::normal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppCanvas.htm">Canvas</a>ColorSystem::invert);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;SetCoordinatSystem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorDivide.htm">/</a> 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? <a href="CppCanvas.htm">Canvas</a>CoordinatSystem::screen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <a href="CppCanvas.htm">Canvas</a>CoordinatSystem::graph);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Determine and calculate dimensions and coordinats of smiley<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxxD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(maxx);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> maxyD <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(maxy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.50 * maxxD;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> midY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.50 * maxyD;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> headRay&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0.50 * maxyD;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> eyeLeftX&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.50 * maxxD <a href="CppOperatorMinus.htm">-</a> (0.35 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> eyeLeftY&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.50 * maxyD <a href="CppOperatorMinus.htm">-</a> (0.25 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> eyeRightX&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0.50 * maxxD <a href="CppOperatorPlus.htm">+</a> (0.35 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> eyeRightY&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0.50 * maxyD <a href="CppOperatorMinus.htm">-</a> (0.25 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> eyeRay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.30 * headRay;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mouthLeftX&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.50 * maxxD <a href="CppOperatorMinus.htm">-</a> (0.7 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mouthMidX&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0.50 * maxxD;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mouthRightX <a href="CppOperatorAssign.htm">=</a> 0.50 * maxxD <a href="CppOperatorPlus.htm">+</a> (0.7 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mouthLeftY&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 0.50 * maxyD <a href="CppOperatorPlus.htm">+</a> (0.2 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mouthMidY&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 0.50 * maxyD <a href="CppOperatorPlus.htm">+</a> (0.7 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mouthRightY <a href="CppOperatorAssign.htm">=</a> 0.50 * maxyD <a href="CppOperatorPlus.htm">+</a> (0.2 * headRay) ;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the image on Draw<a href="CppCanvas.htm">Canvas</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawCircle(midX, midY, headRay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawCircle(eyeLeftX, eyeLeftY, eyeRay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawDot(eyeLeftX, eyeLeftY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawCircle(eyeRightX, eyeRightY, eyeRay);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawDot(eyeRightX, eyeRightY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawLine(mouthLeftX, mouthLeftY, mouthMidX, mouthMidY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawLine(mouthMidX, mouthMidY, mouthRightX, mouthRightY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawLine(mouthRightX, mouthRightY, mouthLeftX, mouthLeftY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*canvas);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.str().empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;Clear();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;SetColorSystem(<a href="CppCanvas.htm">Canvas</a>ColorSystem::invert); <a href="CppComment.htm">//</a>Background <a href="CppOperatorAssign.htm">=</a> Black<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*canvas);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t { s.str() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdCount.htm">std::count</a>(t.begin(),t.end(),' ') <a href="CppOperatorEqual.htm">==</a> canvas-&gt;GetWidth() * canvas-&gt;GetHeight());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Saving and loading<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxx <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> maxy <a href="CppOperatorAssign.htm">=</a> 3;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;Draw<a href="CppCanvas.htm">Canvas</a>&gt; canvas(<b><a href="CppNew.htm">new</a></b> Draw<a href="CppCanvas.htm">Canvas</a>(maxx,maxy,<a href="CppCanvas.htm">Canvas</a>ColorSystem::invert));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;DrawLine(-maxx,-maxy,maxx*2.0,maxy*2.0);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&gt; old_canvas {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Draw<a href="CppCanvas.htm">Canvas</a>(canvas-&gt;GetGreynesses(),canvas-&gt;GetColorSystem(),canvas-&gt;GetCoordinatSystem())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( old_canvas <a href="CppOperatorNotEqual.htm">!=</a>&nbsp;&nbsp;canvas);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*old_canvas <a href="CppOperatorEqual.htm">==</a> *canvas);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_filename { <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName() };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;Save(temp_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas-&gt;Clear();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*old_canvas <a href="CppOperatorNotEqual.htm">!=</a> *canvas);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&gt; new_canvas {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> Draw<a href="CppCanvas.htm">Canvas</a>(temp_filename)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*old_canvas <a href="CppOperatorEqual.htm">==</a> *new_canvas);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppTRACE.htm">TRACE</a>("Finished <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::Test successfully");<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::ToStrings() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (*<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v { <a href="CppSeperateString.htm">SeperateString</a>(s.str(),'\n') };<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; canvas)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::Draw<a href="CppCanvas.htm">Canvas</a>::PlotSurface(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;os,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.m_canvas,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.m_color_system <a href="CppOperatorEqual.htm">==</a> <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>ColorSystem::normal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.m_coordinat_system <a href="CppOperatorEqual.htm">==</a> <a href="CppRibi.htm">ribi</a>::<a href="CppCanvas.htm">Canvas</a>CoordinatSystem::screen);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.m_canvas <a href="CppOperatorEqual.htm">==</a> rhs.m_canvas<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_color_system <a href="CppOperatorEqual.htm">==</a> rhs.m_color_system<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_coordinat_system <a href="CppOperatorEqual.htm">==</a> rhs.m_coordinat_system;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> Draw<a href="CppCanvas.htm">Canvas</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetColorSystem() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetColorSystem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("Color systems differ"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetCoordinatSystem() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetCoordinatSystem())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("Coordinat systems differ"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (lhs.GetGreynesses().size() <a href="CppOperatorNotEqual.htm">!=</a> rhs.GetGreynesses().size())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("Number of rows differ"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> lhs.GetGreynesses().size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorIncrement.htm">++</a>row)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v { lhs.GetGreynesses()[row] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; w { rhs.GetGreynesses()[row] };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size() <a href="CppOperatorNotEqual.htm">!=</a> w.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("Number of columns differ"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppStdSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorIncrement.htm">++</a>col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> diff <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAbs.htm">std::abs</a>(v[col] <a href="CppOperatorMinus.htm">-</a> w[col]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (diff &gt; 0.01)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("Value differs"); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
