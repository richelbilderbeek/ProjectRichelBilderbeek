<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>return</title>
  <meta name="description" content="C++ return"/>
  <meta name="keywords" content="C++ C++0x return keyword code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppReturn.htm">return</a></h1>
<p>&nbsp;</p>
<p><a href="CppReturn.htm">return</a> is a <a href="CppKeyword.htm">keyword</a> that ends a <a href="CppFunction.htm">function</a> (or
<a href="CppMemberFunction.htm">member function</a>). Depending on the <a href="CppFunction.htm">function</a>, 
<a href="CppReturn.htm">return</a> might <a href="CppReturn.htm">return</a> anything or nothing.</p>
<p>&nbsp;</p>
<p>The following <a href="CppFunction.htm">function</a> calculates the square of an <a href="CppInt.htm">integer</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>/Calculates the square of an <a href="CppInt.htm">integer</a><br/>
<b><a href="CppInt.htm">int</a></b> Square(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> solution <a href="CppOperatorAssign.htm">=</a> x * x;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solution;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>If a <a href="CppFunction.htm">function</a> <a href="CppReturn.htm">returns</a> nothing 
(that is, a <a href="CppReturn.htm">return</a> type of <a href="CppVoid.htm">void</a>), 
one can omit the final <a href="CppReturn.htm">return</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> SayHello()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Hello\n";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b>; <a href="CppComment.htm">//</a>No need to <b><a href="CppReturn.htm">return</a></b> from a <b><a href="CppVoid.htm">void</a></b> <a href="CppFunction.htm">function</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Exception: <a href="CppMain.htm">main</a></h2>
<p>&nbsp;</p>
<p>The <a href="CppFunction.htm">function</a> <a href="CppMain.htm">main</a> is special. 
It <a href="CppReturn.htm">returns</a> an <a href="CppInt.htm">integer</a>
error code of the program, where a zero denotes a no-failure run. When <a href="CppMain.htm">main</a>'s closing bracket is reached, 
the effect is equivalent to (Standard, 3.6.1.5):</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppReturn.htm">return</a></b> 0;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Therefore, the following two pieces of code are equivalent:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>() {}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>() { <b><a href="CppReturn.htm">return</a></b> 0; }<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp11.png" alt="C++11"/> 
  <a href="CppReturn.htm">return</a> in a <a href="Cpp11.htm">C++11</a> <a href="CppLambdaExpression.htm">lambda expression</a>
</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppLambdaExpression.zip">Download the Qt Creator project 'CppLambdaExpression' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>Program flow in a <a href="Cpp11.htm">C++11</a> <a href="CppLambdaExpression.htm">lambda expression</a> differs from a
<a href="Cpp98.htm">C++98</a> <a href="CppLambdaExpression.htm">lambda expression</a> or <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>:
if you want to <a href="CppReturn.htm">return</a> from a <a href="CppFunction.htm">function</a>, all that happens is that the
<a href="CppFor_each.htm">std::for_each</a> (or other <a href="CppAlgorithm.htm">algorithm</a>) is terminated. The example below shows this.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> TestProgramFlow()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>2-D <a href="CppVector.htm">std::vector</a>, note 42 in the middle, from an <a href="CppInitializerList.htm">initializer list</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; v<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;0, 1, 2, 3, 4 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 10,11,12,13,14 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 40,41,42,43,44 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 50,51,52,53,54 },<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 60,61,62,63,64 }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>First <a href="CppLambdaExpression.htm">lambda expression</a><br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; w)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nested second <a href="CppLambdaExpression.htm">lambda expression</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(w.begin(),w.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> 42)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "FOUND!\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>; <a href="CppComment.htm">//</a>Terminates the second <a href="CppLambdaExpression.htm">lambda expression</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does not <b><a href="CppReturn.htm">return</a></b> from Test <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Will get here, as the <b><a href="CppReturn.htm">return</a></b> statement only terminates<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the second <a href="CppLambdaExpression.htm">lambda expression</a>, instead of the Test <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
FOUND!<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
